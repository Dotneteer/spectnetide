//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dotne\source\repos\spectnetide\Assembler\AntlrCommandParserGenerator\AntlrCommandParserGenerator\CommandTool.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Spect.Net.CommandParser.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CommandToolParser : Parser {
	public const int
		WS=1, LESS=2, LESSEQ=3, GREAT=4, GREATEQ=5, EQ=6, MULT=7, HASH=8, B=9, 
		C=10, D=11, G=12, GS=13, J=14, L=15, M=16, P=17, R=18, RD=19, SB=20, H=21, 
		T=22, TB=23, RB=24, UB=25, EB=26, RETRIEVE=27, HEXNUM=28, HEXSTART=29, 
		IDENTIFIER=30, IDSTART=31, IDCONT=32, OTHER=33;
	public const int
		RULE_compileUnit = 0, RULE_toolCommand = 1, RULE_gotoCommand = 2, RULE_gotoSymbolCommand = 3, 
		RULE_romPageCommand = 4, RULE_bankPageCommand = 5, RULE_memModeCommand = 6, 
		RULE_labelCommand = 7, RULE_commentCommand = 8, RULE_prefixCommentCommand = 9, 
		RULE_setBreakpointCommand = 10, RULE_toggleBreakpointCommand = 11, RULE_removeBreakpointCommand = 12, 
		RULE_updateBreakpointCommand = 13, RULE_eraseAllBreakpointsCommand = 14, 
		RULE_retrieveCommand = 15, RULE_literalCommand = 16, RULE_disassemblyTypeCommand = 17, 
		RULE_reDisassemblyCommand = 18, RULE_jumpCommand = 19;
	public static readonly string[] ruleNames = {
		"compileUnit", "toolCommand", "gotoCommand", "gotoSymbolCommand", "romPageCommand", 
		"bankPageCommand", "memModeCommand", "labelCommand", "commentCommand", 
		"prefixCommentCommand", "setBreakpointCommand", "toggleBreakpointCommand", 
		"removeBreakpointCommand", "updateBreakpointCommand", "eraseAllBreakpointsCommand", 
		"retrieveCommand", "literalCommand", "disassemblyTypeCommand", "reDisassemblyCommand", 
		"jumpCommand"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'<'", "'<='", "'>'", "'>='", "'='", "'*'", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "LESS", "LESSEQ", "GREAT", "GREATEQ", "EQ", "MULT", "HASH", 
		"B", "C", "D", "G", "GS", "J", "L", "M", "P", "R", "RD", "SB", "H", "T", 
		"TB", "RB", "UB", "EB", "RETRIEVE", "HEXNUM", "HEXSTART", "IDENTIFIER", 
		"IDSTART", "IDCONT", "OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CommandTool.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CommandToolParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ToolCommandContext toolCommand() {
			return GetRuleContext<ToolCommandContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CommandToolParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; toolCommand();
			State = 41; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToolCommandContext : ParserRuleContext {
		public GotoCommandContext gotoCommand() {
			return GetRuleContext<GotoCommandContext>(0);
		}
		public GotoSymbolCommandContext gotoSymbolCommand() {
			return GetRuleContext<GotoSymbolCommandContext>(0);
		}
		public RomPageCommandContext romPageCommand() {
			return GetRuleContext<RomPageCommandContext>(0);
		}
		public BankPageCommandContext bankPageCommand() {
			return GetRuleContext<BankPageCommandContext>(0);
		}
		public MemModeCommandContext memModeCommand() {
			return GetRuleContext<MemModeCommandContext>(0);
		}
		public LabelCommandContext labelCommand() {
			return GetRuleContext<LabelCommandContext>(0);
		}
		public CommentCommandContext commentCommand() {
			return GetRuleContext<CommentCommandContext>(0);
		}
		public PrefixCommentCommandContext prefixCommentCommand() {
			return GetRuleContext<PrefixCommentCommandContext>(0);
		}
		public SetBreakpointCommandContext setBreakpointCommand() {
			return GetRuleContext<SetBreakpointCommandContext>(0);
		}
		public ToggleBreakpointCommandContext toggleBreakpointCommand() {
			return GetRuleContext<ToggleBreakpointCommandContext>(0);
		}
		public RemoveBreakpointCommandContext removeBreakpointCommand() {
			return GetRuleContext<RemoveBreakpointCommandContext>(0);
		}
		public UpdateBreakpointCommandContext updateBreakpointCommand() {
			return GetRuleContext<UpdateBreakpointCommandContext>(0);
		}
		public EraseAllBreakpointsCommandContext eraseAllBreakpointsCommand() {
			return GetRuleContext<EraseAllBreakpointsCommandContext>(0);
		}
		public RetrieveCommandContext retrieveCommand() {
			return GetRuleContext<RetrieveCommandContext>(0);
		}
		public LiteralCommandContext literalCommand() {
			return GetRuleContext<LiteralCommandContext>(0);
		}
		public DisassemblyTypeCommandContext disassemblyTypeCommand() {
			return GetRuleContext<DisassemblyTypeCommandContext>(0);
		}
		public ReDisassemblyCommandContext reDisassemblyCommand() {
			return GetRuleContext<ReDisassemblyCommandContext>(0);
		}
		public JumpCommandContext jumpCommand() {
			return GetRuleContext<JumpCommandContext>(0);
		}
		public ToolCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toolCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterToolCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitToolCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToolCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToolCommandContext toolCommand() {
		ToolCommandContext _localctx = new ToolCommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_toolCommand);
		try {
			State = 61;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case G:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43; gotoCommand();
				}
				break;
			case GS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 44; gotoSymbolCommand();
				}
				break;
			case R:
				EnterOuterAlt(_localctx, 3);
				{
				State = 45; romPageCommand();
				}
				break;
			case B:
				EnterOuterAlt(_localctx, 4);
				{
				State = 46; bankPageCommand();
				}
				break;
			case M:
				EnterOuterAlt(_localctx, 5);
				{
				State = 47; memModeCommand();
				}
				break;
			case L:
				EnterOuterAlt(_localctx, 6);
				{
				State = 48; labelCommand();
				}
				break;
			case C:
				EnterOuterAlt(_localctx, 7);
				{
				State = 49; commentCommand();
				}
				break;
			case P:
				EnterOuterAlt(_localctx, 8);
				{
				State = 50; prefixCommentCommand();
				}
				break;
			case SB:
				EnterOuterAlt(_localctx, 9);
				{
				State = 51; setBreakpointCommand();
				}
				break;
			case TB:
				EnterOuterAlt(_localctx, 10);
				{
				State = 52; toggleBreakpointCommand();
				}
				break;
			case RB:
				EnterOuterAlt(_localctx, 11);
				{
				State = 53; removeBreakpointCommand();
				}
				break;
			case UB:
				EnterOuterAlt(_localctx, 12);
				{
				State = 54; updateBreakpointCommand();
				}
				break;
			case EB:
				EnterOuterAlt(_localctx, 13);
				{
				State = 55; eraseAllBreakpointsCommand();
				}
				break;
			case RETRIEVE:
				EnterOuterAlt(_localctx, 14);
				{
				State = 56; retrieveCommand();
				}
				break;
			case D:
				EnterOuterAlt(_localctx, 15);
				{
				State = 57; literalCommand();
				}
				break;
			case T:
				EnterOuterAlt(_localctx, 16);
				{
				State = 58; disassemblyTypeCommand();
				}
				break;
			case RD:
				EnterOuterAlt(_localctx, 17);
				{
				State = 59; reDisassemblyCommand();
				}
				break;
			case J:
				EnterOuterAlt(_localctx, 18);
				{
				State = 60; jumpCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoCommandContext : ParserRuleContext {
		public ITerminalNode G() { return GetToken(CommandToolParser.G, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public ITerminalNode HEXNUM() { return GetToken(CommandToolParser.HEXNUM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CommandToolParser.IDENTIFIER, 0); }
		public GotoCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterGotoCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitGotoCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoCommandContext gotoCommand() {
		GotoCommandContext _localctx = new GotoCommandContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_gotoCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(G);
			State = 64; Match(WS);
			State = 65;
			_la = _input.La(1);
			if ( !(_la==HEXNUM || _la==IDENTIFIER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoSymbolCommandContext : ParserRuleContext {
		public ITerminalNode GS() { return GetToken(CommandToolParser.GS, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CommandToolParser.IDENTIFIER, 0); }
		public GotoSymbolCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoSymbolCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterGotoSymbolCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitGotoSymbolCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoSymbolCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoSymbolCommandContext gotoSymbolCommand() {
		GotoSymbolCommandContext _localctx = new GotoSymbolCommandContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_gotoSymbolCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(GS);
			State = 68; Match(WS);
			State = 69; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RomPageCommandContext : ParserRuleContext {
		public ITerminalNode R() { return GetToken(CommandToolParser.R, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public ITerminalNode HEXNUM() { return GetToken(CommandToolParser.HEXNUM, 0); }
		public RomPageCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_romPageCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterRomPageCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitRomPageCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRomPageCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RomPageCommandContext romPageCommand() {
		RomPageCommandContext _localctx = new RomPageCommandContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_romPageCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(R);
			State = 72; Match(WS);
			State = 73; Match(HEXNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BankPageCommandContext : ParserRuleContext {
		public ITerminalNode B() { return GetToken(CommandToolParser.B, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public ITerminalNode HEXNUM() { return GetToken(CommandToolParser.HEXNUM, 0); }
		public BankPageCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bankPageCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterBankPageCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitBankPageCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBankPageCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BankPageCommandContext bankPageCommand() {
		BankPageCommandContext _localctx = new BankPageCommandContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_bankPageCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(B);
			State = 76; Match(WS);
			State = 77; Match(HEXNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemModeCommandContext : ParserRuleContext {
		public ITerminalNode M() { return GetToken(CommandToolParser.M, 0); }
		public MemModeCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memModeCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterMemModeCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitMemModeCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemModeCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemModeCommandContext memModeCommand() {
		MemModeCommandContext _localctx = new MemModeCommandContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_memModeCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(M);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelCommandContext : ParserRuleContext {
		public ITerminalNode L() { return GetToken(CommandToolParser.L, 0); }
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public ITerminalNode HEXNUM() { return GetToken(CommandToolParser.HEXNUM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CommandToolParser.IDENTIFIER, 0); }
		public LabelCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterLabelCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitLabelCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelCommandContext labelCommand() {
		LabelCommandContext _localctx = new LabelCommandContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_labelCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(L);
			State = 82; Match(WS);
			State = 83; Match(HEXNUM);
			State = 86;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 84; Match(WS);
				State = 85; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentCommandContext : ParserRuleContext {
		public ITerminalNode C() { return GetToken(CommandToolParser.C, 0); }
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public ITerminalNode HEXNUM() { return GetToken(CommandToolParser.HEXNUM, 0); }
		public CommentCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterCommentCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitCommentCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentCommandContext commentCommand() {
		CommentCommandContext _localctx = new CommentCommandContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_commentCommand);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(C);
			State = 89; Match(WS);
			State = 90; Match(HEXNUM);
			State = 92;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 91; Match(WS);
				}
				break;
			}
			State = 97;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 94;
					MatchWildcard();
					}
					} 
				}
				State = 99;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixCommentCommandContext : ParserRuleContext {
		public ITerminalNode P() { return GetToken(CommandToolParser.P, 0); }
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public ITerminalNode HEXNUM() { return GetToken(CommandToolParser.HEXNUM, 0); }
		public PrefixCommentCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixCommentCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterPrefixCommentCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitPrefixCommentCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixCommentCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixCommentCommandContext prefixCommentCommand() {
		PrefixCommentCommandContext _localctx = new PrefixCommentCommandContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_prefixCommentCommand);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(P);
			State = 101; Match(WS);
			State = 102; Match(HEXNUM);
			State = 104;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 103; Match(WS);
				}
				break;
			}
			State = 109;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 106;
					MatchWildcard();
					}
					} 
				}
				State = 111;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetBreakpointCommandContext : ParserRuleContext {
		public ITerminalNode SB() { return GetToken(CommandToolParser.SB, 0); }
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public ITerminalNode[] HEXNUM() { return GetTokens(CommandToolParser.HEXNUM); }
		public ITerminalNode HEXNUM(int i) {
			return GetToken(CommandToolParser.HEXNUM, i);
		}
		public ITerminalNode H() { return GetToken(CommandToolParser.H, 0); }
		public ITerminalNode C() { return GetToken(CommandToolParser.C, 0); }
		public ITerminalNode LESS() { return GetToken(CommandToolParser.LESS, 0); }
		public ITerminalNode LESSEQ() { return GetToken(CommandToolParser.LESSEQ, 0); }
		public ITerminalNode GREAT() { return GetToken(CommandToolParser.GREAT, 0); }
		public ITerminalNode GREATEQ() { return GetToken(CommandToolParser.GREATEQ, 0); }
		public ITerminalNode EQ() { return GetToken(CommandToolParser.EQ, 0); }
		public ITerminalNode MULT() { return GetToken(CommandToolParser.MULT, 0); }
		public SetBreakpointCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setBreakpointCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterSetBreakpointCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitSetBreakpointCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetBreakpointCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetBreakpointCommandContext setBreakpointCommand() {
		SetBreakpointCommandContext _localctx = new SetBreakpointCommandContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_setBreakpointCommand);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(SB);
			State = 113; Match(WS);
			State = 114; Match(HEXNUM);
			State = 125;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 115; Match(WS);
				State = 116; Match(H);
				State = 118;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 117; Match(WS);
					}
				}

				State = 120;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS) | (1L << LESSEQ) | (1L << GREAT) | (1L << GREATEQ) | (1L << EQ) | (1L << MULT))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 122;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 121; Match(WS);
					}
				}

				State = 124; Match(HEXNUM);
				}
				break;
			}
			State = 136;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 127; Match(WS);
				State = 128; Match(C);
				State = 129; Match(WS);
				State = 133;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 130;
						MatchWildcard();
						}
						} 
					}
					State = 135;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToggleBreakpointCommandContext : ParserRuleContext {
		public ITerminalNode TB() { return GetToken(CommandToolParser.TB, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public ITerminalNode HEXNUM() { return GetToken(CommandToolParser.HEXNUM, 0); }
		public ToggleBreakpointCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toggleBreakpointCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterToggleBreakpointCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitToggleBreakpointCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToggleBreakpointCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToggleBreakpointCommandContext toggleBreakpointCommand() {
		ToggleBreakpointCommandContext _localctx = new ToggleBreakpointCommandContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_toggleBreakpointCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(TB);
			State = 139; Match(WS);
			State = 140; Match(HEXNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveBreakpointCommandContext : ParserRuleContext {
		public ITerminalNode RB() { return GetToken(CommandToolParser.RB, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public ITerminalNode HEXNUM() { return GetToken(CommandToolParser.HEXNUM, 0); }
		public RemoveBreakpointCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeBreakpointCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterRemoveBreakpointCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitRemoveBreakpointCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveBreakpointCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveBreakpointCommandContext removeBreakpointCommand() {
		RemoveBreakpointCommandContext _localctx = new RemoveBreakpointCommandContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_removeBreakpointCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(RB);
			State = 143; Match(WS);
			State = 144; Match(HEXNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBreakpointCommandContext : ParserRuleContext {
		public ITerminalNode UB() { return GetToken(CommandToolParser.UB, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public ITerminalNode HEXNUM() { return GetToken(CommandToolParser.HEXNUM, 0); }
		public UpdateBreakpointCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBreakpointCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterUpdateBreakpointCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitUpdateBreakpointCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBreakpointCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBreakpointCommandContext updateBreakpointCommand() {
		UpdateBreakpointCommandContext _localctx = new UpdateBreakpointCommandContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_updateBreakpointCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(UB);
			State = 147; Match(WS);
			State = 148; Match(HEXNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseAllBreakpointsCommandContext : ParserRuleContext {
		public ITerminalNode EB() { return GetToken(CommandToolParser.EB, 0); }
		public EraseAllBreakpointsCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseAllBreakpointsCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterEraseAllBreakpointsCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitEraseAllBreakpointsCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseAllBreakpointsCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseAllBreakpointsCommandContext eraseAllBreakpointsCommand() {
		EraseAllBreakpointsCommandContext _localctx = new EraseAllBreakpointsCommandContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_eraseAllBreakpointsCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(EB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetrieveCommandContext : ParserRuleContext {
		public ITerminalNode RETRIEVE() { return GetToken(CommandToolParser.RETRIEVE, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public ITerminalNode HEXNUM() { return GetToken(CommandToolParser.HEXNUM, 0); }
		public RetrieveCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retrieveCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterRetrieveCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitRetrieveCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetrieveCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetrieveCommandContext retrieveCommand() {
		RetrieveCommandContext _localctx = new RetrieveCommandContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_retrieveCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(RETRIEVE);
			State = 153; Match(WS);
			State = 154; Match(HEXNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralCommandContext : ParserRuleContext {
		public ITerminalNode D() { return GetToken(CommandToolParser.D, 0); }
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public ITerminalNode HEXNUM() { return GetToken(CommandToolParser.HEXNUM, 0); }
		public ITerminalNode HASH() { return GetToken(CommandToolParser.HASH, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CommandToolParser.IDENTIFIER, 0); }
		public LiteralCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterLiteralCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitLiteralCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralCommandContext literalCommand() {
		LiteralCommandContext _localctx = new LiteralCommandContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_literalCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(D);
			State = 157; Match(WS);
			State = 158; Match(HEXNUM);
			{
			State = 159; Match(WS);
			State = 160;
			_la = _input.La(1);
			if ( !(_la==HASH || _la==IDENTIFIER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisassemblyTypeCommandContext : ParserRuleContext {
		public ITerminalNode T() { return GetToken(CommandToolParser.T, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public DisassemblyTypeCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disassemblyTypeCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterDisassemblyTypeCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitDisassemblyTypeCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisassemblyTypeCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisassemblyTypeCommandContext disassemblyTypeCommand() {
		DisassemblyTypeCommandContext _localctx = new DisassemblyTypeCommandContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_disassemblyTypeCommand);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(T);
			State = 163; Match(WS);
			State = 167;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 164;
					MatchWildcard();
					}
					} 
				}
				State = 169;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReDisassemblyCommandContext : ParserRuleContext {
		public ITerminalNode RD() { return GetToken(CommandToolParser.RD, 0); }
		public ReDisassemblyCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reDisassemblyCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterReDisassemblyCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitReDisassemblyCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReDisassemblyCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReDisassemblyCommandContext reDisassemblyCommand() {
		ReDisassemblyCommandContext _localctx = new ReDisassemblyCommandContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_reDisassemblyCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(RD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpCommandContext : ParserRuleContext {
		public ITerminalNode J() { return GetToken(CommandToolParser.J, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public ITerminalNode HEXNUM() { return GetToken(CommandToolParser.HEXNUM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CommandToolParser.IDENTIFIER, 0); }
		public JumpCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterJumpCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitJumpCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpCommandContext jumpCommand() {
		JumpCommandContext _localctx = new JumpCommandContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_jumpCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(J);
			State = 173; Match(WS);
			State = 174;
			_la = _input.La(1);
			if ( !(_la==HEXNUM || _la==IDENTIFIER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3#\xB3\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3@\n\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\tY\n\t\x3"+
		"\n\x3\n\x3\n\x3\n\x5\n_\n\n\x3\n\a\n\x62\n\n\f\n\xE\n\x65\v\n\x3\v\x3"+
		"\v\x3\v\x3\v\x5\vk\n\v\x3\v\a\vn\n\v\f\v\xE\vq\v\v\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x5\fy\n\f\x3\f\x3\f\x5\f}\n\f\x3\f\x5\f\x80\n\f\x3\f\x3\f\x3"+
		"\f\x3\f\a\f\x86\n\f\f\f\xE\f\x89\v\f\x5\f\x8B\n\f\x3\r\x3\r\x3\r\x3\r"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13"+
		"\x3\x13\x3\x13\a\x13\xA8\n\x13\f\x13\xE\x13\xAB\v\x13\x3\x14\x3\x14\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x6\x63o\x87\xA9\x2\x2\x16\x2\x2\x4\x2"+
		"\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2"+
		"\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2\x2\x5\x4\x2\x1E\x1E  \x3\x2\x4\t\x4"+
		"\x2\n\n  \xBA\x2*\x3\x2\x2\x2\x4?\x3\x2\x2\x2\x6\x41\x3\x2\x2\x2\b\x45"+
		"\x3\x2\x2\x2\nI\x3\x2\x2\x2\fM\x3\x2\x2\x2\xEQ\x3\x2\x2\x2\x10S\x3\x2"+
		"\x2\x2\x12Z\x3\x2\x2\x2\x14\x66\x3\x2\x2\x2\x16r\x3\x2\x2\x2\x18\x8C\x3"+
		"\x2\x2\x2\x1A\x90\x3\x2\x2\x2\x1C\x94\x3\x2\x2\x2\x1E\x98\x3\x2\x2\x2"+
		" \x9A\x3\x2\x2\x2\"\x9E\x3\x2\x2\x2$\xA4\x3\x2\x2\x2&\xAC\x3\x2\x2\x2"+
		"(\xAE\x3\x2\x2\x2*+\x5\x4\x3\x2+,\a\x2\x2\x3,\x3\x3\x2\x2\x2-@\x5\x6\x4"+
		"\x2.@\x5\b\x5\x2/@\x5\n\x6\x2\x30@\x5\f\a\x2\x31@\x5\xE\b\x2\x32@\x5\x10"+
		"\t\x2\x33@\x5\x12\n\x2\x34@\x5\x14\v\x2\x35@\x5\x16\f\x2\x36@\x5\x18\r"+
		"\x2\x37@\x5\x1A\xE\x2\x38@\x5\x1C\xF\x2\x39@\x5\x1E\x10\x2:@\x5 \x11\x2"+
		";@\x5\"\x12\x2<@\x5$\x13\x2=@\x5&\x14\x2>@\x5(\x15\x2?-\x3\x2\x2\x2?."+
		"\x3\x2\x2\x2?/\x3\x2\x2\x2?\x30\x3\x2\x2\x2?\x31\x3\x2\x2\x2?\x32\x3\x2"+
		"\x2\x2?\x33\x3\x2\x2\x2?\x34\x3\x2\x2\x2?\x35\x3\x2\x2\x2?\x36\x3\x2\x2"+
		"\x2?\x37\x3\x2\x2\x2?\x38\x3\x2\x2\x2?\x39\x3\x2\x2\x2?:\x3\x2\x2\x2?"+
		";\x3\x2\x2\x2?<\x3\x2\x2\x2?=\x3\x2\x2\x2?>\x3\x2\x2\x2@\x5\x3\x2\x2\x2"+
		"\x41\x42\a\xE\x2\x2\x42\x43\a\x3\x2\x2\x43\x44\t\x2\x2\x2\x44\a\x3\x2"+
		"\x2\x2\x45\x46\a\xF\x2\x2\x46G\a\x3\x2\x2GH\a \x2\x2H\t\x3\x2\x2\x2IJ"+
		"\a\x14\x2\x2JK\a\x3\x2\x2KL\a\x1E\x2\x2L\v\x3\x2\x2\x2MN\a\v\x2\x2NO\a"+
		"\x3\x2\x2OP\a\x1E\x2\x2P\r\x3\x2\x2\x2QR\a\x12\x2\x2R\xF\x3\x2\x2\x2S"+
		"T\a\x11\x2\x2TU\a\x3\x2\x2UX\a\x1E\x2\x2VW\a\x3\x2\x2WY\a \x2\x2XV\x3"+
		"\x2\x2\x2XY\x3\x2\x2\x2Y\x11\x3\x2\x2\x2Z[\a\f\x2\x2[\\\a\x3\x2\x2\\^"+
		"\a\x1E\x2\x2]_\a\x3\x2\x2^]\x3\x2\x2\x2^_\x3\x2\x2\x2_\x63\x3\x2\x2\x2"+
		"`\x62\v\x2\x2\x2\x61`\x3\x2\x2\x2\x62\x65\x3\x2\x2\x2\x63\x64\x3\x2\x2"+
		"\x2\x63\x61\x3\x2\x2\x2\x64\x13\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x66g\a"+
		"\x13\x2\x2gh\a\x3\x2\x2hj\a\x1E\x2\x2ik\a\x3\x2\x2ji\x3\x2\x2\x2jk\x3"+
		"\x2\x2\x2ko\x3\x2\x2\x2ln\v\x2\x2\x2ml\x3\x2\x2\x2nq\x3\x2\x2\x2op\x3"+
		"\x2\x2\x2om\x3\x2\x2\x2p\x15\x3\x2\x2\x2qo\x3\x2\x2\x2rs\a\x16\x2\x2s"+
		"t\a\x3\x2\x2t\x7F\a\x1E\x2\x2uv\a\x3\x2\x2vx\a\x17\x2\x2wy\a\x3\x2\x2"+
		"xw\x3\x2\x2\x2xy\x3\x2\x2\x2yz\x3\x2\x2\x2z|\t\x3\x2\x2{}\a\x3\x2\x2|"+
		"{\x3\x2\x2\x2|}\x3\x2\x2\x2}~\x3\x2\x2\x2~\x80\a\x1E\x2\x2\x7Fu\x3\x2"+
		"\x2\x2\x7F\x80\x3\x2\x2\x2\x80\x8A\x3\x2\x2\x2\x81\x82\a\x3\x2\x2\x82"+
		"\x83\a\f\x2\x2\x83\x87\a\x3\x2\x2\x84\x86\v\x2\x2\x2\x85\x84\x3\x2\x2"+
		"\x2\x86\x89\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x88\x8B"+
		"\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x8A\x81\x3\x2\x2\x2\x8A\x8B\x3\x2\x2"+
		"\x2\x8B\x17\x3\x2\x2\x2\x8C\x8D\a\x19\x2\x2\x8D\x8E\a\x3\x2\x2\x8E\x8F"+
		"\a\x1E\x2\x2\x8F\x19\x3\x2\x2\x2\x90\x91\a\x1A\x2\x2\x91\x92\a\x3\x2\x2"+
		"\x92\x93\a\x1E\x2\x2\x93\x1B\x3\x2\x2\x2\x94\x95\a\x1B\x2\x2\x95\x96\a"+
		"\x3\x2\x2\x96\x97\a\x1E\x2\x2\x97\x1D\x3\x2\x2\x2\x98\x99\a\x1C\x2\x2"+
		"\x99\x1F\x3\x2\x2\x2\x9A\x9B\a\x1D\x2\x2\x9B\x9C\a\x3\x2\x2\x9C\x9D\a"+
		"\x1E\x2\x2\x9D!\x3\x2\x2\x2\x9E\x9F\a\r\x2\x2\x9F\xA0\a\x3\x2\x2\xA0\xA1"+
		"\a\x1E\x2\x2\xA1\xA2\a\x3\x2\x2\xA2\xA3\t\x4\x2\x2\xA3#\x3\x2\x2\x2\xA4"+
		"\xA5\a\x18\x2\x2\xA5\xA9\a\x3\x2\x2\xA6\xA8\v\x2\x2\x2\xA7\xA6\x3\x2\x2"+
		"\x2\xA8\xAB\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xAA%\x3"+
		"\x2\x2\x2\xAB\xA9\x3\x2\x2\x2\xAC\xAD\a\x15\x2\x2\xAD\'\x3\x2\x2\x2\xAE"+
		"\xAF\a\x10\x2\x2\xAF\xB0\a\x3\x2\x2\xB0\xB1\t\x2\x2\x2\xB1)\x3\x2\x2\x2"+
		"\xE?X^\x63jox|\x7F\x87\x8A\xA9";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Spect.Net.CommandParser.Generated
