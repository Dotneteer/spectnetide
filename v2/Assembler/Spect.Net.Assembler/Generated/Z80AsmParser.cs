//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dotne\source\repos\spectnetide\v2\Assembler\AntlrZ80AsmParserGenerator\ParserGenerator\Z80Asm.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Spect.Net.Assembler.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class Z80AsmParser : Z80AsmBaseParser {
	public const int
		WS=1, BLCOMMENT=2, COMMENT=3, NEWLINE=4, COLON=5, DCOLON=6, SCOLON=7, 
		COMSEP=8, COMMA=9, ASSIGN=10, LPAR=11, RPAR=12, LSBRAC=13, RSBRAC=14, 
		QMARK=15, PLUS=16, MINUS=17, VBAR=18, UPARR=19, AMP=20, EQOP=21, CIEQOP=22, 
		NEQOP=23, CINEQOP=24, LTOP=25, LTEOP=26, GTOP=27, GTEOP=28, LSHOP=29, 
		RSHOP=30, MULOP=31, DIVOP=32, MODOP=33, MINOP=34, MAXOP=35, TILDE=36, 
		LDBRAC=37, RDBRAC=38, EXCLM=39, DOT=40, GOESTO=41, A=42, B=43, C=44, D=45, 
		E=46, H=47, L=48, I=49, R=50, XL=51, XH=52, YL=53, YH=54, BC=55, DE=56, 
		HL=57, SP=58, IX=59, IY=60, AF=61, AF_=62, Z=63, NZ=64, NC=65, PO=66, 
		PE=67, P=68, M=69, NOP=70, RLCA=71, RRCA=72, RLA=73, RRA=74, DAA=75, CPL=76, 
		SCF=77, CCF=78, HALT=79, RET=80, EXX=81, DI=82, EI=83, NEG=84, RETN=85, 
		RETI=86, RLD=87, RRD=88, LDI=89, CPI=90, INI=91, OUTI=92, LDD=93, CPD=94, 
		IND=95, OUTD=96, LDIR=97, CPIR=98, INIR=99, OTIR=100, LDDR=101, CPDR=102, 
		INDR=103, OTDR=104, LD=105, INC=106, DEC=107, EX=108, ADD=109, ADC=110, 
		SUB=111, SBC=112, AND=113, XOR=114, OR=115, CP=116, DJNZ=117, JR=118, 
		JP=119, CALL=120, RST=121, PUSH=122, POP=123, IN=124, OUT=125, IM=126, 
		RLC=127, RRC=128, RL=129, RR=130, SLA=131, SRA=132, SLL=133, SRL=134, 
		BIT=135, RES=136, SET=137, SWAPNIB=138, MUL=139, POPX=140, MIRROR=141, 
		TEST=142, NEXTREG=143, OUTINB=144, LDIX=145, LDIRX=146, LDDX=147, LDDRX=148, 
		PIXELDN=149, PIXELAD=150, SETAE=151, LDPIRX=152, LDIRSCALE=153, IFDEF=154, 
		IFNDEF=155, ENDIF=156, ELSE=157, DEFINE=158, UNDEF=159, INCLUDE=160, IF=161, 
		IFMOD=162, IFNMOD=163, LINEDIR=164, ORGPRAG=165, BANKPRAG=166, XORGPR=167, 
		ENTPRAG=168, XENTPRAG=169, EQUPRAG=170, VARPRAG=171, DISPRAG=172, DBPRAG=173, 
		DWPRAG=174, DMPRAG=175, DNPRAG=176, DHPRAG=177, DGXPRAG=178, DGPRAG=179, 
		DCPRAG=180, SKIPRAG=181, EXTPRAG=182, DSPRAG=183, FBPRAG=184, FWPRAG=185, 
		MODPRAG=186, IOPTPRAG=187, ALGPRAG=188, TRACE=189, TRACEHEX=190, RNDSEED=191, 
		ERRORPR=192, INCBIN=193, COMPAREBIN=194, ZXBPRAG=195, MACRO=196, ENDMACRO=197, 
		PROC=198, ENDPROC=199, LOOP=200, ENDLOOP=201, REPEAT=202, UNTIL=203, WHILE=204, 
		ENDWHILE=205, IFSTMT=206, IFUSED=207, IFNUSED=208, ELIF=209, ELSESTMT=210, 
		ENDIFSTMT=211, FOR=212, TO=213, STEP=214, FORNEXT=215, NEXT=216, BREAK=217, 
		CONTINUE=218, MODULE=219, ENDMOD=220, STRUCT=221, ENDST=222, LOCAL=223, 
		TEXTOF=224, LTEXTOF=225, HREG=226, LREG=227, DEF=228, ISREG8=229, ISREG8STD=230, 
		ISREG8SPEC=231, ISREG8IDX=232, ISREG16=233, ISREG16STD=234, ISREG16IDX=235, 
		ISREGINDIRECT=236, ISCPORT=237, ISINDEXEDADDR=238, ISCONDITION=239, ISEXPR=240, 
		ISREGA=241, ISREGAF=242, ISREGB=243, ISREGC=244, ISREGBC=245, ISREGD=246, 
		ISREGE=247, ISREGDE=248, ISREGH=249, ISREGL=250, ISREGHL=251, ISREGI=252, 
		ISREGR=253, ISREGSP=254, ISREGXH=255, ISREGXL=256, ISREGIX=257, ISREGYH=258, 
		ISREGYL=259, ISREGIY=260, HEXNUM=261, BINNUM=262, OCTNUM=263, DECNUM=264, 
		CURADDR=265, REALNUM=266, CHAR=267, STRING=268, BOOLLIT=269, TRUE=270, 
		FALSE=271, CURCNT=272, IDENTIFIER=273, IDSTART=274, IDCONT=275, NONEARG=276, 
		ErrorCharacter=277;
	public const int
		RULE_compileUnit = 0, RULE_asmline = 1, RULE_lineBody = 2, RULE_label = 3, 
		RULE_comment = 4, RULE_pragma = 5, RULE_directive = 6, RULE_statement = 7, 
		RULE_iterationTest = 8, RULE_macroStatement = 9, RULE_macroEndMarker = 10, 
		RULE_procStatement = 11, RULE_procEndMarker = 12, RULE_loopEndMarker = 13, 
		RULE_repeatStatement = 14, RULE_whileEndMarker = 15, RULE_ifStatement = 16, 
		RULE_elseStatement = 17, RULE_endifStatement = 18, RULE_forStatement = 19, 
		RULE_nextStatement = 20, RULE_breakStatement = 21, RULE_continueStatement = 22, 
		RULE_moduleStatement = 23, RULE_moduleEndMarker = 24, RULE_structStatement = 25, 
		RULE_structEndMarker = 26, RULE_localStatement = 27, RULE_macroOrStructInvocation = 28, 
		RULE_macroArgument = 29, RULE_fieldAssignment = 30, RULE_orgPragma = 31, 
		RULE_bankPragma = 32, RULE_xorgPragma = 33, RULE_entPragma = 34, RULE_xentPragma = 35, 
		RULE_dispPragma = 36, RULE_equPragma = 37, RULE_varPragma = 38, RULE_defbPragma = 39, 
		RULE_defwPragma = 40, RULE_defcPragma = 41, RULE_defmPragma = 42, RULE_defnPragma = 43, 
		RULE_defhPragma = 44, RULE_skipPragma = 45, RULE_externPragma = 46, RULE_defsPragma = 47, 
		RULE_fillbPragma = 48, RULE_fillwPragma = 49, RULE_modelPragma = 50, RULE_alignPragma = 51, 
		RULE_tracePragma = 52, RULE_rndSeedPragma = 53, RULE_defgxPragma = 54, 
		RULE_defgPragma = 55, RULE_errorPragma = 56, RULE_incBinPragma = 57, RULE_compareBinPragma = 58, 
		RULE_zxBasicPragma = 59, RULE_injectOptPragma = 60, RULE_byteEmPragma = 61, 
		RULE_operation = 62, RULE_trivialOperation = 63, RULE_compoundOperation = 64, 
		RULE_trivialNextOperation = 65, RULE_operand = 66, RULE_reg8 = 67, RULE_reg8Idx = 68, 
		RULE_reg8Spec = 69, RULE_reg16 = 70, RULE_reg16Idx = 71, RULE_reg16Std = 72, 
		RULE_reg16Spec = 73, RULE_regIndirect = 74, RULE_cPort = 75, RULE_memIndirect = 76, 
		RULE_indexedAddr = 77, RULE_condition = 78, RULE_expr = 79, RULE_functionInvocation = 80, 
		RULE_builtinFunctionInvocation = 81, RULE_literal = 82, RULE_symbol = 83, 
		RULE_macroParam = 84, RULE_regs = 85, RULE_regsAndConds = 86, RULE_mnemonic = 87;
	public static readonly string[] ruleNames = {
		"compileUnit", "asmline", "lineBody", "label", "comment", "pragma", "directive", 
		"statement", "iterationTest", "macroStatement", "macroEndMarker", "procStatement", 
		"procEndMarker", "loopEndMarker", "repeatStatement", "whileEndMarker", 
		"ifStatement", "elseStatement", "endifStatement", "forStatement", "nextStatement", 
		"breakStatement", "continueStatement", "moduleStatement", "moduleEndMarker", 
		"structStatement", "structEndMarker", "localStatement", "macroOrStructInvocation", 
		"macroArgument", "fieldAssignment", "orgPragma", "bankPragma", "xorgPragma", 
		"entPragma", "xentPragma", "dispPragma", "equPragma", "varPragma", "defbPragma", 
		"defwPragma", "defcPragma", "defmPragma", "defnPragma", "defhPragma", 
		"skipPragma", "externPragma", "defsPragma", "fillbPragma", "fillwPragma", 
		"modelPragma", "alignPragma", "tracePragma", "rndSeedPragma", "defgxPragma", 
		"defgPragma", "errorPragma", "incBinPragma", "compareBinPragma", "zxBasicPragma", 
		"injectOptPragma", "byteEmPragma", "operation", "trivialOperation", "compoundOperation", 
		"trivialNextOperation", "operand", "reg8", "reg8Idx", "reg8Spec", "reg16", 
		"reg16Idx", "reg16Std", "reg16Spec", "regIndirect", "cPort", "memIndirect", 
		"indexedAddr", "condition", "expr", "functionInvocation", "builtinFunctionInvocation", 
		"literal", "symbol", "macroParam", "regs", "regsAndConds", "mnemonic"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "':'", "'::'", "';'", "'//'", "','", "'='", 
		"'('", "')'", "'['", "']'", "'?'", "'+'", "'-'", "'|'", "'^'", "'&'", 
		"'=='", "'==='", "'!='", "'!=='", "'<'", "'<='", "'>'", "'>='", "'<<'", 
		"'>>'", "'*'", "'/'", "'%'", "'<?'", "'>?'", "'~'", "'{{'", "'}}'", "'!'", 
		"'.'", "'->'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'#ifdef'", "'#ifndef'", "'#endif'", 
		"'#else'", "'#define'", "'#undef'", "'#include'", "'#if'", "'#ifmod'", 
		"'#ifnmod'", "'#line'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'$'", null, null, null, 
		null, null, null, null, null, null, null, "'$<none>$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "BLCOMMENT", "COMMENT", "NEWLINE", "COLON", "DCOLON", "SCOLON", 
		"COMSEP", "COMMA", "ASSIGN", "LPAR", "RPAR", "LSBRAC", "RSBRAC", "QMARK", 
		"PLUS", "MINUS", "VBAR", "UPARR", "AMP", "EQOP", "CIEQOP", "NEQOP", "CINEQOP", 
		"LTOP", "LTEOP", "GTOP", "GTEOP", "LSHOP", "RSHOP", "MULOP", "DIVOP", 
		"MODOP", "MINOP", "MAXOP", "TILDE", "LDBRAC", "RDBRAC", "EXCLM", "DOT", 
		"GOESTO", "A", "B", "C", "D", "E", "H", "L", "I", "R", "XL", "XH", "YL", 
		"YH", "BC", "DE", "HL", "SP", "IX", "IY", "AF", "AF_", "Z", "NZ", "NC", 
		"PO", "PE", "P", "M", "NOP", "RLCA", "RRCA", "RLA", "RRA", "DAA", "CPL", 
		"SCF", "CCF", "HALT", "RET", "EXX", "DI", "EI", "NEG", "RETN", "RETI", 
		"RLD", "RRD", "LDI", "CPI", "INI", "OUTI", "LDD", "CPD", "IND", "OUTD", 
		"LDIR", "CPIR", "INIR", "OTIR", "LDDR", "CPDR", "INDR", "OTDR", "LD", 
		"INC", "DEC", "EX", "ADD", "ADC", "SUB", "SBC", "AND", "XOR", "OR", "CP", 
		"DJNZ", "JR", "JP", "CALL", "RST", "PUSH", "POP", "IN", "OUT", "IM", "RLC", 
		"RRC", "RL", "RR", "SLA", "SRA", "SLL", "SRL", "BIT", "RES", "SET", "SWAPNIB", 
		"MUL", "POPX", "MIRROR", "TEST", "NEXTREG", "OUTINB", "LDIX", "LDIRX", 
		"LDDX", "LDDRX", "PIXELDN", "PIXELAD", "SETAE", "LDPIRX", "LDIRSCALE", 
		"IFDEF", "IFNDEF", "ENDIF", "ELSE", "DEFINE", "UNDEF", "INCLUDE", "IF", 
		"IFMOD", "IFNMOD", "LINEDIR", "ORGPRAG", "BANKPRAG", "XORGPR", "ENTPRAG", 
		"XENTPRAG", "EQUPRAG", "VARPRAG", "DISPRAG", "DBPRAG", "DWPRAG", "DMPRAG", 
		"DNPRAG", "DHPRAG", "DGXPRAG", "DGPRAG", "DCPRAG", "SKIPRAG", "EXTPRAG", 
		"DSPRAG", "FBPRAG", "FWPRAG", "MODPRAG", "IOPTPRAG", "ALGPRAG", "TRACE", 
		"TRACEHEX", "RNDSEED", "ERRORPR", "INCBIN", "COMPAREBIN", "ZXBPRAG", "MACRO", 
		"ENDMACRO", "PROC", "ENDPROC", "LOOP", "ENDLOOP", "REPEAT", "UNTIL", "WHILE", 
		"ENDWHILE", "IFSTMT", "IFUSED", "IFNUSED", "ELIF", "ELSESTMT", "ENDIFSTMT", 
		"FOR", "TO", "STEP", "FORNEXT", "NEXT", "BREAK", "CONTINUE", "MODULE", 
		"ENDMOD", "STRUCT", "ENDST", "LOCAL", "TEXTOF", "LTEXTOF", "HREG", "LREG", 
		"DEF", "ISREG8", "ISREG8STD", "ISREG8SPEC", "ISREG8IDX", "ISREG16", "ISREG16STD", 
		"ISREG16IDX", "ISREGINDIRECT", "ISCPORT", "ISINDEXEDADDR", "ISCONDITION", 
		"ISEXPR", "ISREGA", "ISREGAF", "ISREGB", "ISREGC", "ISREGBC", "ISREGD", 
		"ISREGE", "ISREGDE", "ISREGH", "ISREGL", "ISREGHL", "ISREGI", "ISREGR", 
		"ISREGSP", "ISREGXH", "ISREGXL", "ISREGIX", "ISREGYH", "ISREGYL", "ISREGIY", 
		"HEXNUM", "BINNUM", "OCTNUM", "DECNUM", "CURADDR", "REALNUM", "CHAR", 
		"STRING", "BOOLLIT", "TRUE", "FALSE", "CURCNT", "IDENTIFIER", "IDSTART", 
		"IDCONT", "NONEARG", "ErrorCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Z80Asm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Z80AsmParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Z80AsmParser.Eof, 0); }
		public AsmlineContext[] asmline() {
			return GetRuleContexts<AsmlineContext>();
		}
		public AsmlineContext asmline(int i) {
			return GetRuleContext<AsmlineContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(Z80AsmParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(Z80AsmParser.NEWLINE, i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			int _alt;
			State = 203;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 177; Match(NEWLINE);
						}
						} 
					}
					State = 182;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
				}
				State = 183; asmline();
				State = 192;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 185;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 184; Match(NEWLINE);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 187;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						State = 189; asmline();
						}
						} 
					}
					State = 194;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				}
				State = 198;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 195; Match(NEWLINE);
					}
					}
					State = 200;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 201; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmlineContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public LineBodyContext lineBody() {
			return GetRuleContext<LineBodyContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public AsmlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAsmline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAsmline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsmline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsmlineContext asmline() {
		AsmlineContext _localctx = new AsmlineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_asmline);
		int _la;
		try {
			State = 218;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Eof:
			case COMMENT:
			case NEWLINE:
			case ASSIGN:
			case LDBRAC:
			case GOESTO:
			case NOP:
			case RLCA:
			case RRCA:
			case RLA:
			case RRA:
			case DAA:
			case CPL:
			case SCF:
			case CCF:
			case HALT:
			case RET:
			case EXX:
			case DI:
			case EI:
			case NEG:
			case RETN:
			case RETI:
			case RLD:
			case RRD:
			case LDI:
			case CPI:
			case INI:
			case OUTI:
			case LDD:
			case CPD:
			case IND:
			case OUTD:
			case LDIR:
			case CPIR:
			case INIR:
			case OTIR:
			case LDDR:
			case CPDR:
			case INDR:
			case OTDR:
			case LD:
			case INC:
			case DEC:
			case EX:
			case ADD:
			case ADC:
			case SUB:
			case SBC:
			case AND:
			case XOR:
			case OR:
			case CP:
			case DJNZ:
			case JR:
			case JP:
			case CALL:
			case RST:
			case PUSH:
			case POP:
			case IN:
			case OUT:
			case IM:
			case RLC:
			case RRC:
			case RL:
			case RR:
			case SLA:
			case SRA:
			case SLL:
			case SRL:
			case BIT:
			case RES:
			case SET:
			case SWAPNIB:
			case MUL:
			case MIRROR:
			case TEST:
			case NEXTREG:
			case OUTINB:
			case LDIX:
			case LDIRX:
			case LDDX:
			case LDDRX:
			case PIXELDN:
			case PIXELAD:
			case SETAE:
			case LDPIRX:
			case LDIRSCALE:
			case ORGPRAG:
			case BANKPRAG:
			case XORGPR:
			case ENTPRAG:
			case XENTPRAG:
			case EQUPRAG:
			case VARPRAG:
			case DISPRAG:
			case DBPRAG:
			case DWPRAG:
			case DMPRAG:
			case DNPRAG:
			case DHPRAG:
			case DGXPRAG:
			case DGPRAG:
			case DCPRAG:
			case SKIPRAG:
			case EXTPRAG:
			case DSPRAG:
			case FBPRAG:
			case FWPRAG:
			case MODPRAG:
			case IOPTPRAG:
			case ALGPRAG:
			case TRACE:
			case TRACEHEX:
			case RNDSEED:
			case ERRORPR:
			case INCBIN:
			case COMPAREBIN:
			case ZXBPRAG:
			case MACRO:
			case ENDMACRO:
			case PROC:
			case ENDPROC:
			case LOOP:
			case ENDLOOP:
			case REPEAT:
			case UNTIL:
			case WHILE:
			case ENDWHILE:
			case IFSTMT:
			case IFUSED:
			case IFNUSED:
			case ELIF:
			case ELSESTMT:
			case ENDIFSTMT:
			case FOR:
			case FORNEXT:
			case NEXT:
			case BREAK:
			case CONTINUE:
			case MODULE:
			case ENDMOD:
			case STRUCT:
			case ENDST:
			case LOCAL:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 205; label();
					}
					break;
				}
				State = 209;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << LDBRAC) | (1L << GOESTO))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (NOP - 70)) | (1L << (RLCA - 70)) | (1L << (RRCA - 70)) | (1L << (RLA - 70)) | (1L << (RRA - 70)) | (1L << (DAA - 70)) | (1L << (CPL - 70)) | (1L << (SCF - 70)) | (1L << (CCF - 70)) | (1L << (HALT - 70)) | (1L << (RET - 70)) | (1L << (EXX - 70)) | (1L << (DI - 70)) | (1L << (EI - 70)) | (1L << (NEG - 70)) | (1L << (RETN - 70)) | (1L << (RETI - 70)) | (1L << (RLD - 70)) | (1L << (RRD - 70)) | (1L << (LDI - 70)) | (1L << (CPI - 70)) | (1L << (INI - 70)) | (1L << (OUTI - 70)) | (1L << (LDD - 70)) | (1L << (CPD - 70)) | (1L << (IND - 70)) | (1L << (OUTD - 70)) | (1L << (LDIR - 70)) | (1L << (CPIR - 70)) | (1L << (INIR - 70)) | (1L << (OTIR - 70)) | (1L << (LDDR - 70)) | (1L << (CPDR - 70)) | (1L << (INDR - 70)) | (1L << (OTDR - 70)) | (1L << (LD - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (EX - 70)) | (1L << (ADD - 70)) | (1L << (ADC - 70)) | (1L << (SUB - 70)) | (1L << (SBC - 70)) | (1L << (AND - 70)) | (1L << (XOR - 70)) | (1L << (OR - 70)) | (1L << (CP - 70)) | (1L << (DJNZ - 70)) | (1L << (JR - 70)) | (1L << (JP - 70)) | (1L << (CALL - 70)) | (1L << (RST - 70)) | (1L << (PUSH - 70)) | (1L << (POP - 70)) | (1L << (IN - 70)) | (1L << (OUT - 70)) | (1L << (IM - 70)) | (1L << (RLC - 70)) | (1L << (RRC - 70)) | (1L << (RL - 70)) | (1L << (RR - 70)) | (1L << (SLA - 70)) | (1L << (SRA - 70)) | (1L << (SLL - 70)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (SRL - 134)) | (1L << (BIT - 134)) | (1L << (RES - 134)) | (1L << (SET - 134)) | (1L << (SWAPNIB - 134)) | (1L << (MUL - 134)) | (1L << (MIRROR - 134)) | (1L << (TEST - 134)) | (1L << (NEXTREG - 134)) | (1L << (OUTINB - 134)) | (1L << (LDIX - 134)) | (1L << (LDIRX - 134)) | (1L << (LDDX - 134)) | (1L << (LDDRX - 134)) | (1L << (PIXELDN - 134)) | (1L << (PIXELAD - 134)) | (1L << (SETAE - 134)) | (1L << (LDPIRX - 134)) | (1L << (LDIRSCALE - 134)) | (1L << (ORGPRAG - 134)) | (1L << (BANKPRAG - 134)) | (1L << (XORGPR - 134)) | (1L << (ENTPRAG - 134)) | (1L << (XENTPRAG - 134)) | (1L << (EQUPRAG - 134)) | (1L << (VARPRAG - 134)) | (1L << (DISPRAG - 134)) | (1L << (DBPRAG - 134)) | (1L << (DWPRAG - 134)) | (1L << (DMPRAG - 134)) | (1L << (DNPRAG - 134)) | (1L << (DHPRAG - 134)) | (1L << (DGXPRAG - 134)) | (1L << (DGPRAG - 134)) | (1L << (DCPRAG - 134)) | (1L << (SKIPRAG - 134)) | (1L << (EXTPRAG - 134)) | (1L << (DSPRAG - 134)) | (1L << (FBPRAG - 134)) | (1L << (FWPRAG - 134)) | (1L << (MODPRAG - 134)) | (1L << (IOPTPRAG - 134)) | (1L << (ALGPRAG - 134)) | (1L << (TRACE - 134)) | (1L << (TRACEHEX - 134)) | (1L << (RNDSEED - 134)) | (1L << (ERRORPR - 134)) | (1L << (INCBIN - 134)) | (1L << (COMPAREBIN - 134)) | (1L << (ZXBPRAG - 134)) | (1L << (MACRO - 134)) | (1L << (ENDMACRO - 134)))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (PROC - 198)) | (1L << (ENDPROC - 198)) | (1L << (LOOP - 198)) | (1L << (ENDLOOP - 198)) | (1L << (REPEAT - 198)) | (1L << (UNTIL - 198)) | (1L << (WHILE - 198)) | (1L << (ENDWHILE - 198)) | (1L << (IFSTMT - 198)) | (1L << (IFUSED - 198)) | (1L << (IFNUSED - 198)) | (1L << (ELIF - 198)) | (1L << (ELSESTMT - 198)) | (1L << (ENDIFSTMT - 198)) | (1L << (FOR - 198)) | (1L << (FORNEXT - 198)) | (1L << (NEXT - 198)) | (1L << (BREAK - 198)) | (1L << (CONTINUE - 198)) | (1L << (MODULE - 198)) | (1L << (ENDMOD - 198)) | (1L << (STRUCT - 198)) | (1L << (ENDST - 198)) | (1L << (LOCAL - 198)))) != 0) || _la==IDENTIFIER) {
					{
					State = 208; lineBody();
					}
				}

				State = 212;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 211; comment();
					}
				}

				}
				break;
			case IFDEF:
			case IFNDEF:
			case ENDIF:
			case ELSE:
			case DEFINE:
			case UNDEF:
			case INCLUDE:
			case IF:
			case IFMOD:
			case IFNMOD:
			case LINEDIR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; directive();
				State = 216;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 215; comment();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineBodyContext : ParserRuleContext {
		public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public MacroOrStructInvocationContext macroOrStructInvocation() {
			return GetRuleContext<MacroOrStructInvocationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FieldAssignmentContext fieldAssignment() {
			return GetRuleContext<FieldAssignmentContext>(0);
		}
		public LineBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLineBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLineBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineBodyContext lineBody() {
		LineBodyContext _localctx = new LineBodyContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_lineBody);
		try {
			State = 226;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 220; pragma();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221; operation();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 222; macroParam();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 223; macroOrStructInvocation();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 224; statement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 225; fieldAssignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode COLON() { return GetToken(Z80AsmParser.COLON, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_label);
		try {
			State = 232;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228; Match(IDENTIFIER);
				State = 229; Match(COLON);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230; Match(IDENTIFIER);
				State = 231;
				if (!(!this.exprStart())) throw new FailedPredicateException(this, "!this.exprStart()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(Z80AsmParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		public OrgPragmaContext orgPragma() {
			return GetRuleContext<OrgPragmaContext>(0);
		}
		public BankPragmaContext bankPragma() {
			return GetRuleContext<BankPragmaContext>(0);
		}
		public XorgPragmaContext xorgPragma() {
			return GetRuleContext<XorgPragmaContext>(0);
		}
		public EntPragmaContext entPragma() {
			return GetRuleContext<EntPragmaContext>(0);
		}
		public XentPragmaContext xentPragma() {
			return GetRuleContext<XentPragmaContext>(0);
		}
		public DispPragmaContext dispPragma() {
			return GetRuleContext<DispPragmaContext>(0);
		}
		public EquPragmaContext equPragma() {
			return GetRuleContext<EquPragmaContext>(0);
		}
		public VarPragmaContext varPragma() {
			return GetRuleContext<VarPragmaContext>(0);
		}
		public DefbPragmaContext defbPragma() {
			return GetRuleContext<DefbPragmaContext>(0);
		}
		public DefwPragmaContext defwPragma() {
			return GetRuleContext<DefwPragmaContext>(0);
		}
		public DefmPragmaContext defmPragma() {
			return GetRuleContext<DefmPragmaContext>(0);
		}
		public DefcPragmaContext defcPragma() {
			return GetRuleContext<DefcPragmaContext>(0);
		}
		public DefnPragmaContext defnPragma() {
			return GetRuleContext<DefnPragmaContext>(0);
		}
		public DefhPragmaContext defhPragma() {
			return GetRuleContext<DefhPragmaContext>(0);
		}
		public SkipPragmaContext skipPragma() {
			return GetRuleContext<SkipPragmaContext>(0);
		}
		public ExternPragmaContext externPragma() {
			return GetRuleContext<ExternPragmaContext>(0);
		}
		public DefsPragmaContext defsPragma() {
			return GetRuleContext<DefsPragmaContext>(0);
		}
		public FillbPragmaContext fillbPragma() {
			return GetRuleContext<FillbPragmaContext>(0);
		}
		public FillwPragmaContext fillwPragma() {
			return GetRuleContext<FillwPragmaContext>(0);
		}
		public ModelPragmaContext modelPragma() {
			return GetRuleContext<ModelPragmaContext>(0);
		}
		public AlignPragmaContext alignPragma() {
			return GetRuleContext<AlignPragmaContext>(0);
		}
		public TracePragmaContext tracePragma() {
			return GetRuleContext<TracePragmaContext>(0);
		}
		public RndSeedPragmaContext rndSeedPragma() {
			return GetRuleContext<RndSeedPragmaContext>(0);
		}
		public DefgxPragmaContext defgxPragma() {
			return GetRuleContext<DefgxPragmaContext>(0);
		}
		public DefgPragmaContext defgPragma() {
			return GetRuleContext<DefgPragmaContext>(0);
		}
		public ErrorPragmaContext errorPragma() {
			return GetRuleContext<ErrorPragmaContext>(0);
		}
		public IncBinPragmaContext incBinPragma() {
			return GetRuleContext<IncBinPragmaContext>(0);
		}
		public CompareBinPragmaContext compareBinPragma() {
			return GetRuleContext<CompareBinPragmaContext>(0);
		}
		public ZxBasicPragmaContext zxBasicPragma() {
			return GetRuleContext<ZxBasicPragmaContext>(0);
		}
		public InjectOptPragmaContext injectOptPragma() {
			return GetRuleContext<InjectOptPragmaContext>(0);
		}
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_pragma);
		try {
			State = 266;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ORGPRAG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236; orgPragma();
				}
				break;
			case BANKPRAG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237; bankPragma();
				}
				break;
			case XORGPR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 238; xorgPragma();
				}
				break;
			case ENTPRAG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 239; entPragma();
				}
				break;
			case XENTPRAG:
				EnterOuterAlt(_localctx, 5);
				{
				State = 240; xentPragma();
				}
				break;
			case DISPRAG:
				EnterOuterAlt(_localctx, 6);
				{
				State = 241; dispPragma();
				}
				break;
			case EQUPRAG:
				EnterOuterAlt(_localctx, 7);
				{
				State = 242; equPragma();
				}
				break;
			case ASSIGN:
			case VARPRAG:
				EnterOuterAlt(_localctx, 8);
				{
				State = 243; varPragma();
				}
				break;
			case DBPRAG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 244; defbPragma();
				}
				break;
			case DWPRAG:
				EnterOuterAlt(_localctx, 10);
				{
				State = 245; defwPragma();
				}
				break;
			case DMPRAG:
				EnterOuterAlt(_localctx, 11);
				{
				State = 246; defmPragma();
				}
				break;
			case DCPRAG:
				EnterOuterAlt(_localctx, 12);
				{
				State = 247; defcPragma();
				}
				break;
			case DNPRAG:
				EnterOuterAlt(_localctx, 13);
				{
				State = 248; defnPragma();
				}
				break;
			case DHPRAG:
				EnterOuterAlt(_localctx, 14);
				{
				State = 249; defhPragma();
				}
				break;
			case SKIPRAG:
				EnterOuterAlt(_localctx, 15);
				{
				State = 250; skipPragma();
				}
				break;
			case EXTPRAG:
				EnterOuterAlt(_localctx, 16);
				{
				State = 251; externPragma();
				}
				break;
			case DSPRAG:
				EnterOuterAlt(_localctx, 17);
				{
				State = 252; defsPragma();
				}
				break;
			case FBPRAG:
				EnterOuterAlt(_localctx, 18);
				{
				State = 253; fillbPragma();
				}
				break;
			case FWPRAG:
				EnterOuterAlt(_localctx, 19);
				{
				State = 254; fillwPragma();
				}
				break;
			case MODPRAG:
				EnterOuterAlt(_localctx, 20);
				{
				State = 255; modelPragma();
				}
				break;
			case ALGPRAG:
				EnterOuterAlt(_localctx, 21);
				{
				State = 256; alignPragma();
				}
				break;
			case TRACE:
			case TRACEHEX:
				EnterOuterAlt(_localctx, 22);
				{
				State = 257; tracePragma();
				}
				break;
			case RNDSEED:
				EnterOuterAlt(_localctx, 23);
				{
				State = 258; rndSeedPragma();
				}
				break;
			case DGXPRAG:
				EnterOuterAlt(_localctx, 24);
				{
				State = 259; defgxPragma();
				}
				break;
			case DGPRAG:
				EnterOuterAlt(_localctx, 25);
				{
				State = 260; defgPragma();
				}
				break;
			case ERRORPR:
				EnterOuterAlt(_localctx, 26);
				{
				State = 261; errorPragma();
				}
				break;
			case INCBIN:
				EnterOuterAlt(_localctx, 27);
				{
				State = 262; incBinPragma();
				}
				break;
			case COMPAREBIN:
				EnterOuterAlt(_localctx, 28);
				{
				State = 263; compareBinPragma();
				}
				break;
			case ZXBPRAG:
				EnterOuterAlt(_localctx, 29);
				{
				State = 264; zxBasicPragma();
				}
				break;
			case IOPTPRAG:
				EnterOuterAlt(_localctx, 30);
				{
				State = 265; injectOptPragma();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode IFDEF() { return GetToken(Z80AsmParser.IFDEF, 0); }
		public ITerminalNode IFNDEF() { return GetToken(Z80AsmParser.IFNDEF, 0); }
		public ITerminalNode DEFINE() { return GetToken(Z80AsmParser.DEFINE, 0); }
		public ITerminalNode UNDEF() { return GetToken(Z80AsmParser.UNDEF, 0); }
		public ITerminalNode IFMOD() { return GetToken(Z80AsmParser.IFMOD, 0); }
		public ITerminalNode IFNMOD() { return GetToken(Z80AsmParser.IFNMOD, 0); }
		public ITerminalNode ENDIF() { return GetToken(Z80AsmParser.ENDIF, 0); }
		public ITerminalNode ELSE() { return GetToken(Z80AsmParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(Z80AsmParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode INCLUDE() { return GetToken(Z80AsmParser.INCLUDE, 0); }
		public ITerminalNode STRING() { return GetToken(Z80AsmParser.STRING, 0); }
		public ITerminalNode LINEDIR() { return GetToken(Z80AsmParser.LINEDIR, 0); }
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_directive);
		int _la;
		try {
			State = 284;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IFDEF:
			case IFNDEF:
			case DEFINE:
			case UNDEF:
			case IFMOD:
			case IFNMOD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				_la = _input.La(1);
				if ( !(((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & ((1L << (IFDEF - 154)) | (1L << (IFNDEF - 154)) | (1L << (DEFINE - 154)) | (1L << (UNDEF - 154)) | (1L << (IFMOD - 154)) | (1L << (IFNMOD - 154)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 269; Match(IDENTIFIER);
				}
				break;
			case ENDIF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270; Match(ENDIF);
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 271; Match(ELSE);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 272; Match(IF);
				State = 273; expr(0);
				}
				break;
			case INCLUDE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 274; Match(INCLUDE);
				{
				State = 275; Match(STRING);
				}
				}
				break;
			case LINEDIR:
				EnterOuterAlt(_localctx, 6);
				{
				State = 276; Match(LINEDIR);
				State = 277; expr(0);
				State = 282;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==STRING) {
					{
					State = 279;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 278; Match(COMMA);
						}
					}

					State = 281; Match(STRING);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IterationTestContext iterationTest() {
			return GetRuleContext<IterationTestContext>(0);
		}
		public MacroStatementContext macroStatement() {
			return GetRuleContext<MacroStatementContext>(0);
		}
		public MacroEndMarkerContext macroEndMarker() {
			return GetRuleContext<MacroEndMarkerContext>(0);
		}
		public LoopEndMarkerContext loopEndMarker() {
			return GetRuleContext<LoopEndMarkerContext>(0);
		}
		public WhileEndMarkerContext whileEndMarker() {
			return GetRuleContext<WhileEndMarkerContext>(0);
		}
		public ProcStatementContext procStatement() {
			return GetRuleContext<ProcStatementContext>(0);
		}
		public ProcEndMarkerContext procEndMarker() {
			return GetRuleContext<ProcEndMarkerContext>(0);
		}
		public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public EndifStatementContext endifStatement() {
			return GetRuleContext<EndifStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public NextStatementContext nextStatement() {
			return GetRuleContext<NextStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public ModuleStatementContext moduleStatement() {
			return GetRuleContext<ModuleStatementContext>(0);
		}
		public ModuleEndMarkerContext moduleEndMarker() {
			return GetRuleContext<ModuleEndMarkerContext>(0);
		}
		public StructStatementContext structStatement() {
			return GetRuleContext<StructStatementContext>(0);
		}
		public StructEndMarkerContext structEndMarker() {
			return GetRuleContext<StructEndMarkerContext>(0);
		}
		public LocalStatementContext localStatement() {
			return GetRuleContext<LocalStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 306;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LOOP:
			case UNTIL:
			case WHILE:
			case ELIF:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 286; iterationTest();
				}
				break;
			case MACRO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287; macroStatement();
				}
				break;
			case ENDMACRO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 288; macroEndMarker();
				}
				break;
			case ENDLOOP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 289; loopEndMarker();
				}
				break;
			case ENDWHILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 290; whileEndMarker();
				}
				break;
			case PROC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 291; procStatement();
				}
				break;
			case ENDPROC:
				EnterOuterAlt(_localctx, 7);
				{
				State = 292; procEndMarker();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 293; repeatStatement();
				}
				break;
			case IFSTMT:
			case IFUSED:
			case IFNUSED:
				EnterOuterAlt(_localctx, 9);
				{
				State = 294; ifStatement();
				}
				break;
			case ELSESTMT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 295; elseStatement();
				}
				break;
			case ENDIFSTMT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 296; endifStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 12);
				{
				State = 297; forStatement();
				}
				break;
			case FORNEXT:
			case NEXT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 298; nextStatement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 14);
				{
				State = 299; breakStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 15);
				{
				State = 300; continueStatement();
				}
				break;
			case MODULE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 301; moduleStatement();
				}
				break;
			case ENDMOD:
				EnterOuterAlt(_localctx, 17);
				{
				State = 302; moduleEndMarker();
				}
				break;
			case STRUCT:
				EnterOuterAlt(_localctx, 18);
				{
				State = 303; structStatement();
				}
				break;
			case ENDST:
				EnterOuterAlt(_localctx, 19);
				{
				State = 304; structEndMarker();
				}
				break;
			case LOCAL:
				EnterOuterAlt(_localctx, 20);
				{
				State = 305; localStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationTestContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode LOOP() { return GetToken(Z80AsmParser.LOOP, 0); }
		public ITerminalNode WHILE() { return GetToken(Z80AsmParser.WHILE, 0); }
		public ITerminalNode UNTIL() { return GetToken(Z80AsmParser.UNTIL, 0); }
		public ITerminalNode ELIF() { return GetToken(Z80AsmParser.ELIF, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public IterationTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationTest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIterationTest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIterationTest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationTestContext iterationTest() {
		IterationTestContext _localctx = new IterationTestContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_iterationTest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LOOP:
				{
				State = 308; Match(LOOP);
				}
				break;
			case WHILE:
				{
				State = 309; Match(WHILE);
				}
				break;
			case UNTIL:
				{
				State = 310; Match(UNTIL);
				}
				break;
			case ELIF:
				{
				State = 311; Match(ELIF);
				}
				break;
			case IDENTIFIER:
				{
				State = 312; Match(IDENTIFIER);
				State = 313;
				if (!(this.p("loop", "while", "until", "elif"))) throw new FailedPredicateException(this, "this.p(\"loop\", \"while\", \"until\", \"elif\")");
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 316; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroStatementContext : ParserRuleContext {
		public ITerminalNode MACRO() { return GetToken(Z80AsmParser.MACRO, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(Z80AsmParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Z80AsmParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public MacroStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroStatementContext macroStatement() {
		MacroStatementContext _localctx = new MacroStatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_macroStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(MACRO);
			State = 319; Match(LPAR);
			State = 328;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 320; Match(IDENTIFIER);
				State = 325;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 321; Match(COMMA);
					State = 322; Match(IDENTIFIER);
					}
					}
					State = 327;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 330; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDMACRO() { return GetToken(Z80AsmParser.ENDMACRO, 0); }
		public MacroEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroEndMarkerContext macroEndMarker() {
		MacroEndMarkerContext _localctx = new MacroEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_macroEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(ENDMACRO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcStatementContext : ParserRuleContext {
		public ITerminalNode PROC() { return GetToken(Z80AsmParser.PROC, 0); }
		public ProcStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterProcStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitProcStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcStatementContext procStatement() {
		ProcStatementContext _localctx = new ProcStatementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_procStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; Match(PROC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDPROC() { return GetToken(Z80AsmParser.ENDPROC, 0); }
		public ProcEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterProcEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitProcEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcEndMarkerContext procEndMarker() {
		ProcEndMarkerContext _localctx = new ProcEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_procEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(ENDPROC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDLOOP() { return GetToken(Z80AsmParser.ENDLOOP, 0); }
		public LoopEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLoopEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLoopEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopEndMarkerContext loopEndMarker() {
		LoopEndMarkerContext _localctx = new LoopEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_loopEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; Match(ENDLOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		public ITerminalNode REPEAT() { return GetToken(Z80AsmParser.REPEAT, 0); }
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; Match(REPEAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDWHILE() { return GetToken(Z80AsmParser.ENDWHILE, 0); }
		public WhileEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterWhileEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitWhileEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileEndMarkerContext whileEndMarker() {
		WhileEndMarkerContext _localctx = new WhileEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_whileEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; Match(ENDWHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode IFSTMT() { return GetToken(Z80AsmParser.IFSTMT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IFUSED() { return GetToken(Z80AsmParser.IFUSED, 0); }
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public ITerminalNode IFNUSED() { return GetToken(Z80AsmParser.IFNUSED, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_ifStatement);
		try {
			State = 350;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IFSTMT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344; Match(IFSTMT);
				State = 345; expr(0);
				}
				break;
			case IFUSED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 346; Match(IFUSED);
				State = 347; symbol();
				}
				break;
			case IFNUSED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 348; Match(IFNUSED);
				State = 349; symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ITerminalNode ELSESTMT() { return GetToken(Z80AsmParser.ELSESTMT, 0); }
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; Match(ELSESTMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndifStatementContext : ParserRuleContext {
		public ITerminalNode ENDIFSTMT() { return GetToken(Z80AsmParser.ENDIFSTMT, 0); }
		public EndifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEndifStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEndifStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndifStatementContext endifStatement() {
		EndifStatementContext _localctx = new EndifStatementContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_endifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; Match(ENDIFSTMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(Z80AsmParser.FOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(Z80AsmParser.ASSIGN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TO() { return GetToken(Z80AsmParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(Z80AsmParser.STEP, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(FOR);
			State = 357; Match(IDENTIFIER);
			State = 358; Match(ASSIGN);
			State = 359; expr(0);
			State = 360; Match(TO);
			State = 361; expr(0);
			State = 364;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 362; Match(STEP);
				State = 363; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextStatementContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(Z80AsmParser.NEXT, 0); }
		public ITerminalNode FORNEXT() { return GetToken(Z80AsmParser.FORNEXT, 0); }
		public NextStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterNextStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitNextStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextStatementContext nextStatement() {
		NextStatementContext _localctx = new NextStatementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_nextStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			_la = _input.La(1);
			if ( !(_la==FORNEXT || _la==NEXT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(Z80AsmParser.BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(Z80AsmParser.CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleStatementContext : ParserRuleContext {
		public ITerminalNode MODULE() { return GetToken(Z80AsmParser.MODULE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ModuleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterModuleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitModuleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleStatementContext moduleStatement() {
		ModuleStatementContext _localctx = new ModuleStatementContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_moduleStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; Match(MODULE);
			State = 374;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 373; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDMOD() { return GetToken(Z80AsmParser.ENDMOD, 0); }
		public ModuleEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterModuleEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitModuleEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleEndMarkerContext moduleEndMarker() {
		ModuleEndMarkerContext _localctx = new ModuleEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_moduleEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376; Match(ENDMOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructStatementContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(Z80AsmParser.STRUCT, 0); }
		public StructStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterStructStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitStructStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructStatementContext structStatement() {
		StructStatementContext _localctx = new StructStatementContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_structStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; Match(STRUCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDST() { return GetToken(Z80AsmParser.ENDST, 0); }
		public StructEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterStructEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitStructEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructEndMarkerContext structEndMarker() {
		StructEndMarkerContext _localctx = new StructEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_structEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(ENDST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalStatementContext : ParserRuleContext {
		public ITerminalNode LOCAL() { return GetToken(Z80AsmParser.LOCAL, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(Z80AsmParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Z80AsmParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public LocalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLocalStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLocalStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalStatementContext localStatement() {
		LocalStatementContext _localctx = new LocalStatementContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_localStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382; Match(LOCAL);
			State = 383; Match(IDENTIFIER);
			State = 388;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 384; Match(COMMA);
				State = 385; Match(IDENTIFIER);
				}
				}
				State = 390;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroOrStructInvocationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public MacroArgumentContext[] macroArgument() {
			return GetRuleContexts<MacroArgumentContext>();
		}
		public MacroArgumentContext macroArgument(int i) {
			return GetRuleContext<MacroArgumentContext>(i);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public MacroOrStructInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroOrStructInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroOrStructInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroOrStructInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroOrStructInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroOrStructInvocationContext macroOrStructInvocation() {
		MacroOrStructInvocationContext _localctx = new MacroOrStructInvocationContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_macroOrStructInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; Match(IDENTIFIER);
			State = 392; Match(LPAR);
			State = 393; macroArgument();
			State = 398;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 394; Match(COMMA);
				State = 395; macroArgument();
				}
				}
				State = 400;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 401; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroArgumentContext : ParserRuleContext {
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public MacroArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroArgumentContext macroArgument() {
		MacroArgumentContext _localctx = new MacroArgumentContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_macroArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
				{
				State = 403; operand();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAssignmentContext : ParserRuleContext {
		public ITerminalNode GOESTO() { return GetToken(Z80AsmParser.GOESTO, 0); }
		public ByteEmPragmaContext byteEmPragma() {
			return GetRuleContext<ByteEmPragmaContext>(0);
		}
		public FieldAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFieldAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFieldAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAssignmentContext fieldAssignment() {
		FieldAssignmentContext _localctx = new FieldAssignmentContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_fieldAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; Match(GOESTO);
			State = 407; byteEmPragma();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrgPragmaContext : ParserRuleContext {
		public ITerminalNode ORGPRAG() { return GetToken(Z80AsmParser.ORGPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OrgPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orgPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOrgPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOrgPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrgPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrgPragmaContext orgPragma() {
		OrgPragmaContext _localctx = new OrgPragmaContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_orgPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409; Match(ORGPRAG);
			State = 410; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BankPragmaContext : ParserRuleContext {
		public ITerminalNode BANKPRAG() { return GetToken(Z80AsmParser.BANKPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public BankPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bankPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBankPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBankPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBankPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BankPragmaContext bankPragma() {
		BankPragmaContext _localctx = new BankPragmaContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_bankPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(BANKPRAG);
			State = 413; expr(0);
			State = 416;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 414; Match(COMMA);
				State = 415; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorgPragmaContext : ParserRuleContext {
		public ITerminalNode XORGPR() { return GetToken(Z80AsmParser.XORGPR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public XorgPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorgPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterXorgPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitXorgPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorgPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorgPragmaContext xorgPragma() {
		XorgPragmaContext _localctx = new XorgPragmaContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_xorgPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; Match(XORGPR);
			State = 419; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntPragmaContext : ParserRuleContext {
		public ITerminalNode ENTPRAG() { return GetToken(Z80AsmParser.ENTPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EntPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEntPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEntPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntPragmaContext entPragma() {
		EntPragmaContext _localctx = new EntPragmaContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_entPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421; Match(ENTPRAG);
			State = 422; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XentPragmaContext : ParserRuleContext {
		public ITerminalNode XENTPRAG() { return GetToken(Z80AsmParser.XENTPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public XentPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xentPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterXentPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitXentPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXentPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XentPragmaContext xentPragma() {
		XentPragmaContext _localctx = new XentPragmaContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_xentPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(XENTPRAG);
			State = 425; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DispPragmaContext : ParserRuleContext {
		public ITerminalNode DISPRAG() { return GetToken(Z80AsmParser.DISPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DispPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDispPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDispPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDispPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DispPragmaContext dispPragma() {
		DispPragmaContext _localctx = new DispPragmaContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_dispPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(DISPRAG);
			State = 428; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquPragmaContext : ParserRuleContext {
		public ITerminalNode EQUPRAG() { return GetToken(Z80AsmParser.EQUPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EquPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEquPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEquPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquPragmaContext equPragma() {
		EquPragmaContext _localctx = new EquPragmaContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_equPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(EQUPRAG);
			State = 431; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarPragmaContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode VARPRAG() { return GetToken(Z80AsmParser.VARPRAG, 0); }
		public ITerminalNode ASSIGN() { return GetToken(Z80AsmParser.ASSIGN, 0); }
		public VarPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterVarPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitVarPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarPragmaContext varPragma() {
		VarPragmaContext _localctx = new VarPragmaContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_varPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			_la = _input.La(1);
			if ( !(_la==ASSIGN || _la==VARPRAG) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 434; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefbPragmaContext : ParserRuleContext {
		public ITerminalNode DBPRAG() { return GetToken(Z80AsmParser.DBPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public DefbPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defbPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefbPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefbPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefbPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefbPragmaContext defbPragma() {
		DefbPragmaContext _localctx = new DefbPragmaContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_defbPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(DBPRAG);
			State = 437; expr(0);
			State = 442;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 438; Match(COMMA);
				State = 439; expr(0);
				}
				}
				State = 444;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefwPragmaContext : ParserRuleContext {
		public ITerminalNode DWPRAG() { return GetToken(Z80AsmParser.DWPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public DefwPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defwPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefwPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefwPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefwPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefwPragmaContext defwPragma() {
		DefwPragmaContext _localctx = new DefwPragmaContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_defwPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445; Match(DWPRAG);
			State = 446; expr(0);
			State = 451;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 447; Match(COMMA);
				State = 448; expr(0);
				}
				}
				State = 453;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefcPragmaContext : ParserRuleContext {
		public ITerminalNode DCPRAG() { return GetToken(Z80AsmParser.DCPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefcPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defcPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefcPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefcPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefcPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefcPragmaContext defcPragma() {
		DefcPragmaContext _localctx = new DefcPragmaContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_defcPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; Match(DCPRAG);
			State = 455; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefmPragmaContext : ParserRuleContext {
		public ITerminalNode DMPRAG() { return GetToken(Z80AsmParser.DMPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefmPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defmPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefmPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefmPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefmPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefmPragmaContext defmPragma() {
		DefmPragmaContext _localctx = new DefmPragmaContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_defmPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(DMPRAG);
			State = 458; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefnPragmaContext : ParserRuleContext {
		public ITerminalNode DNPRAG() { return GetToken(Z80AsmParser.DNPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefnPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defnPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefnPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefnPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefnPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefnPragmaContext defnPragma() {
		DefnPragmaContext _localctx = new DefnPragmaContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_defnPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(DNPRAG);
			State = 461; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefhPragmaContext : ParserRuleContext {
		public ITerminalNode DHPRAG() { return GetToken(Z80AsmParser.DHPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefhPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defhPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefhPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefhPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefhPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefhPragmaContext defhPragma() {
		DefhPragmaContext _localctx = new DefhPragmaContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_defhPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(DHPRAG);
			State = 464; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipPragmaContext : ParserRuleContext {
		public ITerminalNode SKIPRAG() { return GetToken(Z80AsmParser.SKIPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public SkipPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skipPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterSkipPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitSkipPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipPragmaContext skipPragma() {
		SkipPragmaContext _localctx = new SkipPragmaContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_skipPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466; Match(SKIPRAG);
			State = 467; expr(0);
			State = 470;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 468; Match(COMMA);
				State = 469; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternPragmaContext : ParserRuleContext {
		public ITerminalNode EXTPRAG() { return GetToken(Z80AsmParser.EXTPRAG, 0); }
		public ExternPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterExternPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitExternPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternPragmaContext externPragma() {
		ExternPragmaContext _localctx = new ExternPragmaContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_externPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472; Match(EXTPRAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefsPragmaContext : ParserRuleContext {
		public ITerminalNode DSPRAG() { return GetToken(Z80AsmParser.DSPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public DefsPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defsPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefsPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefsPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefsPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefsPragmaContext defsPragma() {
		DefsPragmaContext _localctx = new DefsPragmaContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_defsPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474; Match(DSPRAG);
			State = 475; expr(0);
			State = 478;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 476; Match(COMMA);
				State = 477; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillbPragmaContext : ParserRuleContext {
		public ITerminalNode FBPRAG() { return GetToken(Z80AsmParser.FBPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public FillbPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillbPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFillbPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFillbPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillbPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillbPragmaContext fillbPragma() {
		FillbPragmaContext _localctx = new FillbPragmaContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_fillbPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480; Match(FBPRAG);
			State = 481; expr(0);
			State = 482; Match(COMMA);
			State = 483; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillwPragmaContext : ParserRuleContext {
		public ITerminalNode FWPRAG() { return GetToken(Z80AsmParser.FWPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public FillwPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillwPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFillwPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFillwPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillwPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillwPragmaContext fillwPragma() {
		FillwPragmaContext _localctx = new FillwPragmaContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_fillwPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485; Match(FWPRAG);
			State = 486; expr(0);
			State = 487; Match(COMMA);
			State = 488; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelPragmaContext : ParserRuleContext {
		public ITerminalNode MODPRAG() { return GetToken(Z80AsmParser.MODPRAG, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode NEXT() { return GetToken(Z80AsmParser.NEXT, 0); }
		public ModelPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterModelPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitModelPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelPragmaContext modelPragma() {
		ModelPragmaContext _localctx = new ModelPragmaContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_modelPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490; Match(MODPRAG);
			State = 491;
			_la = _input.La(1);
			if ( !(_la==NEXT || _la==IDENTIFIER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignPragmaContext : ParserRuleContext {
		public ITerminalNode ALGPRAG() { return GetToken(Z80AsmParser.ALGPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AlignPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAlignPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAlignPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlignPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlignPragmaContext alignPragma() {
		AlignPragmaContext _localctx = new AlignPragmaContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_alignPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493; Match(ALGPRAG);
			State = 495;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DCOLON) | (1L << LPAR) | (1L << LSBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << MULOP) | (1L << TILDE) | (1L << LDBRAC) | (1L << EXCLM) | (1L << DOT))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)))) != 0)) {
				{
				State = 494; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TracePragmaContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TRACE() { return GetToken(Z80AsmParser.TRACE, 0); }
		public ITerminalNode TRACEHEX() { return GetToken(Z80AsmParser.TRACEHEX, 0); }
		public TracePragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tracePragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTracePragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTracePragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTracePragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TracePragmaContext tracePragma() {
		TracePragmaContext _localctx = new TracePragmaContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_tracePragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			_la = _input.La(1);
			if ( !(_la==TRACE || _la==TRACEHEX) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 498; expr(0);
			State = 503;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 499; Match(COMMA);
				State = 500; expr(0);
				}
				}
				State = 505;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RndSeedPragmaContext : ParserRuleContext {
		public ITerminalNode RNDSEED() { return GetToken(Z80AsmParser.RNDSEED, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RndSeedPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rndSeedPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRndSeedPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRndSeedPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRndSeedPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RndSeedPragmaContext rndSeedPragma() {
		RndSeedPragmaContext _localctx = new RndSeedPragmaContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_rndSeedPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506; Match(RNDSEED);
			State = 508;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DCOLON) | (1L << LPAR) | (1L << LSBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << MULOP) | (1L << TILDE) | (1L << LDBRAC) | (1L << EXCLM) | (1L << DOT))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)))) != 0)) {
				{
				State = 507; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefgxPragmaContext : ParserRuleContext {
		public ITerminalNode DGXPRAG() { return GetToken(Z80AsmParser.DGXPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefgxPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defgxPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefgxPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefgxPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefgxPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefgxPragmaContext defgxPragma() {
		DefgxPragmaContext _localctx = new DefgxPragmaContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_defgxPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510; Match(DGXPRAG);
			State = 511; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefgPragmaContext : ParserRuleContext {
		public ITerminalNode DGPRAG() { return GetToken(Z80AsmParser.DGPRAG, 0); }
		public DefgPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defgPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefgPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefgPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefgPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefgPragmaContext defgPragma() {
		DefgPragmaContext _localctx = new DefgPragmaContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_defgPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; Match(DGPRAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorPragmaContext : ParserRuleContext {
		public ITerminalNode ERRORPR() { return GetToken(Z80AsmParser.ERRORPR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ErrorPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterErrorPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitErrorPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorPragmaContext errorPragma() {
		ErrorPragmaContext _localctx = new ErrorPragmaContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_errorPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515; Match(ERRORPR);
			State = 516; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncBinPragmaContext : ParserRuleContext {
		public ITerminalNode INCBIN() { return GetToken(Z80AsmParser.INCBIN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IncBinPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incBinPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIncBinPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIncBinPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncBinPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncBinPragmaContext incBinPragma() {
		IncBinPragmaContext _localctx = new IncBinPragmaContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_incBinPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518; Match(INCBIN);
			State = 519; expr(0);
			State = 526;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 520; Match(COMMA);
				State = 521; expr(0);
				State = 524;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 522; Match(COMMA);
					State = 523; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareBinPragmaContext : ParserRuleContext {
		public ITerminalNode COMPAREBIN() { return GetToken(Z80AsmParser.COMPAREBIN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CompareBinPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareBinPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCompareBinPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCompareBinPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareBinPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareBinPragmaContext compareBinPragma() {
		CompareBinPragmaContext _localctx = new CompareBinPragmaContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_compareBinPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528; Match(COMPAREBIN);
			State = 529; expr(0);
			State = 536;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 530; Match(COMMA);
				State = 531; expr(0);
				State = 534;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 532; Match(COMMA);
					State = 533; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZxBasicPragmaContext : ParserRuleContext {
		public ITerminalNode ZXBPRAG() { return GetToken(Z80AsmParser.ZXBPRAG, 0); }
		public ZxBasicPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxBasicPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterZxBasicPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitZxBasicPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxBasicPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZxBasicPragmaContext zxBasicPragma() {
		ZxBasicPragmaContext _localctx = new ZxBasicPragmaContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_zxBasicPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538; Match(ZXBPRAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InjectOptPragmaContext : ParserRuleContext {
		public ITerminalNode IOPTPRAG() { return GetToken(Z80AsmParser.IOPTPRAG, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public InjectOptPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_injectOptPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterInjectOptPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitInjectOptPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInjectOptPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InjectOptPragmaContext injectOptPragma() {
		InjectOptPragmaContext _localctx = new InjectOptPragmaContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_injectOptPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540; Match(IOPTPRAG);
			State = 541; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ByteEmPragmaContext : ParserRuleContext {
		public DefbPragmaContext defbPragma() {
			return GetRuleContext<DefbPragmaContext>(0);
		}
		public DefwPragmaContext defwPragma() {
			return GetRuleContext<DefwPragmaContext>(0);
		}
		public DefcPragmaContext defcPragma() {
			return GetRuleContext<DefcPragmaContext>(0);
		}
		public DefmPragmaContext defmPragma() {
			return GetRuleContext<DefmPragmaContext>(0);
		}
		public DefnPragmaContext defnPragma() {
			return GetRuleContext<DefnPragmaContext>(0);
		}
		public DefhPragmaContext defhPragma() {
			return GetRuleContext<DefhPragmaContext>(0);
		}
		public DefsPragmaContext defsPragma() {
			return GetRuleContext<DefsPragmaContext>(0);
		}
		public FillbPragmaContext fillbPragma() {
			return GetRuleContext<FillbPragmaContext>(0);
		}
		public FillwPragmaContext fillwPragma() {
			return GetRuleContext<FillwPragmaContext>(0);
		}
		public DefgxPragmaContext defgxPragma() {
			return GetRuleContext<DefgxPragmaContext>(0);
		}
		public DefgPragmaContext defgPragma() {
			return GetRuleContext<DefgPragmaContext>(0);
		}
		public ByteEmPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byteEmPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterByteEmPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitByteEmPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByteEmPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ByteEmPragmaContext byteEmPragma() {
		ByteEmPragmaContext _localctx = new ByteEmPragmaContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_byteEmPragma);
		try {
			State = 554;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DBPRAG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543; defbPragma();
				}
				break;
			case DWPRAG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544; defwPragma();
				}
				break;
			case DCPRAG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 545; defcPragma();
				}
				break;
			case DMPRAG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 546; defmPragma();
				}
				break;
			case DNPRAG:
				EnterOuterAlt(_localctx, 5);
				{
				State = 547; defnPragma();
				}
				break;
			case DHPRAG:
				EnterOuterAlt(_localctx, 6);
				{
				State = 548; defhPragma();
				}
				break;
			case DSPRAG:
				EnterOuterAlt(_localctx, 7);
				{
				State = 549; defsPragma();
				}
				break;
			case FBPRAG:
				EnterOuterAlt(_localctx, 8);
				{
				State = 550; fillbPragma();
				}
				break;
			case FWPRAG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 551; fillwPragma();
				}
				break;
			case DGXPRAG:
				EnterOuterAlt(_localctx, 10);
				{
				State = 552; defgxPragma();
				}
				break;
			case DGPRAG:
				EnterOuterAlt(_localctx, 11);
				{
				State = 553; defgPragma();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public TrivialOperationContext trivialOperation() {
			return GetRuleContext<TrivialOperationContext>(0);
		}
		public CompoundOperationContext compoundOperation() {
			return GetRuleContext<CompoundOperationContext>(0);
		}
		public TrivialNextOperationContext trivialNextOperation() {
			return GetRuleContext<TrivialNextOperationContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_operation);
		try {
			State = 559;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NOP:
			case RLCA:
			case RRCA:
			case RLA:
			case RRA:
			case DAA:
			case CPL:
			case SCF:
			case CCF:
			case HALT:
			case EXX:
			case DI:
			case EI:
			case NEG:
			case RETN:
			case RETI:
			case RLD:
			case RRD:
			case LDI:
			case CPI:
			case INI:
			case OUTI:
			case LDD:
			case CPD:
			case IND:
			case OUTD:
			case LDIR:
			case CPIR:
			case INIR:
			case OTIR:
			case LDDR:
			case CPDR:
			case INDR:
			case OTDR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 556; trivialOperation();
				}
				break;
			case RET:
			case LD:
			case INC:
			case DEC:
			case EX:
			case ADD:
			case ADC:
			case SUB:
			case SBC:
			case AND:
			case XOR:
			case OR:
			case CP:
			case DJNZ:
			case JR:
			case JP:
			case CALL:
			case RST:
			case PUSH:
			case POP:
			case IN:
			case OUT:
			case IM:
			case RLC:
			case RRC:
			case RL:
			case RR:
			case SLA:
			case SRA:
			case SLL:
			case SRL:
			case BIT:
			case RES:
			case SET:
			case MIRROR:
			case TEST:
			case NEXTREG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 557; compoundOperation();
				}
				break;
			case SWAPNIB:
			case MUL:
			case OUTINB:
			case LDIX:
			case LDIRX:
			case LDDX:
			case LDDRX:
			case PIXELDN:
			case PIXELAD:
			case SETAE:
			case LDPIRX:
			case LDIRSCALE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 558; trivialNextOperation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrivialOperationContext : ParserRuleContext {
		public ITerminalNode NOP() { return GetToken(Z80AsmParser.NOP, 0); }
		public ITerminalNode RLCA() { return GetToken(Z80AsmParser.RLCA, 0); }
		public ITerminalNode RRCA() { return GetToken(Z80AsmParser.RRCA, 0); }
		public ITerminalNode RLA() { return GetToken(Z80AsmParser.RLA, 0); }
		public ITerminalNode RRA() { return GetToken(Z80AsmParser.RRA, 0); }
		public ITerminalNode DAA() { return GetToken(Z80AsmParser.DAA, 0); }
		public ITerminalNode CPL() { return GetToken(Z80AsmParser.CPL, 0); }
		public ITerminalNode SCF() { return GetToken(Z80AsmParser.SCF, 0); }
		public ITerminalNode CCF() { return GetToken(Z80AsmParser.CCF, 0); }
		public ITerminalNode HALT() { return GetToken(Z80AsmParser.HALT, 0); }
		public ITerminalNode EXX() { return GetToken(Z80AsmParser.EXX, 0); }
		public ITerminalNode DI() { return GetToken(Z80AsmParser.DI, 0); }
		public ITerminalNode EI() { return GetToken(Z80AsmParser.EI, 0); }
		public ITerminalNode NEG() { return GetToken(Z80AsmParser.NEG, 0); }
		public ITerminalNode RETN() { return GetToken(Z80AsmParser.RETN, 0); }
		public ITerminalNode RETI() { return GetToken(Z80AsmParser.RETI, 0); }
		public ITerminalNode RLD() { return GetToken(Z80AsmParser.RLD, 0); }
		public ITerminalNode RRD() { return GetToken(Z80AsmParser.RRD, 0); }
		public ITerminalNode LDI() { return GetToken(Z80AsmParser.LDI, 0); }
		public ITerminalNode CPI() { return GetToken(Z80AsmParser.CPI, 0); }
		public ITerminalNode INI() { return GetToken(Z80AsmParser.INI, 0); }
		public ITerminalNode OUTI() { return GetToken(Z80AsmParser.OUTI, 0); }
		public ITerminalNode LDD() { return GetToken(Z80AsmParser.LDD, 0); }
		public ITerminalNode CPD() { return GetToken(Z80AsmParser.CPD, 0); }
		public ITerminalNode IND() { return GetToken(Z80AsmParser.IND, 0); }
		public ITerminalNode OUTD() { return GetToken(Z80AsmParser.OUTD, 0); }
		public ITerminalNode LDIR() { return GetToken(Z80AsmParser.LDIR, 0); }
		public ITerminalNode CPIR() { return GetToken(Z80AsmParser.CPIR, 0); }
		public ITerminalNode INIR() { return GetToken(Z80AsmParser.INIR, 0); }
		public ITerminalNode OTIR() { return GetToken(Z80AsmParser.OTIR, 0); }
		public ITerminalNode LDDR() { return GetToken(Z80AsmParser.LDDR, 0); }
		public ITerminalNode CPDR() { return GetToken(Z80AsmParser.CPDR, 0); }
		public ITerminalNode INDR() { return GetToken(Z80AsmParser.INDR, 0); }
		public ITerminalNode OTDR() { return GetToken(Z80AsmParser.OTDR, 0); }
		public TrivialOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trivialOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTrivialOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTrivialOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrivialOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrivialOperationContext trivialOperation() {
		TrivialOperationContext _localctx = new TrivialOperationContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_trivialOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			_la = _input.La(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (NOP - 70)) | (1L << (RLCA - 70)) | (1L << (RRCA - 70)) | (1L << (RLA - 70)) | (1L << (RRA - 70)) | (1L << (DAA - 70)) | (1L << (CPL - 70)) | (1L << (SCF - 70)) | (1L << (CCF - 70)) | (1L << (HALT - 70)) | (1L << (EXX - 70)) | (1L << (DI - 70)) | (1L << (EI - 70)) | (1L << (NEG - 70)) | (1L << (RETN - 70)) | (1L << (RETI - 70)) | (1L << (RLD - 70)) | (1L << (RRD - 70)) | (1L << (LDI - 70)) | (1L << (CPI - 70)) | (1L << (INI - 70)) | (1L << (OUTI - 70)) | (1L << (LDD - 70)) | (1L << (CPD - 70)) | (1L << (IND - 70)) | (1L << (OUTD - 70)) | (1L << (LDIR - 70)) | (1L << (CPIR - 70)) | (1L << (INIR - 70)) | (1L << (OTIR - 70)) | (1L << (LDDR - 70)) | (1L << (CPDR - 70)) | (1L << (INDR - 70)) | (1L << (OTDR - 70)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundOperationContext : ParserRuleContext {
		public ITerminalNode LD() { return GetToken(Z80AsmParser.LD, 0); }
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public ITerminalNode INC() { return GetToken(Z80AsmParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(Z80AsmParser.DEC, 0); }
		public ITerminalNode EX() { return GetToken(Z80AsmParser.EX, 0); }
		public ITerminalNode ADD() { return GetToken(Z80AsmParser.ADD, 0); }
		public ITerminalNode ADC() { return GetToken(Z80AsmParser.ADC, 0); }
		public ITerminalNode SUB() { return GetToken(Z80AsmParser.SUB, 0); }
		public ITerminalNode SBC() { return GetToken(Z80AsmParser.SBC, 0); }
		public ITerminalNode AND() { return GetToken(Z80AsmParser.AND, 0); }
		public ITerminalNode XOR() { return GetToken(Z80AsmParser.XOR, 0); }
		public ITerminalNode OR() { return GetToken(Z80AsmParser.OR, 0); }
		public ITerminalNode CP() { return GetToken(Z80AsmParser.CP, 0); }
		public ITerminalNode DJNZ() { return GetToken(Z80AsmParser.DJNZ, 0); }
		public ITerminalNode JR() { return GetToken(Z80AsmParser.JR, 0); }
		public ITerminalNode JP() { return GetToken(Z80AsmParser.JP, 0); }
		public ITerminalNode CALL() { return GetToken(Z80AsmParser.CALL, 0); }
		public ITerminalNode RET() { return GetToken(Z80AsmParser.RET, 0); }
		public ITerminalNode RST() { return GetToken(Z80AsmParser.RST, 0); }
		public ITerminalNode PUSH() { return GetToken(Z80AsmParser.PUSH, 0); }
		public ITerminalNode POP() { return GetToken(Z80AsmParser.POP, 0); }
		public ITerminalNode IN() { return GetToken(Z80AsmParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(Z80AsmParser.OUT, 0); }
		public ITerminalNode IM() { return GetToken(Z80AsmParser.IM, 0); }
		public ITerminalNode RLC() { return GetToken(Z80AsmParser.RLC, 0); }
		public ITerminalNode RRC() { return GetToken(Z80AsmParser.RRC, 0); }
		public ITerminalNode RL() { return GetToken(Z80AsmParser.RL, 0); }
		public ITerminalNode RR() { return GetToken(Z80AsmParser.RR, 0); }
		public ITerminalNode SLA() { return GetToken(Z80AsmParser.SLA, 0); }
		public ITerminalNode SRA() { return GetToken(Z80AsmParser.SRA, 0); }
		public ITerminalNode SLL() { return GetToken(Z80AsmParser.SLL, 0); }
		public ITerminalNode SRL() { return GetToken(Z80AsmParser.SRL, 0); }
		public ITerminalNode BIT() { return GetToken(Z80AsmParser.BIT, 0); }
		public ITerminalNode RES() { return GetToken(Z80AsmParser.RES, 0); }
		public ITerminalNode SET() { return GetToken(Z80AsmParser.SET, 0); }
		public ITerminalNode MIRROR() { return GetToken(Z80AsmParser.MIRROR, 0); }
		public ITerminalNode TEST() { return GetToken(Z80AsmParser.TEST, 0); }
		public ITerminalNode NEXTREG() { return GetToken(Z80AsmParser.NEXTREG, 0); }
		public CompoundOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCompoundOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCompoundOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundOperationContext compoundOperation() {
		CompoundOperationContext _localctx = new CompoundOperationContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_compoundOperation);
		int _la;
		try {
			State = 766;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 563; Match(LD);
				State = 564; operand();
				State = 565; Match(COMMA);
				State = 566; operand();
				}
				break;
			case INC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 568; Match(INC);
				State = 569; operand();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 570; Match(DEC);
				State = 571; operand();
				}
				break;
			case EX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 572; Match(EX);
				State = 573; operand();
				State = 574; Match(COMMA);
				State = 575; operand();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 577; Match(ADD);
				State = 578; operand();
				State = 579; Match(COMMA);
				State = 580; operand();
				}
				break;
			case ADC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 582; Match(ADC);
				State = 583; operand();
				State = 584; Match(COMMA);
				State = 585; operand();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 7);
				{
				State = 587; Match(SUB);
				State = 591;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					State = 588; operand();
					State = 589; Match(COMMA);
					}
					break;
				}
				State = 593; operand();
				}
				break;
			case SBC:
				EnterOuterAlt(_localctx, 8);
				{
				State = 594; Match(SBC);
				State = 595; operand();
				State = 596; Match(COMMA);
				State = 597; operand();
				}
				break;
			case AND:
				EnterOuterAlt(_localctx, 9);
				{
				State = 599; Match(AND);
				State = 603;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					State = 600; operand();
					State = 601; Match(COMMA);
					}
					break;
				}
				State = 605; operand();
				}
				break;
			case XOR:
				EnterOuterAlt(_localctx, 10);
				{
				State = 606; Match(XOR);
				State = 610;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					State = 607; operand();
					State = 608; Match(COMMA);
					}
					break;
				}
				State = 612; operand();
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 11);
				{
				State = 613; Match(OR);
				State = 617;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					State = 614; operand();
					State = 615; Match(COMMA);
					}
					break;
				}
				State = 619; operand();
				}
				break;
			case CP:
				EnterOuterAlt(_localctx, 12);
				{
				State = 620; Match(CP);
				State = 624;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					State = 621; operand();
					State = 622; Match(COMMA);
					}
					break;
				}
				State = 626; operand();
				}
				break;
			case DJNZ:
				EnterOuterAlt(_localctx, 13);
				{
				State = 627; Match(DJNZ);
				State = 628; operand();
				}
				break;
			case JR:
				EnterOuterAlt(_localctx, 14);
				{
				State = 629; Match(JR);
				State = 633;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					State = 630; operand();
					State = 631; Match(COMMA);
					}
					break;
				}
				State = 635; operand();
				}
				break;
			case JP:
				EnterOuterAlt(_localctx, 15);
				{
				State = 636; Match(JP);
				State = 640;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					State = 637; operand();
					State = 638; Match(COMMA);
					}
					break;
				}
				State = 642; operand();
				}
				break;
			case CALL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 643; Match(CALL);
				State = 647;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					State = 644; operand();
					State = 645; Match(COMMA);
					}
					break;
				}
				State = 649; operand();
				}
				break;
			case RET:
				EnterOuterAlt(_localctx, 17);
				{
				State = 650; Match(RET);
				State = 652;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 651; operand();
					}
				}

				}
				break;
			case RST:
				EnterOuterAlt(_localctx, 18);
				{
				State = 654; Match(RST);
				State = 655; operand();
				}
				break;
			case PUSH:
				EnterOuterAlt(_localctx, 19);
				{
				State = 656; Match(PUSH);
				State = 657; operand();
				}
				break;
			case POP:
				EnterOuterAlt(_localctx, 20);
				{
				State = 658; Match(POP);
				State = 659; operand();
				}
				break;
			case IN:
				EnterOuterAlt(_localctx, 21);
				{
				State = 660; Match(IN);
				State = 664;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					State = 661; operand();
					State = 662; Match(COMMA);
					}
					break;
				}
				State = 666; operand();
				}
				break;
			case OUT:
				EnterOuterAlt(_localctx, 22);
				{
				State = 667; Match(OUT);
				State = 671;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					State = 668; operand();
					State = 669; Match(COMMA);
					}
					break;
				}
				State = 673; operand();
				}
				break;
			case IM:
				EnterOuterAlt(_localctx, 23);
				{
				State = 674; Match(IM);
				State = 675; operand();
				}
				break;
			case RLC:
				EnterOuterAlt(_localctx, 24);
				{
				State = 676; Match(RLC);
				State = 680;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					State = 677; operand();
					State = 678; Match(COMMA);
					}
					break;
				}
				State = 682; operand();
				}
				break;
			case RRC:
				EnterOuterAlt(_localctx, 25);
				{
				State = 683; Match(RRC);
				State = 687;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
				case 1:
					{
					State = 684; operand();
					State = 685; Match(COMMA);
					}
					break;
				}
				State = 689; operand();
				}
				break;
			case RL:
				EnterOuterAlt(_localctx, 26);
				{
				State = 690; Match(RL);
				State = 694;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
				case 1:
					{
					State = 691; operand();
					State = 692; Match(COMMA);
					}
					break;
				}
				State = 696; operand();
				}
				break;
			case RR:
				EnterOuterAlt(_localctx, 27);
				{
				State = 697; Match(RR);
				State = 701;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					State = 698; operand();
					State = 699; Match(COMMA);
					}
					break;
				}
				State = 703; operand();
				}
				break;
			case SLA:
				EnterOuterAlt(_localctx, 28);
				{
				State = 704; Match(SLA);
				State = 708;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					State = 705; operand();
					State = 706; Match(COMMA);
					}
					break;
				}
				State = 710; operand();
				}
				break;
			case SRA:
				EnterOuterAlt(_localctx, 29);
				{
				State = 711; Match(SRA);
				State = 715;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
				case 1:
					{
					State = 712; operand();
					State = 713; Match(COMMA);
					}
					break;
				}
				State = 717; operand();
				}
				break;
			case SLL:
				EnterOuterAlt(_localctx, 30);
				{
				State = 718; Match(SLL);
				State = 722;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					State = 719; operand();
					State = 720; Match(COMMA);
					}
					break;
				}
				State = 724; operand();
				}
				break;
			case SRL:
				EnterOuterAlt(_localctx, 31);
				{
				State = 725; Match(SRL);
				State = 729;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					State = 726; operand();
					State = 727; Match(COMMA);
					}
					break;
				}
				State = 731; operand();
				}
				break;
			case BIT:
				EnterOuterAlt(_localctx, 32);
				{
				State = 732; Match(BIT);
				State = 733; operand();
				State = 734; Match(COMMA);
				State = 735; operand();
				}
				break;
			case RES:
				EnterOuterAlt(_localctx, 33);
				{
				State = 737; Match(RES);
				State = 738; operand();
				State = 739; Match(COMMA);
				State = 743;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
				case 1:
					{
					State = 740; operand();
					State = 741; Match(COMMA);
					}
					break;
				}
				State = 745; operand();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 34);
				{
				State = 747; Match(SET);
				State = 748; operand();
				State = 749; Match(COMMA);
				State = 753;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					State = 750; operand();
					State = 751; Match(COMMA);
					}
					break;
				}
				State = 755; operand();
				}
				break;
			case MIRROR:
				EnterOuterAlt(_localctx, 35);
				{
				State = 757; Match(MIRROR);
				State = 758; operand();
				}
				break;
			case TEST:
				EnterOuterAlt(_localctx, 36);
				{
				State = 759; Match(TEST);
				State = 760; operand();
				}
				break;
			case NEXTREG:
				EnterOuterAlt(_localctx, 37);
				{
				State = 761; Match(NEXTREG);
				State = 762; operand();
				State = 763; Match(COMMA);
				State = 764; operand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrivialNextOperationContext : ParserRuleContext {
		public ITerminalNode SWAPNIB() { return GetToken(Z80AsmParser.SWAPNIB, 0); }
		public ITerminalNode MUL() { return GetToken(Z80AsmParser.MUL, 0); }
		public ITerminalNode OUTINB() { return GetToken(Z80AsmParser.OUTINB, 0); }
		public ITerminalNode LDIX() { return GetToken(Z80AsmParser.LDIX, 0); }
		public ITerminalNode LDIRX() { return GetToken(Z80AsmParser.LDIRX, 0); }
		public ITerminalNode LDDX() { return GetToken(Z80AsmParser.LDDX, 0); }
		public ITerminalNode LDDRX() { return GetToken(Z80AsmParser.LDDRX, 0); }
		public ITerminalNode PIXELDN() { return GetToken(Z80AsmParser.PIXELDN, 0); }
		public ITerminalNode PIXELAD() { return GetToken(Z80AsmParser.PIXELAD, 0); }
		public ITerminalNode SETAE() { return GetToken(Z80AsmParser.SETAE, 0); }
		public ITerminalNode LDPIRX() { return GetToken(Z80AsmParser.LDPIRX, 0); }
		public ITerminalNode LDIRSCALE() { return GetToken(Z80AsmParser.LDIRSCALE, 0); }
		public TrivialNextOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trivialNextOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTrivialNextOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTrivialNextOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrivialNextOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrivialNextOperationContext trivialNextOperation() {
		TrivialNextOperationContext _localctx = new TrivialNextOperationContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_trivialNextOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			_la = _input.La(1);
			if ( !(((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (SWAPNIB - 138)) | (1L << (MUL - 138)) | (1L << (OUTINB - 138)) | (1L << (LDIX - 138)) | (1L << (LDIRX - 138)) | (1L << (LDDX - 138)) | (1L << (LDDRX - 138)) | (1L << (PIXELDN - 138)) | (1L << (PIXELAD - 138)) | (1L << (SETAE - 138)) | (1L << (LDPIRX - 138)) | (1L << (LDIRSCALE - 138)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public Reg8Context reg8() {
			return GetRuleContext<Reg8Context>(0);
		}
		public Reg8IdxContext reg8Idx() {
			return GetRuleContext<Reg8IdxContext>(0);
		}
		public Reg8SpecContext reg8Spec() {
			return GetRuleContext<Reg8SpecContext>(0);
		}
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public Reg16SpecContext reg16Spec() {
			return GetRuleContext<Reg16SpecContext>(0);
		}
		public RegIndirectContext regIndirect() {
			return GetRuleContext<RegIndirectContext>(0);
		}
		public CPortContext cPort() {
			return GetRuleContext<CPortContext>(0);
		}
		public MemIndirectContext memIndirect() {
			return GetRuleContext<MemIndirectContext>(0);
		}
		public IndexedAddrContext indexedAddr() {
			return GetRuleContext<IndexedAddrContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode HREG() { return GetToken(Z80AsmParser.HREG, 0); }
		public ITerminalNode LREG() { return GetToken(Z80AsmParser.LREG, 0); }
		public Reg16StdContext reg16Std() {
			return GetRuleContext<Reg16StdContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public ITerminalNode NONEARG() { return GetToken(Z80AsmParser.NONEARG, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_operand);
		int _la;
		try {
			State = 791;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 770; reg8();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 771; reg8Idx();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 772; reg8Spec();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 773; reg16();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 774; reg16Idx();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 775; reg16Spec();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 776; regIndirect();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 777; cPort();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 778; memIndirect();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 779; indexedAddr();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 780; expr(0);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 781; condition();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 782;
				_la = _input.La(1);
				if ( !(_la==HREG || _la==LREG) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 783; Match(LPAR);
				State = 786;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case BC:
				case DE:
				case HL:
				case IX:
				case IY:
					{
					State = 784; reg16Std();
					}
					break;
				case LDBRAC:
					{
					State = 785; macroParam();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 788; Match(RPAR);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 790; Match(NONEARG);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8Context : ParserRuleContext {
		public ITerminalNode A() { return GetToken(Z80AsmParser.A, 0); }
		public ITerminalNode B() { return GetToken(Z80AsmParser.B, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode D() { return GetToken(Z80AsmParser.D, 0); }
		public ITerminalNode E() { return GetToken(Z80AsmParser.E, 0); }
		public ITerminalNode H() { return GetToken(Z80AsmParser.H, 0); }
		public ITerminalNode L() { return GetToken(Z80AsmParser.L, 0); }
		public Reg8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8Context reg8() {
		Reg8Context _localctx = new Reg8Context(_ctx, State);
		EnterRule(_localctx, 134, RULE_reg8);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A) | (1L << B) | (1L << C) | (1L << D) | (1L << E) | (1L << H) | (1L << L))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8IdxContext : ParserRuleContext {
		public ITerminalNode XL() { return GetToken(Z80AsmParser.XL, 0); }
		public ITerminalNode XH() { return GetToken(Z80AsmParser.XH, 0); }
		public ITerminalNode YL() { return GetToken(Z80AsmParser.YL, 0); }
		public ITerminalNode YH() { return GetToken(Z80AsmParser.YH, 0); }
		public Reg8IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8IdxContext reg8Idx() {
		Reg8IdxContext _localctx = new Reg8IdxContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_reg8Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << XL) | (1L << XH) | (1L << YL) | (1L << YH))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8SpecContext : ParserRuleContext {
		public ITerminalNode I() { return GetToken(Z80AsmParser.I, 0); }
		public ITerminalNode R() { return GetToken(Z80AsmParser.R, 0); }
		public Reg8SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8SpecContext reg8Spec() {
		Reg8SpecContext _localctx = new Reg8SpecContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_reg8Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			_la = _input.La(1);
			if ( !(_la==I || _la==R) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16Context : ParserRuleContext {
		public ITerminalNode BC() { return GetToken(Z80AsmParser.BC, 0); }
		public ITerminalNode DE() { return GetToken(Z80AsmParser.DE, 0); }
		public ITerminalNode HL() { return GetToken(Z80AsmParser.HL, 0); }
		public ITerminalNode SP() { return GetToken(Z80AsmParser.SP, 0); }
		public Reg16Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16Context reg16() {
		Reg16Context _localctx = new Reg16Context(_ctx, State);
		EnterRule(_localctx, 140, RULE_reg16);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BC) | (1L << DE) | (1L << HL) | (1L << SP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16IdxContext : ParserRuleContext {
		public ITerminalNode IX() { return GetToken(Z80AsmParser.IX, 0); }
		public ITerminalNode IY() { return GetToken(Z80AsmParser.IY, 0); }
		public Reg16IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16IdxContext reg16Idx() {
		Reg16IdxContext _localctx = new Reg16IdxContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_reg16Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			_la = _input.La(1);
			if ( !(_la==IX || _la==IY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16StdContext : ParserRuleContext {
		public ITerminalNode BC() { return GetToken(Z80AsmParser.BC, 0); }
		public ITerminalNode DE() { return GetToken(Z80AsmParser.DE, 0); }
		public ITerminalNode HL() { return GetToken(Z80AsmParser.HL, 0); }
		public ITerminalNode IX() { return GetToken(Z80AsmParser.IX, 0); }
		public ITerminalNode IY() { return GetToken(Z80AsmParser.IY, 0); }
		public Reg16StdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Std; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Std(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Std(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Std(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16StdContext reg16Std() {
		Reg16StdContext _localctx = new Reg16StdContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_reg16Std);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BC) | (1L << DE) | (1L << HL) | (1L << IX) | (1L << IY))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16SpecContext : ParserRuleContext {
		public ITerminalNode AF() { return GetToken(Z80AsmParser.AF, 0); }
		public ITerminalNode AF_() { return GetToken(Z80AsmParser.AF_, 0); }
		public Reg16SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16SpecContext reg16Spec() {
		Reg16SpecContext _localctx = new Reg16SpecContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_reg16Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			_la = _input.La(1);
			if ( !(_la==AF || _la==AF_) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegIndirectContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public RegIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRegIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRegIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegIndirectContext regIndirect() {
		RegIndirectContext _localctx = new RegIndirectContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_regIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807; Match(LPAR);
			{
			State = 808; reg16();
			}
			State = 809; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CPortContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public CPortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cPort; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCPort(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCPort(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCPort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CPortContext cPort() {
		CPortContext _localctx = new CPortContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_cPort);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811; Match(LPAR);
			State = 812; Match(C);
			State = 813; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemIndirectContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public MemIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMemIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMemIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemIndirectContext memIndirect() {
		MemIndirectContext _localctx = new MemIndirectContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_memIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815; Match(LPAR);
			State = 816; expr(0);
			State = 817; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexedAddrContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(Z80AsmParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(Z80AsmParser.MINUS, 0); }
		public IndexedAddrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexedAddr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIndexedAddr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIndexedAddr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexedAddr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexedAddrContext indexedAddr() {
		IndexedAddrContext _localctx = new IndexedAddrContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_indexedAddr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819; Match(LPAR);
			State = 820; reg16Idx();
			State = 823;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 821;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 822; expr(0);
				}
			}

			State = 825; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ITerminalNode Z() { return GetToken(Z80AsmParser.Z, 0); }
		public ITerminalNode NZ() { return GetToken(Z80AsmParser.NZ, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode NC() { return GetToken(Z80AsmParser.NC, 0); }
		public ITerminalNode PO() { return GetToken(Z80AsmParser.PO, 0); }
		public ITerminalNode PE() { return GetToken(Z80AsmParser.PE, 0); }
		public ITerminalNode P() { return GetToken(Z80AsmParser.P, 0); }
		public ITerminalNode M() { return GetToken(Z80AsmParser.M, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827;
			_la = _input.La(1);
			if ( !(((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (C - 44)) | (1L << (Z - 44)) | (1L << (NZ - 44)) | (1L << (NC - 44)) | (1L << (PO - 44)) | (1L << (PE - 44)) | (1L << (P - 44)) | (1L << (M - 44)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AMP() { return GetToken(Z80AsmParser.AMP, 0); }
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BuiltInFunctionExprContext : ExprContext {
		public BuiltinFunctionInvocationContext builtinFunctionInvocation() {
			return GetRuleContext<BuiltinFunctionInvocationContext>(0);
		}
		public BuiltInFunctionExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBuiltInFunctionExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBuiltInFunctionExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInFunctionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LTOP() { return GetToken(Z80AsmParser.LTOP, 0); }
		public ITerminalNode LTEOP() { return GetToken(Z80AsmParser.LTEOP, 0); }
		public ITerminalNode GTOP() { return GetToken(Z80AsmParser.GTOP, 0); }
		public ITerminalNode GTEOP() { return GetToken(Z80AsmParser.GTEOP, 0); }
		public RelExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode UPARR() { return GetToken(Z80AsmParser.UPARR, 0); }
		public XorExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterXorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitXorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MULOP() { return GetToken(Z80AsmParser.MULOP, 0); }
		public ITerminalNode DIVOP() { return GetToken(Z80AsmParser.DIVOP, 0); }
		public ITerminalNode MODOP() { return GetToken(Z80AsmParser.MODOP, 0); }
		public ITerminalNode MINOP() { return GetToken(Z80AsmParser.MINOP, 0); }
		public ITerminalNode MAXOP() { return GetToken(Z80AsmParser.MAXOP, 0); }
		public MultExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalNotExprContext : ExprContext {
		public ITerminalNode EXCLM() { return GetToken(Z80AsmParser.EXCLM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LogicalNotExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLogicalNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLogicalNotExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SymbolExprContext : ExprContext {
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public SymbolExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterSymbolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitSymbolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(Z80AsmParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(Z80AsmParser.MINUS, 0); }
		public AddExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinMaxExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MINOP() { return GetToken(Z80AsmParser.MINOP, 0); }
		public ITerminalNode MAXOP() { return GetToken(Z80AsmParser.MAXOP, 0); }
		public MinMaxExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMinMaxExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMinMaxExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinMaxExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionInvocationExprContext : ExprContext {
		public FunctionInvocationContext functionInvocation() {
			return GetRuleContext<FunctionInvocationContext>(0);
		}
		public FunctionInvocationExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFunctionInvocationExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFunctionInvocationExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketedExprContext : ExprContext {
		public ITerminalNode LSBRAC() { return GetToken(Z80AsmParser.LSBRAC, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RSBRAC() { return GetToken(Z80AsmParser.RSBRAC, 0); }
		public BracketedExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBracketedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBracketedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EquExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQOP() { return GetToken(Z80AsmParser.EQOP, 0); }
		public ITerminalNode NEQOP() { return GetToken(Z80AsmParser.NEQOP, 0); }
		public ITerminalNode CIEQOP() { return GetToken(Z80AsmParser.CIEQOP, 0); }
		public ITerminalNode CINEQOP() { return GetToken(Z80AsmParser.CINEQOP, 0); }
		public EquExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEquExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEquExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode VBAR() { return GetToken(Z80AsmParser.VBAR, 0); }
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MacroParamExprContext : ExprContext {
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public MacroParamExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroParamExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroParamExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroParamExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExprContext : ExprContext {
		public ITerminalNode PLUS() { return GetToken(Z80AsmParser.PLUS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryPlusExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterUnaryPlusExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitUnaryPlusExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExprContext : ExprContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ParenthesizedExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LSHOP() { return GetToken(Z80AsmParser.LSHOP, 0); }
		public ITerminalNode RSHOP() { return GetToken(Z80AsmParser.RSHOP, 0); }
		public ShiftExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterShiftExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitShiftExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode QMARK() { return GetToken(Z80AsmParser.QMARK, 0); }
		public ITerminalNode COLON() { return GetToken(Z80AsmParser.COLON, 0); }
		public TernaryExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTernaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTernaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExprContext : ExprContext {
		public ITerminalNode MINUS() { return GetToken(Z80AsmParser.MINUS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryMinusExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryNotExprContext : ExprContext {
		public ITerminalNode TILDE() { return GetToken(Z80AsmParser.TILDE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BinaryNotExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBinaryNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBinaryNotExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 158;
		EnterRecursionRule(_localctx, 158, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 851;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				_localctx = new BuiltInFunctionExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 830; builtinFunctionInvocation();
				}
				break;

			case 2:
				{
				_localctx = new FunctionInvocationExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 831; functionInvocation();
				}
				break;

			case 3:
				{
				_localctx = new MacroParamExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 832; macroParam();
				}
				break;

			case 4:
				{
				_localctx = new UnaryPlusExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 833; Match(PLUS);
				State = 834; expr(18);
				}
				break;

			case 5:
				{
				_localctx = new UnaryMinusExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 835; Match(MINUS);
				State = 836; expr(17);
				}
				break;

			case 6:
				{
				_localctx = new BinaryNotExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 837; Match(TILDE);
				State = 838; expr(16);
				}
				break;

			case 7:
				{
				_localctx = new LogicalNotExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 839; Match(EXCLM);
				State = 840; expr(15);
				}
				break;

			case 8:
				{
				_localctx = new BracketedExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 841; Match(LSBRAC);
				State = 842; expr(0);
				State = 843; Match(RSBRAC);
				}
				break;

			case 9:
				{
				_localctx = new ParenthesizedExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 845; Match(LPAR);
				State = 846; expr(0);
				State = 847; Match(RPAR);
				}
				break;

			case 10:
				{
				_localctx = new LiteralExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 849; literal();
				}
				break;

			case 11:
				{
				_localctx = new SymbolExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 850; symbol();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 888;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,67,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 886;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
					case 1:
						{
						_localctx = new MinMaxExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 853;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 854;
						((MinMaxExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MINOP || _la==MAXOP) ) {
							((MinMaxExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 855; expr(11);
						}
						break;

					case 2:
						{
						_localctx = new MultExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 856;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 857;
						((MultExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULOP) | (1L << DIVOP) | (1L << MODOP) | (1L << MINOP) | (1L << MAXOP))) != 0)) ) {
							((MultExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 858; expr(10);
						}
						break;

					case 3:
						{
						_localctx = new AddExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 859;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 860;
						((AddExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 861; expr(9);
						}
						break;

					case 4:
						{
						_localctx = new ShiftExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 862;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 863;
						((ShiftExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==LSHOP || _la==RSHOP) ) {
							((ShiftExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 864; expr(8);
						}
						break;

					case 5:
						{
						_localctx = new RelExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 865;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 866;
						((RelExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP))) != 0)) ) {
							((RelExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 867; expr(7);
						}
						break;

					case 6:
						{
						_localctx = new EquExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 868;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 869;
						((EquExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQOP) | (1L << CIEQOP) | (1L << NEQOP) | (1L << CINEQOP))) != 0)) ) {
							((EquExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 870; expr(6);
						}
						break;

					case 7:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 871;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 872; Match(AMP);
						State = 873; expr(5);
						}
						break;

					case 8:
						{
						_localctx = new XorExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 874;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 875; Match(UPARR);
						State = 876; expr(4);
						}
						break;

					case 9:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 877;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 878; Match(VBAR);
						State = 879; expr(3);
						}
						break;

					case 10:
						{
						_localctx = new TernaryExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 880;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 881; Match(QMARK);
						State = 882; expr(0);
						State = 883; Match(COLON);
						State = 884; expr(2);
						}
						break;
					}
					} 
				}
				State = 890;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,67,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionInvocationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public FunctionInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFunctionInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFunctionInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionInvocationContext functionInvocation() {
		FunctionInvocationContext _localctx = new FunctionInvocationContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_functionInvocation);
		int _la;
		try {
			State = 906;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 891; Match(IDENTIFIER);
				State = 892; Match(LPAR);
				State = 893; Match(RPAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 894; Match(IDENTIFIER);
				State = 895; Match(LPAR);
				State = 896; expr(0);
				State = 901;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 897; Match(COMMA);
					State = 898; expr(0);
					}
					}
					State = 903;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 904; Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinFunctionInvocationContext : ParserRuleContext {
		public BuiltinFunctionInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinFunctionInvocation; } }
	 
		public BuiltinFunctionInvocationContext() { }
		public virtual void CopyFrom(BuiltinFunctionInvocationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsConditionInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISCONDITION() { return GetToken(Z80AsmParser.ISCONDITION, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsConditionInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsConditionInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsConditionInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsConditionInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegBInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGB() { return GetToken(Z80AsmParser.ISREGB, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegBInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegBInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegBInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegBInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsReg16InvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREG16() { return GetToken(Z80AsmParser.ISREG16, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsReg16InvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsReg16Invoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsReg16Invoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsReg16Invoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsReg16StdInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREG16STD() { return GetToken(Z80AsmParser.ISREG16STD, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsReg16StdInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsReg16StdInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsReg16StdInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsReg16StdInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsIndexedAddrInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISINDEXEDADDR() { return GetToken(Z80AsmParser.ISINDEXEDADDR, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsIndexedAddrInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsIndexedAddrInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsIndexedAddrInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsIndexedAddrInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsReg8StdSpecInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREG8SPEC() { return GetToken(Z80AsmParser.ISREG8SPEC, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsReg8StdSpecInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsReg8StdSpecInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsReg8StdSpecInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsReg8StdSpecInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegLInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGL() { return GetToken(Z80AsmParser.ISREGL, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegLInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegLInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegLInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegLInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsCportInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISCPORT() { return GetToken(Z80AsmParser.ISCPORT, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsCportInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsCportInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsCportInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCportInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegBCInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGBC() { return GetToken(Z80AsmParser.ISREGBC, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegBCInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegBCInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegBCInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegBCInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsReg8InvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREG8() { return GetToken(Z80AsmParser.ISREG8, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsReg8InvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsReg8Invoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsReg8Invoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsReg8Invoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsExprInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISEXPR() { return GetToken(Z80AsmParser.ISEXPR, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsExprInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsExprInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsExprInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsExprInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsReg16IdxInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREG16IDX() { return GetToken(Z80AsmParser.ISREG16IDX, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsReg16IdxInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsReg16IdxInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsReg16IdxInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsReg16IdxInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsReg8StdInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREG8STD() { return GetToken(Z80AsmParser.ISREG8STD, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsReg8StdInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsReg8StdInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsReg8StdInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsReg8StdInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegRInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGR() { return GetToken(Z80AsmParser.ISREGR, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegRInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegRInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegRInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegRInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegEInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGE() { return GetToken(Z80AsmParser.ISREGE, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegEInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegEInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegEInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegEInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegXHInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGXH() { return GetToken(Z80AsmParser.ISREGXH, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegXHInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegXHInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegXHInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegXHInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextOfInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode TEXTOF() { return GetToken(Z80AsmParser.TEXTOF, 0); }
		public ITerminalNode LTEXTOF() { return GetToken(Z80AsmParser.LTEXTOF, 0); }
		public MnemonicContext mnemonic() {
			return GetRuleContext<MnemonicContext>(0);
		}
		public RegsAndCondsContext regsAndConds() {
			return GetRuleContext<RegsAndCondsContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public TextOfInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTextOfInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTextOfInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextOfInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegYHInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGYH() { return GetToken(Z80AsmParser.ISREGYH, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegYHInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegYHInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegYHInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegYHInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegAInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGA() { return GetToken(Z80AsmParser.ISREGA, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegAInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegAInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegAInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegAInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegDEInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGDE() { return GetToken(Z80AsmParser.ISREGDE, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegDEInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegDEInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegDEInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegDEInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegSPInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGSP() { return GetToken(Z80AsmParser.ISREGSP, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegSPInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegSPInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegSPInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegSPInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode DEF() { return GetToken(Z80AsmParser.DEF, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public DefInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegAfInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGAF() { return GetToken(Z80AsmParser.ISREGAF, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegAfInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegAfInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegAfInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegAfInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegCInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGC() { return GetToken(Z80AsmParser.ISREGC, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegCInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegCInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegCInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegCInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegHInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGH() { return GetToken(Z80AsmParser.ISREGH, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegHInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegHInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegHInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegHInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegIXInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGIX() { return GetToken(Z80AsmParser.ISREGIX, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegIXInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegIXInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegIXInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegIXInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegDInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGD() { return GetToken(Z80AsmParser.ISREGD, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegDInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegDInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegDInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegDInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegYLInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGYL() { return GetToken(Z80AsmParser.ISREGYL, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegYLInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegYLInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegYLInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegYLInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegXLInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGXL() { return GetToken(Z80AsmParser.ISREGXL, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegXLInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegXLInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegXLInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegXLInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsReg8IdxInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREG8IDX() { return GetToken(Z80AsmParser.ISREG8IDX, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsReg8IdxInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsReg8IdxInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsReg8IdxInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsReg8IdxInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegHLInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGHL() { return GetToken(Z80AsmParser.ISREGHL, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegHLInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegHLInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegHLInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegHLInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegIInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGI() { return GetToken(Z80AsmParser.ISREGI, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegIInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegIInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegIInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegIInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegIYInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGIY() { return GetToken(Z80AsmParser.ISREGIY, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegIYInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegIYInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegIYInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegIYInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegIndirectInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGINDIRECT() { return GetToken(Z80AsmParser.ISREGINDIRECT, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegIndirectInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegIndirectInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegIndirectInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegIndirectInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltinFunctionInvocationContext builtinFunctionInvocation() {
		BuiltinFunctionInvocationContext _localctx = new BuiltinFunctionInvocationContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_builtinFunctionInvocation);
		int _la;
		try {
			State = 1115;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TEXTOF:
			case LTEXTOF:
				_localctx = new TextOfInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 908;
				_la = _input.La(1);
				if ( !(_la==TEXTOF || _la==LTEXTOF) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 909; Match(LPAR);
				State = 913;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case NOP:
				case RLCA:
				case RRCA:
				case RLA:
				case RRA:
				case DAA:
				case CPL:
				case SCF:
				case CCF:
				case HALT:
				case RET:
				case EXX:
				case DI:
				case EI:
				case NEG:
				case RETN:
				case RETI:
				case RLD:
				case RRD:
				case LDI:
				case CPI:
				case INI:
				case OUTI:
				case LDD:
				case CPD:
				case IND:
				case OUTD:
				case LDIR:
				case CPIR:
				case INIR:
				case OTIR:
				case LDDR:
				case CPDR:
				case INDR:
				case OTDR:
				case LD:
				case INC:
				case DEC:
				case EX:
				case ADD:
				case ADC:
				case SUB:
				case SBC:
				case AND:
				case XOR:
				case OR:
				case CP:
				case DJNZ:
				case JR:
				case JP:
				case CALL:
				case RST:
				case PUSH:
				case POP:
				case IN:
				case OUT:
				case IM:
				case RLC:
				case RRC:
				case RL:
				case RR:
				case SLA:
				case SRA:
				case SLL:
				case SRL:
				case BIT:
				case RES:
				case SET:
				case SWAPNIB:
				case MUL:
				case POPX:
				case MIRROR:
				case TEST:
				case NEXTREG:
				case OUTINB:
				case LDIX:
				case LDIRX:
				case LDDX:
				case LDDRX:
				case PIXELDN:
				case PIXELAD:
				case SETAE:
				case LDPIRX:
					{
					State = 910; mnemonic();
					}
					break;
				case LPAR:
				case A:
				case B:
				case C:
				case D:
				case E:
				case H:
				case L:
				case I:
				case R:
				case XL:
				case XH:
				case YL:
				case YH:
				case BC:
				case DE:
				case HL:
				case SP:
				case IX:
				case IY:
				case AF:
				case AF_:
				case Z:
				case NZ:
				case NC:
				case PO:
				case PE:
				case P:
				case M:
					{
					State = 911; regsAndConds();
					}
					break;
				case LDBRAC:
					{
					State = 912; macroParam();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 915; Match(RPAR);
				}
				break;
			case DEF:
				_localctx = new DefInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 917; Match(DEF);
				State = 918; Match(LPAR);
				State = 920;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 919; operand();
					}
				}

				State = 922; Match(RPAR);
				}
				break;
			case ISREG8:
				_localctx = new IsReg8InvokeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 923; Match(ISREG8);
				State = 924; Match(LPAR);
				State = 926;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 925; operand();
					}
				}

				State = 928; Match(RPAR);
				}
				break;
			case ISREG8STD:
				_localctx = new IsReg8StdInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 929; Match(ISREG8STD);
				State = 930; Match(LPAR);
				State = 932;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 931; operand();
					}
				}

				State = 934; Match(RPAR);
				}
				break;
			case ISREG8SPEC:
				_localctx = new IsReg8StdSpecInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 935; Match(ISREG8SPEC);
				State = 936; Match(LPAR);
				State = 938;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 937; operand();
					}
				}

				State = 940; Match(RPAR);
				}
				break;
			case ISREG8IDX:
				_localctx = new IsReg8IdxInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 941; Match(ISREG8IDX);
				State = 942; Match(LPAR);
				State = 944;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 943; operand();
					}
				}

				State = 946; Match(RPAR);
				}
				break;
			case ISREG16:
				_localctx = new IsReg16InvokeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 947; Match(ISREG16);
				State = 948; Match(LPAR);
				State = 950;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 949; operand();
					}
				}

				State = 952; Match(RPAR);
				}
				break;
			case ISREG16STD:
				_localctx = new IsReg16StdInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 953; Match(ISREG16STD);
				State = 954; Match(LPAR);
				State = 956;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 955; operand();
					}
				}

				State = 958; Match(RPAR);
				}
				break;
			case ISREG16IDX:
				_localctx = new IsReg16IdxInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 959; Match(ISREG16IDX);
				State = 960; Match(LPAR);
				State = 962;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 961; operand();
					}
				}

				State = 964; Match(RPAR);
				}
				break;
			case ISREGINDIRECT:
				_localctx = new IsRegIndirectInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 965; Match(ISREGINDIRECT);
				State = 966; Match(LPAR);
				State = 968;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 967; operand();
					}
				}

				State = 970; Match(RPAR);
				}
				break;
			case ISCPORT:
				_localctx = new IsCportInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 971; Match(ISCPORT);
				State = 972; Match(LPAR);
				State = 974;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 973; operand();
					}
				}

				State = 976; Match(RPAR);
				}
				break;
			case ISINDEXEDADDR:
				_localctx = new IsIndexedAddrInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 977; Match(ISINDEXEDADDR);
				State = 978; Match(LPAR);
				State = 980;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 979; operand();
					}
				}

				State = 982; Match(RPAR);
				}
				break;
			case ISCONDITION:
				_localctx = new IsConditionInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 983; Match(ISCONDITION);
				State = 984; Match(LPAR);
				State = 986;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 985; operand();
					}
				}

				State = 988; Match(RPAR);
				}
				break;
			case ISEXPR:
				_localctx = new IsExprInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 989; Match(ISEXPR);
				State = 990; Match(LPAR);
				State = 992;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 991; operand();
					}
				}

				State = 994; Match(RPAR);
				}
				break;
			case ISREGA:
				_localctx = new IsRegAInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 995; Match(ISREGA);
				State = 996; Match(LPAR);
				State = 998;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 997; operand();
					}
				}

				State = 1000; Match(RPAR);
				}
				break;
			case ISREGAF:
				_localctx = new IsRegAfInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1001; Match(ISREGAF);
				State = 1002; Match(LPAR);
				State = 1004;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1003; operand();
					}
				}

				State = 1006; Match(RPAR);
				}
				break;
			case ISREGB:
				_localctx = new IsRegBInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1007; Match(ISREGB);
				State = 1008; Match(LPAR);
				State = 1010;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1009; operand();
					}
				}

				State = 1012; Match(RPAR);
				}
				break;
			case ISREGC:
				_localctx = new IsRegCInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1013; Match(ISREGC);
				State = 1014; Match(LPAR);
				State = 1016;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1015; operand();
					}
				}

				State = 1018; Match(RPAR);
				}
				break;
			case ISREGBC:
				_localctx = new IsRegBCInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1019; Match(ISREGBC);
				State = 1020; Match(LPAR);
				State = 1022;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1021; operand();
					}
				}

				State = 1024; Match(RPAR);
				}
				break;
			case ISREGD:
				_localctx = new IsRegDInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1025; Match(ISREGD);
				State = 1026; Match(LPAR);
				State = 1028;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1027; operand();
					}
				}

				State = 1030; Match(RPAR);
				}
				break;
			case ISREGE:
				_localctx = new IsRegEInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1031; Match(ISREGE);
				State = 1032; Match(LPAR);
				State = 1034;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1033; operand();
					}
				}

				State = 1036; Match(RPAR);
				}
				break;
			case ISREGDE:
				_localctx = new IsRegDEInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 1037; Match(ISREGDE);
				State = 1038; Match(LPAR);
				State = 1040;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1039; operand();
					}
				}

				State = 1042; Match(RPAR);
				}
				break;
			case ISREGH:
				_localctx = new IsRegHInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 1043; Match(ISREGH);
				State = 1044; Match(LPAR);
				State = 1046;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1045; operand();
					}
				}

				State = 1048; Match(RPAR);
				}
				break;
			case ISREGL:
				_localctx = new IsRegLInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 1049; Match(ISREGL);
				State = 1050; Match(LPAR);
				State = 1052;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1051; operand();
					}
				}

				State = 1054; Match(RPAR);
				}
				break;
			case ISREGHL:
				_localctx = new IsRegHLInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 1055; Match(ISREGHL);
				State = 1056; Match(LPAR);
				State = 1058;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1057; operand();
					}
				}

				State = 1060; Match(RPAR);
				}
				break;
			case ISREGI:
				_localctx = new IsRegIInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 1061; Match(ISREGI);
				State = 1062; Match(LPAR);
				State = 1064;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1063; operand();
					}
				}

				State = 1066; Match(RPAR);
				}
				break;
			case ISREGR:
				_localctx = new IsRegRInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 1067; Match(ISREGR);
				State = 1068; Match(LPAR);
				State = 1070;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1069; operand();
					}
				}

				State = 1072; Match(RPAR);
				}
				break;
			case ISREGXH:
				_localctx = new IsRegXHInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 1073; Match(ISREGXH);
				State = 1074; Match(LPAR);
				State = 1076;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1075; operand();
					}
				}

				State = 1078; Match(RPAR);
				}
				break;
			case ISREGXL:
				_localctx = new IsRegXLInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 1079; Match(ISREGXL);
				State = 1080; Match(LPAR);
				State = 1082;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1081; operand();
					}
				}

				State = 1084; Match(RPAR);
				}
				break;
			case ISREGIX:
				_localctx = new IsRegIXInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 1085; Match(ISREGIX);
				State = 1086; Match(LPAR);
				State = 1088;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1087; operand();
					}
				}

				State = 1090; Match(RPAR);
				}
				break;
			case ISREGYH:
				_localctx = new IsRegYHInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 1091; Match(ISREGYH);
				State = 1092; Match(LPAR);
				State = 1094;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1093; operand();
					}
				}

				State = 1096; Match(RPAR);
				}
				break;
			case ISREGYL:
				_localctx = new IsRegYLInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 1097; Match(ISREGYL);
				State = 1098; Match(LPAR);
				State = 1100;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1099; operand();
					}
				}

				State = 1102; Match(RPAR);
				}
				break;
			case ISREGIY:
				_localctx = new IsRegIYInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 1103; Match(ISREGIY);
				State = 1104; Match(LPAR);
				State = 1106;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1105; operand();
					}
				}

				State = 1108; Match(RPAR);
				}
				break;
			case ISREGSP:
				_localctx = new IsRegSPInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 1109; Match(ISREGSP);
				State = 1110; Match(LPAR);
				State = 1112;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (TEXTOF - 224)) | (1L << (LTEXTOF - 224)) | (1L << (HREG - 224)) | (1L << (LREG - 224)) | (1L << (DEF - 224)) | (1L << (ISREG8 - 224)) | (1L << (ISREG8STD - 224)) | (1L << (ISREG8SPEC - 224)) | (1L << (ISREG8IDX - 224)) | (1L << (ISREG16 - 224)) | (1L << (ISREG16STD - 224)) | (1L << (ISREG16IDX - 224)) | (1L << (ISREGINDIRECT - 224)) | (1L << (ISCPORT - 224)) | (1L << (ISINDEXEDADDR - 224)) | (1L << (ISCONDITION - 224)) | (1L << (ISEXPR - 224)) | (1L << (ISREGA - 224)) | (1L << (ISREGAF - 224)) | (1L << (ISREGB - 224)) | (1L << (ISREGC - 224)) | (1L << (ISREGBC - 224)) | (1L << (ISREGD - 224)) | (1L << (ISREGE - 224)) | (1L << (ISREGDE - 224)) | (1L << (ISREGH - 224)) | (1L << (ISREGL - 224)) | (1L << (ISREGHL - 224)) | (1L << (ISREGI - 224)) | (1L << (ISREGR - 224)) | (1L << (ISREGSP - 224)) | (1L << (ISREGXH - 224)) | (1L << (ISREGXL - 224)) | (1L << (ISREGIX - 224)) | (1L << (ISREGYH - 224)) | (1L << (ISREGYL - 224)) | (1L << (ISREGIY - 224)) | (1L << (HEXNUM - 224)) | (1L << (BINNUM - 224)) | (1L << (OCTNUM - 224)) | (1L << (DECNUM - 224)) | (1L << (CURADDR - 224)) | (1L << (REALNUM - 224)) | (1L << (CHAR - 224)) | (1L << (STRING - 224)) | (1L << (BOOLLIT - 224)) | (1L << (CURCNT - 224)) | (1L << (IDENTIFIER - 224)) | (1L << (NONEARG - 224)))) != 0)) {
					{
					State = 1111; operand();
					}
				}

				State = 1114; Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RealLiteralContext : LiteralContext {
		public ITerminalNode REALNUM() { return GetToken(Z80AsmParser.REALNUM, 0); }
		public RealLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRealLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRealLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinLiteralContext : LiteralContext {
		public ITerminalNode BINNUM() { return GetToken(Z80AsmParser.BINNUM, 0); }
		public BinLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBinLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBinLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OctalLiteralContext : LiteralContext {
		public ITerminalNode OCTNUM() { return GetToken(Z80AsmParser.OCTNUM, 0); }
		public OctalLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOctalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOctalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOctalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharLiteralContext : LiteralContext {
		public ITerminalNode CHAR() { return GetToken(Z80AsmParser.CHAR, 0); }
		public CharLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCharLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCharLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolLiteralContext : LiteralContext {
		public ITerminalNode BOOLLIT() { return GetToken(Z80AsmParser.BOOLLIT, 0); }
		public BoolLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : LiteralContext {
		public ITerminalNode STRING() { return GetToken(Z80AsmParser.STRING, 0); }
		public StringLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalLiteralContext : LiteralContext {
		public ITerminalNode DECNUM() { return GetToken(Z80AsmParser.DECNUM, 0); }
		public DecimalLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurCounterLiteralContext : LiteralContext {
		public ITerminalNode CURCNT() { return GetToken(Z80AsmParser.CURCNT, 0); }
		public CurCounterLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCurCounterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCurCounterLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurCounterLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HexLiteralContext : LiteralContext {
		public ITerminalNode HEXNUM() { return GetToken(Z80AsmParser.HEXNUM, 0); }
		public HexLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterHexLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitHexLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurAddrLiteralContext : LiteralContext {
		public ITerminalNode CURADDR() { return GetToken(Z80AsmParser.CURADDR, 0); }
		public ITerminalNode DOT() { return GetToken(Z80AsmParser.DOT, 0); }
		public ITerminalNode MULOP() { return GetToken(Z80AsmParser.MULOP, 0); }
		public CurAddrLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCurAddrLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCurAddrLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurAddrLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_literal);
		int _la;
		try {
			State = 1127;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case HEXNUM:
				_localctx = new HexLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1117; Match(HEXNUM);
				}
				break;
			case DECNUM:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1118; Match(DECNUM);
				}
				break;
			case OCTNUM:
				_localctx = new OctalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1119; Match(OCTNUM);
				}
				break;
			case CHAR:
				_localctx = new CharLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1120; Match(CHAR);
				}
				break;
			case BINNUM:
				_localctx = new BinLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1121; Match(BINNUM);
				}
				break;
			case REALNUM:
				_localctx = new RealLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1122; Match(REALNUM);
				}
				break;
			case BOOLLIT:
				_localctx = new BoolLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1123; Match(BOOLLIT);
				}
				break;
			case STRING:
				_localctx = new StringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1124; Match(STRING);
				}
				break;
			case MULOP:
			case DOT:
			case CURADDR:
				_localctx = new CurAddrLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1125;
				_la = _input.La(1);
				if ( !(_la==MULOP || _la==DOT || _la==CURADDR) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case CURCNT:
				_localctx = new CurCounterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1126; Match(CURCNT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode DCOLON() { return GetToken(Z80AsmParser.DCOLON, 0); }
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1130;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DCOLON) {
				{
				State = 1129; Match(DCOLON);
				}
			}

			State = 1132; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroParamContext : ParserRuleContext {
		public ITerminalNode LDBRAC() { return GetToken(Z80AsmParser.LDBRAC, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode RDBRAC() { return GetToken(Z80AsmParser.RDBRAC, 0); }
		public MacroParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroParamContext macroParam() {
		MacroParamContext _localctx = new MacroParamContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_macroParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134; Match(LDBRAC);
			State = 1135; Match(IDENTIFIER);
			State = 1136; Match(RDBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegsContext : ParserRuleContext {
		public Reg8Context reg8() {
			return GetRuleContext<Reg8Context>(0);
		}
		public Reg8IdxContext reg8Idx() {
			return GetRuleContext<Reg8IdxContext>(0);
		}
		public Reg8SpecContext reg8Spec() {
			return GetRuleContext<Reg8SpecContext>(0);
		}
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public Reg16SpecContext reg16Spec() {
			return GetRuleContext<Reg16SpecContext>(0);
		}
		public RegsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRegs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRegs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegsContext regs() {
		RegsContext _localctx = new RegsContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_regs);
		try {
			State = 1144;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case A:
			case B:
			case C:
			case D:
			case E:
			case H:
			case L:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1138; reg8();
				}
				break;
			case XL:
			case XH:
			case YL:
			case YH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1139; reg8Idx();
				}
				break;
			case I:
			case R:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1140; reg8Spec();
				}
				break;
			case BC:
			case DE:
			case HL:
			case SP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1141; reg16();
				}
				break;
			case IX:
			case IY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1142; reg16Idx();
				}
				break;
			case AF:
			case AF_:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1143; reg16Spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegsAndCondsContext : ParserRuleContext {
		public RegsContext regs() {
			return GetRuleContext<RegsContext>(0);
		}
		public RegIndirectContext regIndirect() {
			return GetRuleContext<RegIndirectContext>(0);
		}
		public CPortContext cPort() {
			return GetRuleContext<CPortContext>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public RegsAndCondsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regsAndConds; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRegsAndConds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRegsAndConds(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegsAndConds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegsAndCondsContext regsAndConds() {
		RegsAndCondsContext _localctx = new RegsAndCondsContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_regsAndConds);
		try {
			State = 1150;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1146; regs();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1147; regIndirect();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1148; cPort();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1149; condition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MnemonicContext : ParserRuleContext {
		public ITerminalNode NOP() { return GetToken(Z80AsmParser.NOP, 0); }
		public ITerminalNode RLCA() { return GetToken(Z80AsmParser.RLCA, 0); }
		public ITerminalNode RRCA() { return GetToken(Z80AsmParser.RRCA, 0); }
		public ITerminalNode RLA() { return GetToken(Z80AsmParser.RLA, 0); }
		public ITerminalNode RRA() { return GetToken(Z80AsmParser.RRA, 0); }
		public ITerminalNode DAA() { return GetToken(Z80AsmParser.DAA, 0); }
		public ITerminalNode CPL() { return GetToken(Z80AsmParser.CPL, 0); }
		public ITerminalNode SCF() { return GetToken(Z80AsmParser.SCF, 0); }
		public ITerminalNode CCF() { return GetToken(Z80AsmParser.CCF, 0); }
		public ITerminalNode HALT() { return GetToken(Z80AsmParser.HALT, 0); }
		public ITerminalNode RET() { return GetToken(Z80AsmParser.RET, 0); }
		public ITerminalNode EXX() { return GetToken(Z80AsmParser.EXX, 0); }
		public ITerminalNode DI() { return GetToken(Z80AsmParser.DI, 0); }
		public ITerminalNode EI() { return GetToken(Z80AsmParser.EI, 0); }
		public ITerminalNode NEG() { return GetToken(Z80AsmParser.NEG, 0); }
		public ITerminalNode RETN() { return GetToken(Z80AsmParser.RETN, 0); }
		public ITerminalNode RETI() { return GetToken(Z80AsmParser.RETI, 0); }
		public ITerminalNode RLD() { return GetToken(Z80AsmParser.RLD, 0); }
		public ITerminalNode RRD() { return GetToken(Z80AsmParser.RRD, 0); }
		public ITerminalNode LDI() { return GetToken(Z80AsmParser.LDI, 0); }
		public ITerminalNode CPI() { return GetToken(Z80AsmParser.CPI, 0); }
		public ITerminalNode INI() { return GetToken(Z80AsmParser.INI, 0); }
		public ITerminalNode OUTI() { return GetToken(Z80AsmParser.OUTI, 0); }
		public ITerminalNode LDD() { return GetToken(Z80AsmParser.LDD, 0); }
		public ITerminalNode CPD() { return GetToken(Z80AsmParser.CPD, 0); }
		public ITerminalNode IND() { return GetToken(Z80AsmParser.IND, 0); }
		public ITerminalNode OUTD() { return GetToken(Z80AsmParser.OUTD, 0); }
		public ITerminalNode LDIR() { return GetToken(Z80AsmParser.LDIR, 0); }
		public ITerminalNode CPIR() { return GetToken(Z80AsmParser.CPIR, 0); }
		public ITerminalNode INIR() { return GetToken(Z80AsmParser.INIR, 0); }
		public ITerminalNode OTIR() { return GetToken(Z80AsmParser.OTIR, 0); }
		public ITerminalNode LDDR() { return GetToken(Z80AsmParser.LDDR, 0); }
		public ITerminalNode CPDR() { return GetToken(Z80AsmParser.CPDR, 0); }
		public ITerminalNode INDR() { return GetToken(Z80AsmParser.INDR, 0); }
		public ITerminalNode OTDR() { return GetToken(Z80AsmParser.OTDR, 0); }
		public ITerminalNode LD() { return GetToken(Z80AsmParser.LD, 0); }
		public ITerminalNode INC() { return GetToken(Z80AsmParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(Z80AsmParser.DEC, 0); }
		public ITerminalNode EX() { return GetToken(Z80AsmParser.EX, 0); }
		public ITerminalNode ADD() { return GetToken(Z80AsmParser.ADD, 0); }
		public ITerminalNode ADC() { return GetToken(Z80AsmParser.ADC, 0); }
		public ITerminalNode SUB() { return GetToken(Z80AsmParser.SUB, 0); }
		public ITerminalNode SBC() { return GetToken(Z80AsmParser.SBC, 0); }
		public ITerminalNode AND() { return GetToken(Z80AsmParser.AND, 0); }
		public ITerminalNode XOR() { return GetToken(Z80AsmParser.XOR, 0); }
		public ITerminalNode OR() { return GetToken(Z80AsmParser.OR, 0); }
		public ITerminalNode CP() { return GetToken(Z80AsmParser.CP, 0); }
		public ITerminalNode DJNZ() { return GetToken(Z80AsmParser.DJNZ, 0); }
		public ITerminalNode JR() { return GetToken(Z80AsmParser.JR, 0); }
		public ITerminalNode JP() { return GetToken(Z80AsmParser.JP, 0); }
		public ITerminalNode CALL() { return GetToken(Z80AsmParser.CALL, 0); }
		public ITerminalNode RST() { return GetToken(Z80AsmParser.RST, 0); }
		public ITerminalNode PUSH() { return GetToken(Z80AsmParser.PUSH, 0); }
		public ITerminalNode POP() { return GetToken(Z80AsmParser.POP, 0); }
		public ITerminalNode IN() { return GetToken(Z80AsmParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(Z80AsmParser.OUT, 0); }
		public ITerminalNode IM() { return GetToken(Z80AsmParser.IM, 0); }
		public ITerminalNode RLC() { return GetToken(Z80AsmParser.RLC, 0); }
		public ITerminalNode RRC() { return GetToken(Z80AsmParser.RRC, 0); }
		public ITerminalNode RL() { return GetToken(Z80AsmParser.RL, 0); }
		public ITerminalNode RR() { return GetToken(Z80AsmParser.RR, 0); }
		public ITerminalNode SLA() { return GetToken(Z80AsmParser.SLA, 0); }
		public ITerminalNode SRA() { return GetToken(Z80AsmParser.SRA, 0); }
		public ITerminalNode SLL() { return GetToken(Z80AsmParser.SLL, 0); }
		public ITerminalNode SRL() { return GetToken(Z80AsmParser.SRL, 0); }
		public ITerminalNode BIT() { return GetToken(Z80AsmParser.BIT, 0); }
		public ITerminalNode RES() { return GetToken(Z80AsmParser.RES, 0); }
		public ITerminalNode SET() { return GetToken(Z80AsmParser.SET, 0); }
		public ITerminalNode SWAPNIB() { return GetToken(Z80AsmParser.SWAPNIB, 0); }
		public ITerminalNode MUL() { return GetToken(Z80AsmParser.MUL, 0); }
		public ITerminalNode POPX() { return GetToken(Z80AsmParser.POPX, 0); }
		public ITerminalNode MIRROR() { return GetToken(Z80AsmParser.MIRROR, 0); }
		public ITerminalNode TEST() { return GetToken(Z80AsmParser.TEST, 0); }
		public ITerminalNode NEXTREG() { return GetToken(Z80AsmParser.NEXTREG, 0); }
		public ITerminalNode OUTINB() { return GetToken(Z80AsmParser.OUTINB, 0); }
		public ITerminalNode LDIX() { return GetToken(Z80AsmParser.LDIX, 0); }
		public ITerminalNode LDIRX() { return GetToken(Z80AsmParser.LDIRX, 0); }
		public ITerminalNode LDDX() { return GetToken(Z80AsmParser.LDDX, 0); }
		public ITerminalNode LDDRX() { return GetToken(Z80AsmParser.LDDRX, 0); }
		public ITerminalNode PIXELDN() { return GetToken(Z80AsmParser.PIXELDN, 0); }
		public ITerminalNode PIXELAD() { return GetToken(Z80AsmParser.PIXELAD, 0); }
		public ITerminalNode SETAE() { return GetToken(Z80AsmParser.SETAE, 0); }
		public ITerminalNode LDPIRX() { return GetToken(Z80AsmParser.LDPIRX, 0); }
		public MnemonicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mnemonic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMnemonic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMnemonic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMnemonic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MnemonicContext mnemonic() {
		MnemonicContext _localctx = new MnemonicContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_mnemonic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1152;
			_la = _input.La(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (NOP - 70)) | (1L << (RLCA - 70)) | (1L << (RRCA - 70)) | (1L << (RLA - 70)) | (1L << (RRA - 70)) | (1L << (DAA - 70)) | (1L << (CPL - 70)) | (1L << (SCF - 70)) | (1L << (CCF - 70)) | (1L << (HALT - 70)) | (1L << (RET - 70)) | (1L << (EXX - 70)) | (1L << (DI - 70)) | (1L << (EI - 70)) | (1L << (NEG - 70)) | (1L << (RETN - 70)) | (1L << (RETI - 70)) | (1L << (RLD - 70)) | (1L << (RRD - 70)) | (1L << (LDI - 70)) | (1L << (CPI - 70)) | (1L << (INI - 70)) | (1L << (OUTI - 70)) | (1L << (LDD - 70)) | (1L << (CPD - 70)) | (1L << (IND - 70)) | (1L << (OUTD - 70)) | (1L << (LDIR - 70)) | (1L << (CPIR - 70)) | (1L << (INIR - 70)) | (1L << (OTIR - 70)) | (1L << (LDDR - 70)) | (1L << (CPDR - 70)) | (1L << (INDR - 70)) | (1L << (OTDR - 70)) | (1L << (LD - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (EX - 70)) | (1L << (ADD - 70)) | (1L << (ADC - 70)) | (1L << (SUB - 70)) | (1L << (SBC - 70)) | (1L << (AND - 70)) | (1L << (XOR - 70)) | (1L << (OR - 70)) | (1L << (CP - 70)) | (1L << (DJNZ - 70)) | (1L << (JR - 70)) | (1L << (JP - 70)) | (1L << (CALL - 70)) | (1L << (RST - 70)) | (1L << (PUSH - 70)) | (1L << (POP - 70)) | (1L << (IN - 70)) | (1L << (OUT - 70)) | (1L << (IM - 70)) | (1L << (RLC - 70)) | (1L << (RRC - 70)) | (1L << (RL - 70)) | (1L << (RR - 70)) | (1L << (SLA - 70)) | (1L << (SRA - 70)) | (1L << (SLL - 70)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (SRL - 134)) | (1L << (BIT - 134)) | (1L << (RES - 134)) | (1L << (SET - 134)) | (1L << (SWAPNIB - 134)) | (1L << (MUL - 134)) | (1L << (POPX - 134)) | (1L << (MIRROR - 134)) | (1L << (TEST - 134)) | (1L << (NEXTREG - 134)) | (1L << (OUTINB - 134)) | (1L << (LDIX - 134)) | (1L << (LDIRX - 134)) | (1L << (LDDX - 134)) | (1L << (LDDRX - 134)) | (1L << (PIXELDN - 134)) | (1L << (PIXELAD - 134)) | (1L << (SETAE - 134)) | (1L << (LDPIRX - 134)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return label_sempred((LabelContext)_localctx, predIndex);

		case 8: return iterationTest_sempred((IterationTestContext)_localctx, predIndex);

		case 79: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool label_sempred(LabelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return !this.exprStart();
		}
		return true;
	}
	private bool iterationTest_sempred(IterationTestContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return this.p("loop", "while", "until", "elif");
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 10);

		case 3: return Precpred(_ctx, 9);

		case 4: return Precpred(_ctx, 8);

		case 5: return Precpred(_ctx, 7);

		case 6: return Precpred(_ctx, 6);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x117\x485\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x3\x2\x3\x2\a\x2\xB5\n\x2\f\x2\xE\x2\xB8\v\x2\x3\x2\x3\x2\x6"+
		"\x2\xBC\n\x2\r\x2\xE\x2\xBD\x3\x2\a\x2\xC1\n\x2\f\x2\xE\x2\xC4\v\x2\x3"+
		"\x2\a\x2\xC7\n\x2\f\x2\xE\x2\xCA\v\x2\x3\x2\x3\x2\x5\x2\xCE\n\x2\x3\x3"+
		"\x5\x3\xD1\n\x3\x3\x3\x5\x3\xD4\n\x3\x3\x3\x5\x3\xD7\n\x3\x3\x3\x3\x3"+
		"\x5\x3\xDB\n\x3\x5\x3\xDD\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5"+
		"\x4\xE5\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\xEB\n\x5\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x5\a\x10D\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x5\b\x11A\n\b\x3\b\x5\b\x11D\n\b\x5\b\x11F\n\b\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x5\t\x135\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x13D\n\n\x3"+
		"\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\x146\n\v\f\v\xE\v\x149\v\v\x5\v\x14B"+
		"\n\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x161\n"+
		"\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x5\x15\x16F\n\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x19\x3\x19\x5\x19\x179\n\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3"+
		"\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\x185\n\x1D\f\x1D\xE\x1D"+
		"\x188\v\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x18F\n\x1E\f\x1E"+
		"\xE\x1E\x192\v\x1E\x3\x1E\x3\x1E\x3\x1F\x5\x1F\x197\n\x1F\x3 \x3 \x3 "+
		"\x3!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x5\"\x1A3\n\"\x3#\x3#\x3#\x3$\x3$\x3"+
		"$\x3%\x3%\x3%\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3)\x3)\x3)\x3)\a"+
		")\x1BB\n)\f)\xE)\x1BE\v)\x3*\x3*\x3*\x3*\a*\x1C4\n*\f*\xE*\x1C7\v*\x3"+
		"+\x3+\x3+\x3,\x3,\x3,\x3-\x3-\x3-\x3.\x3.\x3.\x3/\x3/\x3/\x3/\x5/\x1D9"+
		"\n/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x1E1\n\x31\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x34"+
		"\x3\x34\x3\x34\x3\x35\x3\x35\x5\x35\x1F2\n\x35\x3\x36\x3\x36\x3\x36\x3"+
		"\x36\a\x36\x1F8\n\x36\f\x36\xE\x36\x1FB\v\x36\x3\x37\x3\x37\x5\x37\x1FF"+
		"\n\x37\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3:\x3:\x3:\x3;\x3;\x3;\x3;"+
		"\x3;\x3;\x5;\x20F\n;\x5;\x211\n;\x3<\x3<\x3<\x3<\x3<\x3<\x5<\x219\n<\x5"+
		"<\x21B\n<\x3=\x3=\x3>\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?"+
		"\x3?\x5?\x22D\n?\x3@\x3@\x3@\x5@\x232\n@\x3\x41\x3\x41\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x252\n\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x25E\n"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x265\n\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x5\x42\x26C\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\x5\x42\x273\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x5\x42\x27C\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x283\n\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x28A\n\x42\x3\x42\x3\x42\x3"+
		"\x42\x5\x42\x28F\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x5\x42\x29B\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\x5\x42\x2A2\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x5\x42\x2AB\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x2B2\n\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x2B9\n\x42\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x5\x42\x2C0\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x5\x42\x2C7\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x2CE\n\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x2D5\n\x42\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x5\x42\x2DC\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x2EA\n\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x2F4\n\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x5\x42\x301\n\x42\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\x3\x44\x5\x44\x315\n\x44\x3\x44\x3\x44\x3\x44\x5\x44\x31A\n\x44\x3"+
		"\x45\x3\x45\x3\x46\x3\x46\x3G\x3G\x3H\x3H\x3I\x3I\x3J\x3J\x3K\x3K\x3L"+
		"\x3L\x3L\x3L\x3M\x3M\x3M\x3M\x3N\x3N\x3N\x3N\x3O\x3O\x3O\x3O\x5O\x33A"+
		"\nO\x3O\x3O\x3P\x3P\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3"+
		"Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x5Q\x356\nQ\x3Q\x3Q\x3Q\x3Q\x3Q"+
		"\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3"+
		"Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\aQ\x379\nQ\fQ\xEQ\x37C\vQ\x3"+
		"R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\aR\x386\nR\fR\xER\x389\vR\x3R\x3R\x5R\x38D"+
		"\nR\x3S\x3S\x3S\x3S\x3S\x5S\x394\nS\x3S\x3S\x3S\x3S\x3S\x5S\x39B\nS\x3"+
		"S\x3S\x3S\x3S\x5S\x3A1\nS\x3S\x3S\x3S\x3S\x5S\x3A7\nS\x3S\x3S\x3S\x3S"+
		"\x5S\x3AD\nS\x3S\x3S\x3S\x3S\x5S\x3B3\nS\x3S\x3S\x3S\x3S\x5S\x3B9\nS\x3"+
		"S\x3S\x3S\x3S\x5S\x3BF\nS\x3S\x3S\x3S\x3S\x5S\x3C5\nS\x3S\x3S\x3S\x3S"+
		"\x5S\x3CB\nS\x3S\x3S\x3S\x3S\x5S\x3D1\nS\x3S\x3S\x3S\x3S\x5S\x3D7\nS\x3"+
		"S\x3S\x3S\x3S\x5S\x3DD\nS\x3S\x3S\x3S\x3S\x5S\x3E3\nS\x3S\x3S\x3S\x3S"+
		"\x5S\x3E9\nS\x3S\x3S\x3S\x3S\x5S\x3EF\nS\x3S\x3S\x3S\x3S\x5S\x3F5\nS\x3"+
		"S\x3S\x3S\x3S\x5S\x3FB\nS\x3S\x3S\x3S\x3S\x5S\x401\nS\x3S\x3S\x3S\x3S"+
		"\x5S\x407\nS\x3S\x3S\x3S\x3S\x5S\x40D\nS\x3S\x3S\x3S\x3S\x5S\x413\nS\x3"+
		"S\x3S\x3S\x3S\x5S\x419\nS\x3S\x3S\x3S\x3S\x5S\x41F\nS\x3S\x3S\x3S\x3S"+
		"\x5S\x425\nS\x3S\x3S\x3S\x3S\x5S\x42B\nS\x3S\x3S\x3S\x3S\x5S\x431\nS\x3"+
		"S\x3S\x3S\x3S\x5S\x437\nS\x3S\x3S\x3S\x3S\x5S\x43D\nS\x3S\x3S\x3S\x3S"+
		"\x5S\x443\nS\x3S\x3S\x3S\x3S\x5S\x449\nS\x3S\x3S\x3S\x3S\x5S\x44F\nS\x3"+
		"S\x3S\x3S\x3S\x5S\x455\nS\x3S\x3S\x3S\x3S\x5S\x45B\nS\x3S\x5S\x45E\nS"+
		"\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x46A\nT\x3U\x5U\x46D\nU\x3"+
		"U\x3U\x3V\x3V\x3V\x3V\x3W\x3W\x3W\x3W\x3W\x3W\x5W\x47B\nW\x3X\x3X\x3X"+
		"\x3X\x5X\x481\nX\x3Y\x3Y\x3Y\x2\x2\x3\xA0Z\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<"+
		"\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z"+
		"\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2"+
		"x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E"+
		"\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2"+
		"\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\x2\x1B\x5\x2\x9C"+
		"\x9D\xA0\xA1\xA4\xA5\x3\x2\xD9\xDA\x4\x2\f\f\xAD\xAD\x4\x2\xDA\xDA\x113"+
		"\x113\x3\x2\xBF\xC0\x4\x2HQSj\x4\x2\x8C\x8D\x92\x9B\x3\x2\xE4\xE5\x3\x2"+
		",\x32\x3\x2\x35\x38\x3\x2\x33\x34\x3\x2\x39<\x3\x2=>\x4\x2\x39;=>\x3\x2"+
		"?@\x3\x2\x12\x13\x4\x2..\x41G\x3\x2$%\x3\x2!%\x3\x2\x1F \x3\x2\x1B\x1E"+
		"\x3\x2\x17\x1A\x3\x2\xE2\xE3\x5\x2!!**\x10B\x10B\x3\x2H\x9A\x54C\x2\xCD"+
		"\x3\x2\x2\x2\x4\xDC\x3\x2\x2\x2\x6\xE4\x3\x2\x2\x2\b\xEA\x3\x2\x2\x2\n"+
		"\xEC\x3\x2\x2\x2\f\x10C\x3\x2\x2\x2\xE\x11E\x3\x2\x2\x2\x10\x134\x3\x2"+
		"\x2\x2\x12\x13C\x3\x2\x2\x2\x14\x140\x3\x2\x2\x2\x16\x14E\x3\x2\x2\x2"+
		"\x18\x150\x3\x2\x2\x2\x1A\x152\x3\x2\x2\x2\x1C\x154\x3\x2\x2\x2\x1E\x156"+
		"\x3\x2\x2\x2 \x158\x3\x2\x2\x2\"\x160\x3\x2\x2\x2$\x162\x3\x2\x2\x2&\x164"+
		"\x3\x2\x2\x2(\x166\x3\x2\x2\x2*\x170\x3\x2\x2\x2,\x172\x3\x2\x2\x2.\x174"+
		"\x3\x2\x2\x2\x30\x176\x3\x2\x2\x2\x32\x17A\x3\x2\x2\x2\x34\x17C\x3\x2"+
		"\x2\x2\x36\x17E\x3\x2\x2\x2\x38\x180\x3\x2\x2\x2:\x189\x3\x2\x2\x2<\x196"+
		"\x3\x2\x2\x2>\x198\x3\x2\x2\x2@\x19B\x3\x2\x2\x2\x42\x19E\x3\x2\x2\x2"+
		"\x44\x1A4\x3\x2\x2\x2\x46\x1A7\x3\x2\x2\x2H\x1AA\x3\x2\x2\x2J\x1AD\x3"+
		"\x2\x2\x2L\x1B0\x3\x2\x2\x2N\x1B3\x3\x2\x2\x2P\x1B6\x3\x2\x2\x2R\x1BF"+
		"\x3\x2\x2\x2T\x1C8\x3\x2\x2\x2V\x1CB\x3\x2\x2\x2X\x1CE\x3\x2\x2\x2Z\x1D1"+
		"\x3\x2\x2\x2\\\x1D4\x3\x2\x2\x2^\x1DA\x3\x2\x2\x2`\x1DC\x3\x2\x2\x2\x62"+
		"\x1E2\x3\x2\x2\x2\x64\x1E7\x3\x2\x2\x2\x66\x1EC\x3\x2\x2\x2h\x1EF\x3\x2"+
		"\x2\x2j\x1F3\x3\x2\x2\x2l\x1FC\x3\x2\x2\x2n\x200\x3\x2\x2\x2p\x203\x3"+
		"\x2\x2\x2r\x205\x3\x2\x2\x2t\x208\x3\x2\x2\x2v\x212\x3\x2\x2\x2x\x21C"+
		"\x3\x2\x2\x2z\x21E\x3\x2\x2\x2|\x22C\x3\x2\x2\x2~\x231\x3\x2\x2\x2\x80"+
		"\x233\x3\x2\x2\x2\x82\x300\x3\x2\x2\x2\x84\x302\x3\x2\x2\x2\x86\x319\x3"+
		"\x2\x2\x2\x88\x31B\x3\x2\x2\x2\x8A\x31D\x3\x2\x2\x2\x8C\x31F\x3\x2\x2"+
		"\x2\x8E\x321\x3\x2\x2\x2\x90\x323\x3\x2\x2\x2\x92\x325\x3\x2\x2\x2\x94"+
		"\x327\x3\x2\x2\x2\x96\x329\x3\x2\x2\x2\x98\x32D\x3\x2\x2\x2\x9A\x331\x3"+
		"\x2\x2\x2\x9C\x335\x3\x2\x2\x2\x9E\x33D\x3\x2\x2\x2\xA0\x355\x3\x2\x2"+
		"\x2\xA2\x38C\x3\x2\x2\x2\xA4\x45D\x3\x2\x2\x2\xA6\x469\x3\x2\x2\x2\xA8"+
		"\x46C\x3\x2\x2\x2\xAA\x470\x3\x2\x2\x2\xAC\x47A\x3\x2\x2\x2\xAE\x480\x3"+
		"\x2\x2\x2\xB0\x482\x3\x2\x2\x2\xB2\xCE\a\x2\x2\x3\xB3\xB5\a\x6\x2\x2\xB4"+
		"\xB3\x3\x2\x2\x2\xB5\xB8\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2"+
		"\x2\x2\xB7\xB9\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB9\xC2\x5\x4\x3\x2\xBA"+
		"\xBC\a\x6\x2\x2\xBB\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBB\x3\x2"+
		"\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC1\x5\x4\x3\x2\xC0"+
		"\xBB\x3\x2\x2\x2\xC1\xC4\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2"+
		"\x2\x2\xC3\xC8\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC5\xC7\a\x6\x2\x2\xC6"+
		"\xC5\x3\x2\x2\x2\xC7\xCA\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2"+
		"\x2\x2\xC9\xCB\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCB\xCC\a\x2\x2\x3\xCC"+
		"\xCE\x3\x2\x2\x2\xCD\xB2\x3\x2\x2\x2\xCD\xB6\x3\x2\x2\x2\xCE\x3\x3\x2"+
		"\x2\x2\xCF\xD1\x5\b\x5\x2\xD0\xCF\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1"+
		"\xD3\x3\x2\x2\x2\xD2\xD4\x5\x6\x4\x2\xD3\xD2\x3\x2\x2\x2\xD3\xD4\x3\x2"+
		"\x2\x2\xD4\xD6\x3\x2\x2\x2\xD5\xD7\x5\n\x6\x2\xD6\xD5\x3\x2\x2\x2\xD6"+
		"\xD7\x3\x2\x2\x2\xD7\xDD\x3\x2\x2\x2\xD8\xDA\x5\xE\b\x2\xD9\xDB\x5\n\x6"+
		"\x2\xDA\xD9\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\xDD\x3\x2\x2\x2\xDC\xD0"+
		"\x3\x2\x2\x2\xDC\xD8\x3\x2\x2\x2\xDD\x5\x3\x2\x2\x2\xDE\xE5\x5\f\a\x2"+
		"\xDF\xE5\x5~@\x2\xE0\xE5\x5\xAAV\x2\xE1\xE5\x5:\x1E\x2\xE2\xE5\x5\x10"+
		"\t\x2\xE3\xE5\x5> \x2\xE4\xDE\x3\x2\x2\x2\xE4\xDF\x3\x2\x2\x2\xE4\xE0"+
		"\x3\x2\x2\x2\xE4\xE1\x3\x2\x2\x2\xE4\xE2\x3\x2\x2\x2\xE4\xE3\x3\x2\x2"+
		"\x2\xE5\a\x3\x2\x2\x2\xE6\xE7\a\x113\x2\x2\xE7\xEB\a\a\x2\x2\xE8\xE9\a"+
		"\x113\x2\x2\xE9\xEB\x6\x5\x2\x2\xEA\xE6\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2"+
		"\xEB\t\x3\x2\x2\x2\xEC\xED\a\x5\x2\x2\xED\v\x3\x2\x2\x2\xEE\x10D\x5@!"+
		"\x2\xEF\x10D\x5\x42\"\x2\xF0\x10D\x5\x44#\x2\xF1\x10D\x5\x46$\x2\xF2\x10D"+
		"\x5H%\x2\xF3\x10D\x5J&\x2\xF4\x10D\x5L\'\x2\xF5\x10D\x5N(\x2\xF6\x10D"+
		"\x5P)\x2\xF7\x10D\x5R*\x2\xF8\x10D\x5V,\x2\xF9\x10D\x5T+\x2\xFA\x10D\x5"+
		"X-\x2\xFB\x10D\x5Z.\x2\xFC\x10D\x5\\/\x2\xFD\x10D\x5^\x30\x2\xFE\x10D"+
		"\x5`\x31\x2\xFF\x10D\x5\x62\x32\x2\x100\x10D\x5\x64\x33\x2\x101\x10D\x5"+
		"\x66\x34\x2\x102\x10D\x5h\x35\x2\x103\x10D\x5j\x36\x2\x104\x10D\x5l\x37"+
		"\x2\x105\x10D\x5n\x38\x2\x106\x10D\x5p\x39\x2\x107\x10D\x5r:\x2\x108\x10D"+
		"\x5t;\x2\x109\x10D\x5v<\x2\x10A\x10D\x5x=\x2\x10B\x10D\x5z>\x2\x10C\xEE"+
		"\x3\x2\x2\x2\x10C\xEF\x3\x2\x2\x2\x10C\xF0\x3\x2\x2\x2\x10C\xF1\x3\x2"+
		"\x2\x2\x10C\xF2\x3\x2\x2\x2\x10C\xF3\x3\x2\x2\x2\x10C\xF4\x3\x2\x2\x2"+
		"\x10C\xF5\x3\x2\x2\x2\x10C\xF6\x3\x2\x2\x2\x10C\xF7\x3\x2\x2\x2\x10C\xF8"+
		"\x3\x2\x2\x2\x10C\xF9\x3\x2\x2\x2\x10C\xFA\x3\x2\x2\x2\x10C\xFB\x3\x2"+
		"\x2\x2\x10C\xFC\x3\x2\x2\x2\x10C\xFD\x3\x2\x2\x2\x10C\xFE\x3\x2\x2\x2"+
		"\x10C\xFF\x3\x2\x2\x2\x10C\x100\x3\x2\x2\x2\x10C\x101\x3\x2\x2\x2\x10C"+
		"\x102\x3\x2\x2\x2\x10C\x103\x3\x2\x2\x2\x10C\x104\x3\x2\x2\x2\x10C\x105"+
		"\x3\x2\x2\x2\x10C\x106\x3\x2\x2\x2\x10C\x107\x3\x2\x2\x2\x10C\x108\x3"+
		"\x2\x2\x2\x10C\x109\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10C\x10B\x3\x2"+
		"\x2\x2\x10D\r\x3\x2\x2\x2\x10E\x10F\t\x2\x2\x2\x10F\x11F\a\x113\x2\x2"+
		"\x110\x11F\a\x9E\x2\x2\x111\x11F\a\x9F\x2\x2\x112\x113\a\xA3\x2\x2\x113"+
		"\x11F\x5\xA0Q\x2\x114\x115\a\xA2\x2\x2\x115\x11F\a\x10E\x2\x2\x116\x117"+
		"\a\xA6\x2\x2\x117\x11C\x5\xA0Q\x2\x118\x11A\a\v\x2\x2\x119\x118\x3\x2"+
		"\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11B\x11D\a\x10E\x2"+
		"\x2\x11C\x119\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x11F\x3\x2\x2\x2"+
		"\x11E\x10E\x3\x2\x2\x2\x11E\x110\x3\x2\x2\x2\x11E\x111\x3\x2\x2\x2\x11E"+
		"\x112\x3\x2\x2\x2\x11E\x114\x3\x2\x2\x2\x11E\x116\x3\x2\x2\x2\x11F\xF"+
		"\x3\x2\x2\x2\x120\x135\x5\x12\n\x2\x121\x135\x5\x14\v\x2\x122\x135\x5"+
		"\x16\f\x2\x123\x135\x5\x1C\xF\x2\x124\x135\x5 \x11\x2\x125\x135\x5\x18"+
		"\r\x2\x126\x135\x5\x1A\xE\x2\x127\x135\x5\x1E\x10\x2\x128\x135\x5\"\x12"+
		"\x2\x129\x135\x5$\x13\x2\x12A\x135\x5&\x14\x2\x12B\x135\x5(\x15\x2\x12C"+
		"\x135\x5*\x16\x2\x12D\x135\x5,\x17\x2\x12E\x135\x5.\x18\x2\x12F\x135\x5"+
		"\x30\x19\x2\x130\x135\x5\x32\x1A\x2\x131\x135\x5\x34\x1B\x2\x132\x135"+
		"\x5\x36\x1C\x2\x133\x135\x5\x38\x1D\x2\x134\x120\x3\x2\x2\x2\x134\x121"+
		"\x3\x2\x2\x2\x134\x122\x3\x2\x2\x2\x134\x123\x3\x2\x2\x2\x134\x124\x3"+
		"\x2\x2\x2\x134\x125\x3\x2\x2\x2\x134\x126\x3\x2\x2\x2\x134\x127\x3\x2"+
		"\x2\x2\x134\x128\x3\x2\x2\x2\x134\x129\x3\x2\x2\x2\x134\x12A\x3\x2\x2"+
		"\x2\x134\x12B\x3\x2\x2\x2\x134\x12C\x3\x2\x2\x2\x134\x12D\x3\x2\x2\x2"+
		"\x134\x12E\x3\x2\x2\x2\x134\x12F\x3\x2\x2\x2\x134\x130\x3\x2\x2\x2\x134"+
		"\x131\x3\x2\x2\x2\x134\x132\x3\x2\x2\x2\x134\x133\x3\x2\x2\x2\x135\x11"+
		"\x3\x2\x2\x2\x136\x13D\a\xCA\x2\x2\x137\x13D\a\xCE\x2\x2\x138\x13D\a\xCD"+
		"\x2\x2\x139\x13D\a\xD3\x2\x2\x13A\x13B\a\x113\x2\x2\x13B\x13D\x6\n\x3"+
		"\x2\x13C\x136\x3\x2\x2\x2\x13C\x137\x3\x2\x2\x2\x13C\x138\x3\x2\x2\x2"+
		"\x13C\x139\x3\x2\x2\x2\x13C\x13A\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E"+
		"\x13F\x5\xA0Q\x2\x13F\x13\x3\x2\x2\x2\x140\x141\a\xC6\x2\x2\x141\x14A"+
		"\a\r\x2\x2\x142\x147\a\x113\x2\x2\x143\x144\a\v\x2\x2\x144\x146\a\x113"+
		"\x2\x2\x145\x143\x3\x2\x2\x2\x146\x149\x3\x2\x2\x2\x147\x145\x3\x2\x2"+
		"\x2\x147\x148\x3\x2\x2\x2\x148\x14B\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2"+
		"\x14A\x142\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C"+
		"\x14D\a\xE\x2\x2\x14D\x15\x3\x2\x2\x2\x14E\x14F\a\xC7\x2\x2\x14F\x17\x3"+
		"\x2\x2\x2\x150\x151\a\xC8\x2\x2\x151\x19\x3\x2\x2\x2\x152\x153\a\xC9\x2"+
		"\x2\x153\x1B\x3\x2\x2\x2\x154\x155\a\xCB\x2\x2\x155\x1D\x3\x2\x2\x2\x156"+
		"\x157\a\xCC\x2\x2\x157\x1F\x3\x2\x2\x2\x158\x159\a\xCF\x2\x2\x159!\x3"+
		"\x2\x2\x2\x15A\x15B\a\xD0\x2\x2\x15B\x161\x5\xA0Q\x2\x15C\x15D\a\xD1\x2"+
		"\x2\x15D\x161\x5\xA8U\x2\x15E\x15F\a\xD2\x2\x2\x15F\x161\x5\xA8U\x2\x160"+
		"\x15A\x3\x2\x2\x2\x160\x15C\x3\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x161#\x3"+
		"\x2\x2\x2\x162\x163\a\xD4\x2\x2\x163%\x3\x2\x2\x2\x164\x165\a\xD5\x2\x2"+
		"\x165\'\x3\x2\x2\x2\x166\x167\a\xD6\x2\x2\x167\x168\a\x113\x2\x2\x168"+
		"\x169\a\f\x2\x2\x169\x16A\x5\xA0Q\x2\x16A\x16B\a\xD7\x2\x2\x16B\x16E\x5"+
		"\xA0Q\x2\x16C\x16D\a\xD8\x2\x2\x16D\x16F\x5\xA0Q\x2\x16E\x16C\x3\x2\x2"+
		"\x2\x16E\x16F\x3\x2\x2\x2\x16F)\x3\x2\x2\x2\x170\x171\t\x3\x2\x2\x171"+
		"+\x3\x2\x2\x2\x172\x173\a\xDB\x2\x2\x173-\x3\x2\x2\x2\x174\x175\a\xDC"+
		"\x2\x2\x175/\x3\x2\x2\x2\x176\x178\a\xDD\x2\x2\x177\x179\a\x113\x2\x2"+
		"\x178\x177\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x31\x3\x2\x2\x2\x17A"+
		"\x17B\a\xDE\x2\x2\x17B\x33\x3\x2\x2\x2\x17C\x17D\a\xDF\x2\x2\x17D\x35"+
		"\x3\x2\x2\x2\x17E\x17F\a\xE0\x2\x2\x17F\x37\x3\x2\x2\x2\x180\x181\a\xE1"+
		"\x2\x2\x181\x186\a\x113\x2\x2\x182\x183\a\v\x2\x2\x183\x185\a\x113\x2"+
		"\x2\x184\x182\x3\x2\x2\x2\x185\x188\x3\x2\x2\x2\x186\x184\x3\x2\x2\x2"+
		"\x186\x187\x3\x2\x2\x2\x187\x39\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x189"+
		"\x18A\a\x113\x2\x2\x18A\x18B\a\r\x2\x2\x18B\x190\x5<\x1F\x2\x18C\x18D"+
		"\a\v\x2\x2\x18D\x18F\x5<\x1F\x2\x18E\x18C\x3\x2\x2\x2\x18F\x192\x3\x2"+
		"\x2\x2\x190\x18E\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191\x193\x3\x2\x2"+
		"\x2\x192\x190\x3\x2\x2\x2\x193\x194\a\xE\x2\x2\x194;\x3\x2\x2\x2\x195"+
		"\x197\x5\x86\x44\x2\x196\x195\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197="+
		"\x3\x2\x2\x2\x198\x199\a+\x2\x2\x199\x19A\x5|?\x2\x19A?\x3\x2\x2\x2\x19B"+
		"\x19C\a\xA7\x2\x2\x19C\x19D\x5\xA0Q\x2\x19D\x41\x3\x2\x2\x2\x19E\x19F"+
		"\a\xA8\x2\x2\x19F\x1A2\x5\xA0Q\x2\x1A0\x1A1\a\v\x2\x2\x1A1\x1A3\x5\xA0"+
		"Q\x2\x1A2\x1A0\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3\x43\x3\x2\x2\x2"+
		"\x1A4\x1A5\a\xA9\x2\x2\x1A5\x1A6\x5\xA0Q\x2\x1A6\x45\x3\x2\x2\x2\x1A7"+
		"\x1A8\a\xAA\x2\x2\x1A8\x1A9\x5\xA0Q\x2\x1A9G\x3\x2\x2\x2\x1AA\x1AB\a\xAB"+
		"\x2\x2\x1AB\x1AC\x5\xA0Q\x2\x1ACI\x3\x2\x2\x2\x1AD\x1AE\a\xAE\x2\x2\x1AE"+
		"\x1AF\x5\xA0Q\x2\x1AFK\x3\x2\x2\x2\x1B0\x1B1\a\xAC\x2\x2\x1B1\x1B2\x5"+
		"\xA0Q\x2\x1B2M\x3\x2\x2\x2\x1B3\x1B4\t\x4\x2\x2\x1B4\x1B5\x5\xA0Q\x2\x1B5"+
		"O\x3\x2\x2\x2\x1B6\x1B7\a\xAF\x2\x2\x1B7\x1BC\x5\xA0Q\x2\x1B8\x1B9\a\v"+
		"\x2\x2\x1B9\x1BB\x5\xA0Q\x2\x1BA\x1B8\x3\x2\x2\x2\x1BB\x1BE\x3\x2\x2\x2"+
		"\x1BC\x1BA\x3\x2\x2\x2\x1BC\x1BD\x3\x2\x2\x2\x1BDQ\x3\x2\x2\x2\x1BE\x1BC"+
		"\x3\x2\x2\x2\x1BF\x1C0\a\xB0\x2\x2\x1C0\x1C5\x5\xA0Q\x2\x1C1\x1C2\a\v"+
		"\x2\x2\x1C2\x1C4\x5\xA0Q\x2\x1C3\x1C1\x3\x2\x2\x2\x1C4\x1C7\x3\x2\x2\x2"+
		"\x1C5\x1C3\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6S\x3\x2\x2\x2\x1C7\x1C5"+
		"\x3\x2\x2\x2\x1C8\x1C9\a\xB6\x2\x2\x1C9\x1CA\x5\xA0Q\x2\x1CAU\x3\x2\x2"+
		"\x2\x1CB\x1CC\a\xB1\x2\x2\x1CC\x1CD\x5\xA0Q\x2\x1CDW\x3\x2\x2\x2\x1CE"+
		"\x1CF\a\xB2\x2\x2\x1CF\x1D0\x5\xA0Q\x2\x1D0Y\x3\x2\x2\x2\x1D1\x1D2\a\xB3"+
		"\x2\x2\x1D2\x1D3\x5\xA0Q\x2\x1D3[\x3\x2\x2\x2\x1D4\x1D5\a\xB7\x2\x2\x1D5"+
		"\x1D8\x5\xA0Q\x2\x1D6\x1D7\a\v\x2\x2\x1D7\x1D9\x5\xA0Q\x2\x1D8\x1D6\x3"+
		"\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9]\x3\x2\x2\x2\x1DA\x1DB\a\xB8\x2\x2"+
		"\x1DB_\x3\x2\x2\x2\x1DC\x1DD\a\xB9\x2\x2\x1DD\x1E0\x5\xA0Q\x2\x1DE\x1DF"+
		"\a\v\x2\x2\x1DF\x1E1\x5\xA0Q\x2\x1E0\x1DE\x3\x2\x2\x2\x1E0\x1E1\x3\x2"+
		"\x2\x2\x1E1\x61\x3\x2\x2\x2\x1E2\x1E3\a\xBA\x2\x2\x1E3\x1E4\x5\xA0Q\x2"+
		"\x1E4\x1E5\a\v\x2\x2\x1E5\x1E6\x5\xA0Q\x2\x1E6\x63\x3\x2\x2\x2\x1E7\x1E8"+
		"\a\xBB\x2\x2\x1E8\x1E9\x5\xA0Q\x2\x1E9\x1EA\a\v\x2\x2\x1EA\x1EB\x5\xA0"+
		"Q\x2\x1EB\x65\x3\x2\x2\x2\x1EC\x1ED\a\xBC\x2\x2\x1ED\x1EE\t\x5\x2\x2\x1EE"+
		"g\x3\x2\x2\x2\x1EF\x1F1\a\xBE\x2\x2\x1F0\x1F2\x5\xA0Q\x2\x1F1\x1F0\x3"+
		"\x2\x2\x2\x1F1\x1F2\x3\x2\x2\x2\x1F2i\x3\x2\x2\x2\x1F3\x1F4\t\x6\x2\x2"+
		"\x1F4\x1F9\x5\xA0Q\x2\x1F5\x1F6\a\v\x2\x2\x1F6\x1F8\x5\xA0Q\x2\x1F7\x1F5"+
		"\x3\x2\x2\x2\x1F8\x1FB\x3\x2\x2\x2\x1F9\x1F7\x3\x2\x2\x2\x1F9\x1FA\x3"+
		"\x2\x2\x2\x1FAk\x3\x2\x2\x2\x1FB\x1F9\x3\x2\x2\x2\x1FC\x1FE\a\xC1\x2\x2"+
		"\x1FD\x1FF\x5\xA0Q\x2\x1FE\x1FD\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FF"+
		"m\x3\x2\x2\x2\x200\x201\a\xB4\x2\x2\x201\x202\x5\xA0Q\x2\x202o\x3\x2\x2"+
		"\x2\x203\x204\a\xB5\x2\x2\x204q\x3\x2\x2\x2\x205\x206\a\xC2\x2\x2\x206"+
		"\x207\x5\xA0Q\x2\x207s\x3\x2\x2\x2\x208\x209\a\xC3\x2\x2\x209\x210\x5"+
		"\xA0Q\x2\x20A\x20B\a\v\x2\x2\x20B\x20E\x5\xA0Q\x2\x20C\x20D\a\v\x2\x2"+
		"\x20D\x20F\x5\xA0Q\x2\x20E\x20C\x3\x2\x2\x2\x20E\x20F\x3\x2\x2\x2\x20F"+
		"\x211\x3\x2\x2\x2\x210\x20A\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211u\x3"+
		"\x2\x2\x2\x212\x213\a\xC4\x2\x2\x213\x21A\x5\xA0Q\x2\x214\x215\a\v\x2"+
		"\x2\x215\x218\x5\xA0Q\x2\x216\x217\a\v\x2\x2\x217\x219\x5\xA0Q\x2\x218"+
		"\x216\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219\x21B\x3\x2\x2\x2\x21A\x214"+
		"\x3\x2\x2\x2\x21A\x21B\x3\x2\x2\x2\x21Bw\x3\x2\x2\x2\x21C\x21D\a\xC5\x2"+
		"\x2\x21Dy\x3\x2\x2\x2\x21E\x21F\a\xBD\x2\x2\x21F\x220\a\x113\x2\x2\x220"+
		"{\x3\x2\x2\x2\x221\x22D\x5P)\x2\x222\x22D\x5R*\x2\x223\x22D\x5T+\x2\x224"+
		"\x22D\x5V,\x2\x225\x22D\x5X-\x2\x226\x22D\x5Z.\x2\x227\x22D\x5`\x31\x2"+
		"\x228\x22D\x5\x62\x32\x2\x229\x22D\x5\x64\x33\x2\x22A\x22D\x5n\x38\x2"+
		"\x22B\x22D\x5p\x39\x2\x22C\x221\x3\x2\x2\x2\x22C\x222\x3\x2\x2\x2\x22C"+
		"\x223\x3\x2\x2\x2\x22C\x224\x3\x2\x2\x2\x22C\x225\x3\x2\x2\x2\x22C\x226"+
		"\x3\x2\x2\x2\x22C\x227\x3\x2\x2\x2\x22C\x228\x3\x2\x2\x2\x22C\x229\x3"+
		"\x2\x2\x2\x22C\x22A\x3\x2\x2\x2\x22C\x22B\x3\x2\x2\x2\x22D}\x3\x2\x2\x2"+
		"\x22E\x232\x5\x80\x41\x2\x22F\x232\x5\x82\x42\x2\x230\x232\x5\x84\x43"+
		"\x2\x231\x22E\x3\x2\x2\x2\x231\x22F\x3\x2\x2\x2\x231\x230\x3\x2\x2\x2"+
		"\x232\x7F\x3\x2\x2\x2\x233\x234\t\a\x2\x2\x234\x81\x3\x2\x2\x2\x235\x236"+
		"\ak\x2\x2\x236\x237\x5\x86\x44\x2\x237\x238\a\v\x2\x2\x238\x239\x5\x86"+
		"\x44\x2\x239\x301\x3\x2\x2\x2\x23A\x23B\al\x2\x2\x23B\x301\x5\x86\x44"+
		"\x2\x23C\x23D\am\x2\x2\x23D\x301\x5\x86\x44\x2\x23E\x23F\an\x2\x2\x23F"+
		"\x240\x5\x86\x44\x2\x240\x241\a\v\x2\x2\x241\x242\x5\x86\x44\x2\x242\x301"+
		"\x3\x2\x2\x2\x243\x244\ao\x2\x2\x244\x245\x5\x86\x44\x2\x245\x246\a\v"+
		"\x2\x2\x246\x247\x5\x86\x44\x2\x247\x301\x3\x2\x2\x2\x248\x249\ap\x2\x2"+
		"\x249\x24A\x5\x86\x44\x2\x24A\x24B\a\v\x2\x2\x24B\x24C\x5\x86\x44\x2\x24C"+
		"\x301\x3\x2\x2\x2\x24D\x251\aq\x2\x2\x24E\x24F\x5\x86\x44\x2\x24F\x250"+
		"\a\v\x2\x2\x250\x252\x3\x2\x2\x2\x251\x24E\x3\x2\x2\x2\x251\x252\x3\x2"+
		"\x2\x2\x252\x253\x3\x2\x2\x2\x253\x301\x5\x86\x44\x2\x254\x255\ar\x2\x2"+
		"\x255\x256\x5\x86\x44\x2\x256\x257\a\v\x2\x2\x257\x258\x5\x86\x44\x2\x258"+
		"\x301\x3\x2\x2\x2\x259\x25D\as\x2\x2\x25A\x25B\x5\x86\x44\x2\x25B\x25C"+
		"\a\v\x2\x2\x25C\x25E\x3\x2\x2\x2\x25D\x25A\x3\x2\x2\x2\x25D\x25E\x3\x2"+
		"\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\x301\x5\x86\x44\x2\x260\x264\at\x2\x2"+
		"\x261\x262\x5\x86\x44\x2\x262\x263\a\v\x2\x2\x263\x265\x3\x2\x2\x2\x264"+
		"\x261\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x266\x3\x2\x2\x2\x266\x301"+
		"\x5\x86\x44\x2\x267\x26B\au\x2\x2\x268\x269\x5\x86\x44\x2\x269\x26A\a"+
		"\v\x2\x2\x26A\x26C\x3\x2\x2\x2\x26B\x268\x3\x2\x2\x2\x26B\x26C\x3\x2\x2"+
		"\x2\x26C\x26D\x3\x2\x2\x2\x26D\x301\x5\x86\x44\x2\x26E\x272\av\x2\x2\x26F"+
		"\x270\x5\x86\x44\x2\x270\x271\a\v\x2\x2\x271\x273\x3\x2\x2\x2\x272\x26F"+
		"\x3\x2\x2\x2\x272\x273\x3\x2\x2\x2\x273\x274\x3\x2\x2\x2\x274\x301\x5"+
		"\x86\x44\x2\x275\x276\aw\x2\x2\x276\x301\x5\x86\x44\x2\x277\x27B\ax\x2"+
		"\x2\x278\x279\x5\x86\x44\x2\x279\x27A\a\v\x2\x2\x27A\x27C\x3\x2\x2\x2"+
		"\x27B\x278\x3\x2\x2\x2\x27B\x27C\x3\x2\x2\x2\x27C\x27D\x3\x2\x2\x2\x27D"+
		"\x301\x5\x86\x44\x2\x27E\x282\ay\x2\x2\x27F\x280\x5\x86\x44\x2\x280\x281"+
		"\a\v\x2\x2\x281\x283\x3\x2\x2\x2\x282\x27F\x3\x2\x2\x2\x282\x283\x3\x2"+
		"\x2\x2\x283\x284\x3\x2\x2\x2\x284\x301\x5\x86\x44\x2\x285\x289\az\x2\x2"+
		"\x286\x287\x5\x86\x44\x2\x287\x288\a\v\x2\x2\x288\x28A\x3\x2\x2\x2\x289"+
		"\x286\x3\x2\x2\x2\x289\x28A\x3\x2\x2\x2\x28A\x28B\x3\x2\x2\x2\x28B\x301"+
		"\x5\x86\x44\x2\x28C\x28E\aR\x2\x2\x28D\x28F\x5\x86\x44\x2\x28E\x28D\x3"+
		"\x2\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F\x301\x3\x2\x2\x2\x290\x291\a{\x2"+
		"\x2\x291\x301\x5\x86\x44\x2\x292\x293\a|\x2\x2\x293\x301\x5\x86\x44\x2"+
		"\x294\x295\a}\x2\x2\x295\x301\x5\x86\x44\x2\x296\x29A\a~\x2\x2\x297\x298"+
		"\x5\x86\x44\x2\x298\x299\a\v\x2\x2\x299\x29B\x3\x2\x2\x2\x29A\x297\x3"+
		"\x2\x2\x2\x29A\x29B\x3\x2\x2\x2\x29B\x29C\x3\x2\x2\x2\x29C\x301\x5\x86"+
		"\x44\x2\x29D\x2A1\a\x7F\x2\x2\x29E\x29F\x5\x86\x44\x2\x29F\x2A0\a\v\x2"+
		"\x2\x2A0\x2A2\x3\x2\x2\x2\x2A1\x29E\x3\x2\x2\x2\x2A1\x2A2\x3\x2\x2\x2"+
		"\x2A2\x2A3\x3\x2\x2\x2\x2A3\x301\x5\x86\x44\x2\x2A4\x2A5\a\x80\x2\x2\x2A5"+
		"\x301\x5\x86\x44\x2\x2A6\x2AA\a\x81\x2\x2\x2A7\x2A8\x5\x86\x44\x2\x2A8"+
		"\x2A9\a\v\x2\x2\x2A9\x2AB\x3\x2\x2\x2\x2AA\x2A7\x3\x2\x2\x2\x2AA\x2AB"+
		"\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x301\x5\x86\x44\x2\x2AD\x2B1\a"+
		"\x82\x2\x2\x2AE\x2AF\x5\x86\x44\x2\x2AF\x2B0\a\v\x2\x2\x2B0\x2B2\x3\x2"+
		"\x2\x2\x2B1\x2AE\x3\x2\x2\x2\x2B1\x2B2\x3\x2\x2\x2\x2B2\x2B3\x3\x2\x2"+
		"\x2\x2B3\x301\x5\x86\x44\x2\x2B4\x2B8\a\x83\x2\x2\x2B5\x2B6\x5\x86\x44"+
		"\x2\x2B6\x2B7\a\v\x2\x2\x2B7\x2B9\x3\x2\x2\x2\x2B8\x2B5\x3\x2\x2\x2\x2B8"+
		"\x2B9\x3\x2\x2\x2\x2B9\x2BA\x3\x2\x2\x2\x2BA\x301\x5\x86\x44\x2\x2BB\x2BF"+
		"\a\x84\x2\x2\x2BC\x2BD\x5\x86\x44\x2\x2BD\x2BE\a\v\x2\x2\x2BE\x2C0\x3"+
		"\x2\x2\x2\x2BF\x2BC\x3\x2\x2\x2\x2BF\x2C0\x3\x2\x2\x2\x2C0\x2C1\x3\x2"+
		"\x2\x2\x2C1\x301\x5\x86\x44\x2\x2C2\x2C6\a\x85\x2\x2\x2C3\x2C4\x5\x86"+
		"\x44\x2\x2C4\x2C5\a\v\x2\x2\x2C5\x2C7\x3\x2\x2\x2\x2C6\x2C3\x3\x2\x2\x2"+
		"\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2C8\x3\x2\x2\x2\x2C8\x301\x5\x86\x44\x2\x2C9"+
		"\x2CD\a\x86\x2\x2\x2CA\x2CB\x5\x86\x44\x2\x2CB\x2CC\a\v\x2\x2\x2CC\x2CE"+
		"\x3\x2\x2\x2\x2CD\x2CA\x3\x2\x2\x2\x2CD\x2CE\x3\x2\x2\x2\x2CE\x2CF\x3"+
		"\x2\x2\x2\x2CF\x301\x5\x86\x44\x2\x2D0\x2D4\a\x87\x2\x2\x2D1\x2D2\x5\x86"+
		"\x44\x2\x2D2\x2D3\a\v\x2\x2\x2D3\x2D5\x3\x2\x2\x2\x2D4\x2D1\x3\x2\x2\x2"+
		"\x2D4\x2D5\x3\x2\x2\x2\x2D5\x2D6\x3\x2\x2\x2\x2D6\x301\x5\x86\x44\x2\x2D7"+
		"\x2DB\a\x88\x2\x2\x2D8\x2D9\x5\x86\x44\x2\x2D9\x2DA\a\v\x2\x2\x2DA\x2DC"+
		"\x3\x2\x2\x2\x2DB\x2D8\x3\x2\x2\x2\x2DB\x2DC\x3\x2\x2\x2\x2DC\x2DD\x3"+
		"\x2\x2\x2\x2DD\x301\x5\x86\x44\x2\x2DE\x2DF\a\x89\x2\x2\x2DF\x2E0\x5\x86"+
		"\x44\x2\x2E0\x2E1\a\v\x2\x2\x2E1\x2E2\x5\x86\x44\x2\x2E2\x301\x3\x2\x2"+
		"\x2\x2E3\x2E4\a\x8A\x2\x2\x2E4\x2E5\x5\x86\x44\x2\x2E5\x2E9\a\v\x2\x2"+
		"\x2E6\x2E7\x5\x86\x44\x2\x2E7\x2E8\a\v\x2\x2\x2E8\x2EA\x3\x2\x2\x2\x2E9"+
		"\x2E6\x3\x2\x2\x2\x2E9\x2EA\x3\x2\x2\x2\x2EA\x2EB\x3\x2\x2\x2\x2EB\x2EC"+
		"\x5\x86\x44\x2\x2EC\x301\x3\x2\x2\x2\x2ED\x2EE\a\x8B\x2\x2\x2EE\x2EF\x5"+
		"\x86\x44\x2\x2EF\x2F3\a\v\x2\x2\x2F0\x2F1\x5\x86\x44\x2\x2F1\x2F2\a\v"+
		"\x2\x2\x2F2\x2F4\x3\x2\x2\x2\x2F3\x2F0\x3\x2\x2\x2\x2F3\x2F4\x3\x2\x2"+
		"\x2\x2F4\x2F5\x3\x2\x2\x2\x2F5\x2F6\x5\x86\x44\x2\x2F6\x301\x3\x2\x2\x2"+
		"\x2F7\x2F8\a\x8F\x2\x2\x2F8\x301\x5\x86\x44\x2\x2F9\x2FA\a\x90\x2\x2\x2FA"+
		"\x301\x5\x86\x44\x2\x2FB\x2FC\a\x91\x2\x2\x2FC\x2FD\x5\x86\x44\x2\x2FD"+
		"\x2FE\a\v\x2\x2\x2FE\x2FF\x5\x86\x44\x2\x2FF\x301\x3\x2\x2\x2\x300\x235"+
		"\x3\x2\x2\x2\x300\x23A\x3\x2\x2\x2\x300\x23C\x3\x2\x2\x2\x300\x23E\x3"+
		"\x2\x2\x2\x300\x243\x3\x2\x2\x2\x300\x248\x3\x2\x2\x2\x300\x24D\x3\x2"+
		"\x2\x2\x300\x254\x3\x2\x2\x2\x300\x259\x3\x2\x2\x2\x300\x260\x3\x2\x2"+
		"\x2\x300\x267\x3\x2\x2\x2\x300\x26E\x3\x2\x2\x2\x300\x275\x3\x2\x2\x2"+
		"\x300\x277\x3\x2\x2\x2\x300\x27E\x3\x2\x2\x2\x300\x285\x3\x2\x2\x2\x300"+
		"\x28C\x3\x2\x2\x2\x300\x290\x3\x2\x2\x2\x300\x292\x3\x2\x2\x2\x300\x294"+
		"\x3\x2\x2\x2\x300\x296\x3\x2\x2\x2\x300\x29D\x3\x2\x2\x2\x300\x2A4\x3"+
		"\x2\x2\x2\x300\x2A6\x3\x2\x2\x2\x300\x2AD\x3\x2\x2\x2\x300\x2B4\x3\x2"+
		"\x2\x2\x300\x2BB\x3\x2\x2\x2\x300\x2C2\x3\x2\x2\x2\x300\x2C9\x3\x2\x2"+
		"\x2\x300\x2D0\x3\x2\x2\x2\x300\x2D7\x3\x2\x2\x2\x300\x2DE\x3\x2\x2\x2"+
		"\x300\x2E3\x3\x2\x2\x2\x300\x2ED\x3\x2\x2\x2\x300\x2F7\x3\x2\x2\x2\x300"+
		"\x2F9\x3\x2\x2\x2\x300\x2FB\x3\x2\x2\x2\x301\x83\x3\x2\x2\x2\x302\x303"+
		"\t\b\x2\x2\x303\x85\x3\x2\x2\x2\x304\x31A\x5\x88\x45\x2\x305\x31A\x5\x8A"+
		"\x46\x2\x306\x31A\x5\x8CG\x2\x307\x31A\x5\x8EH\x2\x308\x31A\x5\x90I\x2"+
		"\x309\x31A\x5\x94K\x2\x30A\x31A\x5\x96L\x2\x30B\x31A\x5\x98M\x2\x30C\x31A"+
		"\x5\x9AN\x2\x30D\x31A\x5\x9CO\x2\x30E\x31A\x5\xA0Q\x2\x30F\x31A\x5\x9E"+
		"P\x2\x310\x311\t\t\x2\x2\x311\x314\a\r\x2\x2\x312\x315\x5\x92J\x2\x313"+
		"\x315\x5\xAAV\x2\x314\x312\x3\x2\x2\x2\x314\x313\x3\x2\x2\x2\x315\x316"+
		"\x3\x2\x2\x2\x316\x317\a\xE\x2\x2\x317\x31A\x3\x2\x2\x2\x318\x31A\a\x116"+
		"\x2\x2\x319\x304\x3\x2\x2\x2\x319\x305\x3\x2\x2\x2\x319\x306\x3\x2\x2"+
		"\x2\x319\x307\x3\x2\x2\x2\x319\x308\x3\x2\x2\x2\x319\x309\x3\x2\x2\x2"+
		"\x319\x30A\x3\x2\x2\x2\x319\x30B\x3\x2\x2\x2\x319\x30C\x3\x2\x2\x2\x319"+
		"\x30D\x3\x2\x2\x2\x319\x30E\x3\x2\x2\x2\x319\x30F\x3\x2\x2\x2\x319\x310"+
		"\x3\x2\x2\x2\x319\x318\x3\x2\x2\x2\x31A\x87\x3\x2\x2\x2\x31B\x31C\t\n"+
		"\x2\x2\x31C\x89\x3\x2\x2\x2\x31D\x31E\t\v\x2\x2\x31E\x8B\x3\x2\x2\x2\x31F"+
		"\x320\t\f\x2\x2\x320\x8D\x3\x2\x2\x2\x321\x322\t\r\x2\x2\x322\x8F\x3\x2"+
		"\x2\x2\x323\x324\t\xE\x2\x2\x324\x91\x3\x2\x2\x2\x325\x326\t\xF\x2\x2"+
		"\x326\x93\x3\x2\x2\x2\x327\x328\t\x10\x2\x2\x328\x95\x3\x2\x2\x2\x329"+
		"\x32A\a\r\x2\x2\x32A\x32B\x5\x8EH\x2\x32B\x32C\a\xE\x2\x2\x32C\x97\x3"+
		"\x2\x2\x2\x32D\x32E\a\r\x2\x2\x32E\x32F\a.\x2\x2\x32F\x330\a\xE\x2\x2"+
		"\x330\x99\x3\x2\x2\x2\x331\x332\a\r\x2\x2\x332\x333\x5\xA0Q\x2\x333\x334"+
		"\a\xE\x2\x2\x334\x9B\x3\x2\x2\x2\x335\x336\a\r\x2\x2\x336\x339\x5\x90"+
		"I\x2\x337\x338\t\x11\x2\x2\x338\x33A\x5\xA0Q\x2\x339\x337\x3\x2\x2\x2"+
		"\x339\x33A\x3\x2\x2\x2\x33A\x33B\x3\x2\x2\x2\x33B\x33C\a\xE\x2\x2\x33C"+
		"\x9D\x3\x2\x2\x2\x33D\x33E\t\x12\x2\x2\x33E\x9F\x3\x2\x2\x2\x33F\x340"+
		"\bQ\x1\x2\x340\x356\x5\xA4S\x2\x341\x356\x5\xA2R\x2\x342\x356\x5\xAAV"+
		"\x2\x343\x344\a\x12\x2\x2\x344\x356\x5\xA0Q\x14\x345\x346\a\x13\x2\x2"+
		"\x346\x356\x5\xA0Q\x13\x347\x348\a&\x2\x2\x348\x356\x5\xA0Q\x12\x349\x34A"+
		"\a)\x2\x2\x34A\x356\x5\xA0Q\x11\x34B\x34C\a\xF\x2\x2\x34C\x34D\x5\xA0"+
		"Q\x2\x34D\x34E\a\x10\x2\x2\x34E\x356\x3\x2\x2\x2\x34F\x350\a\r\x2\x2\x350"+
		"\x351\x5\xA0Q\x2\x351\x352\a\xE\x2\x2\x352\x356\x3\x2\x2\x2\x353\x356"+
		"\x5\xA6T\x2\x354\x356\x5\xA8U\x2\x355\x33F\x3\x2\x2\x2\x355\x341\x3\x2"+
		"\x2\x2\x355\x342\x3\x2\x2\x2\x355\x343\x3\x2\x2\x2\x355\x345\x3\x2\x2"+
		"\x2\x355\x347\x3\x2\x2\x2\x355\x349\x3\x2\x2\x2\x355\x34B\x3\x2\x2\x2"+
		"\x355\x34F\x3\x2\x2\x2\x355\x353\x3\x2\x2\x2\x355\x354\x3\x2\x2\x2\x356"+
		"\x37A\x3\x2\x2\x2\x357\x358\f\f\x2\x2\x358\x359\t\x13\x2\x2\x359\x379"+
		"\x5\xA0Q\r\x35A\x35B\f\v\x2\x2\x35B\x35C\t\x14\x2\x2\x35C\x379\x5\xA0"+
		"Q\f\x35D\x35E\f\n\x2\x2\x35E\x35F\t\x11\x2\x2\x35F\x379\x5\xA0Q\v\x360"+
		"\x361\f\t\x2\x2\x361\x362\t\x15\x2\x2\x362\x379\x5\xA0Q\n\x363\x364\f"+
		"\b\x2\x2\x364\x365\t\x16\x2\x2\x365\x379\x5\xA0Q\t\x366\x367\f\a\x2\x2"+
		"\x367\x368\t\x17\x2\x2\x368\x379\x5\xA0Q\b\x369\x36A\f\x6\x2\x2\x36A\x36B"+
		"\a\x16\x2\x2\x36B\x379\x5\xA0Q\a\x36C\x36D\f\x5\x2\x2\x36D\x36E\a\x15"+
		"\x2\x2\x36E\x379\x5\xA0Q\x6\x36F\x370\f\x4\x2\x2\x370\x371\a\x14\x2\x2"+
		"\x371\x379\x5\xA0Q\x5\x372\x373\f\x3\x2\x2\x373\x374\a\x11\x2\x2\x374"+
		"\x375\x5\xA0Q\x2\x375\x376\a\a\x2\x2\x376\x377\x5\xA0Q\x4\x377\x379\x3"+
		"\x2\x2\x2\x378\x357\x3\x2\x2\x2\x378\x35A\x3\x2\x2\x2\x378\x35D\x3\x2"+
		"\x2\x2\x378\x360\x3\x2\x2\x2\x378\x363\x3\x2\x2\x2\x378\x366\x3\x2\x2"+
		"\x2\x378\x369\x3\x2\x2\x2\x378\x36C\x3\x2\x2\x2\x378\x36F\x3\x2\x2\x2"+
		"\x378\x372\x3\x2\x2\x2\x379\x37C\x3\x2\x2\x2\x37A\x378\x3\x2\x2\x2\x37A"+
		"\x37B\x3\x2\x2\x2\x37B\xA1\x3\x2\x2\x2\x37C\x37A\x3\x2\x2\x2\x37D\x37E"+
		"\a\x113\x2\x2\x37E\x37F\a\r\x2\x2\x37F\x38D\a\xE\x2\x2\x380\x381\a\x113"+
		"\x2\x2\x381\x382\a\r\x2\x2\x382\x387\x5\xA0Q\x2\x383\x384\a\v\x2\x2\x384"+
		"\x386\x5\xA0Q\x2\x385\x383\x3\x2\x2\x2\x386\x389\x3\x2\x2\x2\x387\x385"+
		"\x3\x2\x2\x2\x387\x388\x3\x2\x2\x2\x388\x38A\x3\x2\x2\x2\x389\x387\x3"+
		"\x2\x2\x2\x38A\x38B\a\xE\x2\x2\x38B\x38D\x3\x2\x2\x2\x38C\x37D\x3\x2\x2"+
		"\x2\x38C\x380\x3\x2\x2\x2\x38D\xA3\x3\x2\x2\x2\x38E\x38F\t\x18\x2\x2\x38F"+
		"\x393\a\r\x2\x2\x390\x394\x5\xB0Y\x2\x391\x394\x5\xAEX\x2\x392\x394\x5"+
		"\xAAV\x2\x393\x390\x3\x2\x2\x2\x393\x391\x3\x2\x2\x2\x393\x392\x3\x2\x2"+
		"\x2\x394\x395\x3\x2\x2\x2\x395\x396\a\xE\x2\x2\x396\x45E\x3\x2\x2\x2\x397"+
		"\x398\a\xE6\x2\x2\x398\x39A\a\r\x2\x2\x399\x39B\x5\x86\x44\x2\x39A\x399"+
		"\x3\x2\x2\x2\x39A\x39B\x3\x2\x2\x2\x39B\x39C\x3\x2\x2\x2\x39C\x45E\a\xE"+
		"\x2\x2\x39D\x39E\a\xE7\x2\x2\x39E\x3A0\a\r\x2\x2\x39F\x3A1\x5\x86\x44"+
		"\x2\x3A0\x39F\x3\x2\x2\x2\x3A0\x3A1\x3\x2\x2\x2\x3A1\x3A2\x3\x2\x2\x2"+
		"\x3A2\x45E\a\xE\x2\x2\x3A3\x3A4\a\xE8\x2\x2\x3A4\x3A6\a\r\x2\x2\x3A5\x3A7"+
		"\x5\x86\x44\x2\x3A6\x3A5\x3\x2\x2\x2\x3A6\x3A7\x3\x2\x2\x2\x3A7\x3A8\x3"+
		"\x2\x2\x2\x3A8\x45E\a\xE\x2\x2\x3A9\x3AA\a\xE9\x2\x2\x3AA\x3AC\a\r\x2"+
		"\x2\x3AB\x3AD\x5\x86\x44\x2\x3AC\x3AB\x3\x2\x2\x2\x3AC\x3AD\x3\x2\x2\x2"+
		"\x3AD\x3AE\x3\x2\x2\x2\x3AE\x45E\a\xE\x2\x2\x3AF\x3B0\a\xEA\x2\x2\x3B0"+
		"\x3B2\a\r\x2\x2\x3B1\x3B3\x5\x86\x44\x2\x3B2\x3B1\x3\x2\x2\x2\x3B2\x3B3"+
		"\x3\x2\x2\x2\x3B3\x3B4\x3\x2\x2\x2\x3B4\x45E\a\xE\x2\x2\x3B5\x3B6\a\xEB"+
		"\x2\x2\x3B6\x3B8\a\r\x2\x2\x3B7\x3B9\x5\x86\x44\x2\x3B8\x3B7\x3\x2\x2"+
		"\x2\x3B8\x3B9\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2\x3BA\x45E\a\xE\x2\x2\x3BB"+
		"\x3BC\a\xEC\x2\x2\x3BC\x3BE\a\r\x2\x2\x3BD\x3BF\x5\x86\x44\x2\x3BE\x3BD"+
		"\x3\x2\x2\x2\x3BE\x3BF\x3\x2\x2\x2\x3BF\x3C0\x3\x2\x2\x2\x3C0\x45E\a\xE"+
		"\x2\x2\x3C1\x3C2\a\xED\x2\x2\x3C2\x3C4\a\r\x2\x2\x3C3\x3C5\x5\x86\x44"+
		"\x2\x3C4\x3C3\x3\x2\x2\x2\x3C4\x3C5\x3\x2\x2\x2\x3C5\x3C6\x3\x2\x2\x2"+
		"\x3C6\x45E\a\xE\x2\x2\x3C7\x3C8\a\xEE\x2\x2\x3C8\x3CA\a\r\x2\x2\x3C9\x3CB"+
		"\x5\x86\x44\x2\x3CA\x3C9\x3\x2\x2\x2\x3CA\x3CB\x3\x2\x2\x2\x3CB\x3CC\x3"+
		"\x2\x2\x2\x3CC\x45E\a\xE\x2\x2\x3CD\x3CE\a\xEF\x2\x2\x3CE\x3D0\a\r\x2"+
		"\x2\x3CF\x3D1\x5\x86\x44\x2\x3D0\x3CF\x3\x2\x2\x2\x3D0\x3D1\x3\x2\x2\x2"+
		"\x3D1\x3D2\x3\x2\x2\x2\x3D2\x45E\a\xE\x2\x2\x3D3\x3D4\a\xF0\x2\x2\x3D4"+
		"\x3D6\a\r\x2\x2\x3D5\x3D7\x5\x86\x44\x2\x3D6\x3D5\x3\x2\x2\x2\x3D6\x3D7"+
		"\x3\x2\x2\x2\x3D7\x3D8\x3\x2\x2\x2\x3D8\x45E\a\xE\x2\x2\x3D9\x3DA\a\xF1"+
		"\x2\x2\x3DA\x3DC\a\r\x2\x2\x3DB\x3DD\x5\x86\x44\x2\x3DC\x3DB\x3\x2\x2"+
		"\x2\x3DC\x3DD\x3\x2\x2\x2\x3DD\x3DE\x3\x2\x2\x2\x3DE\x45E\a\xE\x2\x2\x3DF"+
		"\x3E0\a\xF2\x2\x2\x3E0\x3E2\a\r\x2\x2\x3E1\x3E3\x5\x86\x44\x2\x3E2\x3E1"+
		"\x3\x2\x2\x2\x3E2\x3E3\x3\x2\x2\x2\x3E3\x3E4\x3\x2\x2\x2\x3E4\x45E\a\xE"+
		"\x2\x2\x3E5\x3E6\a\xF3\x2\x2\x3E6\x3E8\a\r\x2\x2\x3E7\x3E9\x5\x86\x44"+
		"\x2\x3E8\x3E7\x3\x2\x2\x2\x3E8\x3E9\x3\x2\x2\x2\x3E9\x3EA\x3\x2\x2\x2"+
		"\x3EA\x45E\a\xE\x2\x2\x3EB\x3EC\a\xF4\x2\x2\x3EC\x3EE\a\r\x2\x2\x3ED\x3EF"+
		"\x5\x86\x44\x2\x3EE\x3ED\x3\x2\x2\x2\x3EE\x3EF\x3\x2\x2\x2\x3EF\x3F0\x3"+
		"\x2\x2\x2\x3F0\x45E\a\xE\x2\x2\x3F1\x3F2\a\xF5\x2\x2\x3F2\x3F4\a\r\x2"+
		"\x2\x3F3\x3F5\x5\x86\x44\x2\x3F4\x3F3\x3\x2\x2\x2\x3F4\x3F5\x3\x2\x2\x2"+
		"\x3F5\x3F6\x3\x2\x2\x2\x3F6\x45E\a\xE\x2\x2\x3F7\x3F8\a\xF6\x2\x2\x3F8"+
		"\x3FA\a\r\x2\x2\x3F9\x3FB\x5\x86\x44\x2\x3FA\x3F9\x3\x2\x2\x2\x3FA\x3FB"+
		"\x3\x2\x2\x2\x3FB\x3FC\x3\x2\x2\x2\x3FC\x45E\a\xE\x2\x2\x3FD\x3FE\a\xF7"+
		"\x2\x2\x3FE\x400\a\r\x2\x2\x3FF\x401\x5\x86\x44\x2\x400\x3FF\x3\x2\x2"+
		"\x2\x400\x401\x3\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402\x45E\a\xE\x2\x2\x403"+
		"\x404\a\xF8\x2\x2\x404\x406\a\r\x2\x2\x405\x407\x5\x86\x44\x2\x406\x405"+
		"\x3\x2\x2\x2\x406\x407\x3\x2\x2\x2\x407\x408\x3\x2\x2\x2\x408\x45E\a\xE"+
		"\x2\x2\x409\x40A\a\xF9\x2\x2\x40A\x40C\a\r\x2\x2\x40B\x40D\x5\x86\x44"+
		"\x2\x40C\x40B\x3\x2\x2\x2\x40C\x40D\x3\x2\x2\x2\x40D\x40E\x3\x2\x2\x2"+
		"\x40E\x45E\a\xE\x2\x2\x40F\x410\a\xFA\x2\x2\x410\x412\a\r\x2\x2\x411\x413"+
		"\x5\x86\x44\x2\x412\x411\x3\x2\x2\x2\x412\x413\x3\x2\x2\x2\x413\x414\x3"+
		"\x2\x2\x2\x414\x45E\a\xE\x2\x2\x415\x416\a\xFB\x2\x2\x416\x418\a\r\x2"+
		"\x2\x417\x419\x5\x86\x44\x2\x418\x417\x3\x2\x2\x2\x418\x419\x3\x2\x2\x2"+
		"\x419\x41A\x3\x2\x2\x2\x41A\x45E\a\xE\x2\x2\x41B\x41C\a\xFC\x2\x2\x41C"+
		"\x41E\a\r\x2\x2\x41D\x41F\x5\x86\x44\x2\x41E\x41D\x3\x2\x2\x2\x41E\x41F"+
		"\x3\x2\x2\x2\x41F\x420\x3\x2\x2\x2\x420\x45E\a\xE\x2\x2\x421\x422\a\xFD"+
		"\x2\x2\x422\x424\a\r\x2\x2\x423\x425\x5\x86\x44\x2\x424\x423\x3\x2\x2"+
		"\x2\x424\x425\x3\x2\x2\x2\x425\x426\x3\x2\x2\x2\x426\x45E\a\xE\x2\x2\x427"+
		"\x428\a\xFE\x2\x2\x428\x42A\a\r\x2\x2\x429\x42B\x5\x86\x44\x2\x42A\x429"+
		"\x3\x2\x2\x2\x42A\x42B\x3\x2\x2\x2\x42B\x42C\x3\x2\x2\x2\x42C\x45E\a\xE"+
		"\x2\x2\x42D\x42E\a\xFF\x2\x2\x42E\x430\a\r\x2\x2\x42F\x431\x5\x86\x44"+
		"\x2\x430\x42F\x3\x2\x2\x2\x430\x431\x3\x2\x2\x2\x431\x432\x3\x2\x2\x2"+
		"\x432\x45E\a\xE\x2\x2\x433\x434\a\x101\x2\x2\x434\x436\a\r\x2\x2\x435"+
		"\x437\x5\x86\x44\x2\x436\x435\x3\x2\x2\x2\x436\x437\x3\x2\x2\x2\x437\x438"+
		"\x3\x2\x2\x2\x438\x45E\a\xE\x2\x2\x439\x43A\a\x102\x2\x2\x43A\x43C\a\r"+
		"\x2\x2\x43B\x43D\x5\x86\x44\x2\x43C\x43B\x3\x2\x2\x2\x43C\x43D\x3\x2\x2"+
		"\x2\x43D\x43E\x3\x2\x2\x2\x43E\x45E\a\xE\x2\x2\x43F\x440\a\x103\x2\x2"+
		"\x440\x442\a\r\x2\x2\x441\x443\x5\x86\x44\x2\x442\x441\x3\x2\x2\x2\x442"+
		"\x443\x3\x2\x2\x2\x443\x444\x3\x2\x2\x2\x444\x45E\a\xE\x2\x2\x445\x446"+
		"\a\x104\x2\x2\x446\x448\a\r\x2\x2\x447\x449\x5\x86\x44\x2\x448\x447\x3"+
		"\x2\x2\x2\x448\x449\x3\x2\x2\x2\x449\x44A\x3\x2\x2\x2\x44A\x45E\a\xE\x2"+
		"\x2\x44B\x44C\a\x105\x2\x2\x44C\x44E\a\r\x2\x2\x44D\x44F\x5\x86\x44\x2"+
		"\x44E\x44D\x3\x2\x2\x2\x44E\x44F\x3\x2\x2\x2\x44F\x450\x3\x2\x2\x2\x450"+
		"\x45E\a\xE\x2\x2\x451\x452\a\x106\x2\x2\x452\x454\a\r\x2\x2\x453\x455"+
		"\x5\x86\x44\x2\x454\x453\x3\x2\x2\x2\x454\x455\x3\x2\x2\x2\x455\x456\x3"+
		"\x2\x2\x2\x456\x45E\a\xE\x2\x2\x457\x458\a\x100\x2\x2\x458\x45A\a\r\x2"+
		"\x2\x459\x45B\x5\x86\x44\x2\x45A\x459\x3\x2\x2\x2\x45A\x45B\x3\x2\x2\x2"+
		"\x45B\x45C\x3\x2\x2\x2\x45C\x45E\a\xE\x2\x2\x45D\x38E\x3\x2\x2\x2\x45D"+
		"\x397\x3\x2\x2\x2\x45D\x39D\x3\x2\x2\x2\x45D\x3A3\x3\x2\x2\x2\x45D\x3A9"+
		"\x3\x2\x2\x2\x45D\x3AF\x3\x2\x2\x2\x45D\x3B5\x3\x2\x2\x2\x45D\x3BB\x3"+
		"\x2\x2\x2\x45D\x3C1\x3\x2\x2\x2\x45D\x3C7\x3\x2\x2\x2\x45D\x3CD\x3\x2"+
		"\x2\x2\x45D\x3D3\x3\x2\x2\x2\x45D\x3D9\x3\x2\x2\x2\x45D\x3DF\x3\x2\x2"+
		"\x2\x45D\x3E5\x3\x2\x2\x2\x45D\x3EB\x3\x2\x2\x2\x45D\x3F1\x3\x2\x2\x2"+
		"\x45D\x3F7\x3\x2\x2\x2\x45D\x3FD\x3\x2\x2\x2\x45D\x403\x3\x2\x2\x2\x45D"+
		"\x409\x3\x2\x2\x2\x45D\x40F\x3\x2\x2\x2\x45D\x415\x3\x2\x2\x2\x45D\x41B"+
		"\x3\x2\x2\x2\x45D\x421\x3\x2\x2\x2\x45D\x427\x3\x2\x2\x2\x45D\x42D\x3"+
		"\x2\x2\x2\x45D\x433\x3\x2\x2\x2\x45D\x439\x3\x2\x2\x2\x45D\x43F\x3\x2"+
		"\x2\x2\x45D\x445\x3\x2\x2\x2\x45D\x44B\x3\x2\x2\x2\x45D\x451\x3\x2\x2"+
		"\x2\x45D\x457\x3\x2\x2\x2\x45E\xA5\x3\x2\x2\x2\x45F\x46A\a\x107\x2\x2"+
		"\x460\x46A\a\x10A\x2\x2\x461\x46A\a\x109\x2\x2\x462\x46A\a\x10D\x2\x2"+
		"\x463\x46A\a\x108\x2\x2\x464\x46A\a\x10C\x2\x2\x465\x46A\a\x10F\x2\x2"+
		"\x466\x46A\a\x10E\x2\x2\x467\x46A\t\x19\x2\x2\x468\x46A\a\x112\x2\x2\x469"+
		"\x45F\x3\x2\x2\x2\x469\x460\x3\x2\x2\x2\x469\x461\x3\x2\x2\x2\x469\x462"+
		"\x3\x2\x2\x2\x469\x463\x3\x2\x2\x2\x469\x464\x3\x2\x2\x2\x469\x465\x3"+
		"\x2\x2\x2\x469\x466\x3\x2\x2\x2\x469\x467\x3\x2\x2\x2\x469\x468\x3\x2"+
		"\x2\x2\x46A\xA7\x3\x2\x2\x2\x46B\x46D\a\b\x2\x2\x46C\x46B\x3\x2\x2\x2"+
		"\x46C\x46D\x3\x2\x2\x2\x46D\x46E\x3\x2\x2\x2\x46E\x46F\a\x113\x2\x2\x46F"+
		"\xA9\x3\x2\x2\x2\x470\x471\a\'\x2\x2\x471\x472\a\x113\x2\x2\x472\x473"+
		"\a(\x2\x2\x473\xAB\x3\x2\x2\x2\x474\x47B\x5\x88\x45\x2\x475\x47B\x5\x8A"+
		"\x46\x2\x476\x47B\x5\x8CG\x2\x477\x47B\x5\x8EH\x2\x478\x47B\x5\x90I\x2"+
		"\x479\x47B\x5\x94K\x2\x47A\x474\x3\x2\x2\x2\x47A\x475\x3\x2\x2\x2\x47A"+
		"\x476\x3\x2\x2\x2\x47A\x477\x3\x2\x2\x2\x47A\x478\x3\x2\x2\x2\x47A\x479"+
		"\x3\x2\x2\x2\x47B\xAD\x3\x2\x2\x2\x47C\x481\x5\xACW\x2\x47D\x481\x5\x96"+
		"L\x2\x47E\x481\x5\x98M\x2\x47F\x481\x5\x9EP\x2\x480\x47C\x3\x2\x2\x2\x480"+
		"\x47D\x3\x2\x2\x2\x480\x47E\x3\x2\x2\x2\x480\x47F\x3\x2\x2\x2\x481\xAF"+
		"\x3\x2\x2\x2\x482\x483\t\x1A\x2\x2\x483\xB1\x3\x2\x2\x2o\xB6\xBD\xC2\xC8"+
		"\xCD\xD0\xD3\xD6\xDA\xDC\xE4\xEA\x10C\x119\x11C\x11E\x134\x13C\x147\x14A"+
		"\x160\x16E\x178\x186\x190\x196\x1A2\x1BC\x1C5\x1D8\x1E0\x1F1\x1F9\x1FE"+
		"\x20E\x210\x218\x21A\x22C\x231\x251\x25D\x264\x26B\x272\x27B\x282\x289"+
		"\x28E\x29A\x2A1\x2AA\x2B1\x2B8\x2BF\x2C6\x2CD\x2D4\x2DB\x2E9\x2F3\x300"+
		"\x314\x319\x339\x355\x378\x37A\x387\x38C\x393\x39A\x3A0\x3A6\x3AC\x3B2"+
		"\x3B8\x3BE\x3C4\x3CA\x3D0\x3D6\x3DC\x3E2\x3E8\x3EE\x3F4\x3FA\x400\x406"+
		"\x40C\x412\x418\x41E\x424\x42A\x430\x436\x43C\x442\x448\x44E\x454\x45A"+
		"\x45D\x469\x46C\x47A\x480";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Spect.Net.Assembler.Generated
