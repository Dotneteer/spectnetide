<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/spectnetide/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/spectnetide/" rel="alternate" type="text/html" /><updated>2020-05-26T10:48:52+02:00</updated><id>http://localhost:4000/spectnetide/feed.xml</id><title type="html">SpectNet IDE</title><subtitle>Visual Studio 2017/2019 integrated ZX Spectrum IDE for the Community</subtitle><entry><title type="html">Use ZX BASIC</title><link href="http://localhost:4000/spectnetide/getting-started/use-zx-basic" rel="alternate" type="text/html" title="Use ZX BASIC" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/use-zx-basic</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/use-zx-basic">&lt;blockquote&gt;
  &lt;p&gt;To use &lt;strong&gt;ZX BASIC&lt;/strong&gt; — as it is a separate product from &lt;strong&gt;SpectNetIDE&lt;/strong&gt;, first, you should install it on your computer. The previous tutorial explains the setup procedure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SpectNetIDE supports ZX BASIC (Boriel’s BASIC). In this tutorial, you will learn how to create and run a ZX BASIC program.&lt;/p&gt;

&lt;p&gt;To create your first ZX BASIC program, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new ZX Spectrum 48 project (see details &lt;a href=&quot;/spectnetide/getting-started/create-zx-spectrum-48k-project-2.html#article&quot;&gt;here&lt;/a&gt;).
The &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ZxBasicFiles &lt;/code&gt;&lt;/strong&gt; folder of the project contains a &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Program.zxbas&lt;/code&gt;&lt;/strong&gt; file:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cls
print at 4,6; ink 7; paper 1; flash 1;&quot; HELLO, ZX BASIC! &quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;Right-click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Program.zxbas&lt;/code&gt; file in Solution Explorer, and use the &lt;strong&gt;Run program&lt;/strong&gt; command.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/run-zx-basic-command.png&quot; alt=&quot;Run ZX BASIC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The IDE compiles the ZX BASIC code, displays the emulator window, and runs the code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/zx-basic-runs.png&quot; alt=&quot;Run ZX BASIC&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can use the &lt;strong&gt;Ctrl+M&lt;/strong&gt;, &lt;strong&gt;Ctrl+R&lt;/strong&gt; double shortcut keys to execute the &lt;strong&gt;Run Z80 program&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s create a new ZX BASIC program!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Right-click the &lt;strong&gt;ZxBasicFiles&lt;/strong&gt; folder in Solution Explorer, and select the &lt;strong&gt;Add → New item&lt;/strong&gt; command:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/new-zx-basic-item.png&quot; alt=&quot;New ZX BASIC item&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Select the &lt;strong&gt;ZX BASIC Program&lt;/strong&gt; item type, set the name to &lt;code class=&quot;highlighter-rouge&quot;&gt;Clock.zxbas&lt;/code&gt;, and click &lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Type (copy) this code into the new &lt;code class=&quot;highlighter-rouge&quot;&gt;Clock.zxbas&lt;/code&gt; file:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CLS
CIRCLE 132, 105, 86
FOR n = 1 to 12
    PRINT AT 10 - (10 * COS(n * PI / 6) - 0.5), 16 + (0.5 + 10 * SIN(n * PI / 6)); n
NEXT n
CIRCLE 132, 105, 70

PRINT AT 23, 0; &quot;PRESS ANY KEY TO EXIT&quot;;

FUNCTION t AS ULONG
    RETURN INT((65536 * PEEK (23674) + 256 * PEEK(23673) + PEEK (23672))/50)
END FUNCTION

DIM t1 as FLOAT

OVER 1
WHILE INKEY$ = &quot;&quot;
    LET t1 = t()
    LET a = t1 / 30 * PI
    LET sx = 72 * SIN a : LET sy = 72 * COS a
    PLOT 131, 107: DRAW sx, sy

    LET t2 = t()
    WHILE (t2 &amp;lt;= t1) AND (INKEY$ = &quot;&quot;)
        let t2 = t()
    END WHILE

    PLOT 131, 107: DRAW sx, sy
END WHILE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;Run the program (either with the Run program command or the &lt;strong&gt;Ctrl+M&lt;/strong&gt;, &lt;strong&gt;Ctrl+R&lt;/strong&gt; shortcut keys):&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/zx-basic-clock-runs.png&quot; alt=&quot;ZX BASIC clock runs&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: For more details about ZX BASIC, visit this link: &lt;a href=&quot;https://zxbasic.readthedocs.io/&quot;&gt;https://zxbasic.readthedocs.io/&lt;/a&gt;. You can find more example within the &lt;code class=&quot;highlighter-rouge&quot;&gt;examples&lt;/code&gt; folder within your ZX BASIC instalation folder, or &lt;a href=&quot;https://zxbasic.readthedocs.io/en/latest/sample_programs/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;zx-basic-compilation&quot;&gt;ZX BASIC Compilation&lt;/h2&gt;

&lt;p&gt;When you run any command that requires compiling a ZX BASIC file, SpectNetIDE carries out the compilation in two steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, it transpiles the ZX BASIC program to Z80 Assembly&lt;/li&gt;
  &lt;li&gt;Then, it compiles the Z80 Assembly to machine code that runs in SpectNetIDE.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By default, the IDE stored the temporary Z80 Assembly file in a working folder within the project structure. However, you can add it to the project files, if you want to work with it:&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;Tools → Options&lt;/strong&gt; dialog. Under the &lt;strong&gt;ZX BASIC Options&lt;/strong&gt; category set the &lt;strong&gt;Store generated .z80asm file&lt;/strong&gt; option to &lt;strong&gt;true&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/zxb-store-option.png&quot; alt=&quot;ZX BASIC store option&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From now on, the compilation will add the generated Z80 Assembly file to the project folder, in the same folder as the ZX BASIC file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/zxb-asm-flat.png&quot; alt=&quot;ZX BASIC flat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;.z80asm&lt;/code&gt; file the same way as if you had created it manually.&lt;/p&gt;

&lt;p&gt;Alternatively, you can assign the generated &lt;code class=&quot;highlighter-rouge&quot;&gt;.z80asm&lt;/code&gt; file to be the nested (child) project item of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.zxbas&lt;/code&gt; files by setting the &lt;strong&gt;Nest generated .z80asm file&lt;/strong&gt; option to &lt;strong&gt;true&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/zxb-nest-option.png&quot; alt=&quot;ZX BASIC nest option&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Remove the generated &lt;code class=&quot;highlighter-rouge&quot;&gt;.zxbas.z80asm&lt;/code&gt; file, and next time you compile the ZX BASIC file, it will be the child of the ZX BASIC file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/zxb-asm-nested.png&quot; alt=&quot;ZX BASIC nested&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: Though the icon of the nested file does not indicate that it is a standard &lt;code class=&quot;highlighter-rouge&quot;&gt;.z80asm&lt;/code&gt; file — this is a Visual Studio limitation — you can still use the file normally. However, you cannot mark it as the default code file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you examine the &lt;code class=&quot;highlighter-rouge&quot;&gt;.z80asm&lt;/code&gt; file generated during a ZX BASIC compilation, it starts with a &lt;code class=&quot;highlighter-rouge&quot;&gt;.zxbasic&lt;/code&gt; pragma like this snippet shows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    .zxbasic
    org 32768
    ; Defines HEAP SIZE
ZXBASIC_HEAP_SIZE EQU 4096
__START_PROGRAM:
    di
    push ix
    push iy
    exx
    push hl
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The pragma instructs the Z80 Assembler to handle this code file with special options:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Label and symbol names are case-sensitive. (Normally, those are case-insensitive.)&lt;/li&gt;
  &lt;li&gt;All labels within a &lt;code class=&quot;highlighter-rouge&quot;&gt;PROC&lt;/code&gt; are global unless specified local explicitly with &lt;code class=&quot;highlighter-rouge&quot;&gt;LOCAL&lt;/code&gt;. (Normally, labels in a &lt;code class=&quot;highlighter-rouge&quot;&gt;PROC&lt;/code&gt; are local by default.)&lt;/li&gt;
  &lt;li&gt;The assembler handles &lt;code class=&quot;highlighter-rouge&quot;&gt;DEFB&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DEFM&lt;/code&gt; pragmas in a flexible way. While normally &lt;code class=&quot;highlighter-rouge&quot;&gt;DEFB&lt;/code&gt; allows declaring numeric values and &lt;code class=&quot;highlighter-rouge&quot;&gt;DEFM&lt;/code&gt; strings, in ZX BASIC mode &lt;code class=&quot;highlighter-rouge&quot;&gt;DEFB&lt;/code&gt; can use strings too and &lt;code class=&quot;highlighter-rouge&quot;&gt;DEFM&lt;/code&gt; may declare numeric values besides strings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ZX BASIC compiles the code as a subroutine that can be CALL-ed. Z80 Assembler creates and injects code that can be started with jumping to the start address. The &lt;code class=&quot;highlighter-rouge&quot;&gt;.zxbasic&lt;/code&gt; pragma tells the IDE that the compiled code should be called as a subroutine. When you inject and run ZX BASIC code, the virtual machine returns to the $12AC (ZX Spectrum 48 main execution cycle) address and waits for a keypress. When any key is pressed, it clears the screen.&lt;/p&gt;

&lt;h2 id=&quot;option-comments&quot;&gt;Option Comments&lt;/h2&gt;

&lt;p&gt;You can define and pass compilation options to the ZX BASIC compiler (ZBX.EXE utility). To define them, you need to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;@options&lt;/code&gt; syntax in the first single line comment (&lt;code class=&quot;highlighter-rouge&quot;&gt;REM&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;'&lt;/code&gt;) in the main file of your ZX BASIC program, like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;REM @options --array-base=1 --string-base=1 -O3 -H 2100 -S 24600
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: You can use either @options or @OPTIONS. Nonetheless, the compiler considers only the very firts comments, others are ignored.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the &lt;code class=&quot;highlighter-rouge&quot;&gt;@options&lt;/code&gt; comment, you can use the command line syntax. SpectNetIDE does not parse the command line options you declare, it simply passes them to the compiler. To ensure your code compiles the way SpectnetIDE can handle it, do not use these command line options:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-h&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt; (help)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--debug&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--output&lt;/code&gt; (output file, SpectNetIDE will fill it for you)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-T&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--tzx&lt;/code&gt; (TZX format)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--tap&lt;/code&gt; (TAP format)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-B&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--BASIC&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--autorun&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-A&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--asm&lt;/code&gt; (ASM format, SpectNetIDE automatically adds it)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--errmsg&lt;/code&gt; (STDERR)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-E&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--emit-backend&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--mmap&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">To use ZX BASIC — as it is a separate product from SpectNetIDE, first, you should install it on your computer. The previous tutorial explains the setup procedure.</summary></entry><entry><title type="html">Use the Keyboard Tool</title><link href="http://localhost:4000/spectnetide/getting-started/use-keyboard-tool-2" rel="alternate" type="text/html" title="Use the Keyboard Tool" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/use-keyboard-tool</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/use-keyboard-tool-2">&lt;p&gt;SpectNetIDE provides a Keyboard Tool window to help you using the ZX Spectrum Keyboard. Of course, you can use your computer’s keyboard to type, but sometimes the Keyboard Tool makes your work easier.
The IDE allows you to use two keyboard layouts, ZX Spectrum 48K, and ZX Spectrum 128K (+2, +2A, +3), respectively.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/spectrum-48-keyboard.png&quot; alt=&quot;ZX Spectrum 48K keyboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/spectrum-128-keyboard.png&quot; alt=&quot;ZX Spectrum 128K keyboard&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;selecting-the-keyboard-layout&quot;&gt;Selecting the Keyboard Layout&lt;/h2&gt;

&lt;p&gt;By default, SpectNetIDE uses the layout according to your project’s machine type. Nonetheless, you can change these settings in the Tools|Options dialog within the Spect.Net IDE tab. The Keyboard Tool section contains two configuration properties.
The Keyboard layout allows you to select from the Default, Spectrum48, and Spectrum128 values. Depending on your monitor type, the original layout size may not display very well on the screen. With the Keyboard display mode property, you can change the OriginalSize value to Fit. This setting automatically resizes the keyboard as you change the size of the Keyboard tool window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/keyboard-options.png&quot; alt=&quot;ZX Spectrum keyboard options&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;keystrokes&quot;&gt;Keystrokes&lt;/h2&gt;

&lt;p&gt;To press a key in the tool window, move the mouse over the part of a particular key you want to enter and click the mouse. The tool window senses which part of the key you clicked and emulates that keystroke, applying &lt;code class=&quot;highlighter-rouge&quot;&gt;CAPS SHIFT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SYMBOL SHIFT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;EXTENDED MODE&lt;/code&gt;, as required.&lt;/p&gt;

&lt;h3 id=&quot;normal-keystroke&quot;&gt;Normal keystroke&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/normal-keystroke-48.png&quot; alt=&quot;Normal keystroke 48K&quot; /&gt;
&lt;img src=&quot;/spectnetide/assets/images/tutorials/normal-keystroke-128.png&quot; alt=&quot;Normal keystroke 128K&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The left and right mouse buttons emulate different keystroke. The left button enters the key normally, the right button imitates entering the key with &lt;code class=&quot;highlighter-rouge&quot;&gt;CAPS SHIFT&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sym-shift-keystroke&quot;&gt;SYM SHIFT keystroke&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/sym-shift-keystroke-48.png&quot; alt=&quot;SYM SHIFT keystroke 48K&quot; /&gt;
&lt;img src=&quot;/spectnetide/assets/images/tutorials/sym-shift-keystroke-128.png&quot; alt=&quot;SYM SHIFT keystroke 128K&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;extended-mode-keystroke&quot;&gt;EXTENDED MODE keystroke&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/ext-mode-keystroke-48.png&quot; alt=&quot;EXTENDED MODE keystroke 48K&quot; /&gt;
&lt;img src=&quot;/spectnetide/assets/images/tutorials/ext-mode-keystroke-128.png&quot; alt=&quot;EXTENDED MODE keystroke 128K&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;extended-mode--shift-keystroke&quot;&gt;EXTENDED MODE + SHIFT keystroke&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/ext-shift-keystroke-48.png&quot; alt=&quot;EXTENDED MODE shift keystroke 48K&quot; /&gt;
&lt;img src=&quot;/spectnetide/assets/images/tutorials/ext-shift-keystroke-128.png&quot; alt=&quot;EXTENDED MODE shift keystroke 128K&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;colors&quot;&gt;Colors&lt;/h3&gt;

&lt;p&gt;The 0…7 keys have a function to change the color of ink and/or paper. For example, key 5 sets the color to &lt;code class=&quot;highlighter-rouge&quot;&gt;CYAN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/color-keystroke-48.png&quot; alt=&quot;Color keystroke 48K&quot; /&gt;
&lt;img src=&quot;/spectnetide/assets/images/tutorials/color-keystroke-128.png&quot; alt=&quot;Color keystroke 128K&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The left mouse button sets the paper color, while the right mouse button modifies the ink color.&lt;/p&gt;

&lt;h3 id=&quot;graphic-symbols&quot;&gt;Graphic symbols&lt;/h3&gt;

&lt;p&gt;The 1…8 keys allow you to enter graphic symbols. Click the particular symbol to emulate the keystroke – left and right buttons work the same way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/graphic-keystroke-48.png&quot; alt=&quot;Graphic keystroke 48K&quot; /&gt;
&lt;img src=&quot;/spectnetide/assets/images/tutorials/graphic-keystroke-128.png&quot; alt=&quot;Graphic keystroke 128K&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: On specific computers — depending on the amount of free RAM and CPU load — you may experience that entering graphic symbols sometimes fails, or the keyboard does not return the letter mode. In such a situation, click the GRAPHICS function (above key 9) and then to the digit beside the appropriate graphic symbol.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;using-the-physical-and-virtual-keyboards-together&quot;&gt;Using the Physical and Virtual Keyboards Together&lt;/h2&gt;

&lt;p&gt;You can use the physical keyboard to type into the ZX Spectrum emulator only when the emulator tool window has the keyboard focus. When you apply keystrokes in the Keyboard tool, that window receives the focus. So to be able to use the physical keyboard again, click the ZX Spectrum emulator to shift the focus.&lt;/p&gt;</content><author><name></name></author><summary type="html">SpectNetIDE provides a Keyboard Tool window to help you using the ZX Spectrum Keyboard. Of course, you can use your computer’s keyboard to type, but sometimes the Keyboard Tool makes your work easier. The IDE allows you to use two keyboard layouts, ZX Spectrum 48K, and ZX Spectrum 128K (+2, +2A, +3), respectively.</summary></entry><entry><title type="html">The ZX Spectrum Emulator</title><link href="http://localhost:4000/spectnetide/getting-started/zx-spectrum-emulator-window-2" rel="alternate" type="text/html" title="The ZX Spectrum Emulator" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/spectum-emulator-window</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/zx-spectrum-emulator-window-2">&lt;p&gt;&lt;strong&gt;SpectNetIDE&lt;/strong&gt; would not be useful without an emulator to develop programs. The ZX Spectrum Emulator tool window shows the screen of the embedded ZX Spectrum virtual machine that runs in the background.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/run-completed-2.png&quot; alt=&quot;Spectrum Emulator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you see, the toolbar at the top of the window contains buttons to control the virtual machine. A few of these buttons have customizable shortcut keys that you can configure in the &lt;strong&gt;Tools | Options&lt;/strong&gt; dialog, in the &lt;strong&gt;Environment | Keyboard&lt;/strong&gt; tab, as you can learn from the &lt;a href=&quot;#customizing-shortcut-keys&quot;&gt;Customizing Shortcut Keys&lt;/a&gt; section.&lt;/p&gt;

&lt;h3 id=&quot;start&quot;&gt;Start&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/start-button.png&quot; alt=&quot;Start&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This button turns of the virtual machine if it stopped, or continues running it if the machine is stopped.&lt;/p&gt;

&lt;p&gt;As you see, the toolbar at the top of the window contains buttons to control the virtual machine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Default shortcut&lt;/em&gt;: &lt;strong&gt;Ctrl+M, S&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;stop&quot;&gt;Stop&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/stop-button.png&quot; alt=&quot;Stop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Immediately turns off the virtual machine. It is as if you turned the hardware off.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Default shortcut&lt;/em&gt;: &lt;strong&gt;Ctrl+M, Ctrl+S&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;pause&quot;&gt;Pause&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/pause-button.png&quot; alt=&quot;Pause&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can pause the running virtual machine at any time. Pausing suspends the execution, and the emulator-related tool windows display the state of the virtual machine, such as the current register values, the memory contents, or the execution point in the Disassembly view.&lt;/p&gt;

&lt;p&gt;When you use step-by-step debugging, the virtual machine pauses every time it reaches a new breakpoint.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Default shortcut&lt;/em&gt;: &lt;strong&gt;Ctrl+M, Ctrl+space&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;restart&quot;&gt;Restart&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/restart-button.png&quot; alt=&quot;restart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Restarts the virtual machine, just as if you turned it off and on again.&lt;/p&gt;

&lt;h3 id=&quot;start-debugging&quot;&gt;Start Debugging&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/debug-button.png&quot; alt=&quot;Debug&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can start the virtual machine in debug mode. In this mode, the virtual machine pauses when it reaches a breakpoint (and the optional breakpoint condition is satisfied). If you run the virtual machine with &lt;strong&gt;Start&lt;/strong&gt;, it won’t pause at breakpoints.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Default shortcut&lt;/em&gt;: &lt;strong&gt;Ctrl+M, D&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The caption of the ZX Spectrum Emulator window shows the &lt;strong&gt;(Debugging)&lt;/strong&gt; label when it runs in debug mode.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;step-into&quot;&gt;Step-Into&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/step-into-button.png&quot; alt=&quot;Step-into&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While the machine is paused, the Step-Into function executes the next Z80 instruction. If the subsequent operation is a subroutine call (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;CALL&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;RST&lt;/code&gt;), &lt;em&gt;Step-Into&lt;/em&gt; pauses at the first operation of the subroutine. Should the next one be a block instruction (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;LDIR&lt;/code&gt;), &lt;em&gt;Step-Into&lt;/em&gt; breaks after the first loop of the block. Thus, if the block takes ten iterations, you have to &lt;em&gt;Step-Into&lt;/em&gt; ten time to get to the following operation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Default shortcut&lt;/em&gt;: &lt;strong&gt;Ctrl+M, F11&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-over&quot;&gt;Step-Over&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/step-over-button.png&quot; alt=&quot;Step over&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step-Over&lt;/em&gt; works the same for most instructions as &lt;em&gt;Step-Into&lt;/em&gt;. Nonetheless, if the next operation is a &lt;code class=&quot;highlighter-rouge&quot;&gt;CALL&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;RST&lt;/code&gt;), &lt;em&gt;Step-Over&lt;/em&gt; executes the entire subroutine and pauses at the next instruction following the call. If there’s a block instruction (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;LDIR&lt;/code&gt;), &lt;em&gt;Step-Over&lt;/em&gt; breaks at the next statement, completing the entire block operation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Default shortcut&lt;/em&gt;: &lt;strong&gt;Ctrl+M, F10&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If a subroutine call manipulates the stack and returns to somewhere else, &lt;em&gt;Step-Over&lt;/em&gt; may not pause at the location you expect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;step-out&quot;&gt;Step-Out&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/step-out-button.png&quot; alt=&quot;Sep out&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you are within a subroutine call, &lt;em&gt;Step-Out&lt;/em&gt; continues the execution flow until the current subroutine returns to the caller, and pauses the machine right after returning.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Default shortcut&lt;/em&gt;: &lt;strong&gt;Ctrl+M, F12&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If a subroutine call manipulates the stack and returns to somewhere else, &lt;em&gt;Step-Out&lt;/em&gt; may not pause at the location you expect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;save-virtual-machine-state&quot;&gt;Save Virtual Machine State&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/save-state-button.png&quot; alt=&quot;Save state&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Any time the virtual machine is stopped, you can save its state including the CPU, memory, execution flow, devices, etc. into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.vmstate&lt;/code&gt; file.&lt;/p&gt;

&lt;h3 id=&quot;load-virtual-machine-state&quot;&gt;Load Virtual Machine State&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/load-state-button.png&quot; alt=&quot;Load state&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the virtual machine is paused, you can restore its former state by loading it from a &lt;code class=&quot;highlighter-rouge&quot;&gt;.vmstate&lt;/code&gt; file. Saving and loading the state allows you to suspend debugging between Visual Studio sessions.&lt;/p&gt;

&lt;h3 id=&quot;add-virtual-machine-state-to-the-project&quot;&gt;Add Virtual Machine State to the project&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/add-state-button.png&quot; alt=&quot;Add state&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are analyzing code, it is useful if the virtual machine state files are the part of your project so that you can handle them with the same source control procedures as other project files. You can not only save a &lt;code class=&quot;highlighter-rouge&quot;&gt;.vmstate&lt;/code&gt; file, but also add it to your project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;VmStates&lt;/code&gt; folder.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In other articles, you can find more details about working with &lt;code class=&quot;highlighter-rouge&quot;&gt;.vmstate&lt;/code&gt; files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;show-keyboard&quot;&gt;Show Keyboard&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/keyboard-button.png&quot; alt=&quot;Show keyboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click this button to show the ZX Spectrum keyboard.&lt;/p&gt;

&lt;h3 id=&quot;shadow-screen&quot;&gt;Shadow Screen&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/shadow-screen-button.png&quot; alt=&quot;Shadow Screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This toggle button turns on and off the shadow screen mode. When turned on, pausing your machine does not turn off display rendering, it goes on as if only the Z80 CPU has been paused. In this mode, you can immediately see the modifications in the screen memory and flashing works too.&lt;/p&gt;

&lt;h3 id=&quot;ula-render-point&quot;&gt;ULA Render Point&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/ula-point-button.png&quot; alt=&quot;ULA Point&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This tiggle button turns on and off displaying the ULA render point. If you turn this mode on, in the paused machine state the emulator screen displays the pixel pair being rendered by the ULA.&lt;/p&gt;

&lt;h2 id=&quot;emulator-behavior&quot;&gt;Emulator Behavior&lt;/h2&gt;

&lt;p&gt;As soon as you load a ZX Spectrum project into Visual Studio, the IDE creates a new ZX Spectrum virtual machine according to the type specified when you created the project. This machine does not run; you need to start it explicitly.&lt;/p&gt;

&lt;p&gt;Even if the ZX Spectrum Emulator tool window is closed, the virtual machine still runs in the background once you’ve started it. It halts if you explicitly stop it, close the current solutions, or exit the Visual Studio IDE.&lt;/p&gt;

&lt;p&gt;While the ZX Spectrum Emulator tool window has the focus, the IDE forward the keystrokes to the emulator that senses them as if you pressed a key on the ZX Spectrum hardware.&lt;/p&gt;

&lt;h2 id=&quot;customizing-shortcut-keys&quot;&gt;Customizing Shortcut Keys&lt;/h2&gt;

&lt;p&gt;If you do not like the current keyboard shortcuts, you can customize them in the &lt;strong&gt;Tools | Options&lt;/strong&gt; dialog, within the &lt;strong&gt;Environment | Keyboard&lt;/strong&gt; tab. To find the &lt;strong&gt;SpectNetIDE&lt;/strong&gt; commands that are available for customization, type “ZXSpectrum” in the “Show commands containing” field:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/custom-shortcuts-default.png&quot; alt=&quot;Shortcut default&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the command you intend to customize, set the focus to the “Press shortcut keys” field, and then, use the desired shortcut keys. Click Assign to bind the key to the command:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/custom-shortcuts-new.png&quot; alt=&quot;Shortcut default&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With these actions, the Visual Studio IDE does not replace the original shortcut key, but assigns a new one. You can open the “Shortcuts to selected command” to see the list of available key bindings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/custom-shortcuts-bindings.png&quot; alt=&quot;Shortcut default&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To delete an old or unused shortcut, select it from the dropdown list, and click Remove.&lt;/p&gt;</content><author><name></name></author><summary type="html">SpectNetIDE would not be useful without an emulator to develop programs. The ZX Spectrum Emulator tool window shows the screen of the embedded ZX Spectrum virtual machine that runs in the background.</summary></entry><entry><title type="html">Setup ZX BASIC</title><link href="http://localhost:4000/spectnetide/getting-started/setup-zx-basic" rel="alternate" type="text/html" title="Setup ZX BASIC" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/setup-zx-basic</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/setup-zx-basic">&lt;p&gt;ZX BASIC (Boriel’s BASIC) is a separate product maintained by Jose Rodriguez-Rosa (Boriel). You can find more information about this product in &lt;a href=&quot;https://github.com/boriel/zxbasic&quot;&gt;Github&lt;/a&gt;. This site refers to several links that raise a 404 Error.&lt;/p&gt;

&lt;p&gt;You can find the ZX BASIC Wiki &lt;a href=&quot;https://zxbasic.readthedocs.io/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SpectNetIDE uses ZX BASIC as an external tool, so first, you have to install ZX BASIC to your computer. You can find the installation files here: &lt;a href=&quot;https://www.boriel.com/files/zxb/&quot;&gt;https://www.boriel.com/files/zxb/&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: The newest versions can be found on the bottom of the page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To set up ZX BASIC integration with SpectNetIDE, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the ZXB version (with &lt;code class=&quot;highlighter-rouge&quot;&gt;zxbasic-n.n.n-win32.zip&lt;/code&gt;) you want to install (I suggest you to dowload the latest stable release).&lt;/li&gt;
  &lt;li&gt;Unzip this file, and copy to contents into your preferred installation folder.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: If you prefer the globally installed ZX BASIC version, please follow &lt;a href=&quot;https://zxbasic.readthedocs.io/en/latest/installation/&quot;&gt;these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Start a &lt;strong&gt;&lt;em&gt;command prompt&lt;/em&gt;&lt;/strong&gt;, select the installation folder with the &lt;code class=&quot;highlighter-rouge&quot;&gt;CD&lt;/code&gt; command, and then check the installation with this command line:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zxb --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: This command cannot be executed in Powershell on Windows (only with the CMD command-line prompt).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the current version number is displayed, your ZX BASIC installation is successful.&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;Start Visual Studio 2019, and run the &lt;strong&gt;Tools → Options&lt;/strong&gt; command.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/zxb-path-option.png&quot; alt=&quot;ZXB path&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;In The &lt;strong&gt;Spect.Net IDE&lt;/strong&gt; tab, set the &lt;strong&gt;ZXB utility path&lt;/strong&gt; option to the folder where you installed ZX BASIC.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Alternatively, you can set up the &lt;strong&gt;PATH&lt;/strong&gt; environment variable of your computer to point out to the ZX BASIC installation folder:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In &lt;strong&gt;File Explorer&lt;/strong&gt; right-click on &lt;strong&gt;This PC&lt;/strong&gt; and run the &lt;strong&gt;Properties&lt;/strong&gt; command.&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Advanced System Settings&lt;/strong&gt;, and then click &lt;strong&gt;Environment Variables&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/env-var-1.png&quot; alt=&quot;Environment variables&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Acording to your preference, you can edit User variables or System variables to add a PATH fragment that points to the ZX BASIC installation folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Great! With these steps, you’re ready to use ZX BASIC. Now you can proceed to the next tutorial, Use ZX BASIC.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">ZX BASIC (Boriel’s BASIC) is a separate product maintained by Jose Rodriguez-Rosa (Boriel). You can find more information about this product in Github. This site refers to several links that raise a 404 Error.</summary></entry><entry><title type="html">LOAD a Program</title><link href="http://localhost:4000/spectnetide/getting-started/load-a-program-2" rel="alternate" type="text/html" title="LOAD a Program" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/load-a-program</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/load-a-program-2">&lt;p&gt;You can load a program from the tape into the memory with the &lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD &quot;&quot;&lt;/code&gt; statement. Hey, we do not have a tape, so how does SpectNetIDE know what program to load?&lt;/p&gt;

&lt;p&gt;As a part of your project, you can add tape files with standard &lt;code class=&quot;highlighter-rouge&quot;&gt;.TAP&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.TZX&lt;/code&gt; format. When the IDE creates a new ZX Spectrum project, it adds a sample tape file, &lt;code class=&quot;highlighter-rouge&quot;&gt;Welcome.tzx&lt;/code&gt;; it puts it into the &lt;code class=&quot;highlighter-rouge&quot;&gt;TapeFiles&lt;/code&gt; folder. With the Add Existing Item command of Visual Studio, you can attach more tape files to the project. The virtual machine – that runs the ZX Spectrum Emulator – can work only with a single tape file at a time. To load that one – called the default tape –, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In Solution Explorer, select the tape file you want to attach to the virtual machine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Right-click the &lt;strong&gt;Set as default tape file&lt;/strong&gt; command:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/set-default-tape-file-2.png&quot; alt=&quot;Set default tape&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The IDE marks the default tape file with bold typeface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/default-tape-file-set-2.png&quot; alt=&quot;Default tape file set&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Next time you enter the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD &quot;&quot;&lt;/code&gt;&lt;/strong&gt; statement, the virtual machine will play the newly selected tape file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/pacman-loads-2.png&quot; alt=&quot;Pacman loads&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can change the default tape file between loads while the machine runs – without stopping and restarting it.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">You can load a program from the tape into the memory with the LOAD &quot;&quot; statement. Hey, we do not have a tape, so how does SpectNetIDE know what program to load?</summary></entry><entry><title type="html">List the BASIC program</title><link href="http://localhost:4000/spectnetide/getting-started/list-basic-program" rel="alternate" type="text/html" title="List the BASIC program" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/list-basic-program</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/list-basic-program">&lt;p&gt;With the &lt;strong&gt;ZX Spectrum BASIC list&lt;/strong&gt; tool window, you can display the BASIC program typed or loaded into your running ZX Spectrum machine. Here you can see the program code of the &lt;strong&gt;Jackpot&lt;/strong&gt; game while it’s running:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/list-basic-program.png&quot; alt=&quot;List BASIC program&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The toolbar of the &lt;strong&gt;ZX Spectrum BASIC List&lt;/strong&gt; window has two buttons:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/list-basic-toolbar.png&quot; alt=&quot;List BASIC toolbar&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first button allows you to export the BASIC listing.&lt;/li&gt;
  &lt;li&gt;With the second button you can toggle between &lt;em&gt;Sinclair&lt;/em&gt; and &lt;em&gt;ZX BASIC&lt;/em&gt; modes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;export-basic-listing&quot;&gt;Export BASIC Listing&lt;/h2&gt;

&lt;p&gt;With this command, you can export the BASIC listing to a file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/commands/export-basic-listing-dialog.png&quot; alt=&quot;Predefined symbols&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By setting the &lt;strong&gt;Mimic ZX BASIC&lt;/strong&gt; checkbox, the output will use ZX BASIC escape sequences for control characters.&lt;/p&gt;

&lt;h2 id=&quot;set-the-display-mode-of-basic&quot;&gt;Set the display mode of BASIC&lt;/h2&gt;

&lt;p&gt;In &lt;em&gt;Sinclair&lt;/em&gt; mode, control characters (e.g., &lt;strong&gt;INK&lt;/strong&gt;, &lt;strong&gt;PAPER&lt;/strong&gt;, &lt;strong&gt;BRIGHT&lt;/strong&gt;, etc.) are shown with their hexadecimal code between &lt;code class=&quot;highlighter-rouge&quot;&gt;°&lt;/code&gt; characters:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/sinclair-basic-mode.png&quot; alt=&quot;Sinclair BASIC mode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, in &lt;em&gt;ZX BASIC&lt;/em&gt; mode, the control characters are displayed with their ZX BASIC escape sequences. Inline control characters (out of string values wrapped in double quotes) are omitted:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/zx-basic-mode.png&quot; alt=&quot;ZX BASIC mode&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">With the ZX Spectrum BASIC list tool window, you can display the BASIC program typed or loaded into your running ZX Spectrum machine. Here you can see the program code of the Jackpot game while it’s running:</summary></entry><entry><title type="html">Install SpectNetIDE</title><link href="http://localhost:4000/spectnetide/getting-started/install-spectnetide-2" rel="alternate" type="text/html" title="Install SpectNetIDE" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/install-spectnetide</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/install-spectnetide-2">&lt;p&gt;&lt;strong&gt;SpectNetIDE&lt;/strong&gt; is an open source project with MIT license, and it is free to install. The ZX Spectrum IDE is implemented as a Visual Studio 2019 extension (VSIX). Thus, you can run it only on Windows.&lt;/p&gt;

&lt;p&gt;You need Visual Studio installed on your machine. You do not have to pay to get a legal license for VS, SpectNetIDE works with the free Community edition seamlessly. You can download the Visual Studio edition of your choice from its &lt;a href=&quot;https://visualstudio.microsoft.com/downloads/&quot;&gt;home page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you install Visual Studio 2019, make sure you selected the &lt;strong&gt;.Net desktop development&lt;/strong&gt; workload; otherwise you won’t be able to create ZX Spectrum projects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: Right now, there are two versions of &lt;strong&gt;SpectNetIDE&lt;/strong&gt;. The old one (v1.x), runs on Visual Studio 2017 and Visual Studio 2019. The new one (v2.x), can be installed only on Visual Studio 2019.
Though both versions can be installed simultaneously in the IDE, they do not work together, so you need to install only one of them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;removing-spectnetide-v1x&quot;&gt;Removing SpectNetIDE v1.x&lt;/h3&gt;

&lt;p&gt;If you have not installed SpectNetIDE v1.x, jump to the next section; otherwise, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select the &lt;strong&gt;Extensions → Manage Extensions&lt;/strong&gt; menu commands. It displays a dialog to handle your VS extensions. Click the Installed tab, and select SpectNetIde from the list.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/extensions-dialog-in-vs-remove.png&quot; alt=&quot;Extensions and Updates&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;Click Uninstall. Visual Studio marks the extension to remove. Now, close all open Visual Studio 2019 instances to carry on the removing process!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/confirm-vsix-remove.png&quot; alt=&quot;VSIX Remove&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Click Modify, and wait while VSIX Installer completes its operation. Next time you start the VS IDE, SpectNetIDE v1.x will not be on its extension list.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;installing-spectnetide-v2x&quot;&gt;Installing SpectNetIDE v2.x&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start Visual Studio 2019, and in its start page, click Continue without code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the &lt;strong&gt;Extensions → Manage Extensions&lt;/strong&gt; menu command. It displays a dialog to install VS extensions. Click the Online tab and type “SpectNetIDE” in the search box.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The dialog looks up the Visual Studio Marketplace and displays the SpectNetIDE extensions. Select &lt;strong&gt;SpectNetIDE 2.0&lt;/strong&gt; and click Download to start the installation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/extensions-dialog-in-vs-2.png&quot; alt=&quot;Extensions and Updates&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;The IDE prepares the downloaded package for setup. However, it will begin installing it only after you close Visual Studio.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/extension-ready-to-install-2.png&quot; alt=&quot;Ready to Install&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;When you have closed all running instances of Visual Studio, the VSIX installer automatically starts the setup. First, you have to confirm the license terms and click Modify.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/confirm-vsix-install-2.png&quot; alt=&quot;Confirm VSIX Install&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;The VSIX installer sets up the extension—it takes less than a minute—and signs when it completes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/vsix-install-completes-2.png&quot; alt=&quot;VSIX Install Completes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, SpectNetIDE is ready to use. When you start Visual Studio, in the Help|About dialog you can check it’s integrated with VS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/spectnetide-in-about-2.png&quot; alt=&quot;SpectNetIde in About&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get familiar with using the ZX Spectrum IDE, take a look at the other tutorials!&lt;/p&gt;</content><author><name></name></author><summary type="html">SpectNetIDE is an open source project with MIT license, and it is free to install. The ZX Spectrum IDE is implemented as a Visual Studio 2019 extension (VSIX). Thus, you can run it only on Windows.</summary></entry><entry><title type="html">Fast (Instant) LOAD</title><link href="http://localhost:4000/spectnetide/getting-started/fast-load-2" rel="alternate" type="text/html" title="Fast (Instant) LOAD" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/fast-load</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/fast-load-2">&lt;p&gt;I like the retro feeling of the ZX Spectrum border stripes when a program is being loaded. Today’s kids cannot imagine being patient for three to five minutes while a bigger game gets into the memory from the tape.&lt;/p&gt;

&lt;p&gt;Well, while you develop code, you probably do not the same time as you had in your childhood.&lt;/p&gt;

&lt;p&gt;SpectNetIDE provides an option to load programs instantly. Open the &lt;strong&gt;Tools|Options&lt;/strong&gt; dialog in the Visual Studio IDE, and navigate to the &lt;strong&gt;Spect.Net IDE&lt;/strong&gt; tab. Under the &lt;strong&gt;Virtual machine&lt;/strong&gt; section, you find the &lt;strong&gt;Use Fast Load&lt;/strong&gt; configuration option. Set it to &lt;strong&gt;True&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/use-fast-load-2.png&quot; alt=&quot;Use fast load&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Setting this option requires that you restart the ZX Spectrum virtual machine – fortunately not your computer :-).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next time you load a program, it happens instantly.&lt;/p&gt;

&lt;h2 id=&quot;under-the-hood&quot;&gt;Under the Hood&lt;/h2&gt;

&lt;p&gt;SpectNetIDE uses a technique called ROM hooking.&lt;/p&gt;

&lt;p&gt;The virtual machine senses that the execution flow enters into the LOAD routine within the ZX Spectrum ROM (at address &lt;strong&gt;$056C&lt;/strong&gt;), and temporarily suspends the CPU. The virtual machine executes its custom loader subroutine to get the contents of the tape file and injects the code into the memory. Then, it sets the contents of the Z80 CPU’s registers as if the original ROM routine had run successfully, and resumes the CPU as if it just returned from the ROM routine (at address &lt;strong&gt;$05E2&lt;/strong&gt;).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Fast load does not work with programs that dodge the LOAD routine in the ROM, e.g., the ones which use custom loaders. In such cases, turn off fast loading.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">I like the retro feeling of the ZX Spectrum border stripes when a program is being loaded. Today’s kids cannot imagine being patient for three to five minutes while a bigger game gets into the memory from the tape.</summary></entry><entry><title type="html">Export a Z80 Program</title><link href="http://localhost:4000/spectnetide/getting-started/export-a-z80-program-2" rel="alternate" type="text/html" title="Export a Z80 Program" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/export-a-z80-program</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/export-a-z80-program-2">&lt;p&gt;After you created your Z80 Assembler program, you can easily export it into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.TAP&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.TZX&lt;/code&gt; file so that you
could load it into a ZX Spectrum emulator, or into a real hardware, such as a ZX Spectrum Next, or ZX Spectrum
(with the help of TZXDuino or CASDuino hardware).&lt;/p&gt;

&lt;p&gt;To try how easy it is, create a simple Z80 program:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new ZX Spectrum 48 project (see details &lt;a href=&quot;/spectnetide/getting-started/create-zx-spectrum-48k-project-2.html#article&quot;&gt;here&lt;/a&gt;).
The &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CodeFiles &lt;/code&gt;&lt;/strong&gt; project of the folder contains a &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code.z80asm&lt;/code&gt;&lt;/strong&gt; file. Clear the contents of that file, and type this concise program:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;start:
    .org #8000
    ld a,3
    out (#fe),a
    jp #12a2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;In Solution Explorer, right-click the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code.z80asm&lt;/code&gt;&lt;/strong&gt; file, and invoke the &lt;strong&gt;Run Z80 program&lt;/strong&gt; command (or use the &lt;strong&gt;Ctrl+M&lt;/strong&gt;, &lt;strong&gt;Ctrl+R&lt;/strong&gt; double shortcut keys):&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/run-z80-code-command-2.png&quot; alt=&quot;Run Z80 code command&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This command compiles the Z80 assembly code to binary machine code, starts (or restarts) the Spectrum virtual machine,
injects the binary code, and runs it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/z80-code-runs-2-2.png&quot; alt=&quot;Z80 code runs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can easily export the code with these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In Solution Explorer, right-click the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code.z80asm&lt;/code&gt;&lt;/strong&gt; file, and invoke the &lt;strong&gt;Export Z80 program&lt;/strong&gt; command:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/export-z80-code-command-2.png&quot; alt=&quot;Export Z80 code command&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;The IDE pops up the &lt;strong&gt;Export Z80 Program&lt;/strong&gt; dialog:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/export-z80-program-dialog.png&quot; alt=&quot;Export Z80 code command&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can change the attributes of the exported program. The default settings of the dialog will create a loader program that automatically loads and runs the code. Beside the default options, I set the &lt;strong&gt;Add the exported tape file&lt;/strong&gt; to the project checkbox.&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Click Export.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, you can find the exported code file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Temp&lt;/code&gt; folder (&lt;code class=&quot;highlighter-rouge&quot;&gt;Code.tzx&lt;/code&gt;), and also in your project, within the &lt;code class=&quot;highlighter-rouge&quot;&gt;TapeFile&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/exported-code-in-project-2.png&quot; alt=&quot;Exported Z80 code in project&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;auto-loaders-for-zx-spectrum-48k&quot;&gt;Auto-loaders for ZX Spectrum 48K&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Export program&lt;/strong&gt; command function creates a simple auto-loader that loads the code file, and starts it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10 CLEAR 24575 : LOAD &quot;&quot; CODE : RANDOMIZE USR 24576
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The above code belongs to a program that starts at #6000.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you use a loading screen and set a load-time border, the auto-loader is a bit more complicated:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10 CLEAR 24575 : BORDER 4 : LET o = PEEK 23739 : LOAD &quot;&quot; SCREEN$ : POKE 23739,111 :
LOAD &quot;&quot; CODE : POKE 23739,o : RANDOMIZE USR 24576
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Setting the byte at 23739 to 111 (“o”) prevents the load messages from being written to the main screen.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The above code belongs to a program that starts at #6000. The user has set the &lt;em&gt;Border&lt;/em&gt; value in the Export dialog to 4 and selected a screen file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;auto-loaders-for-zx-spectrum-12823&quot;&gt;Auto-loaders for ZX Spectrum 128/+2/+3&lt;/h2&gt;

&lt;p&gt;When using the ZX Spectrum 128K model, you may create a Z80 Assembly code that uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;BANK&lt;/code&gt; pragma. If you do not, the &lt;strong&gt;Export program&lt;/strong&gt; command generates the same auto-loader code as if you’d use a ZX Spectrum 48K model.&lt;/p&gt;

&lt;p&gt;As soon as the compiled output contains at least a single bank, &lt;strong&gt;SpectNetIDE&lt;/strong&gt; applies another loader that reads each bank from a separate code file. With the help of a 21-byte long paging subroutine, it moves the code to the appropriate bank. This is how the simples form of this code looks like (it gets a bit more complicated when you use the &lt;em&gt;border&lt;/em&gt; or &lt;em&gt;screen file&lt;/em&gt; export options):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10 REM 012345678901234567890
20 CLEAR 24575 : LET c = (PEEK 23635 + 256 * PEEK 23636) + 5
30 FOR i = 0 TO 20 : READ d : POKE c + i, d : NEXT i
40 LOAD &quot;&quot; CODE
50 READ b
60 IF b = 8 THEN GO TO 80
70 POKE 23608,b : RANDOMIZE USR c : LOAD &quot;&quot; CODE : GO TO 50
80 RANDOMIZE USR 24576 : STOP
90 DATA 243, 58, 92, 91, 230, 248, 71, 58, 56, 92, 176, 50, 92, 91, 1, 253, 127, 237,  121, 251, 201
100 DATA 2,6,8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Short explanation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Line #20 stores the location of the first &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; in line #10, as will be the starting address of the code that puts a particular page into slot 3.&lt;/li&gt;
  &lt;li&gt;Line #30 reads the machine code bytes (from line #90) and stores it to the memory area of line #10, as the REM statement is just a placeholder.&lt;/li&gt;
  &lt;li&gt;Line #40 reads the code into normal memory. &lt;em&gt;Your machine code needs to have some initial/startup code&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Lines #50, #60, and #70 takes care that all banks are read from code files. The numbers of exported banks are stored in line #100; the last &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt; is a terminator.&lt;/li&gt;
  &lt;li&gt;Line #80 starts the user code.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The above code belongs to a program that starts at #6000.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;auto-export&quot;&gt;Auto-Export&lt;/h2&gt;

&lt;p&gt;You can configure SpectNetIDE to automatically export the result of successful compilation whenever you execute any of the &lt;strong&gt;Run program&lt;/strong&gt;, &lt;strong&gt;Debug program&lt;/strong&gt;, &lt;strong&gt;Compile code&lt;/strong&gt;, or &lt;strong&gt;Inject code&lt;/strong&gt; commands. By default, this option is turned off. Nonetheless, you can quickly activate it in the &lt;strong&gt;Tools | Options&lt;/strong&gt; dialog through the &lt;strong&gt;Export after compile&lt;/strong&gt; options:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/auto-export-option.png&quot; alt=&quot;Export after compile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This option allows you to define up to seven parameters separated by semicolons. The first parameters (&lt;em&gt;tape file format&lt;/em&gt;) is mandatory, and the others are optional. You can omit any parameters from the and of the list, and use an empty one to indicate you intend to use that with its default value. These are the available parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;#1: &lt;strong&gt;Tape file format&lt;/strong&gt;. You need to use any of these values: &lt;strong&gt;TAP&lt;/strong&gt;, &lt;strong&gt;TZX&lt;/strong&gt;, or &lt;strong&gt;HEX&lt;/strong&gt; (Intel Hex format).&lt;/li&gt;
  &lt;li&gt;#2: &lt;strong&gt;Auto-Start Loader&lt;/strong&gt;. &lt;strong&gt;0&lt;/strong&gt;: off, &lt;strong&gt;1&lt;/strong&gt;: on (&lt;em&gt;default&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;#3: &lt;strong&gt;Apply CLEAR&lt;/strong&gt; flag. &lt;strong&gt;0&lt;/strong&gt;: off, &lt;strong&gt;1&lt;/strong&gt;: on (&lt;em&gt;default&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;#4: &lt;strong&gt;Apply PAUSE 0&lt;/strong&gt; flag. &lt;strong&gt;0&lt;/strong&gt;: off (&lt;em&gt;default&lt;/em&gt;), &lt;strong&gt;1&lt;/strong&gt;: on.&lt;/li&gt;
  &lt;li&gt;#5: &lt;strong&gt;Start Address&lt;/strong&gt;. Use the specified address to start the code. If you leave it empty, the export will use the entry address specified during compilation. &lt;em&gt;Default: empty&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;#6: &lt;strong&gt;BORDER Color&lt;/strong&gt;: Specify a BORDER color (0-7) to apply. &lt;em&gt;Default: no border color&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;#7: &lt;strong&gt;Screen file&lt;/strong&gt;: Specify the path of the screen file (absolute path). &lt;em&gt;Default: no screen file&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAP;1;1;;3&lt;/code&gt; settings in the screenshot above creates a TAP file with auto-start loader, CLEAR, and magenta border color. You can write it even shorter: &lt;code class=&quot;highlighter-rouge&quot;&gt;TAP;;;;3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The exported file goes into the &lt;code class=&quot;highlighter-rouge&quot;&gt;.SpectNetIde/Export&lt;/code&gt; folder within your project folder. Should you use an invalid option, the auto-export command would show the related error. For example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAP;;;;12&lt;/code&gt; parameter list would raise this error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/auto-export-error.png&quot; alt=&quot;Auto export error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are using &lt;a href=&quot;/spectnetide/getting-started/build-tasks&quot;&gt;Build Tasks&lt;/a&gt;, the auto-export function runs right after the compile phase, before the post-build task. So, in your post-build task, you can use the exported file.&lt;/p&gt;</content><author><name></name></author><summary type="html">After you created your Z80 Assembler program, you can easily export it into a .TAP or .TZX file so that you could load it into a ZX Spectrum emulator, or into a real hardware, such as a ZX Spectrum Next, or ZX Spectrum (with the help of TZXDuino or CASDuino hardware).</summary></entry><entry><title type="html">Debug ZX BASIC</title><link href="http://localhost:4000/spectnetide/getting-started/debg-zx-basic" rel="alternate" type="text/html" title="Debug ZX BASIC" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/debug-zx-basic</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/debg-zx-basic">&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">Coming soon.</summary></entry></feed>