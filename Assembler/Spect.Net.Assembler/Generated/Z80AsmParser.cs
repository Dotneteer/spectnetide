//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dotne\source\repos\spectnetide\Assembler\AntlrZ80AsmParserGenerator\ParserGenerator\Z80Asm.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Spect.Net.Assembler.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class Z80AsmParser : Parser {
	public const int
		WS=1, BLCOMMENT=2, COMMENT=3, NEWLINE=4, COLON=5, DCOLON=6, SCOLON=7, 
		COMSEP=8, COMMA=9, ASSIGN=10, LPAR=11, RPAR=12, LSBRAC=13, RSBRAC=14, 
		QMARK=15, PLUS=16, MINUS=17, VBAR=18, UPARR=19, AMP=20, EQOP=21, CIEQOP=22, 
		NEQOP=23, CINEQOP=24, LTOP=25, LTEOP=26, GTOP=27, GTEOP=28, LSHOP=29, 
		RSHOP=30, MULOP=31, DIVOP=32, MODOP=33, MINOP=34, MAXOP=35, TILDE=36, 
		LDBRAC=37, RDBRAC=38, EXCLM=39, DOT=40, A=41, B=42, C=43, D=44, E=45, 
		H=46, L=47, I=48, R=49, XL=50, XH=51, YL=52, YH=53, BC=54, DE=55, HL=56, 
		SP=57, IX=58, IY=59, AF=60, AF_=61, Z=62, NZ=63, NC=64, PO=65, PE=66, 
		P=67, M=68, NOP=69, RLCA=70, RRCA=71, RLA=72, RRA=73, DAA=74, CPL=75, 
		SCF=76, CCF=77, HALT=78, RET=79, EXX=80, DI=81, EI=82, NEG=83, RETN=84, 
		RETI=85, RLD=86, RRD=87, LDI=88, CPI=89, INI=90, OUTI=91, LDD=92, CPD=93, 
		IND=94, OUTD=95, LDIR=96, CPIR=97, INIR=98, OTIR=99, LDDR=100, CPDR=101, 
		INDR=102, OTDR=103, LD=104, INC=105, DEC=106, EX=107, ADD=108, ADC=109, 
		SUB=110, SBC=111, AND=112, XOR=113, OR=114, CP=115, DJNZ=116, JR=117, 
		JP=118, CALL=119, RST=120, PUSH=121, POP=122, IN=123, OUT=124, IM=125, 
		RLC=126, RRC=127, RL=128, RR=129, SLA=130, SRA=131, SLL=132, SRL=133, 
		BIT=134, RES=135, SET=136, SWAPNIB=137, MUL=138, POPX=139, MIRROR=140, 
		TEST=141, NEXTREG=142, OUTINB=143, LDIX=144, LDIRX=145, LDDX=146, LDDRX=147, 
		PIXELDN=148, PIXELAD=149, SETAE=150, LDPIRX=151, LDIRSCALE=152, IFDEF=153, 
		IFNDEF=154, ENDIF=155, ELSE=156, DEFINE=157, UNDEF=158, INCLUDE=159, IF=160, 
		IFMOD=161, IFNMOD=162, ORGPRAG=163, ENTPRAG=164, XENTPRAG=165, EQUPRAG=166, 
		VARPRAG=167, DISPRAG=168, DBPRAG=169, DWPRAG=170, DMPRAG=171, DNPRAG=172, 
		DHPRAG=173, DGXPRAG=174, DGPRAG=175, DCPRAG=176, SKIPRAG=177, EXTPRAG=178, 
		DSPRAG=179, FBPRAG=180, FWPRAG=181, MODPRAG=182, ALGPRAG=183, TRACE=184, 
		TRACEHEX=185, RNDSEED=186, ERRORPR=187, INCBIN=188, MACRO=189, ENDMACRO=190, 
		PROC=191, ENDPROC=192, LOOP=193, ENDLOOP=194, REPEAT=195, UNTIL=196, WHILE=197, 
		ENDWHILE=198, IFSTMT=199, ELIF=200, ELSESTMT=201, ENDIFSTMT=202, FOR=203, 
		TO=204, STEP=205, FORNEXT=206, NEXT=207, BREAK=208, CONTINUE=209, TEXTOF=210, 
		LTEXTOF=211, HREG=212, LREG=213, DEF=214, ISREG8=215, ISREG8STD=216, ISREG8SPEC=217, 
		ISREG8IDX=218, ISREG16=219, ISREG16STD=220, ISREG16IDX=221, ISREGINDIRECT=222, 
		ISCPORT=223, ISINDEXEDADDR=224, ISCONDITION=225, ISEXPR=226, HEXNUM=227, 
		BINNUM=228, OCTNUM=229, DECNUM=230, CURADDR=231, REALNUM=232, CHAR=233, 
		STRING=234, FSTRING=235, BOOLLIT=236, TRUE=237, FALSE=238, IDENTIFIER=239, 
		IDSTART=240, IDCONT=241, CURCNT=242, NONEARG=243, ErrorCharacter=244;
	public const int
		RULE_compileUnit = 0, RULE_asmline = 1, RULE_label = 2, RULE_comment = 3, 
		RULE_pragma = 4, RULE_directive = 5, RULE_statement = 6, RULE_macroStatement = 7, 
		RULE_macroEndMarker = 8, RULE_loopStatement = 9, RULE_loopEndMarker = 10, 
		RULE_procStatement = 11, RULE_procEndMarker = 12, RULE_repeatStatement = 13, 
		RULE_untilStatement = 14, RULE_whileStatement = 15, RULE_whileEndMarker = 16, 
		RULE_ifStatement = 17, RULE_elifStatement = 18, RULE_elseStatement = 19, 
		RULE_endifStatement = 20, RULE_forStatement = 21, RULE_nextStatement = 22, 
		RULE_breakStatement = 23, RULE_continueStatement = 24, RULE_macroInvocation = 25, 
		RULE_macroArgument = 26, RULE_orgPragma = 27, RULE_entPragma = 28, RULE_xentPragma = 29, 
		RULE_dispPragma = 30, RULE_equPragma = 31, RULE_varPragma = 32, RULE_defbPragma = 33, 
		RULE_defwPragma = 34, RULE_defcPragma = 35, RULE_defmPragma = 36, RULE_defnPragma = 37, 
		RULE_defhPragma = 38, RULE_skipPragma = 39, RULE_externPragma = 40, RULE_defsPragma = 41, 
		RULE_fillbPragma = 42, RULE_fillwPragma = 43, RULE_modelPragma = 44, RULE_alignPragma = 45, 
		RULE_tracePragma = 46, RULE_rndSeedPragma = 47, RULE_defgxPragma = 48, 
		RULE_defgPragma = 49, RULE_errorPragma = 50, RULE_incBinPragma = 51, RULE_operation = 52, 
		RULE_trivialOperation = 53, RULE_compoundOperation = 54, RULE_trivialNextOperation = 55, 
		RULE_operand = 56, RULE_reg8 = 57, RULE_reg8Idx = 58, RULE_reg8Spec = 59, 
		RULE_reg16 = 60, RULE_reg16Idx = 61, RULE_reg16Std = 62, RULE_reg16Spec = 63, 
		RULE_regIndirect = 64, RULE_cPort = 65, RULE_memIndirect = 66, RULE_indexedAddr = 67, 
		RULE_condition = 68, RULE_expr = 69, RULE_orExpr = 70, RULE_xorExpr = 71, 
		RULE_andExpr = 72, RULE_equExpr = 73, RULE_relExpr = 74, RULE_shiftExpr = 75, 
		RULE_addExpr = 76, RULE_multExpr = 77, RULE_minMaxExpr = 78, RULE_unaryExpr = 79, 
		RULE_functionInvocation = 80, RULE_builtinFunctionInvocation = 81, RULE_literalExpr = 82, 
		RULE_symbolExpr = 83, RULE_macroParam = 84, RULE_regs = 85, RULE_regsAndConds = 86, 
		RULE_mnemonic = 87;
	public static readonly string[] ruleNames = {
		"compileUnit", "asmline", "label", "comment", "pragma", "directive", "statement", 
		"macroStatement", "macroEndMarker", "loopStatement", "loopEndMarker", 
		"procStatement", "procEndMarker", "repeatStatement", "untilStatement", 
		"whileStatement", "whileEndMarker", "ifStatement", "elifStatement", "elseStatement", 
		"endifStatement", "forStatement", "nextStatement", "breakStatement", "continueStatement", 
		"macroInvocation", "macroArgument", "orgPragma", "entPragma", "xentPragma", 
		"dispPragma", "equPragma", "varPragma", "defbPragma", "defwPragma", "defcPragma", 
		"defmPragma", "defnPragma", "defhPragma", "skipPragma", "externPragma", 
		"defsPragma", "fillbPragma", "fillwPragma", "modelPragma", "alignPragma", 
		"tracePragma", "rndSeedPragma", "defgxPragma", "defgPragma", "errorPragma", 
		"incBinPragma", "operation", "trivialOperation", "compoundOperation", 
		"trivialNextOperation", "operand", "reg8", "reg8Idx", "reg8Spec", "reg16", 
		"reg16Idx", "reg16Std", "reg16Spec", "regIndirect", "cPort", "memIndirect", 
		"indexedAddr", "condition", "expr", "orExpr", "xorExpr", "andExpr", "equExpr", 
		"relExpr", "shiftExpr", "addExpr", "multExpr", "minMaxExpr", "unaryExpr", 
		"functionInvocation", "builtinFunctionInvocation", "literalExpr", "symbolExpr", 
		"macroParam", "regs", "regsAndConds", "mnemonic"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "':'", "'::'", "';'", "'//'", "','", "'='", 
		"'('", "')'", "'['", "']'", "'?'", "'+'", "'-'", "'|'", "'^'", "'&'", 
		"'=='", "'==='", "'!='", "'!=='", "'<'", "'<='", "'>'", "'>='", "'<<'", 
		"'>>'", "'*'", "'/'", "'%'", "'<?'", "'>?'", "'~'", "'{{'", "'}}'", "'!'", 
		"'.'", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'#ifdef'", "'#ifndef'", "'#endif'", "'#else'", 
		"'#define'", "'#undef'", "'#include'", "'#if'", "'#ifmod'", "'#ifnmod'", 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'$'", null, null, null, 
		null, null, null, null, null, null, null, null, "'$<none>$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "BLCOMMENT", "COMMENT", "NEWLINE", "COLON", "DCOLON", "SCOLON", 
		"COMSEP", "COMMA", "ASSIGN", "LPAR", "RPAR", "LSBRAC", "RSBRAC", "QMARK", 
		"PLUS", "MINUS", "VBAR", "UPARR", "AMP", "EQOP", "CIEQOP", "NEQOP", "CINEQOP", 
		"LTOP", "LTEOP", "GTOP", "GTEOP", "LSHOP", "RSHOP", "MULOP", "DIVOP", 
		"MODOP", "MINOP", "MAXOP", "TILDE", "LDBRAC", "RDBRAC", "EXCLM", "DOT", 
		"A", "B", "C", "D", "E", "H", "L", "I", "R", "XL", "XH", "YL", "YH", "BC", 
		"DE", "HL", "SP", "IX", "IY", "AF", "AF_", "Z", "NZ", "NC", "PO", "PE", 
		"P", "M", "NOP", "RLCA", "RRCA", "RLA", "RRA", "DAA", "CPL", "SCF", "CCF", 
		"HALT", "RET", "EXX", "DI", "EI", "NEG", "RETN", "RETI", "RLD", "RRD", 
		"LDI", "CPI", "INI", "OUTI", "LDD", "CPD", "IND", "OUTD", "LDIR", "CPIR", 
		"INIR", "OTIR", "LDDR", "CPDR", "INDR", "OTDR", "LD", "INC", "DEC", "EX", 
		"ADD", "ADC", "SUB", "SBC", "AND", "XOR", "OR", "CP", "DJNZ", "JR", "JP", 
		"CALL", "RST", "PUSH", "POP", "IN", "OUT", "IM", "RLC", "RRC", "RL", "RR", 
		"SLA", "SRA", "SLL", "SRL", "BIT", "RES", "SET", "SWAPNIB", "MUL", "POPX", 
		"MIRROR", "TEST", "NEXTREG", "OUTINB", "LDIX", "LDIRX", "LDDX", "LDDRX", 
		"PIXELDN", "PIXELAD", "SETAE", "LDPIRX", "LDIRSCALE", "IFDEF", "IFNDEF", 
		"ENDIF", "ELSE", "DEFINE", "UNDEF", "INCLUDE", "IF", "IFMOD", "IFNMOD", 
		"ORGPRAG", "ENTPRAG", "XENTPRAG", "EQUPRAG", "VARPRAG", "DISPRAG", "DBPRAG", 
		"DWPRAG", "DMPRAG", "DNPRAG", "DHPRAG", "DGXPRAG", "DGPRAG", "DCPRAG", 
		"SKIPRAG", "EXTPRAG", "DSPRAG", "FBPRAG", "FWPRAG", "MODPRAG", "ALGPRAG", 
		"TRACE", "TRACEHEX", "RNDSEED", "ERRORPR", "INCBIN", "MACRO", "ENDMACRO", 
		"PROC", "ENDPROC", "LOOP", "ENDLOOP", "REPEAT", "UNTIL", "WHILE", "ENDWHILE", 
		"IFSTMT", "ELIF", "ELSESTMT", "ENDIFSTMT", "FOR", "TO", "STEP", "FORNEXT", 
		"NEXT", "BREAK", "CONTINUE", "TEXTOF", "LTEXTOF", "HREG", "LREG", "DEF", 
		"ISREG8", "ISREG8STD", "ISREG8SPEC", "ISREG8IDX", "ISREG16", "ISREG16STD", 
		"ISREG16IDX", "ISREGINDIRECT", "ISCPORT", "ISINDEXEDADDR", "ISCONDITION", 
		"ISEXPR", "HEXNUM", "BINNUM", "OCTNUM", "DECNUM", "CURADDR", "REALNUM", 
		"CHAR", "STRING", "FSTRING", "BOOLLIT", "TRUE", "FALSE", "IDENTIFIER", 
		"IDSTART", "IDCONT", "CURCNT", "NONEARG", "ErrorCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Z80Asm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Z80AsmParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Z80AsmParser.Eof, 0); }
		public AsmlineContext[] asmline() {
			return GetRuleContexts<AsmlineContext>();
		}
		public AsmlineContext asmline(int i) {
			return GetRuleContext<AsmlineContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(Z80AsmParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(Z80AsmParser.NEWLINE, i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			int _alt;
			State = 203;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; Match(Eof);
				}
				break;
			case COMMENT:
			case NEWLINE:
			case ASSIGN:
			case LDBRAC:
			case NOP:
			case RLCA:
			case RRCA:
			case RLA:
			case RRA:
			case DAA:
			case CPL:
			case SCF:
			case CCF:
			case HALT:
			case RET:
			case EXX:
			case DI:
			case EI:
			case NEG:
			case RETN:
			case RETI:
			case RLD:
			case RRD:
			case LDI:
			case CPI:
			case INI:
			case OUTI:
			case LDD:
			case CPD:
			case IND:
			case OUTD:
			case LDIR:
			case CPIR:
			case INIR:
			case OTIR:
			case LDDR:
			case CPDR:
			case INDR:
			case OTDR:
			case LD:
			case INC:
			case DEC:
			case EX:
			case ADD:
			case ADC:
			case SUB:
			case SBC:
			case AND:
			case XOR:
			case OR:
			case CP:
			case DJNZ:
			case JR:
			case JP:
			case CALL:
			case RST:
			case PUSH:
			case POP:
			case IN:
			case OUT:
			case IM:
			case RLC:
			case RRC:
			case RL:
			case RR:
			case SLA:
			case SRA:
			case SLL:
			case SRL:
			case BIT:
			case RES:
			case SET:
			case SWAPNIB:
			case MUL:
			case MIRROR:
			case TEST:
			case NEXTREG:
			case OUTINB:
			case LDIX:
			case LDIRX:
			case LDDX:
			case LDDRX:
			case PIXELDN:
			case PIXELAD:
			case SETAE:
			case LDPIRX:
			case LDIRSCALE:
			case IFDEF:
			case IFNDEF:
			case ENDIF:
			case ELSE:
			case DEFINE:
			case UNDEF:
			case INCLUDE:
			case IF:
			case IFMOD:
			case IFNMOD:
			case ORGPRAG:
			case ENTPRAG:
			case XENTPRAG:
			case EQUPRAG:
			case VARPRAG:
			case DISPRAG:
			case DBPRAG:
			case DWPRAG:
			case DMPRAG:
			case DNPRAG:
			case DHPRAG:
			case DGXPRAG:
			case DGPRAG:
			case DCPRAG:
			case SKIPRAG:
			case EXTPRAG:
			case DSPRAG:
			case FBPRAG:
			case FWPRAG:
			case MODPRAG:
			case ALGPRAG:
			case TRACE:
			case TRACEHEX:
			case RNDSEED:
			case ERRORPR:
			case INCBIN:
			case MACRO:
			case ENDMACRO:
			case PROC:
			case ENDPROC:
			case LOOP:
			case ENDLOOP:
			case REPEAT:
			case UNTIL:
			case WHILE:
			case ENDWHILE:
			case IFSTMT:
			case ELIF:
			case ELSESTMT:
			case ENDIFSTMT:
			case FOR:
			case FORNEXT:
			case NEXT:
			case BREAK:
			case CONTINUE:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 177; Match(NEWLINE);
					}
					}
					State = 182;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 183; asmline();
				State = 192;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 185;
						_errHandler.Sync(this);
						_la = _input.La(1);
						do {
							{
							{
							State = 184; Match(NEWLINE);
							}
							}
							State = 187;
							_errHandler.Sync(this);
							_la = _input.La(1);
						} while ( _la==NEWLINE );
						State = 189; asmline();
						}
						} 
					}
					State = 194;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				}
				State = 198;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 195; Match(NEWLINE);
					}
					}
					State = 200;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 201; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmlineContext : ParserRuleContext {
		public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public MacroInvocationContext macroInvocation() {
			return GetRuleContext<MacroInvocationContext>(0);
		}
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public AsmlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAsmline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAsmline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsmline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsmlineContext asmline() {
		AsmlineContext _localctx = new AsmlineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_asmline);
		int _la;
		try {
			State = 227;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 205; label();
					}
					break;
				}
				State = 213;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ASSIGN:
				case ORGPRAG:
				case ENTPRAG:
				case XENTPRAG:
				case EQUPRAG:
				case VARPRAG:
				case DISPRAG:
				case DBPRAG:
				case DWPRAG:
				case DMPRAG:
				case DNPRAG:
				case DHPRAG:
				case DGXPRAG:
				case DGPRAG:
				case DCPRAG:
				case SKIPRAG:
				case EXTPRAG:
				case DSPRAG:
				case FBPRAG:
				case FWPRAG:
				case MODPRAG:
				case ALGPRAG:
				case TRACE:
				case TRACEHEX:
				case RNDSEED:
				case ERRORPR:
				case INCBIN:
					{
					State = 208; pragma();
					}
					break;
				case NOP:
				case RLCA:
				case RRCA:
				case RLA:
				case RRA:
				case DAA:
				case CPL:
				case SCF:
				case CCF:
				case HALT:
				case RET:
				case EXX:
				case DI:
				case EI:
				case NEG:
				case RETN:
				case RETI:
				case RLD:
				case RRD:
				case LDI:
				case CPI:
				case INI:
				case OUTI:
				case LDD:
				case CPD:
				case IND:
				case OUTD:
				case LDIR:
				case CPIR:
				case INIR:
				case OTIR:
				case LDDR:
				case CPDR:
				case INDR:
				case OTDR:
				case LD:
				case INC:
				case DEC:
				case EX:
				case ADD:
				case ADC:
				case SUB:
				case SBC:
				case AND:
				case XOR:
				case OR:
				case CP:
				case DJNZ:
				case JR:
				case JP:
				case CALL:
				case RST:
				case PUSH:
				case POP:
				case IN:
				case OUT:
				case IM:
				case RLC:
				case RRC:
				case RL:
				case RR:
				case SLA:
				case SRA:
				case SLL:
				case SRL:
				case BIT:
				case RES:
				case SET:
				case SWAPNIB:
				case MUL:
				case MIRROR:
				case TEST:
				case NEXTREG:
				case OUTINB:
				case LDIX:
				case LDIRX:
				case LDDX:
				case LDDRX:
				case PIXELDN:
				case PIXELAD:
				case SETAE:
				case LDPIRX:
				case LDIRSCALE:
					{
					State = 209; operation();
					}
					break;
				case LDBRAC:
					{
					State = 210; macroParam();
					}
					break;
				case MACRO:
				case ENDMACRO:
				case PROC:
				case ENDPROC:
				case LOOP:
				case ENDLOOP:
				case REPEAT:
				case UNTIL:
				case WHILE:
				case ENDWHILE:
				case IFSTMT:
				case ELIF:
				case ELSESTMT:
				case ENDIFSTMT:
				case FOR:
				case FORNEXT:
				case NEXT:
				case BREAK:
				case CONTINUE:
					{
					State = 211; statement();
					}
					break;
				case IDENTIFIER:
					{
					State = 212; macroInvocation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 216;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 215; comment();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218; directive();
				State = 220;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 219; comment();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 222; comment();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 223; label();
				State = 225;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 224; comment();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode COLON() { return GetToken(Z80AsmParser.COLON, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(IDENTIFIER);
			State = 231;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 230; Match(COLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(Z80AsmParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		public OrgPragmaContext orgPragma() {
			return GetRuleContext<OrgPragmaContext>(0);
		}
		public EntPragmaContext entPragma() {
			return GetRuleContext<EntPragmaContext>(0);
		}
		public XentPragmaContext xentPragma() {
			return GetRuleContext<XentPragmaContext>(0);
		}
		public DispPragmaContext dispPragma() {
			return GetRuleContext<DispPragmaContext>(0);
		}
		public EquPragmaContext equPragma() {
			return GetRuleContext<EquPragmaContext>(0);
		}
		public VarPragmaContext varPragma() {
			return GetRuleContext<VarPragmaContext>(0);
		}
		public DefbPragmaContext defbPragma() {
			return GetRuleContext<DefbPragmaContext>(0);
		}
		public DefwPragmaContext defwPragma() {
			return GetRuleContext<DefwPragmaContext>(0);
		}
		public DefmPragmaContext defmPragma() {
			return GetRuleContext<DefmPragmaContext>(0);
		}
		public DefcPragmaContext defcPragma() {
			return GetRuleContext<DefcPragmaContext>(0);
		}
		public DefnPragmaContext defnPragma() {
			return GetRuleContext<DefnPragmaContext>(0);
		}
		public DefhPragmaContext defhPragma() {
			return GetRuleContext<DefhPragmaContext>(0);
		}
		public SkipPragmaContext skipPragma() {
			return GetRuleContext<SkipPragmaContext>(0);
		}
		public ExternPragmaContext externPragma() {
			return GetRuleContext<ExternPragmaContext>(0);
		}
		public DefsPragmaContext defsPragma() {
			return GetRuleContext<DefsPragmaContext>(0);
		}
		public FillbPragmaContext fillbPragma() {
			return GetRuleContext<FillbPragmaContext>(0);
		}
		public FillwPragmaContext fillwPragma() {
			return GetRuleContext<FillwPragmaContext>(0);
		}
		public ModelPragmaContext modelPragma() {
			return GetRuleContext<ModelPragmaContext>(0);
		}
		public AlignPragmaContext alignPragma() {
			return GetRuleContext<AlignPragmaContext>(0);
		}
		public TracePragmaContext tracePragma() {
			return GetRuleContext<TracePragmaContext>(0);
		}
		public RndSeedPragmaContext rndSeedPragma() {
			return GetRuleContext<RndSeedPragmaContext>(0);
		}
		public DefgxPragmaContext defgxPragma() {
			return GetRuleContext<DefgxPragmaContext>(0);
		}
		public DefgPragmaContext defgPragma() {
			return GetRuleContext<DefgPragmaContext>(0);
		}
		public ErrorPragmaContext errorPragma() {
			return GetRuleContext<ErrorPragmaContext>(0);
		}
		public IncBinPragmaContext incBinPragma() {
			return GetRuleContext<IncBinPragmaContext>(0);
		}
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_pragma);
		try {
			State = 260;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ORGPRAG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235; orgPragma();
				}
				break;
			case ENTPRAG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; entPragma();
				}
				break;
			case XENTPRAG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 237; xentPragma();
				}
				break;
			case DISPRAG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 238; dispPragma();
				}
				break;
			case EQUPRAG:
				EnterOuterAlt(_localctx, 5);
				{
				State = 239; equPragma();
				}
				break;
			case ASSIGN:
			case VARPRAG:
				EnterOuterAlt(_localctx, 6);
				{
				State = 240; varPragma();
				}
				break;
			case DBPRAG:
				EnterOuterAlt(_localctx, 7);
				{
				State = 241; defbPragma();
				}
				break;
			case DWPRAG:
				EnterOuterAlt(_localctx, 8);
				{
				State = 242; defwPragma();
				}
				break;
			case DMPRAG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 243; defmPragma();
				}
				break;
			case DCPRAG:
				EnterOuterAlt(_localctx, 10);
				{
				State = 244; defcPragma();
				}
				break;
			case DNPRAG:
				EnterOuterAlt(_localctx, 11);
				{
				State = 245; defnPragma();
				}
				break;
			case DHPRAG:
				EnterOuterAlt(_localctx, 12);
				{
				State = 246; defhPragma();
				}
				break;
			case SKIPRAG:
				EnterOuterAlt(_localctx, 13);
				{
				State = 247; skipPragma();
				}
				break;
			case EXTPRAG:
				EnterOuterAlt(_localctx, 14);
				{
				State = 248; externPragma();
				}
				break;
			case DSPRAG:
				EnterOuterAlt(_localctx, 15);
				{
				State = 249; defsPragma();
				}
				break;
			case FBPRAG:
				EnterOuterAlt(_localctx, 16);
				{
				State = 250; fillbPragma();
				}
				break;
			case FWPRAG:
				EnterOuterAlt(_localctx, 17);
				{
				State = 251; fillwPragma();
				}
				break;
			case MODPRAG:
				EnterOuterAlt(_localctx, 18);
				{
				State = 252; modelPragma();
				}
				break;
			case ALGPRAG:
				EnterOuterAlt(_localctx, 19);
				{
				State = 253; alignPragma();
				}
				break;
			case TRACE:
			case TRACEHEX:
				EnterOuterAlt(_localctx, 20);
				{
				State = 254; tracePragma();
				}
				break;
			case RNDSEED:
				EnterOuterAlt(_localctx, 21);
				{
				State = 255; rndSeedPragma();
				}
				break;
			case DGXPRAG:
				EnterOuterAlt(_localctx, 22);
				{
				State = 256; defgxPragma();
				}
				break;
			case DGPRAG:
				EnterOuterAlt(_localctx, 23);
				{
				State = 257; defgPragma();
				}
				break;
			case ERRORPR:
				EnterOuterAlt(_localctx, 24);
				{
				State = 258; errorPragma();
				}
				break;
			case INCBIN:
				EnterOuterAlt(_localctx, 25);
				{
				State = 259; incBinPragma();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode IFDEF() { return GetToken(Z80AsmParser.IFDEF, 0); }
		public ITerminalNode IFNDEF() { return GetToken(Z80AsmParser.IFNDEF, 0); }
		public ITerminalNode DEFINE() { return GetToken(Z80AsmParser.DEFINE, 0); }
		public ITerminalNode UNDEF() { return GetToken(Z80AsmParser.UNDEF, 0); }
		public ITerminalNode IFMOD() { return GetToken(Z80AsmParser.IFMOD, 0); }
		public ITerminalNode IFNMOD() { return GetToken(Z80AsmParser.IFNMOD, 0); }
		public ITerminalNode ENDIF() { return GetToken(Z80AsmParser.ENDIF, 0); }
		public ITerminalNode ELSE() { return GetToken(Z80AsmParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(Z80AsmParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode INCLUDE() { return GetToken(Z80AsmParser.INCLUDE, 0); }
		public ITerminalNode STRING() { return GetToken(Z80AsmParser.STRING, 0); }
		public ITerminalNode FSTRING() { return GetToken(Z80AsmParser.FSTRING, 0); }
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_directive);
		int _la;
		try {
			State = 270;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IFDEF:
			case IFNDEF:
			case DEFINE:
			case UNDEF:
			case IFMOD:
			case IFNMOD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 262;
				_la = _input.La(1);
				if ( !(((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & ((1L << (IFDEF - 153)) | (1L << (IFNDEF - 153)) | (1L << (DEFINE - 153)) | (1L << (UNDEF - 153)) | (1L << (IFMOD - 153)) | (1L << (IFNMOD - 153)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 263; Match(IDENTIFIER);
				}
				break;
			case ENDIF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264; Match(ENDIF);
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 265; Match(ELSE);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 266; Match(IF);
				State = 267; expr();
				}
				break;
			case INCLUDE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 268; Match(INCLUDE);
				State = 269;
				_la = _input.La(1);
				if ( !(_la==STRING || _la==FSTRING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public MacroStatementContext macroStatement() {
			return GetRuleContext<MacroStatementContext>(0);
		}
		public MacroEndMarkerContext macroEndMarker() {
			return GetRuleContext<MacroEndMarkerContext>(0);
		}
		public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		public LoopEndMarkerContext loopEndMarker() {
			return GetRuleContext<LoopEndMarkerContext>(0);
		}
		public ProcStatementContext procStatement() {
			return GetRuleContext<ProcStatementContext>(0);
		}
		public ProcEndMarkerContext procEndMarker() {
			return GetRuleContext<ProcEndMarkerContext>(0);
		}
		public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		public UntilStatementContext untilStatement() {
			return GetRuleContext<UntilStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public WhileEndMarkerContext whileEndMarker() {
			return GetRuleContext<WhileEndMarkerContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElifStatementContext elifStatement() {
			return GetRuleContext<ElifStatementContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public EndifStatementContext endifStatement() {
			return GetRuleContext<EndifStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public NextStatementContext nextStatement() {
			return GetRuleContext<NextStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 290;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case MACRO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; macroStatement();
				}
				break;
			case ENDMACRO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273; macroEndMarker();
				}
				break;
			case LOOP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 274; loopStatement();
				}
				break;
			case ENDLOOP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 275; loopEndMarker();
				}
				break;
			case PROC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 276; procStatement();
				}
				break;
			case ENDPROC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 277; procEndMarker();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 278; repeatStatement();
				}
				break;
			case UNTIL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 279; untilStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 280; whileStatement();
				}
				break;
			case ENDWHILE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 281; whileEndMarker();
				}
				break;
			case IFSTMT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 282; ifStatement();
				}
				break;
			case ELIF:
				EnterOuterAlt(_localctx, 12);
				{
				State = 283; elifStatement();
				}
				break;
			case ELSESTMT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 284; elseStatement();
				}
				break;
			case ENDIFSTMT:
				EnterOuterAlt(_localctx, 14);
				{
				State = 285; endifStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 15);
				{
				State = 286; forStatement();
				}
				break;
			case FORNEXT:
			case NEXT:
				EnterOuterAlt(_localctx, 16);
				{
				State = 287; nextStatement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 17);
				{
				State = 288; breakStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 18);
				{
				State = 289; continueStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroStatementContext : ParserRuleContext {
		public ITerminalNode MACRO() { return GetToken(Z80AsmParser.MACRO, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(Z80AsmParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Z80AsmParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public MacroStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroStatementContext macroStatement() {
		MacroStatementContext _localctx = new MacroStatementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_macroStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; Match(MACRO);
			State = 293; Match(LPAR);
			State = 302;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 294; Match(IDENTIFIER);
				State = 299;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 295; Match(COMMA);
					State = 296; Match(IDENTIFIER);
					}
					}
					State = 301;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 304; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDMACRO() { return GetToken(Z80AsmParser.ENDMACRO, 0); }
		public MacroEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroEndMarkerContext macroEndMarker() {
		MacroEndMarkerContext _localctx = new MacroEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_macroEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(ENDMACRO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		public ITerminalNode LOOP() { return GetToken(Z80AsmParser.LOOP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; Match(LOOP);
			State = 309; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDLOOP() { return GetToken(Z80AsmParser.ENDLOOP, 0); }
		public LoopEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLoopEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLoopEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopEndMarkerContext loopEndMarker() {
		LoopEndMarkerContext _localctx = new LoopEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_loopEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(ENDLOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcStatementContext : ParserRuleContext {
		public ITerminalNode PROC() { return GetToken(Z80AsmParser.PROC, 0); }
		public ProcStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterProcStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitProcStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcStatementContext procStatement() {
		ProcStatementContext _localctx = new ProcStatementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_procStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; Match(PROC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDPROC() { return GetToken(Z80AsmParser.ENDPROC, 0); }
		public ProcEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterProcEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitProcEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcEndMarkerContext procEndMarker() {
		ProcEndMarkerContext _localctx = new ProcEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_procEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(ENDPROC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		public ITerminalNode REPEAT() { return GetToken(Z80AsmParser.REPEAT, 0); }
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(REPEAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilStatementContext : ParserRuleContext {
		public ITerminalNode UNTIL() { return GetToken(Z80AsmParser.UNTIL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UntilStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterUntilStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitUntilStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilStatementContext untilStatement() {
		UntilStatementContext _localctx = new UntilStatementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_untilStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; Match(UNTIL);
			State = 320; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(Z80AsmParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(WHILE);
			State = 323; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDWHILE() { return GetToken(Z80AsmParser.ENDWHILE, 0); }
		public WhileEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterWhileEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitWhileEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileEndMarkerContext whileEndMarker() {
		WhileEndMarkerContext _localctx = new WhileEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_whileEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; Match(ENDWHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode IFSTMT() { return GetToken(Z80AsmParser.IFSTMT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(IFSTMT);
			State = 328; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifStatementContext : ParserRuleContext {
		public ITerminalNode ELIF() { return GetToken(Z80AsmParser.ELIF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ElifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterElifStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitElifStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifStatementContext elifStatement() {
		ElifStatementContext _localctx = new ElifStatementContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_elifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(ELIF);
			State = 331; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ITerminalNode ELSESTMT() { return GetToken(Z80AsmParser.ELSESTMT, 0); }
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(ELSESTMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndifStatementContext : ParserRuleContext {
		public ITerminalNode ENDIFSTMT() { return GetToken(Z80AsmParser.ENDIFSTMT, 0); }
		public EndifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEndifStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEndifStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndifStatementContext endifStatement() {
		EndifStatementContext _localctx = new EndifStatementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_endifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; Match(ENDIFSTMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(Z80AsmParser.FOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(Z80AsmParser.ASSIGN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TO() { return GetToken(Z80AsmParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(Z80AsmParser.STEP, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(FOR);
			State = 338; Match(IDENTIFIER);
			State = 339; Match(ASSIGN);
			State = 340; expr();
			State = 341; Match(TO);
			State = 342; expr();
			State = 345;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 343; Match(STEP);
				State = 344; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextStatementContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(Z80AsmParser.NEXT, 0); }
		public ITerminalNode FORNEXT() { return GetToken(Z80AsmParser.FORNEXT, 0); }
		public NextStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterNextStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitNextStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextStatementContext nextStatement() {
		NextStatementContext _localctx = new NextStatementContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_nextStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			_la = _input.La(1);
			if ( !(_la==FORNEXT || _la==NEXT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(Z80AsmParser.BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(Z80AsmParser.CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroInvocationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public MacroArgumentContext[] macroArgument() {
			return GetRuleContexts<MacroArgumentContext>();
		}
		public MacroArgumentContext macroArgument(int i) {
			return GetRuleContext<MacroArgumentContext>(i);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public MacroInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroInvocationContext macroInvocation() {
		MacroInvocationContext _localctx = new MacroInvocationContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_macroInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(IDENTIFIER);
			State = 354; Match(LPAR);
			State = 355; macroArgument();
			State = 360;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 356; Match(COMMA);
				State = 357; macroArgument();
				}
				}
				State = 362;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 363; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroArgumentContext : ParserRuleContext {
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public MacroArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroArgumentContext macroArgument() {
		MacroArgumentContext _localctx = new MacroArgumentContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_macroArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
				{
				State = 365; operand();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrgPragmaContext : ParserRuleContext {
		public ITerminalNode ORGPRAG() { return GetToken(Z80AsmParser.ORGPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OrgPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orgPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOrgPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOrgPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrgPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrgPragmaContext orgPragma() {
		OrgPragmaContext _localctx = new OrgPragmaContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_orgPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; Match(ORGPRAG);
			State = 369; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntPragmaContext : ParserRuleContext {
		public ITerminalNode ENTPRAG() { return GetToken(Z80AsmParser.ENTPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EntPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEntPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEntPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntPragmaContext entPragma() {
		EntPragmaContext _localctx = new EntPragmaContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_entPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(ENTPRAG);
			State = 372; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XentPragmaContext : ParserRuleContext {
		public ITerminalNode XENTPRAG() { return GetToken(Z80AsmParser.XENTPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public XentPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xentPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterXentPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitXentPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXentPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XentPragmaContext xentPragma() {
		XentPragmaContext _localctx = new XentPragmaContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_xentPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; Match(XENTPRAG);
			State = 375; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DispPragmaContext : ParserRuleContext {
		public ITerminalNode DISPRAG() { return GetToken(Z80AsmParser.DISPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DispPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDispPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDispPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDispPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DispPragmaContext dispPragma() {
		DispPragmaContext _localctx = new DispPragmaContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_dispPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(DISPRAG);
			State = 378; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquPragmaContext : ParserRuleContext {
		public ITerminalNode EQUPRAG() { return GetToken(Z80AsmParser.EQUPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EquPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEquPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEquPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquPragmaContext equPragma() {
		EquPragmaContext _localctx = new EquPragmaContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_equPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(EQUPRAG);
			State = 381; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarPragmaContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode VARPRAG() { return GetToken(Z80AsmParser.VARPRAG, 0); }
		public ITerminalNode ASSIGN() { return GetToken(Z80AsmParser.ASSIGN, 0); }
		public VarPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterVarPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitVarPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarPragmaContext varPragma() {
		VarPragmaContext _localctx = new VarPragmaContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_varPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			_la = _input.La(1);
			if ( !(_la==ASSIGN || _la==VARPRAG) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 384; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefbPragmaContext : ParserRuleContext {
		public ITerminalNode DBPRAG() { return GetToken(Z80AsmParser.DBPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public DefbPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defbPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefbPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefbPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefbPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefbPragmaContext defbPragma() {
		DefbPragmaContext _localctx = new DefbPragmaContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_defbPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(DBPRAG);
			State = 387; expr();
			State = 392;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 388; Match(COMMA);
				State = 389; expr();
				}
				}
				State = 394;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefwPragmaContext : ParserRuleContext {
		public ITerminalNode DWPRAG() { return GetToken(Z80AsmParser.DWPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public DefwPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defwPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefwPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefwPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefwPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefwPragmaContext defwPragma() {
		DefwPragmaContext _localctx = new DefwPragmaContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_defwPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; Match(DWPRAG);
			State = 396; expr();
			State = 401;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 397; Match(COMMA);
				State = 398; expr();
				}
				}
				State = 403;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefcPragmaContext : ParserRuleContext {
		public ITerminalNode DCPRAG() { return GetToken(Z80AsmParser.DCPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefcPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defcPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefcPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefcPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefcPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefcPragmaContext defcPragma() {
		DefcPragmaContext _localctx = new DefcPragmaContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_defcPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; Match(DCPRAG);
			State = 405; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefmPragmaContext : ParserRuleContext {
		public ITerminalNode DMPRAG() { return GetToken(Z80AsmParser.DMPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefmPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defmPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefmPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefmPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefmPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefmPragmaContext defmPragma() {
		DefmPragmaContext _localctx = new DefmPragmaContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_defmPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(DMPRAG);
			State = 408; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefnPragmaContext : ParserRuleContext {
		public ITerminalNode DNPRAG() { return GetToken(Z80AsmParser.DNPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefnPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defnPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefnPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefnPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefnPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefnPragmaContext defnPragma() {
		DefnPragmaContext _localctx = new DefnPragmaContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_defnPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(DNPRAG);
			State = 411; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefhPragmaContext : ParserRuleContext {
		public ITerminalNode DHPRAG() { return GetToken(Z80AsmParser.DHPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefhPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defhPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefhPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefhPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefhPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefhPragmaContext defhPragma() {
		DefhPragmaContext _localctx = new DefhPragmaContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_defhPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; Match(DHPRAG);
			State = 414; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipPragmaContext : ParserRuleContext {
		public ITerminalNode SKIPRAG() { return GetToken(Z80AsmParser.SKIPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public SkipPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skipPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterSkipPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitSkipPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipPragmaContext skipPragma() {
		SkipPragmaContext _localctx = new SkipPragmaContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_skipPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(SKIPRAG);
			State = 417; expr();
			State = 420;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 418; Match(COMMA);
				State = 419; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternPragmaContext : ParserRuleContext {
		public ITerminalNode EXTPRAG() { return GetToken(Z80AsmParser.EXTPRAG, 0); }
		public ExternPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterExternPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitExternPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternPragmaContext externPragma() {
		ExternPragmaContext _localctx = new ExternPragmaContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_externPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(EXTPRAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefsPragmaContext : ParserRuleContext {
		public ITerminalNode DSPRAG() { return GetToken(Z80AsmParser.DSPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefsPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defsPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefsPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefsPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefsPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefsPragmaContext defsPragma() {
		DefsPragmaContext _localctx = new DefsPragmaContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_defsPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(DSPRAG);
			State = 425; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillbPragmaContext : ParserRuleContext {
		public ITerminalNode FBPRAG() { return GetToken(Z80AsmParser.FBPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public FillbPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillbPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFillbPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFillbPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillbPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillbPragmaContext fillbPragma() {
		FillbPragmaContext _localctx = new FillbPragmaContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_fillbPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(FBPRAG);
			State = 428; expr();
			State = 429; Match(COMMA);
			State = 430; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillwPragmaContext : ParserRuleContext {
		public ITerminalNode FWPRAG() { return GetToken(Z80AsmParser.FWPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public FillwPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillwPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFillwPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFillwPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillwPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillwPragmaContext fillwPragma() {
		FillwPragmaContext _localctx = new FillwPragmaContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_fillwPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(FWPRAG);
			State = 433; expr();
			State = 434; Match(COMMA);
			State = 435; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelPragmaContext : ParserRuleContext {
		public ITerminalNode MODPRAG() { return GetToken(Z80AsmParser.MODPRAG, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode NEXT() { return GetToken(Z80AsmParser.NEXT, 0); }
		public ModelPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterModelPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitModelPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelPragmaContext modelPragma() {
		ModelPragmaContext _localctx = new ModelPragmaContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_modelPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; Match(MODPRAG);
			State = 438;
			_la = _input.La(1);
			if ( !(_la==NEXT || _la==IDENTIFIER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignPragmaContext : ParserRuleContext {
		public ITerminalNode ALGPRAG() { return GetToken(Z80AsmParser.ALGPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AlignPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAlignPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAlignPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlignPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlignPragmaContext alignPragma() {
		AlignPragmaContext _localctx = new AlignPragmaContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_alignPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; Match(ALGPRAG);
			State = 442;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DCOLON) | (1L << LPAR) | (1L << LSBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << MULOP) | (1L << TILDE) | (1L << LDBRAC) | (1L << EXCLM) | (1L << DOT))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)))) != 0)) {
				{
				State = 441; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TracePragmaContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TRACE() { return GetToken(Z80AsmParser.TRACE, 0); }
		public ITerminalNode TRACEHEX() { return GetToken(Z80AsmParser.TRACEHEX, 0); }
		public TracePragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tracePragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTracePragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTracePragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTracePragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TracePragmaContext tracePragma() {
		TracePragmaContext _localctx = new TracePragmaContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_tracePragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			_la = _input.La(1);
			if ( !(_la==TRACE || _la==TRACEHEX) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 445; expr();
			State = 450;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 446; Match(COMMA);
				State = 447; expr();
				}
				}
				State = 452;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RndSeedPragmaContext : ParserRuleContext {
		public ITerminalNode RNDSEED() { return GetToken(Z80AsmParser.RNDSEED, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RndSeedPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rndSeedPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRndSeedPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRndSeedPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRndSeedPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RndSeedPragmaContext rndSeedPragma() {
		RndSeedPragmaContext _localctx = new RndSeedPragmaContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_rndSeedPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453; Match(RNDSEED);
			State = 455;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DCOLON) | (1L << LPAR) | (1L << LSBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << MULOP) | (1L << TILDE) | (1L << LDBRAC) | (1L << EXCLM) | (1L << DOT))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)))) != 0)) {
				{
				State = 454; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefgxPragmaContext : ParserRuleContext {
		public ITerminalNode DGXPRAG() { return GetToken(Z80AsmParser.DGXPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefgxPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defgxPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefgxPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefgxPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefgxPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefgxPragmaContext defgxPragma() {
		DefgxPragmaContext _localctx = new DefgxPragmaContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_defgxPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(DGXPRAG);
			State = 458; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefgPragmaContext : ParserRuleContext {
		public ITerminalNode DGPRAG() { return GetToken(Z80AsmParser.DGPRAG, 0); }
		public DefgPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defgPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefgPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefgPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefgPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefgPragmaContext defgPragma() {
		DefgPragmaContext _localctx = new DefgPragmaContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_defgPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(DGPRAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorPragmaContext : ParserRuleContext {
		public ITerminalNode ERRORPR() { return GetToken(Z80AsmParser.ERRORPR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ErrorPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterErrorPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitErrorPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorPragmaContext errorPragma() {
		ErrorPragmaContext _localctx = new ErrorPragmaContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_errorPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462; Match(ERRORPR);
			State = 463; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncBinPragmaContext : ParserRuleContext {
		public ITerminalNode INCBIN() { return GetToken(Z80AsmParser.INCBIN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IncBinPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incBinPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIncBinPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIncBinPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncBinPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncBinPragmaContext incBinPragma() {
		IncBinPragmaContext _localctx = new IncBinPragmaContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_incBinPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; Match(INCBIN);
			State = 466; expr();
			State = 473;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 467; Match(COMMA);
				State = 468; expr();
				State = 471;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 469; Match(COMMA);
					State = 470; expr();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public TrivialOperationContext trivialOperation() {
			return GetRuleContext<TrivialOperationContext>(0);
		}
		public CompoundOperationContext compoundOperation() {
			return GetRuleContext<CompoundOperationContext>(0);
		}
		public TrivialNextOperationContext trivialNextOperation() {
			return GetRuleContext<TrivialNextOperationContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_operation);
		try {
			State = 478;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NOP:
			case RLCA:
			case RRCA:
			case RLA:
			case RRA:
			case DAA:
			case CPL:
			case SCF:
			case CCF:
			case HALT:
			case EXX:
			case DI:
			case EI:
			case NEG:
			case RETN:
			case RETI:
			case RLD:
			case RRD:
			case LDI:
			case CPI:
			case INI:
			case OUTI:
			case LDD:
			case CPD:
			case IND:
			case OUTD:
			case LDIR:
			case CPIR:
			case INIR:
			case OTIR:
			case LDDR:
			case CPDR:
			case INDR:
			case OTDR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475; trivialOperation();
				}
				break;
			case RET:
			case LD:
			case INC:
			case DEC:
			case EX:
			case ADD:
			case ADC:
			case SUB:
			case SBC:
			case AND:
			case XOR:
			case OR:
			case CP:
			case DJNZ:
			case JR:
			case JP:
			case CALL:
			case RST:
			case PUSH:
			case POP:
			case IN:
			case OUT:
			case IM:
			case RLC:
			case RRC:
			case RL:
			case RR:
			case SLA:
			case SRA:
			case SLL:
			case SRL:
			case BIT:
			case RES:
			case SET:
			case MIRROR:
			case TEST:
			case NEXTREG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476; compoundOperation();
				}
				break;
			case SWAPNIB:
			case MUL:
			case OUTINB:
			case LDIX:
			case LDIRX:
			case LDDX:
			case LDDRX:
			case PIXELDN:
			case PIXELAD:
			case SETAE:
			case LDPIRX:
			case LDIRSCALE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 477; trivialNextOperation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrivialOperationContext : ParserRuleContext {
		public ITerminalNode NOP() { return GetToken(Z80AsmParser.NOP, 0); }
		public ITerminalNode RLCA() { return GetToken(Z80AsmParser.RLCA, 0); }
		public ITerminalNode RRCA() { return GetToken(Z80AsmParser.RRCA, 0); }
		public ITerminalNode RLA() { return GetToken(Z80AsmParser.RLA, 0); }
		public ITerminalNode RRA() { return GetToken(Z80AsmParser.RRA, 0); }
		public ITerminalNode DAA() { return GetToken(Z80AsmParser.DAA, 0); }
		public ITerminalNode CPL() { return GetToken(Z80AsmParser.CPL, 0); }
		public ITerminalNode SCF() { return GetToken(Z80AsmParser.SCF, 0); }
		public ITerminalNode CCF() { return GetToken(Z80AsmParser.CCF, 0); }
		public ITerminalNode HALT() { return GetToken(Z80AsmParser.HALT, 0); }
		public ITerminalNode EXX() { return GetToken(Z80AsmParser.EXX, 0); }
		public ITerminalNode DI() { return GetToken(Z80AsmParser.DI, 0); }
		public ITerminalNode EI() { return GetToken(Z80AsmParser.EI, 0); }
		public ITerminalNode NEG() { return GetToken(Z80AsmParser.NEG, 0); }
		public ITerminalNode RETN() { return GetToken(Z80AsmParser.RETN, 0); }
		public ITerminalNode RETI() { return GetToken(Z80AsmParser.RETI, 0); }
		public ITerminalNode RLD() { return GetToken(Z80AsmParser.RLD, 0); }
		public ITerminalNode RRD() { return GetToken(Z80AsmParser.RRD, 0); }
		public ITerminalNode LDI() { return GetToken(Z80AsmParser.LDI, 0); }
		public ITerminalNode CPI() { return GetToken(Z80AsmParser.CPI, 0); }
		public ITerminalNode INI() { return GetToken(Z80AsmParser.INI, 0); }
		public ITerminalNode OUTI() { return GetToken(Z80AsmParser.OUTI, 0); }
		public ITerminalNode LDD() { return GetToken(Z80AsmParser.LDD, 0); }
		public ITerminalNode CPD() { return GetToken(Z80AsmParser.CPD, 0); }
		public ITerminalNode IND() { return GetToken(Z80AsmParser.IND, 0); }
		public ITerminalNode OUTD() { return GetToken(Z80AsmParser.OUTD, 0); }
		public ITerminalNode LDIR() { return GetToken(Z80AsmParser.LDIR, 0); }
		public ITerminalNode CPIR() { return GetToken(Z80AsmParser.CPIR, 0); }
		public ITerminalNode INIR() { return GetToken(Z80AsmParser.INIR, 0); }
		public ITerminalNode OTIR() { return GetToken(Z80AsmParser.OTIR, 0); }
		public ITerminalNode LDDR() { return GetToken(Z80AsmParser.LDDR, 0); }
		public ITerminalNode CPDR() { return GetToken(Z80AsmParser.CPDR, 0); }
		public ITerminalNode INDR() { return GetToken(Z80AsmParser.INDR, 0); }
		public ITerminalNode OTDR() { return GetToken(Z80AsmParser.OTDR, 0); }
		public TrivialOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trivialOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTrivialOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTrivialOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrivialOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrivialOperationContext trivialOperation() {
		TrivialOperationContext _localctx = new TrivialOperationContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_trivialOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			_la = _input.La(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (NOP - 69)) | (1L << (RLCA - 69)) | (1L << (RRCA - 69)) | (1L << (RLA - 69)) | (1L << (RRA - 69)) | (1L << (DAA - 69)) | (1L << (CPL - 69)) | (1L << (SCF - 69)) | (1L << (CCF - 69)) | (1L << (HALT - 69)) | (1L << (EXX - 69)) | (1L << (DI - 69)) | (1L << (EI - 69)) | (1L << (NEG - 69)) | (1L << (RETN - 69)) | (1L << (RETI - 69)) | (1L << (RLD - 69)) | (1L << (RRD - 69)) | (1L << (LDI - 69)) | (1L << (CPI - 69)) | (1L << (INI - 69)) | (1L << (OUTI - 69)) | (1L << (LDD - 69)) | (1L << (CPD - 69)) | (1L << (IND - 69)) | (1L << (OUTD - 69)) | (1L << (LDIR - 69)) | (1L << (CPIR - 69)) | (1L << (INIR - 69)) | (1L << (OTIR - 69)) | (1L << (LDDR - 69)) | (1L << (CPDR - 69)) | (1L << (INDR - 69)) | (1L << (OTDR - 69)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundOperationContext : ParserRuleContext {
		public ITerminalNode LD() { return GetToken(Z80AsmParser.LD, 0); }
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public ITerminalNode INC() { return GetToken(Z80AsmParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(Z80AsmParser.DEC, 0); }
		public ITerminalNode EX() { return GetToken(Z80AsmParser.EX, 0); }
		public ITerminalNode ADD() { return GetToken(Z80AsmParser.ADD, 0); }
		public ITerminalNode ADC() { return GetToken(Z80AsmParser.ADC, 0); }
		public ITerminalNode SUB() { return GetToken(Z80AsmParser.SUB, 0); }
		public ITerminalNode SBC() { return GetToken(Z80AsmParser.SBC, 0); }
		public ITerminalNode AND() { return GetToken(Z80AsmParser.AND, 0); }
		public ITerminalNode XOR() { return GetToken(Z80AsmParser.XOR, 0); }
		public ITerminalNode OR() { return GetToken(Z80AsmParser.OR, 0); }
		public ITerminalNode CP() { return GetToken(Z80AsmParser.CP, 0); }
		public ITerminalNode DJNZ() { return GetToken(Z80AsmParser.DJNZ, 0); }
		public ITerminalNode JR() { return GetToken(Z80AsmParser.JR, 0); }
		public ITerminalNode JP() { return GetToken(Z80AsmParser.JP, 0); }
		public ITerminalNode CALL() { return GetToken(Z80AsmParser.CALL, 0); }
		public ITerminalNode RET() { return GetToken(Z80AsmParser.RET, 0); }
		public ITerminalNode RST() { return GetToken(Z80AsmParser.RST, 0); }
		public ITerminalNode PUSH() { return GetToken(Z80AsmParser.PUSH, 0); }
		public ITerminalNode POP() { return GetToken(Z80AsmParser.POP, 0); }
		public ITerminalNode IN() { return GetToken(Z80AsmParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(Z80AsmParser.OUT, 0); }
		public ITerminalNode IM() { return GetToken(Z80AsmParser.IM, 0); }
		public ITerminalNode RLC() { return GetToken(Z80AsmParser.RLC, 0); }
		public ITerminalNode RRC() { return GetToken(Z80AsmParser.RRC, 0); }
		public ITerminalNode RL() { return GetToken(Z80AsmParser.RL, 0); }
		public ITerminalNode RR() { return GetToken(Z80AsmParser.RR, 0); }
		public ITerminalNode SLA() { return GetToken(Z80AsmParser.SLA, 0); }
		public ITerminalNode SRA() { return GetToken(Z80AsmParser.SRA, 0); }
		public ITerminalNode SLL() { return GetToken(Z80AsmParser.SLL, 0); }
		public ITerminalNode SRL() { return GetToken(Z80AsmParser.SRL, 0); }
		public ITerminalNode BIT() { return GetToken(Z80AsmParser.BIT, 0); }
		public ITerminalNode RES() { return GetToken(Z80AsmParser.RES, 0); }
		public ITerminalNode SET() { return GetToken(Z80AsmParser.SET, 0); }
		public ITerminalNode MIRROR() { return GetToken(Z80AsmParser.MIRROR, 0); }
		public ITerminalNode TEST() { return GetToken(Z80AsmParser.TEST, 0); }
		public ITerminalNode NEXTREG() { return GetToken(Z80AsmParser.NEXTREG, 0); }
		public CompoundOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCompoundOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCompoundOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundOperationContext compoundOperation() {
		CompoundOperationContext _localctx = new CompoundOperationContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_compoundOperation);
		int _la;
		try {
			State = 685;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482; Match(LD);
				State = 483; operand();
				State = 484; Match(COMMA);
				State = 485; operand();
				}
				break;
			case INC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 487; Match(INC);
				State = 488; operand();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 489; Match(DEC);
				State = 490; operand();
				}
				break;
			case EX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 491; Match(EX);
				State = 492; operand();
				State = 493; Match(COMMA);
				State = 494; operand();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 496; Match(ADD);
				State = 497; operand();
				State = 498; Match(COMMA);
				State = 499; operand();
				}
				break;
			case ADC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 501; Match(ADC);
				State = 502; operand();
				State = 503; Match(COMMA);
				State = 504; operand();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 7);
				{
				State = 506; Match(SUB);
				State = 510;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					State = 507; operand();
					State = 508; Match(COMMA);
					}
					break;
				}
				State = 512; operand();
				}
				break;
			case SBC:
				EnterOuterAlt(_localctx, 8);
				{
				State = 513; Match(SBC);
				State = 514; operand();
				State = 515; Match(COMMA);
				State = 516; operand();
				}
				break;
			case AND:
				EnterOuterAlt(_localctx, 9);
				{
				State = 518; Match(AND);
				State = 522;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
				case 1:
					{
					State = 519; operand();
					State = 520; Match(COMMA);
					}
					break;
				}
				State = 524; operand();
				}
				break;
			case XOR:
				EnterOuterAlt(_localctx, 10);
				{
				State = 525; Match(XOR);
				State = 529;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
				case 1:
					{
					State = 526; operand();
					State = 527; Match(COMMA);
					}
					break;
				}
				State = 531; operand();
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 11);
				{
				State = 532; Match(OR);
				State = 536;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
				case 1:
					{
					State = 533; operand();
					State = 534; Match(COMMA);
					}
					break;
				}
				State = 538; operand();
				}
				break;
			case CP:
				EnterOuterAlt(_localctx, 12);
				{
				State = 539; Match(CP);
				State = 543;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
				case 1:
					{
					State = 540; operand();
					State = 541; Match(COMMA);
					}
					break;
				}
				State = 545; operand();
				}
				break;
			case DJNZ:
				EnterOuterAlt(_localctx, 13);
				{
				State = 546; Match(DJNZ);
				State = 547; operand();
				}
				break;
			case JR:
				EnterOuterAlt(_localctx, 14);
				{
				State = 548; Match(JR);
				State = 552;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
				case 1:
					{
					State = 549; operand();
					State = 550; Match(COMMA);
					}
					break;
				}
				State = 554; operand();
				}
				break;
			case JP:
				EnterOuterAlt(_localctx, 15);
				{
				State = 555; Match(JP);
				State = 559;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					State = 556; operand();
					State = 557; Match(COMMA);
					}
					break;
				}
				State = 561; operand();
				}
				break;
			case CALL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 562; Match(CALL);
				State = 566;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					State = 563; operand();
					State = 564; Match(COMMA);
					}
					break;
				}
				State = 568; operand();
				}
				break;
			case RET:
				EnterOuterAlt(_localctx, 17);
				{
				State = 569; Match(RET);
				State = 571;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
					{
					State = 570; operand();
					}
				}

				}
				break;
			case RST:
				EnterOuterAlt(_localctx, 18);
				{
				State = 573; Match(RST);
				State = 574; operand();
				}
				break;
			case PUSH:
				EnterOuterAlt(_localctx, 19);
				{
				State = 575; Match(PUSH);
				State = 576; operand();
				}
				break;
			case POP:
				EnterOuterAlt(_localctx, 20);
				{
				State = 577; Match(POP);
				State = 578; operand();
				}
				break;
			case IN:
				EnterOuterAlt(_localctx, 21);
				{
				State = 579; Match(IN);
				State = 583;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					State = 580; operand();
					State = 581; Match(COMMA);
					}
					break;
				}
				State = 585; operand();
				}
				break;
			case OUT:
				EnterOuterAlt(_localctx, 22);
				{
				State = 586; Match(OUT);
				State = 590;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					State = 587; operand();
					State = 588; Match(COMMA);
					}
					break;
				}
				State = 592; operand();
				}
				break;
			case IM:
				EnterOuterAlt(_localctx, 23);
				{
				State = 593; Match(IM);
				State = 594; operand();
				}
				break;
			case RLC:
				EnterOuterAlt(_localctx, 24);
				{
				State = 595; Match(RLC);
				State = 599;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					State = 596; operand();
					State = 597; Match(COMMA);
					}
					break;
				}
				State = 601; operand();
				}
				break;
			case RRC:
				EnterOuterAlt(_localctx, 25);
				{
				State = 602; Match(RRC);
				State = 606;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					State = 603; operand();
					State = 604; Match(COMMA);
					}
					break;
				}
				State = 608; operand();
				}
				break;
			case RL:
				EnterOuterAlt(_localctx, 26);
				{
				State = 609; Match(RL);
				State = 613;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					State = 610; operand();
					State = 611; Match(COMMA);
					}
					break;
				}
				State = 615; operand();
				}
				break;
			case RR:
				EnterOuterAlt(_localctx, 27);
				{
				State = 616; Match(RR);
				State = 620;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					State = 617; operand();
					State = 618; Match(COMMA);
					}
					break;
				}
				State = 622; operand();
				}
				break;
			case SLA:
				EnterOuterAlt(_localctx, 28);
				{
				State = 623; Match(SLA);
				State = 627;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					State = 624; operand();
					State = 625; Match(COMMA);
					}
					break;
				}
				State = 629; operand();
				}
				break;
			case SRA:
				EnterOuterAlt(_localctx, 29);
				{
				State = 630; Match(SRA);
				State = 634;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					State = 631; operand();
					State = 632; Match(COMMA);
					}
					break;
				}
				State = 636; operand();
				}
				break;
			case SLL:
				EnterOuterAlt(_localctx, 30);
				{
				State = 637; Match(SLL);
				State = 641;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					State = 638; operand();
					State = 639; Match(COMMA);
					}
					break;
				}
				State = 643; operand();
				}
				break;
			case SRL:
				EnterOuterAlt(_localctx, 31);
				{
				State = 644; Match(SRL);
				State = 648;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					State = 645; operand();
					State = 646; Match(COMMA);
					}
					break;
				}
				State = 650; operand();
				}
				break;
			case BIT:
				EnterOuterAlt(_localctx, 32);
				{
				State = 651; Match(BIT);
				State = 652; operand();
				State = 653; Match(COMMA);
				State = 654; operand();
				}
				break;
			case RES:
				EnterOuterAlt(_localctx, 33);
				{
				State = 656; Match(RES);
				State = 657; operand();
				State = 658; Match(COMMA);
				State = 662;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					State = 659; operand();
					State = 660; Match(COMMA);
					}
					break;
				}
				State = 664; operand();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 34);
				{
				State = 666; Match(SET);
				State = 667; operand();
				State = 668; Match(COMMA);
				State = 672;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					State = 669; operand();
					State = 670; Match(COMMA);
					}
					break;
				}
				State = 674; operand();
				}
				break;
			case MIRROR:
				EnterOuterAlt(_localctx, 35);
				{
				State = 676; Match(MIRROR);
				State = 677; operand();
				}
				break;
			case TEST:
				EnterOuterAlt(_localctx, 36);
				{
				State = 678; Match(TEST);
				State = 679; operand();
				}
				break;
			case NEXTREG:
				EnterOuterAlt(_localctx, 37);
				{
				State = 680; Match(NEXTREG);
				State = 681; operand();
				State = 682; Match(COMMA);
				State = 683; operand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrivialNextOperationContext : ParserRuleContext {
		public ITerminalNode SWAPNIB() { return GetToken(Z80AsmParser.SWAPNIB, 0); }
		public ITerminalNode MUL() { return GetToken(Z80AsmParser.MUL, 0); }
		public ITerminalNode OUTINB() { return GetToken(Z80AsmParser.OUTINB, 0); }
		public ITerminalNode LDIX() { return GetToken(Z80AsmParser.LDIX, 0); }
		public ITerminalNode LDIRX() { return GetToken(Z80AsmParser.LDIRX, 0); }
		public ITerminalNode LDDX() { return GetToken(Z80AsmParser.LDDX, 0); }
		public ITerminalNode LDDRX() { return GetToken(Z80AsmParser.LDDRX, 0); }
		public ITerminalNode PIXELDN() { return GetToken(Z80AsmParser.PIXELDN, 0); }
		public ITerminalNode PIXELAD() { return GetToken(Z80AsmParser.PIXELAD, 0); }
		public ITerminalNode SETAE() { return GetToken(Z80AsmParser.SETAE, 0); }
		public ITerminalNode LDPIRX() { return GetToken(Z80AsmParser.LDPIRX, 0); }
		public ITerminalNode LDIRSCALE() { return GetToken(Z80AsmParser.LDIRSCALE, 0); }
		public TrivialNextOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trivialNextOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTrivialNextOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTrivialNextOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrivialNextOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrivialNextOperationContext trivialNextOperation() {
		TrivialNextOperationContext _localctx = new TrivialNextOperationContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_trivialNextOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			_la = _input.La(1);
			if ( !(((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (SWAPNIB - 137)) | (1L << (MUL - 137)) | (1L << (OUTINB - 137)) | (1L << (LDIX - 137)) | (1L << (LDIRX - 137)) | (1L << (LDDX - 137)) | (1L << (LDDRX - 137)) | (1L << (PIXELDN - 137)) | (1L << (PIXELAD - 137)) | (1L << (SETAE - 137)) | (1L << (LDPIRX - 137)) | (1L << (LDIRSCALE - 137)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public Reg8Context reg8() {
			return GetRuleContext<Reg8Context>(0);
		}
		public Reg8IdxContext reg8Idx() {
			return GetRuleContext<Reg8IdxContext>(0);
		}
		public Reg8SpecContext reg8Spec() {
			return GetRuleContext<Reg8SpecContext>(0);
		}
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public Reg16SpecContext reg16Spec() {
			return GetRuleContext<Reg16SpecContext>(0);
		}
		public RegIndirectContext regIndirect() {
			return GetRuleContext<RegIndirectContext>(0);
		}
		public CPortContext cPort() {
			return GetRuleContext<CPortContext>(0);
		}
		public MemIndirectContext memIndirect() {
			return GetRuleContext<MemIndirectContext>(0);
		}
		public IndexedAddrContext indexedAddr() {
			return GetRuleContext<IndexedAddrContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode HREG() { return GetToken(Z80AsmParser.HREG, 0); }
		public ITerminalNode LREG() { return GetToken(Z80AsmParser.LREG, 0); }
		public Reg16StdContext reg16Std() {
			return GetRuleContext<Reg16StdContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public ITerminalNode NONEARG() { return GetToken(Z80AsmParser.NONEARG, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_operand);
		int _la;
		try {
			State = 710;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 689; reg8();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 690; reg8Idx();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 691; reg8Spec();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 692; reg16();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 693; reg16Idx();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 694; reg16Spec();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 695; regIndirect();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 696; cPort();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 697; memIndirect();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 698; indexedAddr();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 699; expr();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 700; condition();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 701;
				_la = _input.La(1);
				if ( !(_la==HREG || _la==LREG) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 702; Match(LPAR);
				State = 705;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case BC:
				case DE:
				case HL:
				case IX:
				case IY:
					{
					State = 703; reg16Std();
					}
					break;
				case LDBRAC:
					{
					State = 704; macroParam();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 707; Match(RPAR);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 709; Match(NONEARG);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8Context : ParserRuleContext {
		public ITerminalNode A() { return GetToken(Z80AsmParser.A, 0); }
		public ITerminalNode B() { return GetToken(Z80AsmParser.B, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode D() { return GetToken(Z80AsmParser.D, 0); }
		public ITerminalNode E() { return GetToken(Z80AsmParser.E, 0); }
		public ITerminalNode H() { return GetToken(Z80AsmParser.H, 0); }
		public ITerminalNode L() { return GetToken(Z80AsmParser.L, 0); }
		public Reg8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8Context reg8() {
		Reg8Context _localctx = new Reg8Context(_ctx, State);
		EnterRule(_localctx, 114, RULE_reg8);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A) | (1L << B) | (1L << C) | (1L << D) | (1L << E) | (1L << H) | (1L << L))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8IdxContext : ParserRuleContext {
		public ITerminalNode XL() { return GetToken(Z80AsmParser.XL, 0); }
		public ITerminalNode XH() { return GetToken(Z80AsmParser.XH, 0); }
		public ITerminalNode YL() { return GetToken(Z80AsmParser.YL, 0); }
		public ITerminalNode YH() { return GetToken(Z80AsmParser.YH, 0); }
		public Reg8IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8IdxContext reg8Idx() {
		Reg8IdxContext _localctx = new Reg8IdxContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_reg8Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << XL) | (1L << XH) | (1L << YL) | (1L << YH))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8SpecContext : ParserRuleContext {
		public ITerminalNode I() { return GetToken(Z80AsmParser.I, 0); }
		public ITerminalNode R() { return GetToken(Z80AsmParser.R, 0); }
		public Reg8SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8SpecContext reg8Spec() {
		Reg8SpecContext _localctx = new Reg8SpecContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_reg8Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			_la = _input.La(1);
			if ( !(_la==I || _la==R) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16Context : ParserRuleContext {
		public ITerminalNode BC() { return GetToken(Z80AsmParser.BC, 0); }
		public ITerminalNode DE() { return GetToken(Z80AsmParser.DE, 0); }
		public ITerminalNode HL() { return GetToken(Z80AsmParser.HL, 0); }
		public ITerminalNode SP() { return GetToken(Z80AsmParser.SP, 0); }
		public Reg16Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16Context reg16() {
		Reg16Context _localctx = new Reg16Context(_ctx, State);
		EnterRule(_localctx, 120, RULE_reg16);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BC) | (1L << DE) | (1L << HL) | (1L << SP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16IdxContext : ParserRuleContext {
		public ITerminalNode IX() { return GetToken(Z80AsmParser.IX, 0); }
		public ITerminalNode IY() { return GetToken(Z80AsmParser.IY, 0); }
		public Reg16IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16IdxContext reg16Idx() {
		Reg16IdxContext _localctx = new Reg16IdxContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_reg16Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			_la = _input.La(1);
			if ( !(_la==IX || _la==IY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16StdContext : ParserRuleContext {
		public ITerminalNode BC() { return GetToken(Z80AsmParser.BC, 0); }
		public ITerminalNode DE() { return GetToken(Z80AsmParser.DE, 0); }
		public ITerminalNode HL() { return GetToken(Z80AsmParser.HL, 0); }
		public ITerminalNode IX() { return GetToken(Z80AsmParser.IX, 0); }
		public ITerminalNode IY() { return GetToken(Z80AsmParser.IY, 0); }
		public Reg16StdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Std; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Std(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Std(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Std(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16StdContext reg16Std() {
		Reg16StdContext _localctx = new Reg16StdContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_reg16Std);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BC) | (1L << DE) | (1L << HL) | (1L << IX) | (1L << IY))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16SpecContext : ParserRuleContext {
		public ITerminalNode AF() { return GetToken(Z80AsmParser.AF, 0); }
		public ITerminalNode AF_() { return GetToken(Z80AsmParser.AF_, 0); }
		public Reg16SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16SpecContext reg16Spec() {
		Reg16SpecContext _localctx = new Reg16SpecContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_reg16Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			_la = _input.La(1);
			if ( !(_la==AF || _la==AF_) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegIndirectContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public RegIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRegIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRegIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegIndirectContext regIndirect() {
		RegIndirectContext _localctx = new RegIndirectContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_regIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726; Match(LPAR);
			{
			State = 727; reg16();
			}
			State = 728; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CPortContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public CPortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cPort; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCPort(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCPort(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCPort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CPortContext cPort() {
		CPortContext _localctx = new CPortContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_cPort);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730; Match(LPAR);
			State = 731; Match(C);
			State = 732; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemIndirectContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public MemIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMemIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMemIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemIndirectContext memIndirect() {
		MemIndirectContext _localctx = new MemIndirectContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_memIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; Match(LPAR);
			State = 735; expr();
			State = 736; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexedAddrContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(Z80AsmParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(Z80AsmParser.MINUS, 0); }
		public IndexedAddrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexedAddr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIndexedAddr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIndexedAddr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexedAddr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexedAddrContext indexedAddr() {
		IndexedAddrContext _localctx = new IndexedAddrContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_indexedAddr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738; Match(LPAR);
			State = 739; reg16Idx();
			State = 742;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 740;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 741; expr();
				}
			}

			State = 744; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ITerminalNode Z() { return GetToken(Z80AsmParser.Z, 0); }
		public ITerminalNode NZ() { return GetToken(Z80AsmParser.NZ, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode NC() { return GetToken(Z80AsmParser.NC, 0); }
		public ITerminalNode PO() { return GetToken(Z80AsmParser.PO, 0); }
		public ITerminalNode PE() { return GetToken(Z80AsmParser.PE, 0); }
		public ITerminalNode P() { return GetToken(Z80AsmParser.P, 0); }
		public ITerminalNode M() { return GetToken(Z80AsmParser.M, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746;
			_la = _input.La(1);
			if ( !(((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (C - 43)) | (1L << (Z - 43)) | (1L << (NZ - 43)) | (1L << (NC - 43)) | (1L << (PO - 43)) | (1L << (PE - 43)) | (1L << (P - 43)) | (1L << (M - 43)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(Z80AsmParser.QMARK, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(Z80AsmParser.COLON, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748; orExpr();
			State = 754;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==QMARK) {
				{
				State = 749; Match(QMARK);
				State = 750; expr();
				State = 751; Match(COLON);
				State = 752; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		public XorExprContext[] xorExpr() {
			return GetRuleContexts<XorExprContext>();
		}
		public XorExprContext xorExpr(int i) {
			return GetRuleContext<XorExprContext>(i);
		}
		public ITerminalNode[] VBAR() { return GetTokens(Z80AsmParser.VBAR); }
		public ITerminalNode VBAR(int i) {
			return GetToken(Z80AsmParser.VBAR, i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_orExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756; xorExpr();
			State = 761;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==VBAR) {
				{
				{
				State = 757; Match(VBAR);
				State = 758; xorExpr();
				}
				}
				State = 763;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorExprContext : ParserRuleContext {
		public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		public ITerminalNode[] UPARR() { return GetTokens(Z80AsmParser.UPARR); }
		public ITerminalNode UPARR(int i) {
			return GetToken(Z80AsmParser.UPARR, i);
		}
		public XorExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterXorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitXorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorExprContext xorExpr() {
		XorExprContext _localctx = new XorExprContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_xorExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764; andExpr();
			State = 769;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==UPARR) {
				{
				{
				State = 765; Match(UPARR);
				State = 766; andExpr();
				}
				}
				State = 771;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		public EquExprContext[] equExpr() {
			return GetRuleContexts<EquExprContext>();
		}
		public EquExprContext equExpr(int i) {
			return GetRuleContext<EquExprContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(Z80AsmParser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(Z80AsmParser.AMP, i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772; equExpr();
			State = 777;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AMP) {
				{
				{
				State = 773; Match(AMP);
				State = 774; equExpr();
				}
				}
				State = 779;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquExprContext : ParserRuleContext {
		public RelExprContext[] relExpr() {
			return GetRuleContexts<RelExprContext>();
		}
		public RelExprContext relExpr(int i) {
			return GetRuleContext<RelExprContext>(i);
		}
		public ITerminalNode[] EQOP() { return GetTokens(Z80AsmParser.EQOP); }
		public ITerminalNode EQOP(int i) {
			return GetToken(Z80AsmParser.EQOP, i);
		}
		public ITerminalNode[] NEQOP() { return GetTokens(Z80AsmParser.NEQOP); }
		public ITerminalNode NEQOP(int i) {
			return GetToken(Z80AsmParser.NEQOP, i);
		}
		public ITerminalNode[] CIEQOP() { return GetTokens(Z80AsmParser.CIEQOP); }
		public ITerminalNode CIEQOP(int i) {
			return GetToken(Z80AsmParser.CIEQOP, i);
		}
		public ITerminalNode[] CINEQOP() { return GetTokens(Z80AsmParser.CINEQOP); }
		public ITerminalNode CINEQOP(int i) {
			return GetToken(Z80AsmParser.CINEQOP, i);
		}
		public EquExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEquExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEquExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquExprContext equExpr() {
		EquExprContext _localctx = new EquExprContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_equExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780; relExpr();
			State = 785;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQOP) | (1L << CIEQOP) | (1L << NEQOP) | (1L << CINEQOP))) != 0)) {
				{
				{
				State = 781;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQOP) | (1L << CIEQOP) | (1L << NEQOP) | (1L << CINEQOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 782; relExpr();
				}
				}
				State = 787;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		public ShiftExprContext[] shiftExpr() {
			return GetRuleContexts<ShiftExprContext>();
		}
		public ShiftExprContext shiftExpr(int i) {
			return GetRuleContext<ShiftExprContext>(i);
		}
		public ITerminalNode[] LTOP() { return GetTokens(Z80AsmParser.LTOP); }
		public ITerminalNode LTOP(int i) {
			return GetToken(Z80AsmParser.LTOP, i);
		}
		public ITerminalNode[] LTEOP() { return GetTokens(Z80AsmParser.LTEOP); }
		public ITerminalNode LTEOP(int i) {
			return GetToken(Z80AsmParser.LTEOP, i);
		}
		public ITerminalNode[] GTOP() { return GetTokens(Z80AsmParser.GTOP); }
		public ITerminalNode GTOP(int i) {
			return GetToken(Z80AsmParser.GTOP, i);
		}
		public ITerminalNode[] GTEOP() { return GetTokens(Z80AsmParser.GTEOP); }
		public ITerminalNode GTEOP(int i) {
			return GetToken(Z80AsmParser.GTEOP, i);
		}
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 788; shiftExpr();
			State = 793;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP))) != 0)) {
				{
				{
				State = 789;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 790; shiftExpr();
				}
				}
				State = 795;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ITerminalNode[] LSHOP() { return GetTokens(Z80AsmParser.LSHOP); }
		public ITerminalNode LSHOP(int i) {
			return GetToken(Z80AsmParser.LSHOP, i);
		}
		public ITerminalNode[] RSHOP() { return GetTokens(Z80AsmParser.RSHOP); }
		public ITerminalNode RSHOP(int i) {
			return GetToken(Z80AsmParser.RSHOP, i);
		}
		public ShiftExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterShiftExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitShiftExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExprContext shiftExpr() {
		ShiftExprContext _localctx = new ShiftExprContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_shiftExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796; addExpr();
			State = 801;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LSHOP || _la==RSHOP) {
				{
				{
				State = 797;
				_la = _input.La(1);
				if ( !(_la==LSHOP || _la==RSHOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 798; addExpr();
				}
				}
				State = 803;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MultExprContext[] multExpr() {
			return GetRuleContexts<MultExprContext>();
		}
		public MultExprContext multExpr(int i) {
			return GetRuleContext<MultExprContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(Z80AsmParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(Z80AsmParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(Z80AsmParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(Z80AsmParser.MINUS, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_addExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804; multExpr();
			State = 809;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 805;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 806; multExpr();
				}
				}
				State = 811;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExprContext : ParserRuleContext {
		public MinMaxExprContext[] minMaxExpr() {
			return GetRuleContexts<MinMaxExprContext>();
		}
		public MinMaxExprContext minMaxExpr(int i) {
			return GetRuleContext<MinMaxExprContext>(i);
		}
		public ITerminalNode[] MULOP() { return GetTokens(Z80AsmParser.MULOP); }
		public ITerminalNode MULOP(int i) {
			return GetToken(Z80AsmParser.MULOP, i);
		}
		public ITerminalNode[] DIVOP() { return GetTokens(Z80AsmParser.DIVOP); }
		public ITerminalNode DIVOP(int i) {
			return GetToken(Z80AsmParser.DIVOP, i);
		}
		public ITerminalNode[] MODOP() { return GetTokens(Z80AsmParser.MODOP); }
		public ITerminalNode MODOP(int i) {
			return GetToken(Z80AsmParser.MODOP, i);
		}
		public ITerminalNode[] MINOP() { return GetTokens(Z80AsmParser.MINOP); }
		public ITerminalNode MINOP(int i) {
			return GetToken(Z80AsmParser.MINOP, i);
		}
		public ITerminalNode[] MAXOP() { return GetTokens(Z80AsmParser.MAXOP); }
		public ITerminalNode MAXOP(int i) {
			return GetToken(Z80AsmParser.MAXOP, i);
		}
		public MultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExprContext multExpr() {
		MultExprContext _localctx = new MultExprContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_multExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812; minMaxExpr();
			State = 817;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULOP) | (1L << DIVOP) | (1L << MODOP) | (1L << MINOP) | (1L << MAXOP))) != 0)) {
				{
				{
				State = 813;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULOP) | (1L << DIVOP) | (1L << MODOP) | (1L << MINOP) | (1L << MAXOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 814; minMaxExpr();
				}
				}
				State = 819;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinMaxExprContext : ParserRuleContext {
		public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		public ITerminalNode[] MINOP() { return GetTokens(Z80AsmParser.MINOP); }
		public ITerminalNode MINOP(int i) {
			return GetToken(Z80AsmParser.MINOP, i);
		}
		public ITerminalNode[] MAXOP() { return GetTokens(Z80AsmParser.MAXOP); }
		public ITerminalNode MAXOP(int i) {
			return GetToken(Z80AsmParser.MAXOP, i);
		}
		public MinMaxExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minMaxExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMinMaxExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMinMaxExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinMaxExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinMaxExprContext minMaxExpr() {
		MinMaxExprContext _localctx = new MinMaxExprContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_minMaxExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 820; unaryExpr();
			State = 825;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,63,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 821;
					_la = _input.La(1);
					if ( !(_la==MINOP || _la==MAXOP) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 822; unaryExpr();
					}
					} 
				}
				State = 827;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,63,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public BuiltinFunctionInvocationContext builtinFunctionInvocation() {
			return GetRuleContext<BuiltinFunctionInvocationContext>(0);
		}
		public FunctionInvocationContext functionInvocation() {
			return GetRuleContext<FunctionInvocationContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(Z80AsmParser.PLUS, 0); }
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(Z80AsmParser.MINUS, 0); }
		public ITerminalNode TILDE() { return GetToken(Z80AsmParser.TILDE, 0); }
		public ITerminalNode EXCLM() { return GetToken(Z80AsmParser.EXCLM, 0); }
		public ITerminalNode LSBRAC() { return GetToken(Z80AsmParser.LSBRAC, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RSBRAC() { return GetToken(Z80AsmParser.RSBRAC, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		public SymbolExprContext symbolExpr() {
			return GetRuleContext<SymbolExprContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_unaryExpr);
		try {
			State = 849;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 828; builtinFunctionInvocation();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 829; functionInvocation();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 830; macroParam();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 831; Match(PLUS);
				State = 832; unaryExpr();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 833; Match(MINUS);
				State = 834; unaryExpr();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 835; Match(TILDE);
				State = 836; unaryExpr();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 837; Match(EXCLM);
				State = 838; unaryExpr();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 839; Match(LSBRAC);
				State = 840; expr();
				State = 841; Match(RSBRAC);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 843; Match(LPAR);
				State = 844; expr();
				State = 845; Match(RPAR);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 847; literalExpr();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 848; symbolExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionInvocationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public FunctionInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFunctionInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFunctionInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionInvocationContext functionInvocation() {
		FunctionInvocationContext _localctx = new FunctionInvocationContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_functionInvocation);
		int _la;
		try {
			State = 866;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 851; Match(IDENTIFIER);
				State = 852; Match(LPAR);
				State = 853; Match(RPAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 854; Match(IDENTIFIER);
				State = 855; Match(LPAR);
				State = 856; expr();
				State = 861;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 857; Match(COMMA);
					State = 858; expr();
					}
					}
					State = 863;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 864; Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinFunctionInvocationContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode TEXTOF() { return GetToken(Z80AsmParser.TEXTOF, 0); }
		public ITerminalNode LTEXTOF() { return GetToken(Z80AsmParser.LTEXTOF, 0); }
		public MnemonicContext mnemonic() {
			return GetRuleContext<MnemonicContext>(0);
		}
		public RegsAndCondsContext regsAndConds() {
			return GetRuleContext<RegsAndCondsContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public ITerminalNode DEF() { return GetToken(Z80AsmParser.DEF, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public ITerminalNode ISREG8() { return GetToken(Z80AsmParser.ISREG8, 0); }
		public ITerminalNode ISREG8STD() { return GetToken(Z80AsmParser.ISREG8STD, 0); }
		public ITerminalNode ISREG8SPEC() { return GetToken(Z80AsmParser.ISREG8SPEC, 0); }
		public ITerminalNode ISREG8IDX() { return GetToken(Z80AsmParser.ISREG8IDX, 0); }
		public ITerminalNode ISREG16() { return GetToken(Z80AsmParser.ISREG16, 0); }
		public ITerminalNode ISREG16STD() { return GetToken(Z80AsmParser.ISREG16STD, 0); }
		public ITerminalNode ISREG16IDX() { return GetToken(Z80AsmParser.ISREG16IDX, 0); }
		public ITerminalNode ISREGINDIRECT() { return GetToken(Z80AsmParser.ISREGINDIRECT, 0); }
		public ITerminalNode ISCPORT() { return GetToken(Z80AsmParser.ISCPORT, 0); }
		public ITerminalNode ISINDEXEDADDR() { return GetToken(Z80AsmParser.ISINDEXEDADDR, 0); }
		public ITerminalNode ISCONDITION() { return GetToken(Z80AsmParser.ISCONDITION, 0); }
		public ITerminalNode ISEXPR() { return GetToken(Z80AsmParser.ISEXPR, 0); }
		public BuiltinFunctionInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinFunctionInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBuiltinFunctionInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBuiltinFunctionInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltinFunctionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltinFunctionInvocationContext builtinFunctionInvocation() {
		BuiltinFunctionInvocationContext _localctx = new BuiltinFunctionInvocationContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_builtinFunctionInvocation);
		int _la;
		try {
			State = 955;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TEXTOF:
			case LTEXTOF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 868;
				_la = _input.La(1);
				if ( !(_la==TEXTOF || _la==LTEXTOF) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 869; Match(LPAR);
				State = 873;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case NOP:
				case RLCA:
				case RRCA:
				case RLA:
				case RRA:
				case DAA:
				case CPL:
				case SCF:
				case CCF:
				case HALT:
				case RET:
				case EXX:
				case DI:
				case EI:
				case NEG:
				case RETN:
				case RETI:
				case RLD:
				case RRD:
				case LDI:
				case CPI:
				case INI:
				case OUTI:
				case LDD:
				case CPD:
				case IND:
				case OUTD:
				case LDIR:
				case CPIR:
				case INIR:
				case OTIR:
				case LDDR:
				case CPDR:
				case INDR:
				case OTDR:
				case LD:
				case INC:
				case DEC:
				case EX:
				case ADD:
				case ADC:
				case SUB:
				case SBC:
				case AND:
				case XOR:
				case OR:
				case CP:
				case DJNZ:
				case JR:
				case JP:
				case CALL:
				case RST:
				case PUSH:
				case POP:
				case IN:
				case OUT:
				case IM:
				case RLC:
				case RRC:
				case RL:
				case RR:
				case SLA:
				case SRA:
				case SLL:
				case SRL:
				case BIT:
				case RES:
				case SET:
				case SWAPNIB:
				case MUL:
				case POPX:
				case MIRROR:
				case TEST:
				case NEXTREG:
				case OUTINB:
				case LDIX:
				case LDIRX:
				case LDDX:
				case LDDRX:
				case PIXELDN:
				case PIXELAD:
				case SETAE:
				case LDPIRX:
					{
					State = 870; mnemonic();
					}
					break;
				case LPAR:
				case A:
				case B:
				case C:
				case D:
				case E:
				case H:
				case L:
				case I:
				case R:
				case XL:
				case XH:
				case YL:
				case YH:
				case BC:
				case DE:
				case HL:
				case SP:
				case IX:
				case IY:
				case AF:
				case AF_:
				case Z:
				case NZ:
				case NC:
				case PO:
				case PE:
				case P:
				case M:
					{
					State = 871; regsAndConds();
					}
					break;
				case LDBRAC:
					{
					State = 872; macroParam();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 875; Match(RPAR);
				}
				break;
			case DEF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 877; Match(DEF);
				State = 878; Match(LPAR);
				State = 880;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
					{
					State = 879; operand();
					}
				}

				State = 882; Match(RPAR);
				}
				break;
			case ISREG8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 883; Match(ISREG8);
				State = 884; Match(LPAR);
				State = 886;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
					{
					State = 885; operand();
					}
				}

				State = 888; Match(RPAR);
				}
				break;
			case ISREG8STD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 889; Match(ISREG8STD);
				State = 890; Match(LPAR);
				State = 892;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
					{
					State = 891; operand();
					}
				}

				State = 894; Match(RPAR);
				}
				break;
			case ISREG8SPEC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 895; Match(ISREG8SPEC);
				State = 896; Match(LPAR);
				State = 898;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
					{
					State = 897; operand();
					}
				}

				State = 900; Match(RPAR);
				}
				break;
			case ISREG8IDX:
				EnterOuterAlt(_localctx, 6);
				{
				State = 901; Match(ISREG8IDX);
				State = 902; Match(LPAR);
				State = 904;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
					{
					State = 903; operand();
					}
				}

				State = 906; Match(RPAR);
				}
				break;
			case ISREG16:
				EnterOuterAlt(_localctx, 7);
				{
				State = 907; Match(ISREG16);
				State = 908; Match(LPAR);
				State = 910;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
					{
					State = 909; operand();
					}
				}

				State = 912; Match(RPAR);
				}
				break;
			case ISREG16STD:
				EnterOuterAlt(_localctx, 8);
				{
				State = 913; Match(ISREG16STD);
				State = 914; Match(LPAR);
				State = 916;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
					{
					State = 915; operand();
					}
				}

				State = 918; Match(RPAR);
				}
				break;
			case ISREG16IDX:
				EnterOuterAlt(_localctx, 9);
				{
				State = 919; Match(ISREG16IDX);
				State = 920; Match(LPAR);
				State = 922;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
					{
					State = 921; operand();
					}
				}

				State = 924; Match(RPAR);
				}
				break;
			case ISREGINDIRECT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 925; Match(ISREGINDIRECT);
				State = 926; Match(LPAR);
				State = 928;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
					{
					State = 927; operand();
					}
				}

				State = 930; Match(RPAR);
				}
				break;
			case ISCPORT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 931; Match(ISCPORT);
				State = 932; Match(LPAR);
				State = 934;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
					{
					State = 933; operand();
					}
				}

				State = 936; Match(RPAR);
				}
				break;
			case ISINDEXEDADDR:
				EnterOuterAlt(_localctx, 12);
				{
				State = 937; Match(ISINDEXEDADDR);
				State = 938; Match(LPAR);
				State = 940;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
					{
					State = 939; operand();
					}
				}

				State = 942; Match(RPAR);
				}
				break;
			case ISCONDITION:
				EnterOuterAlt(_localctx, 13);
				{
				State = 943; Match(ISCONDITION);
				State = 944; Match(LPAR);
				State = 946;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
					{
					State = 945; operand();
					}
				}

				State = 948; Match(RPAR);
				}
				break;
			case ISEXPR:
				EnterOuterAlt(_localctx, 14);
				{
				State = 949; Match(ISEXPR);
				State = 950; Match(LPAR);
				State = 952;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (TEXTOF - 210)) | (1L << (LTEXTOF - 210)) | (1L << (HREG - 210)) | (1L << (LREG - 210)) | (1L << (DEF - 210)) | (1L << (ISREG8 - 210)) | (1L << (ISREG8STD - 210)) | (1L << (ISREG8SPEC - 210)) | (1L << (ISREG8IDX - 210)) | (1L << (ISREG16 - 210)) | (1L << (ISREG16STD - 210)) | (1L << (ISREG16IDX - 210)) | (1L << (ISREGINDIRECT - 210)) | (1L << (ISCPORT - 210)) | (1L << (ISINDEXEDADDR - 210)) | (1L << (ISCONDITION - 210)) | (1L << (ISEXPR - 210)) | (1L << (HEXNUM - 210)) | (1L << (BINNUM - 210)) | (1L << (OCTNUM - 210)) | (1L << (DECNUM - 210)) | (1L << (CURADDR - 210)) | (1L << (REALNUM - 210)) | (1L << (CHAR - 210)) | (1L << (STRING - 210)) | (1L << (BOOLLIT - 210)) | (1L << (IDENTIFIER - 210)) | (1L << (CURCNT - 210)) | (1L << (NONEARG - 210)))) != 0)) {
					{
					State = 951; operand();
					}
				}

				State = 954; Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExprContext : ParserRuleContext {
		public ITerminalNode HEXNUM() { return GetToken(Z80AsmParser.HEXNUM, 0); }
		public ITerminalNode DECNUM() { return GetToken(Z80AsmParser.DECNUM, 0); }
		public ITerminalNode OCTNUM() { return GetToken(Z80AsmParser.OCTNUM, 0); }
		public ITerminalNode CHAR() { return GetToken(Z80AsmParser.CHAR, 0); }
		public ITerminalNode BINNUM() { return GetToken(Z80AsmParser.BINNUM, 0); }
		public ITerminalNode REALNUM() { return GetToken(Z80AsmParser.REALNUM, 0); }
		public ITerminalNode BOOLLIT() { return GetToken(Z80AsmParser.BOOLLIT, 0); }
		public ITerminalNode STRING() { return GetToken(Z80AsmParser.STRING, 0); }
		public ITerminalNode CURADDR() { return GetToken(Z80AsmParser.CURADDR, 0); }
		public ITerminalNode DOT() { return GetToken(Z80AsmParser.DOT, 0); }
		public ITerminalNode MULOP() { return GetToken(Z80AsmParser.MULOP, 0); }
		public ITerminalNode CURCNT() { return GetToken(Z80AsmParser.CURCNT, 0); }
		public LiteralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExprContext literalExpr() {
		LiteralExprContext _localctx = new LiteralExprContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_literalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957;
			_la = _input.La(1);
			if ( !(_la==MULOP || _la==DOT || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (HEXNUM - 227)) | (1L << (BINNUM - 227)) | (1L << (OCTNUM - 227)) | (1L << (DECNUM - 227)) | (1L << (CURADDR - 227)) | (1L << (REALNUM - 227)) | (1L << (CHAR - 227)) | (1L << (STRING - 227)) | (1L << (BOOLLIT - 227)) | (1L << (CURCNT - 227)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolExprContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(Z80AsmParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Z80AsmParser.IDENTIFIER, i);
		}
		public ITerminalNode DCOLON() { return GetToken(Z80AsmParser.DCOLON, 0); }
		public ITerminalNode[] DOT() { return GetTokens(Z80AsmParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Z80AsmParser.DOT, i);
		}
		public SymbolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterSymbolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitSymbolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolExprContext symbolExpr() {
		SymbolExprContext _localctx = new SymbolExprContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_symbolExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 960;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DCOLON) {
				{
				State = 959; Match(DCOLON);
				}
			}

			State = 962; Match(IDENTIFIER);
			State = 967;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 963; Match(DOT);
				State = 964; Match(IDENTIFIER);
				}
				}
				State = 969;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroParamContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public MacroParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroParamContext macroParam() {
		MacroParamContext _localctx = new MacroParamContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_macroParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970; Match(LDBRAC);
			State = 971; Match(IDENTIFIER);
			State = 972; Match(RDBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegsContext : ParserRuleContext {
		public Reg8Context reg8() {
			return GetRuleContext<Reg8Context>(0);
		}
		public Reg8IdxContext reg8Idx() {
			return GetRuleContext<Reg8IdxContext>(0);
		}
		public Reg8SpecContext reg8Spec() {
			return GetRuleContext<Reg8SpecContext>(0);
		}
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public Reg16SpecContext reg16Spec() {
			return GetRuleContext<Reg16SpecContext>(0);
		}
		public RegsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRegs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRegs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegsContext regs() {
		RegsContext _localctx = new RegsContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_regs);
		try {
			State = 980;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case A:
			case B:
			case C:
			case D:
			case E:
			case H:
			case L:
				EnterOuterAlt(_localctx, 1);
				{
				State = 974; reg8();
				}
				break;
			case XL:
			case XH:
			case YL:
			case YH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 975; reg8Idx();
				}
				break;
			case I:
			case R:
				EnterOuterAlt(_localctx, 3);
				{
				State = 976; reg8Spec();
				}
				break;
			case BC:
			case DE:
			case HL:
			case SP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 977; reg16();
				}
				break;
			case IX:
			case IY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 978; reg16Idx();
				}
				break;
			case AF:
			case AF_:
				EnterOuterAlt(_localctx, 6);
				{
				State = 979; reg16Spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegsAndCondsContext : ParserRuleContext {
		public RegsContext regs() {
			return GetRuleContext<RegsContext>(0);
		}
		public RegIndirectContext regIndirect() {
			return GetRuleContext<RegIndirectContext>(0);
		}
		public CPortContext cPort() {
			return GetRuleContext<CPortContext>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public RegsAndCondsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regsAndConds; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRegsAndConds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRegsAndConds(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegsAndConds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegsAndCondsContext regsAndConds() {
		RegsAndCondsContext _localctx = new RegsAndCondsContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_regsAndConds);
		try {
			State = 986;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 982; regs();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 983; regIndirect();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 984; cPort();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 985; condition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MnemonicContext : ParserRuleContext {
		public ITerminalNode NOP() { return GetToken(Z80AsmParser.NOP, 0); }
		public ITerminalNode RLCA() { return GetToken(Z80AsmParser.RLCA, 0); }
		public ITerminalNode RRCA() { return GetToken(Z80AsmParser.RRCA, 0); }
		public ITerminalNode RLA() { return GetToken(Z80AsmParser.RLA, 0); }
		public ITerminalNode RRA() { return GetToken(Z80AsmParser.RRA, 0); }
		public ITerminalNode DAA() { return GetToken(Z80AsmParser.DAA, 0); }
		public ITerminalNode CPL() { return GetToken(Z80AsmParser.CPL, 0); }
		public ITerminalNode SCF() { return GetToken(Z80AsmParser.SCF, 0); }
		public ITerminalNode CCF() { return GetToken(Z80AsmParser.CCF, 0); }
		public ITerminalNode HALT() { return GetToken(Z80AsmParser.HALT, 0); }
		public ITerminalNode RET() { return GetToken(Z80AsmParser.RET, 0); }
		public ITerminalNode EXX() { return GetToken(Z80AsmParser.EXX, 0); }
		public ITerminalNode DI() { return GetToken(Z80AsmParser.DI, 0); }
		public ITerminalNode EI() { return GetToken(Z80AsmParser.EI, 0); }
		public ITerminalNode NEG() { return GetToken(Z80AsmParser.NEG, 0); }
		public ITerminalNode RETN() { return GetToken(Z80AsmParser.RETN, 0); }
		public ITerminalNode RETI() { return GetToken(Z80AsmParser.RETI, 0); }
		public ITerminalNode RLD() { return GetToken(Z80AsmParser.RLD, 0); }
		public ITerminalNode RRD() { return GetToken(Z80AsmParser.RRD, 0); }
		public ITerminalNode LDI() { return GetToken(Z80AsmParser.LDI, 0); }
		public ITerminalNode CPI() { return GetToken(Z80AsmParser.CPI, 0); }
		public ITerminalNode INI() { return GetToken(Z80AsmParser.INI, 0); }
		public ITerminalNode OUTI() { return GetToken(Z80AsmParser.OUTI, 0); }
		public ITerminalNode LDD() { return GetToken(Z80AsmParser.LDD, 0); }
		public ITerminalNode CPD() { return GetToken(Z80AsmParser.CPD, 0); }
		public ITerminalNode IND() { return GetToken(Z80AsmParser.IND, 0); }
		public ITerminalNode OUTD() { return GetToken(Z80AsmParser.OUTD, 0); }
		public ITerminalNode LDIR() { return GetToken(Z80AsmParser.LDIR, 0); }
		public ITerminalNode CPIR() { return GetToken(Z80AsmParser.CPIR, 0); }
		public ITerminalNode INIR() { return GetToken(Z80AsmParser.INIR, 0); }
		public ITerminalNode OTIR() { return GetToken(Z80AsmParser.OTIR, 0); }
		public ITerminalNode LDDR() { return GetToken(Z80AsmParser.LDDR, 0); }
		public ITerminalNode CPDR() { return GetToken(Z80AsmParser.CPDR, 0); }
		public ITerminalNode INDR() { return GetToken(Z80AsmParser.INDR, 0); }
		public ITerminalNode OTDR() { return GetToken(Z80AsmParser.OTDR, 0); }
		public ITerminalNode LD() { return GetToken(Z80AsmParser.LD, 0); }
		public ITerminalNode INC() { return GetToken(Z80AsmParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(Z80AsmParser.DEC, 0); }
		public ITerminalNode EX() { return GetToken(Z80AsmParser.EX, 0); }
		public ITerminalNode ADD() { return GetToken(Z80AsmParser.ADD, 0); }
		public ITerminalNode ADC() { return GetToken(Z80AsmParser.ADC, 0); }
		public ITerminalNode SUB() { return GetToken(Z80AsmParser.SUB, 0); }
		public ITerminalNode SBC() { return GetToken(Z80AsmParser.SBC, 0); }
		public ITerminalNode AND() { return GetToken(Z80AsmParser.AND, 0); }
		public ITerminalNode XOR() { return GetToken(Z80AsmParser.XOR, 0); }
		public ITerminalNode OR() { return GetToken(Z80AsmParser.OR, 0); }
		public ITerminalNode CP() { return GetToken(Z80AsmParser.CP, 0); }
		public ITerminalNode DJNZ() { return GetToken(Z80AsmParser.DJNZ, 0); }
		public ITerminalNode JR() { return GetToken(Z80AsmParser.JR, 0); }
		public ITerminalNode JP() { return GetToken(Z80AsmParser.JP, 0); }
		public ITerminalNode CALL() { return GetToken(Z80AsmParser.CALL, 0); }
		public ITerminalNode RST() { return GetToken(Z80AsmParser.RST, 0); }
		public ITerminalNode PUSH() { return GetToken(Z80AsmParser.PUSH, 0); }
		public ITerminalNode POP() { return GetToken(Z80AsmParser.POP, 0); }
		public ITerminalNode IN() { return GetToken(Z80AsmParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(Z80AsmParser.OUT, 0); }
		public ITerminalNode IM() { return GetToken(Z80AsmParser.IM, 0); }
		public ITerminalNode RLC() { return GetToken(Z80AsmParser.RLC, 0); }
		public ITerminalNode RRC() { return GetToken(Z80AsmParser.RRC, 0); }
		public ITerminalNode RL() { return GetToken(Z80AsmParser.RL, 0); }
		public ITerminalNode RR() { return GetToken(Z80AsmParser.RR, 0); }
		public ITerminalNode SLA() { return GetToken(Z80AsmParser.SLA, 0); }
		public ITerminalNode SRA() { return GetToken(Z80AsmParser.SRA, 0); }
		public ITerminalNode SLL() { return GetToken(Z80AsmParser.SLL, 0); }
		public ITerminalNode SRL() { return GetToken(Z80AsmParser.SRL, 0); }
		public ITerminalNode BIT() { return GetToken(Z80AsmParser.BIT, 0); }
		public ITerminalNode RES() { return GetToken(Z80AsmParser.RES, 0); }
		public ITerminalNode SET() { return GetToken(Z80AsmParser.SET, 0); }
		public ITerminalNode SWAPNIB() { return GetToken(Z80AsmParser.SWAPNIB, 0); }
		public ITerminalNode MUL() { return GetToken(Z80AsmParser.MUL, 0); }
		public ITerminalNode POPX() { return GetToken(Z80AsmParser.POPX, 0); }
		public ITerminalNode MIRROR() { return GetToken(Z80AsmParser.MIRROR, 0); }
		public ITerminalNode TEST() { return GetToken(Z80AsmParser.TEST, 0); }
		public ITerminalNode NEXTREG() { return GetToken(Z80AsmParser.NEXTREG, 0); }
		public ITerminalNode OUTINB() { return GetToken(Z80AsmParser.OUTINB, 0); }
		public ITerminalNode LDIX() { return GetToken(Z80AsmParser.LDIX, 0); }
		public ITerminalNode LDIRX() { return GetToken(Z80AsmParser.LDIRX, 0); }
		public ITerminalNode LDDX() { return GetToken(Z80AsmParser.LDDX, 0); }
		public ITerminalNode LDDRX() { return GetToken(Z80AsmParser.LDDRX, 0); }
		public ITerminalNode PIXELDN() { return GetToken(Z80AsmParser.PIXELDN, 0); }
		public ITerminalNode PIXELAD() { return GetToken(Z80AsmParser.PIXELAD, 0); }
		public ITerminalNode SETAE() { return GetToken(Z80AsmParser.SETAE, 0); }
		public ITerminalNode LDPIRX() { return GetToken(Z80AsmParser.LDPIRX, 0); }
		public MnemonicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mnemonic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMnemonic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMnemonic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMnemonic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MnemonicContext mnemonic() {
		MnemonicContext _localctx = new MnemonicContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_mnemonic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 988;
			_la = _input.La(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (NOP - 69)) | (1L << (RLCA - 69)) | (1L << (RRCA - 69)) | (1L << (RLA - 69)) | (1L << (RRA - 69)) | (1L << (DAA - 69)) | (1L << (CPL - 69)) | (1L << (SCF - 69)) | (1L << (CCF - 69)) | (1L << (HALT - 69)) | (1L << (RET - 69)) | (1L << (EXX - 69)) | (1L << (DI - 69)) | (1L << (EI - 69)) | (1L << (NEG - 69)) | (1L << (RETN - 69)) | (1L << (RETI - 69)) | (1L << (RLD - 69)) | (1L << (RRD - 69)) | (1L << (LDI - 69)) | (1L << (CPI - 69)) | (1L << (INI - 69)) | (1L << (OUTI - 69)) | (1L << (LDD - 69)) | (1L << (CPD - 69)) | (1L << (IND - 69)) | (1L << (OUTD - 69)) | (1L << (LDIR - 69)) | (1L << (CPIR - 69)) | (1L << (INIR - 69)) | (1L << (OTIR - 69)) | (1L << (LDDR - 69)) | (1L << (CPDR - 69)) | (1L << (INDR - 69)) | (1L << (OTDR - 69)) | (1L << (LD - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (EX - 69)) | (1L << (ADD - 69)) | (1L << (ADC - 69)) | (1L << (SUB - 69)) | (1L << (SBC - 69)) | (1L << (AND - 69)) | (1L << (XOR - 69)) | (1L << (OR - 69)) | (1L << (CP - 69)) | (1L << (DJNZ - 69)) | (1L << (JR - 69)) | (1L << (JP - 69)) | (1L << (CALL - 69)) | (1L << (RST - 69)) | (1L << (PUSH - 69)) | (1L << (POP - 69)) | (1L << (IN - 69)) | (1L << (OUT - 69)) | (1L << (IM - 69)) | (1L << (RLC - 69)) | (1L << (RRC - 69)) | (1L << (RL - 69)) | (1L << (RR - 69)) | (1L << (SLA - 69)) | (1L << (SRA - 69)) | (1L << (SLL - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (SRL - 133)) | (1L << (BIT - 133)) | (1L << (RES - 133)) | (1L << (SET - 133)) | (1L << (SWAPNIB - 133)) | (1L << (MUL - 133)) | (1L << (POPX - 133)) | (1L << (MIRROR - 133)) | (1L << (TEST - 133)) | (1L << (NEXTREG - 133)) | (1L << (OUTINB - 133)) | (1L << (LDIX - 133)) | (1L << (LDIRX - 133)) | (1L << (LDDX - 133)) | (1L << (LDDRX - 133)) | (1L << (PIXELDN - 133)) | (1L << (PIXELAD - 133)) | (1L << (SETAE - 133)) | (1L << (LDPIRX - 133)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xF6\x3E1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x3\x2\x3\x2\a\x2\xB5\n\x2\f\x2\xE\x2\xB8\v\x2\x3\x2\x3\x2\x6"+
		"\x2\xBC\n\x2\r\x2\xE\x2\xBD\x3\x2\a\x2\xC1\n\x2\f\x2\xE\x2\xC4\v\x2\x3"+
		"\x2\a\x2\xC7\n\x2\f\x2\xE\x2\xCA\v\x2\x3\x2\x3\x2\x5\x2\xCE\n\x2\x3\x3"+
		"\x5\x3\xD1\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\xD8\n\x3\x3\x3\x5"+
		"\x3\xDB\n\x3\x3\x3\x3\x3\x5\x3\xDF\n\x3\x3\x3\x3\x3\x3\x3\x5\x3\xE4\n"+
		"\x3\x5\x3\xE6\n\x3\x3\x4\x3\x4\x5\x4\xEA\n\x4\x3\x5\x3\x5\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x5\x6\x107\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x111\n\a"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x5\b\x125\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\a\t\x12C\n"+
		"\t\f\t\xE\t\x12F\v\t\x5\t\x131\n\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v"+
		"\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11"+
		"\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14"+
		"\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x5\x17\x15C\n\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3"+
		"\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x169\n\x1B\f\x1B\xE\x1B"+
		"\x16C\v\x1B\x3\x1B\x3\x1B\x3\x1C\x5\x1C\x171\n\x1C\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!\x3!\x3!\x3"+
		"\"\x3\"\x3\"\x3#\x3#\x3#\x3#\a#\x189\n#\f#\xE#\x18C\v#\x3$\x3$\x3$\x3"+
		"$\a$\x192\n$\f$\xE$\x195\v$\x3%\x3%\x3%\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3"+
		"(\x3(\x3(\x3)\x3)\x3)\x3)\x5)\x1A7\n)\x3*\x3*\x3+\x3+\x3+\x3,\x3,\x3,"+
		"\x3,\x3,\x3-\x3-\x3-\x3-\x3-\x3.\x3.\x3.\x3/\x3/\x5/\x1BD\n/\x3\x30\x3"+
		"\x30\x3\x30\x3\x30\a\x30\x1C3\n\x30\f\x30\xE\x30\x1C6\v\x30\x3\x31\x3"+
		"\x31\x5\x31\x1CA\n\x31\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x34\x3\x34"+
		"\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x1DA\n\x35\x5"+
		"\x35\x1DC\n\x35\x3\x36\x3\x36\x3\x36\x5\x36\x1E1\n\x36\x3\x37\x3\x37\x3"+
		"\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3"+
		"\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3"+
		"\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x201\n\x38"+
		"\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38"+
		"\x5\x38\x20D\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x214\n\x38"+
		"\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x21B\n\x38\x3\x38\x3\x38\x3"+
		"\x38\x3\x38\x3\x38\x5\x38\x222\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x5\x38\x22B\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5"+
		"\x38\x232\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x239\n\x38\x3"+
		"\x38\x3\x38\x3\x38\x5\x38\x23E\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x24A\n\x38\x3\x38\x3\x38\x3"+
		"\x38\x3\x38\x3\x38\x5\x38\x251\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x5\x38\x25A\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5"+
		"\x38\x261\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x268\n\x38\x3"+
		"\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x26F\n\x38\x3\x38\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x5\x38\x276\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5"+
		"\x38\x27D\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x284\n\x38\x3"+
		"\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38\x28B\n\x38\x3\x38\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5\x38"+
		"\x299\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x5"+
		"\x38\x2A3\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x3\x38\x5\x38\x2B0\n\x38\x3\x39\x3\x39\x3:\x3:\x3:\x3:"+
		"\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x5:\x2C4\n:\x3:\x3:\x3"+
		":\x5:\x2C9\n:\x3;\x3;\x3<\x3<\x3=\x3=\x3>\x3>\x3?\x3?\x3@\x3@\x3\x41\x3"+
		"\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x44\x3"+
		"\x44\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x2E9\n\x45\x3\x45"+
		"\x3\x45\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3G\x3G\x5G\x2F5\nG\x3H\x3H\x3H"+
		"\aH\x2FA\nH\fH\xEH\x2FD\vH\x3I\x3I\x3I\aI\x302\nI\fI\xEI\x305\vI\x3J\x3"+
		"J\x3J\aJ\x30A\nJ\fJ\xEJ\x30D\vJ\x3K\x3K\x3K\aK\x312\nK\fK\xEK\x315\vK"+
		"\x3L\x3L\x3L\aL\x31A\nL\fL\xEL\x31D\vL\x3M\x3M\x3M\aM\x322\nM\fM\xEM\x325"+
		"\vM\x3N\x3N\x3N\aN\x32A\nN\fN\xEN\x32D\vN\x3O\x3O\x3O\aO\x332\nO\fO\xE"+
		"O\x335\vO\x3P\x3P\x3P\aP\x33A\nP\fP\xEP\x33D\vP\x3Q\x3Q\x3Q\x3Q\x3Q\x3"+
		"Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x5Q\x354"+
		"\nQ\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\aR\x35E\nR\fR\xER\x361\vR\x3R\x3R"+
		"\x5R\x365\nR\x3S\x3S\x3S\x3S\x3S\x5S\x36C\nS\x3S\x3S\x3S\x3S\x3S\x5S\x373"+
		"\nS\x3S\x3S\x3S\x3S\x5S\x379\nS\x3S\x3S\x3S\x3S\x5S\x37F\nS\x3S\x3S\x3"+
		"S\x3S\x5S\x385\nS\x3S\x3S\x3S\x3S\x5S\x38B\nS\x3S\x3S\x3S\x3S\x5S\x391"+
		"\nS\x3S\x3S\x3S\x3S\x5S\x397\nS\x3S\x3S\x3S\x3S\x5S\x39D\nS\x3S\x3S\x3"+
		"S\x3S\x5S\x3A3\nS\x3S\x3S\x3S\x3S\x5S\x3A9\nS\x3S\x3S\x3S\x3S\x5S\x3AF"+
		"\nS\x3S\x3S\x3S\x3S\x5S\x3B5\nS\x3S\x3S\x3S\x3S\x5S\x3BB\nS\x3S\x5S\x3BE"+
		"\nS\x3T\x3T\x3U\x5U\x3C3\nU\x3U\x3U\x3U\aU\x3C8\nU\fU\xEU\x3CB\vU\x3V"+
		"\x3V\x3V\x3V\x3W\x3W\x3W\x3W\x3W\x3W\x5W\x3D7\nW\x3X\x3X\x3X\x3X\x5X\x3DD"+
		"\nX\x3Y\x3Y\x3Y\x2\x2\x2Z\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2"+
		"\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2"+
		"*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2"+
		"\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62"+
		"\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80"+
		"\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94"+
		"\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8"+
		"\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\x2\x1C\x5\x2\x9B\x9C\x9F\xA0\xA3\xA4\x3"+
		"\x2\xEC\xED\x3\x2\xD0\xD1\x4\x2\f\f\xA9\xA9\x4\x2\xD1\xD1\xF1\xF1\x3\x2"+
		"\xBA\xBB\x4\x2GPRi\x4\x2\x8B\x8C\x91\x9A\x3\x2\xD6\xD7\x3\x2+\x31\x3\x2"+
		"\x34\x37\x3\x2\x32\x33\x3\x2\x38;\x3\x2<=\x4\x2\x38:<=\x3\x2>?\x3\x2\x12"+
		"\x13\x4\x2--@\x46\x3\x2\x17\x1A\x3\x2\x1B\x1E\x3\x2\x1F \x3\x2!%\x3\x2"+
		"$%\x3\x2\xD4\xD5\a\x2!!**\xE5\xEC\xEE\xEE\xF4\xF4\x3\x2G\x99\x459\x2\xCD"+
		"\x3\x2\x2\x2\x4\xE5\x3\x2\x2\x2\x6\xE7\x3\x2\x2\x2\b\xEB\x3\x2\x2\x2\n"+
		"\x106\x3\x2\x2\x2\f\x110\x3\x2\x2\x2\xE\x124\x3\x2\x2\x2\x10\x126\x3\x2"+
		"\x2\x2\x12\x134\x3\x2\x2\x2\x14\x136\x3\x2\x2\x2\x16\x139\x3\x2\x2\x2"+
		"\x18\x13B\x3\x2\x2\x2\x1A\x13D\x3\x2\x2\x2\x1C\x13F\x3\x2\x2\x2\x1E\x141"+
		"\x3\x2\x2\x2 \x144\x3\x2\x2\x2\"\x147\x3\x2\x2\x2$\x149\x3\x2\x2\x2&\x14C"+
		"\x3\x2\x2\x2(\x14F\x3\x2\x2\x2*\x151\x3\x2\x2\x2,\x153\x3\x2\x2\x2.\x15D"+
		"\x3\x2\x2\x2\x30\x15F\x3\x2\x2\x2\x32\x161\x3\x2\x2\x2\x34\x163\x3\x2"+
		"\x2\x2\x36\x170\x3\x2\x2\x2\x38\x172\x3\x2\x2\x2:\x175\x3\x2\x2\x2<\x178"+
		"\x3\x2\x2\x2>\x17B\x3\x2\x2\x2@\x17E\x3\x2\x2\x2\x42\x181\x3\x2\x2\x2"+
		"\x44\x184\x3\x2\x2\x2\x46\x18D\x3\x2\x2\x2H\x196\x3\x2\x2\x2J\x199\x3"+
		"\x2\x2\x2L\x19C\x3\x2\x2\x2N\x19F\x3\x2\x2\x2P\x1A2\x3\x2\x2\x2R\x1A8"+
		"\x3\x2\x2\x2T\x1AA\x3\x2\x2\x2V\x1AD\x3\x2\x2\x2X\x1B2\x3\x2\x2\x2Z\x1B7"+
		"\x3\x2\x2\x2\\\x1BA\x3\x2\x2\x2^\x1BE\x3\x2\x2\x2`\x1C7\x3\x2\x2\x2\x62"+
		"\x1CB\x3\x2\x2\x2\x64\x1CE\x3\x2\x2\x2\x66\x1D0\x3\x2\x2\x2h\x1D3\x3\x2"+
		"\x2\x2j\x1E0\x3\x2\x2\x2l\x1E2\x3\x2\x2\x2n\x2AF\x3\x2\x2\x2p\x2B1\x3"+
		"\x2\x2\x2r\x2C8\x3\x2\x2\x2t\x2CA\x3\x2\x2\x2v\x2CC\x3\x2\x2\x2x\x2CE"+
		"\x3\x2\x2\x2z\x2D0\x3\x2\x2\x2|\x2D2\x3\x2\x2\x2~\x2D4\x3\x2\x2\x2\x80"+
		"\x2D6\x3\x2\x2\x2\x82\x2D8\x3\x2\x2\x2\x84\x2DC\x3\x2\x2\x2\x86\x2E0\x3"+
		"\x2\x2\x2\x88\x2E4\x3\x2\x2\x2\x8A\x2EC\x3\x2\x2\x2\x8C\x2EE\x3\x2\x2"+
		"\x2\x8E\x2F6\x3\x2\x2\x2\x90\x2FE\x3\x2\x2\x2\x92\x306\x3\x2\x2\x2\x94"+
		"\x30E\x3\x2\x2\x2\x96\x316\x3\x2\x2\x2\x98\x31E\x3\x2\x2\x2\x9A\x326\x3"+
		"\x2\x2\x2\x9C\x32E\x3\x2\x2\x2\x9E\x336\x3\x2\x2\x2\xA0\x353\x3\x2\x2"+
		"\x2\xA2\x364\x3\x2\x2\x2\xA4\x3BD\x3\x2\x2\x2\xA6\x3BF\x3\x2\x2\x2\xA8"+
		"\x3C2\x3\x2\x2\x2\xAA\x3CC\x3\x2\x2\x2\xAC\x3D6\x3\x2\x2\x2\xAE\x3DC\x3"+
		"\x2\x2\x2\xB0\x3DE\x3\x2\x2\x2\xB2\xCE\a\x2\x2\x3\xB3\xB5\a\x6\x2\x2\xB4"+
		"\xB3\x3\x2\x2\x2\xB5\xB8\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2"+
		"\x2\x2\xB7\xB9\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB9\xC2\x5\x4\x3\x2\xBA"+
		"\xBC\a\x6\x2\x2\xBB\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBB\x3\x2"+
		"\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC1\x5\x4\x3\x2\xC0"+
		"\xBB\x3\x2\x2\x2\xC1\xC4\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2"+
		"\x2\x2\xC3\xC8\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC5\xC7\a\x6\x2\x2\xC6"+
		"\xC5\x3\x2\x2\x2\xC7\xCA\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2"+
		"\x2\x2\xC9\xCB\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCB\xCC\a\x2\x2\x3\xCC"+
		"\xCE\x3\x2\x2\x2\xCD\xB2\x3\x2\x2\x2\xCD\xB6\x3\x2\x2\x2\xCE\x3\x3\x2"+
		"\x2\x2\xCF\xD1\x5\x6\x4\x2\xD0\xCF\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1"+
		"\xD7\x3\x2\x2\x2\xD2\xD8\x5\n\x6\x2\xD3\xD8\x5j\x36\x2\xD4\xD8\x5\xAA"+
		"V\x2\xD5\xD8\x5\xE\b\x2\xD6\xD8\x5\x34\x1B\x2\xD7\xD2\x3\x2\x2\x2\xD7"+
		"\xD3\x3\x2\x2\x2\xD7\xD4\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD7\xD6\x3\x2"+
		"\x2\x2\xD8\xDA\x3\x2\x2\x2\xD9\xDB\x5\b\x5\x2\xDA\xD9\x3\x2\x2\x2\xDA"+
		"\xDB\x3\x2\x2\x2\xDB\xE6\x3\x2\x2\x2\xDC\xDE\x5\f\a\x2\xDD\xDF\x5\b\x5"+
		"\x2\xDE\xDD\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF\xE6\x3\x2\x2\x2\xE0\xE6"+
		"\x5\b\x5\x2\xE1\xE3\x5\x6\x4\x2\xE2\xE4\x5\b\x5\x2\xE3\xE2\x3\x2\x2\x2"+
		"\xE3\xE4\x3\x2\x2\x2\xE4\xE6\x3\x2\x2\x2\xE5\xD0\x3\x2\x2\x2\xE5\xDC\x3"+
		"\x2\x2\x2\xE5\xE0\x3\x2\x2\x2\xE5\xE1\x3\x2\x2\x2\xE6\x5\x3\x2\x2\x2\xE7"+
		"\xE9\a\xF1\x2\x2\xE8\xEA\a\a\x2\x2\xE9\xE8\x3\x2\x2\x2\xE9\xEA\x3\x2\x2"+
		"\x2\xEA\a\x3\x2\x2\x2\xEB\xEC\a\x5\x2\x2\xEC\t\x3\x2\x2\x2\xED\x107\x5"+
		"\x38\x1D\x2\xEE\x107\x5:\x1E\x2\xEF\x107\x5<\x1F\x2\xF0\x107\x5> \x2\xF1"+
		"\x107\x5@!\x2\xF2\x107\x5\x42\"\x2\xF3\x107\x5\x44#\x2\xF4\x107\x5\x46"+
		"$\x2\xF5\x107\x5J&\x2\xF6\x107\x5H%\x2\xF7\x107\x5L\'\x2\xF8\x107\x5N"+
		"(\x2\xF9\x107\x5P)\x2\xFA\x107\x5R*\x2\xFB\x107\x5T+\x2\xFC\x107\x5V,"+
		"\x2\xFD\x107\x5X-\x2\xFE\x107\x5Z.\x2\xFF\x107\x5\\/\x2\x100\x107\x5^"+
		"\x30\x2\x101\x107\x5`\x31\x2\x102\x107\x5\x62\x32\x2\x103\x107\x5\x64"+
		"\x33\x2\x104\x107\x5\x66\x34\x2\x105\x107\x5h\x35\x2\x106\xED\x3\x2\x2"+
		"\x2\x106\xEE\x3\x2\x2\x2\x106\xEF\x3\x2\x2\x2\x106\xF0\x3\x2\x2\x2\x106"+
		"\xF1\x3\x2\x2\x2\x106\xF2\x3\x2\x2\x2\x106\xF3\x3\x2\x2\x2\x106\xF4\x3"+
		"\x2\x2\x2\x106\xF5\x3\x2\x2\x2\x106\xF6\x3\x2\x2\x2\x106\xF7\x3\x2\x2"+
		"\x2\x106\xF8\x3\x2\x2\x2\x106\xF9\x3\x2\x2\x2\x106\xFA\x3\x2\x2\x2\x106"+
		"\xFB\x3\x2\x2\x2\x106\xFC\x3\x2\x2\x2\x106\xFD\x3\x2\x2\x2\x106\xFE\x3"+
		"\x2\x2\x2\x106\xFF\x3\x2\x2\x2\x106\x100\x3\x2\x2\x2\x106\x101\x3\x2\x2"+
		"\x2\x106\x102\x3\x2\x2\x2\x106\x103\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2"+
		"\x106\x105\x3\x2\x2\x2\x107\v\x3\x2\x2\x2\x108\x109\t\x2\x2\x2\x109\x111"+
		"\a\xF1\x2\x2\x10A\x111\a\x9D\x2\x2\x10B\x111\a\x9E\x2\x2\x10C\x10D\a\xA2"+
		"\x2\x2\x10D\x111\x5\x8CG\x2\x10E\x10F\a\xA1\x2\x2\x10F\x111\t\x3\x2\x2"+
		"\x110\x108\x3\x2\x2\x2\x110\x10A\x3\x2\x2\x2\x110\x10B\x3\x2\x2\x2\x110"+
		"\x10C\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x111\r\x3\x2\x2\x2\x112\x125\x5"+
		"\x10\t\x2\x113\x125\x5\x12\n\x2\x114\x125\x5\x14\v\x2\x115\x125\x5\x16"+
		"\f\x2\x116\x125\x5\x18\r\x2\x117\x125\x5\x1A\xE\x2\x118\x125\x5\x1C\xF"+
		"\x2\x119\x125\x5\x1E\x10\x2\x11A\x125\x5 \x11\x2\x11B\x125\x5\"\x12\x2"+
		"\x11C\x125\x5$\x13\x2\x11D\x125\x5&\x14\x2\x11E\x125\x5(\x15\x2\x11F\x125"+
		"\x5*\x16\x2\x120\x125\x5,\x17\x2\x121\x125\x5.\x18\x2\x122\x125\x5\x30"+
		"\x19\x2\x123\x125\x5\x32\x1A\x2\x124\x112\x3\x2\x2\x2\x124\x113\x3\x2"+
		"\x2\x2\x124\x114\x3\x2\x2\x2\x124\x115\x3\x2\x2\x2\x124\x116\x3\x2\x2"+
		"\x2\x124\x117\x3\x2\x2\x2\x124\x118\x3\x2\x2\x2\x124\x119\x3\x2\x2\x2"+
		"\x124\x11A\x3\x2\x2\x2\x124\x11B\x3\x2\x2\x2\x124\x11C\x3\x2\x2\x2\x124"+
		"\x11D\x3\x2\x2\x2\x124\x11E\x3\x2\x2\x2\x124\x11F\x3\x2\x2\x2\x124\x120"+
		"\x3\x2\x2\x2\x124\x121\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2\x124\x123\x3"+
		"\x2\x2\x2\x125\xF\x3\x2\x2\x2\x126\x127\a\xBF\x2\x2\x127\x130\a\r\x2\x2"+
		"\x128\x12D\a\xF1\x2\x2\x129\x12A\a\v\x2\x2\x12A\x12C\a\xF1\x2\x2\x12B"+
		"\x129\x3\x2\x2\x2\x12C\x12F\x3\x2\x2\x2\x12D\x12B\x3\x2\x2\x2\x12D\x12E"+
		"\x3\x2\x2\x2\x12E\x131\x3\x2\x2\x2\x12F\x12D\x3\x2\x2\x2\x130\x128\x3"+
		"\x2\x2\x2\x130\x131\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x133\a\xE\x2"+
		"\x2\x133\x11\x3\x2\x2\x2\x134\x135\a\xC0\x2\x2\x135\x13\x3\x2\x2\x2\x136"+
		"\x137\a\xC3\x2\x2\x137\x138\x5\x8CG\x2\x138\x15\x3\x2\x2\x2\x139\x13A"+
		"\a\xC4\x2\x2\x13A\x17\x3\x2\x2\x2\x13B\x13C\a\xC1\x2\x2\x13C\x19\x3\x2"+
		"\x2\x2\x13D\x13E\a\xC2\x2\x2\x13E\x1B\x3\x2\x2\x2\x13F\x140\a\xC5\x2\x2"+
		"\x140\x1D\x3\x2\x2\x2\x141\x142\a\xC6\x2\x2\x142\x143\x5\x8CG\x2\x143"+
		"\x1F\x3\x2\x2\x2\x144\x145\a\xC7\x2\x2\x145\x146\x5\x8CG\x2\x146!\x3\x2"+
		"\x2\x2\x147\x148\a\xC8\x2\x2\x148#\x3\x2\x2\x2\x149\x14A\a\xC9\x2\x2\x14A"+
		"\x14B\x5\x8CG\x2\x14B%\x3\x2\x2\x2\x14C\x14D\a\xCA\x2\x2\x14D\x14E\x5"+
		"\x8CG\x2\x14E\'\x3\x2\x2\x2\x14F\x150\a\xCB\x2\x2\x150)\x3\x2\x2\x2\x151"+
		"\x152\a\xCC\x2\x2\x152+\x3\x2\x2\x2\x153\x154\a\xCD\x2\x2\x154\x155\a"+
		"\xF1\x2\x2\x155\x156\a\f\x2\x2\x156\x157\x5\x8CG\x2\x157\x158\a\xCE\x2"+
		"\x2\x158\x15B\x5\x8CG\x2\x159\x15A\a\xCF\x2\x2\x15A\x15C\x5\x8CG\x2\x15B"+
		"\x159\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C-\x3\x2\x2\x2\x15D\x15E\t"+
		"\x4\x2\x2\x15E/\x3\x2\x2\x2\x15F\x160\a\xD2\x2\x2\x160\x31\x3\x2\x2\x2"+
		"\x161\x162\a\xD3\x2\x2\x162\x33\x3\x2\x2\x2\x163\x164\a\xF1\x2\x2\x164"+
		"\x165\a\r\x2\x2\x165\x16A\x5\x36\x1C\x2\x166\x167\a\v\x2\x2\x167\x169"+
		"\x5\x36\x1C\x2\x168\x166\x3\x2\x2\x2\x169\x16C\x3\x2\x2\x2\x16A\x168\x3"+
		"\x2\x2\x2\x16A\x16B\x3\x2\x2\x2\x16B\x16D\x3\x2\x2\x2\x16C\x16A\x3\x2"+
		"\x2\x2\x16D\x16E\a\xE\x2\x2\x16E\x35\x3\x2\x2\x2\x16F\x171\x5r:\x2\x170"+
		"\x16F\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x37\x3\x2\x2\x2\x172\x173"+
		"\a\xA5\x2\x2\x173\x174\x5\x8CG\x2\x174\x39\x3\x2\x2\x2\x175\x176\a\xA6"+
		"\x2\x2\x176\x177\x5\x8CG\x2\x177;\x3\x2\x2\x2\x178\x179\a\xA7\x2\x2\x179"+
		"\x17A\x5\x8CG\x2\x17A=\x3\x2\x2\x2\x17B\x17C\a\xAA\x2\x2\x17C\x17D\x5"+
		"\x8CG\x2\x17D?\x3\x2\x2\x2\x17E\x17F\a\xA8\x2\x2\x17F\x180\x5\x8CG\x2"+
		"\x180\x41\x3\x2\x2\x2\x181\x182\t\x5\x2\x2\x182\x183\x5\x8CG\x2\x183\x43"+
		"\x3\x2\x2\x2\x184\x185\a\xAB\x2\x2\x185\x18A\x5\x8CG\x2\x186\x187\a\v"+
		"\x2\x2\x187\x189\x5\x8CG\x2\x188\x186\x3\x2\x2\x2\x189\x18C\x3\x2\x2\x2"+
		"\x18A\x188\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x45\x3\x2\x2\x2\x18C"+
		"\x18A\x3\x2\x2\x2\x18D\x18E\a\xAC\x2\x2\x18E\x193\x5\x8CG\x2\x18F\x190"+
		"\a\v\x2\x2\x190\x192\x5\x8CG\x2\x191\x18F\x3\x2\x2\x2\x192\x195\x3\x2"+
		"\x2\x2\x193\x191\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194G\x3\x2\x2\x2\x195"+
		"\x193\x3\x2\x2\x2\x196\x197\a\xB2\x2\x2\x197\x198\x5\x8CG\x2\x198I\x3"+
		"\x2\x2\x2\x199\x19A\a\xAD\x2\x2\x19A\x19B\x5\x8CG\x2\x19BK\x3\x2\x2\x2"+
		"\x19C\x19D\a\xAE\x2\x2\x19D\x19E\x5\x8CG\x2\x19EM\x3\x2\x2\x2\x19F\x1A0"+
		"\a\xAF\x2\x2\x1A0\x1A1\x5\x8CG\x2\x1A1O\x3\x2\x2\x2\x1A2\x1A3\a\xB3\x2"+
		"\x2\x1A3\x1A6\x5\x8CG\x2\x1A4\x1A5\a\v\x2\x2\x1A5\x1A7\x5\x8CG\x2\x1A6"+
		"\x1A4\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7Q\x3\x2\x2\x2\x1A8\x1A9\a"+
		"\xB4\x2\x2\x1A9S\x3\x2\x2\x2\x1AA\x1AB\a\xB5\x2\x2\x1AB\x1AC\x5\x8CG\x2"+
		"\x1ACU\x3\x2\x2\x2\x1AD\x1AE\a\xB6\x2\x2\x1AE\x1AF\x5\x8CG\x2\x1AF\x1B0"+
		"\a\v\x2\x2\x1B0\x1B1\x5\x8CG\x2\x1B1W\x3\x2\x2\x2\x1B2\x1B3\a\xB7\x2\x2"+
		"\x1B3\x1B4\x5\x8CG\x2\x1B4\x1B5\a\v\x2\x2\x1B5\x1B6\x5\x8CG\x2\x1B6Y\x3"+
		"\x2\x2\x2\x1B7\x1B8\a\xB8\x2\x2\x1B8\x1B9\t\x6\x2\x2\x1B9[\x3\x2\x2\x2"+
		"\x1BA\x1BC\a\xB9\x2\x2\x1BB\x1BD\x5\x8CG\x2\x1BC\x1BB\x3\x2\x2\x2\x1BC"+
		"\x1BD\x3\x2\x2\x2\x1BD]\x3\x2\x2\x2\x1BE\x1BF\t\a\x2\x2\x1BF\x1C4\x5\x8C"+
		"G\x2\x1C0\x1C1\a\v\x2\x2\x1C1\x1C3\x5\x8CG\x2\x1C2\x1C0\x3\x2\x2\x2\x1C3"+
		"\x1C6\x3\x2\x2\x2\x1C4\x1C2\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5_\x3"+
		"\x2\x2\x2\x1C6\x1C4\x3\x2\x2\x2\x1C7\x1C9\a\xBC\x2\x2\x1C8\x1CA\x5\x8C"+
		"G\x2\x1C9\x1C8\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x61\x3\x2\x2\x2"+
		"\x1CB\x1CC\a\xB0\x2\x2\x1CC\x1CD\x5\x8CG\x2\x1CD\x63\x3\x2\x2\x2\x1CE"+
		"\x1CF\a\xB1\x2\x2\x1CF\x65\x3\x2\x2\x2\x1D0\x1D1\a\xBD\x2\x2\x1D1\x1D2"+
		"\x5\x8CG\x2\x1D2g\x3\x2\x2\x2\x1D3\x1D4\a\xBE\x2\x2\x1D4\x1DB\x5\x8CG"+
		"\x2\x1D5\x1D6\a\v\x2\x2\x1D6\x1D9\x5\x8CG\x2\x1D7\x1D8\a\v\x2\x2\x1D8"+
		"\x1DA\x5\x8CG\x2\x1D9\x1D7\x3\x2\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA\x1DC"+
		"\x3\x2\x2\x2\x1DB\x1D5\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DCi\x3\x2\x2"+
		"\x2\x1DD\x1E1\x5l\x37\x2\x1DE\x1E1\x5n\x38\x2\x1DF\x1E1\x5p\x39\x2\x1E0"+
		"\x1DD\x3\x2\x2\x2\x1E0\x1DE\x3\x2\x2\x2\x1E0\x1DF\x3\x2\x2\x2\x1E1k\x3"+
		"\x2\x2\x2\x1E2\x1E3\t\b\x2\x2\x1E3m\x3\x2\x2\x2\x1E4\x1E5\aj\x2\x2\x1E5"+
		"\x1E6\x5r:\x2\x1E6\x1E7\a\v\x2\x2\x1E7\x1E8\x5r:\x2\x1E8\x2B0\x3\x2\x2"+
		"\x2\x1E9\x1EA\ak\x2\x2\x1EA\x2B0\x5r:\x2\x1EB\x1EC\al\x2\x2\x1EC\x2B0"+
		"\x5r:\x2\x1ED\x1EE\am\x2\x2\x1EE\x1EF\x5r:\x2\x1EF\x1F0\a\v\x2\x2\x1F0"+
		"\x1F1\x5r:\x2\x1F1\x2B0\x3\x2\x2\x2\x1F2\x1F3\an\x2\x2\x1F3\x1F4\x5r:"+
		"\x2\x1F4\x1F5\a\v\x2\x2\x1F5\x1F6\x5r:\x2\x1F6\x2B0\x3\x2\x2\x2\x1F7\x1F8"+
		"\ao\x2\x2\x1F8\x1F9\x5r:\x2\x1F9\x1FA\a\v\x2\x2\x1FA\x1FB\x5r:\x2\x1FB"+
		"\x2B0\x3\x2\x2\x2\x1FC\x200\ap\x2\x2\x1FD\x1FE\x5r:\x2\x1FE\x1FF\a\v\x2"+
		"\x2\x1FF\x201\x3\x2\x2\x2\x200\x1FD\x3\x2\x2\x2\x200\x201\x3\x2\x2\x2"+
		"\x201\x202\x3\x2\x2\x2\x202\x2B0\x5r:\x2\x203\x204\aq\x2\x2\x204\x205"+
		"\x5r:\x2\x205\x206\a\v\x2\x2\x206\x207\x5r:\x2\x207\x2B0\x3\x2\x2\x2\x208"+
		"\x20C\ar\x2\x2\x209\x20A\x5r:\x2\x20A\x20B\a\v\x2\x2\x20B\x20D\x3\x2\x2"+
		"\x2\x20C\x209\x3\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D\x20E\x3\x2\x2\x2"+
		"\x20E\x2B0\x5r:\x2\x20F\x213\as\x2\x2\x210\x211\x5r:\x2\x211\x212\a\v"+
		"\x2\x2\x212\x214\x3\x2\x2\x2\x213\x210\x3\x2\x2\x2\x213\x214\x3\x2\x2"+
		"\x2\x214\x215\x3\x2\x2\x2\x215\x2B0\x5r:\x2\x216\x21A\at\x2\x2\x217\x218"+
		"\x5r:\x2\x218\x219\a\v\x2\x2\x219\x21B\x3\x2\x2\x2\x21A\x217\x3\x2\x2"+
		"\x2\x21A\x21B\x3\x2\x2\x2\x21B\x21C\x3\x2\x2\x2\x21C\x2B0\x5r:\x2\x21D"+
		"\x221\au\x2\x2\x21E\x21F\x5r:\x2\x21F\x220\a\v\x2\x2\x220\x222\x3\x2\x2"+
		"\x2\x221\x21E\x3\x2\x2\x2\x221\x222\x3\x2\x2\x2\x222\x223\x3\x2\x2\x2"+
		"\x223\x2B0\x5r:\x2\x224\x225\av\x2\x2\x225\x2B0\x5r:\x2\x226\x22A\aw\x2"+
		"\x2\x227\x228\x5r:\x2\x228\x229\a\v\x2\x2\x229\x22B\x3\x2\x2\x2\x22A\x227"+
		"\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2\x22B\x22C\x3\x2\x2\x2\x22C\x2B0\x5"+
		"r:\x2\x22D\x231\ax\x2\x2\x22E\x22F\x5r:\x2\x22F\x230\a\v\x2\x2\x230\x232"+
		"\x3\x2\x2\x2\x231\x22E\x3\x2\x2\x2\x231\x232\x3\x2\x2\x2\x232\x233\x3"+
		"\x2\x2\x2\x233\x2B0\x5r:\x2\x234\x238\ay\x2\x2\x235\x236\x5r:\x2\x236"+
		"\x237\a\v\x2\x2\x237\x239\x3\x2\x2\x2\x238\x235\x3\x2\x2\x2\x238\x239"+
		"\x3\x2\x2\x2\x239\x23A\x3\x2\x2\x2\x23A\x2B0\x5r:\x2\x23B\x23D\aQ\x2\x2"+
		"\x23C\x23E\x5r:\x2\x23D\x23C\x3\x2\x2\x2\x23D\x23E\x3\x2\x2\x2\x23E\x2B0"+
		"\x3\x2\x2\x2\x23F\x240\az\x2\x2\x240\x2B0\x5r:\x2\x241\x242\a{\x2\x2\x242"+
		"\x2B0\x5r:\x2\x243\x244\a|\x2\x2\x244\x2B0\x5r:\x2\x245\x249\a}\x2\x2"+
		"\x246\x247\x5r:\x2\x247\x248\a\v\x2\x2\x248\x24A\x3\x2\x2\x2\x249\x246"+
		"\x3\x2\x2\x2\x249\x24A\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B\x2B0\x5"+
		"r:\x2\x24C\x250\a~\x2\x2\x24D\x24E\x5r:\x2\x24E\x24F\a\v\x2\x2\x24F\x251"+
		"\x3\x2\x2\x2\x250\x24D\x3\x2\x2\x2\x250\x251\x3\x2\x2\x2\x251\x252\x3"+
		"\x2\x2\x2\x252\x2B0\x5r:\x2\x253\x254\a\x7F\x2\x2\x254\x2B0\x5r:\x2\x255"+
		"\x259\a\x80\x2\x2\x256\x257\x5r:\x2\x257\x258\a\v\x2\x2\x258\x25A\x3\x2"+
		"\x2\x2\x259\x256\x3\x2\x2\x2\x259\x25A\x3\x2\x2\x2\x25A\x25B\x3\x2\x2"+
		"\x2\x25B\x2B0\x5r:\x2\x25C\x260\a\x81\x2\x2\x25D\x25E\x5r:\x2\x25E\x25F"+
		"\a\v\x2\x2\x25F\x261\x3\x2\x2\x2\x260\x25D\x3\x2\x2\x2\x260\x261\x3\x2"+
		"\x2\x2\x261\x262\x3\x2\x2\x2\x262\x2B0\x5r:\x2\x263\x267\a\x82\x2\x2\x264"+
		"\x265\x5r:\x2\x265\x266\a\v\x2\x2\x266\x268\x3\x2\x2\x2\x267\x264\x3\x2"+
		"\x2\x2\x267\x268\x3\x2\x2\x2\x268\x269\x3\x2\x2\x2\x269\x2B0\x5r:\x2\x26A"+
		"\x26E\a\x83\x2\x2\x26B\x26C\x5r:\x2\x26C\x26D\a\v\x2\x2\x26D\x26F\x3\x2"+
		"\x2\x2\x26E\x26B\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F\x270\x3\x2\x2"+
		"\x2\x270\x2B0\x5r:\x2\x271\x275\a\x84\x2\x2\x272\x273\x5r:\x2\x273\x274"+
		"\a\v\x2\x2\x274\x276\x3\x2\x2\x2\x275\x272\x3\x2\x2\x2\x275\x276\x3\x2"+
		"\x2\x2\x276\x277\x3\x2\x2\x2\x277\x2B0\x5r:\x2\x278\x27C\a\x85\x2\x2\x279"+
		"\x27A\x5r:\x2\x27A\x27B\a\v\x2\x2\x27B\x27D\x3\x2\x2\x2\x27C\x279\x3\x2"+
		"\x2\x2\x27C\x27D\x3\x2\x2\x2\x27D\x27E\x3\x2\x2\x2\x27E\x2B0\x5r:\x2\x27F"+
		"\x283\a\x86\x2\x2\x280\x281\x5r:\x2\x281\x282\a\v\x2\x2\x282\x284\x3\x2"+
		"\x2\x2\x283\x280\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284\x285\x3\x2\x2"+
		"\x2\x285\x2B0\x5r:\x2\x286\x28A\a\x87\x2\x2\x287\x288\x5r:\x2\x288\x289"+
		"\a\v\x2\x2\x289\x28B\x3\x2\x2\x2\x28A\x287\x3\x2\x2\x2\x28A\x28B\x3\x2"+
		"\x2\x2\x28B\x28C\x3\x2\x2\x2\x28C\x2B0\x5r:\x2\x28D\x28E\a\x88\x2\x2\x28E"+
		"\x28F\x5r:\x2\x28F\x290\a\v\x2\x2\x290\x291\x5r:\x2\x291\x2B0\x3\x2\x2"+
		"\x2\x292\x293\a\x89\x2\x2\x293\x294\x5r:\x2\x294\x298\a\v\x2\x2\x295\x296"+
		"\x5r:\x2\x296\x297\a\v\x2\x2\x297\x299\x3\x2\x2\x2\x298\x295\x3\x2\x2"+
		"\x2\x298\x299\x3\x2\x2\x2\x299\x29A\x3\x2\x2\x2\x29A\x29B\x5r:\x2\x29B"+
		"\x2B0\x3\x2\x2\x2\x29C\x29D\a\x8A\x2\x2\x29D\x29E\x5r:\x2\x29E\x2A2\a"+
		"\v\x2\x2\x29F\x2A0\x5r:\x2\x2A0\x2A1\a\v\x2\x2\x2A1\x2A3\x3\x2\x2\x2\x2A2"+
		"\x29F\x3\x2\x2\x2\x2A2\x2A3\x3\x2\x2\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4\x2A5"+
		"\x5r:\x2\x2A5\x2B0\x3\x2\x2\x2\x2A6\x2A7\a\x8E\x2\x2\x2A7\x2B0\x5r:\x2"+
		"\x2A8\x2A9\a\x8F\x2\x2\x2A9\x2B0\x5r:\x2\x2AA\x2AB\a\x90\x2\x2\x2AB\x2AC"+
		"\x5r:\x2\x2AC\x2AD\a\v\x2\x2\x2AD\x2AE\x5r:\x2\x2AE\x2B0\x3\x2\x2\x2\x2AF"+
		"\x1E4\x3\x2\x2\x2\x2AF\x1E9\x3\x2\x2\x2\x2AF\x1EB\x3\x2\x2\x2\x2AF\x1ED"+
		"\x3\x2\x2\x2\x2AF\x1F2\x3\x2\x2\x2\x2AF\x1F7\x3\x2\x2\x2\x2AF\x1FC\x3"+
		"\x2\x2\x2\x2AF\x203\x3\x2\x2\x2\x2AF\x208\x3\x2\x2\x2\x2AF\x20F\x3\x2"+
		"\x2\x2\x2AF\x216\x3\x2\x2\x2\x2AF\x21D\x3\x2\x2\x2\x2AF\x224\x3\x2\x2"+
		"\x2\x2AF\x226\x3\x2\x2\x2\x2AF\x22D\x3\x2\x2\x2\x2AF\x234\x3\x2\x2\x2"+
		"\x2AF\x23B\x3\x2\x2\x2\x2AF\x23F\x3\x2\x2\x2\x2AF\x241\x3\x2\x2\x2\x2AF"+
		"\x243\x3\x2\x2\x2\x2AF\x245\x3\x2\x2\x2\x2AF\x24C\x3\x2\x2\x2\x2AF\x253"+
		"\x3\x2\x2\x2\x2AF\x255\x3\x2\x2\x2\x2AF\x25C\x3\x2\x2\x2\x2AF\x263\x3"+
		"\x2\x2\x2\x2AF\x26A\x3\x2\x2\x2\x2AF\x271\x3\x2\x2\x2\x2AF\x278\x3\x2"+
		"\x2\x2\x2AF\x27F\x3\x2\x2\x2\x2AF\x286\x3\x2\x2\x2\x2AF\x28D\x3\x2\x2"+
		"\x2\x2AF\x292\x3\x2\x2\x2\x2AF\x29C\x3\x2\x2\x2\x2AF\x2A6\x3\x2\x2\x2"+
		"\x2AF\x2A8\x3\x2\x2\x2\x2AF\x2AA\x3\x2\x2\x2\x2B0o\x3\x2\x2\x2\x2B1\x2B2"+
		"\t\t\x2\x2\x2B2q\x3\x2\x2\x2\x2B3\x2C9\x5t;\x2\x2B4\x2C9\x5v<\x2\x2B5"+
		"\x2C9\x5x=\x2\x2B6\x2C9\x5z>\x2\x2B7\x2C9\x5|?\x2\x2B8\x2C9\x5\x80\x41"+
		"\x2\x2B9\x2C9\x5\x82\x42\x2\x2BA\x2C9\x5\x84\x43\x2\x2BB\x2C9\x5\x86\x44"+
		"\x2\x2BC\x2C9\x5\x88\x45\x2\x2BD\x2C9\x5\x8CG\x2\x2BE\x2C9\x5\x8A\x46"+
		"\x2\x2BF\x2C0\t\n\x2\x2\x2C0\x2C3\a\r\x2\x2\x2C1\x2C4\x5~@\x2\x2C2\x2C4"+
		"\x5\xAAV\x2\x2C3\x2C1\x3\x2\x2\x2\x2C3\x2C2\x3\x2\x2\x2\x2C4\x2C5\x3\x2"+
		"\x2\x2\x2C5\x2C6\a\xE\x2\x2\x2C6\x2C9\x3\x2\x2\x2\x2C7\x2C9\a\xF5\x2\x2"+
		"\x2C8\x2B3\x3\x2\x2\x2\x2C8\x2B4\x3\x2\x2\x2\x2C8\x2B5\x3\x2\x2\x2\x2C8"+
		"\x2B6\x3\x2\x2\x2\x2C8\x2B7\x3\x2\x2\x2\x2C8\x2B8\x3\x2\x2\x2\x2C8\x2B9"+
		"\x3\x2\x2\x2\x2C8\x2BA\x3\x2\x2\x2\x2C8\x2BB\x3\x2\x2\x2\x2C8\x2BC\x3"+
		"\x2\x2\x2\x2C8\x2BD\x3\x2\x2\x2\x2C8\x2BE\x3\x2\x2\x2\x2C8\x2BF\x3\x2"+
		"\x2\x2\x2C8\x2C7\x3\x2\x2\x2\x2C9s\x3\x2\x2\x2\x2CA\x2CB\t\v\x2\x2\x2CB"+
		"u\x3\x2\x2\x2\x2CC\x2CD\t\f\x2\x2\x2CDw\x3\x2\x2\x2\x2CE\x2CF\t\r\x2\x2"+
		"\x2CFy\x3\x2\x2\x2\x2D0\x2D1\t\xE\x2\x2\x2D1{\x3\x2\x2\x2\x2D2\x2D3\t"+
		"\xF\x2\x2\x2D3}\x3\x2\x2\x2\x2D4\x2D5\t\x10\x2\x2\x2D5\x7F\x3\x2\x2\x2"+
		"\x2D6\x2D7\t\x11\x2\x2\x2D7\x81\x3\x2\x2\x2\x2D8\x2D9\a\r\x2\x2\x2D9\x2DA"+
		"\x5z>\x2\x2DA\x2DB\a\xE\x2\x2\x2DB\x83\x3\x2\x2\x2\x2DC\x2DD\a\r\x2\x2"+
		"\x2DD\x2DE\a-\x2\x2\x2DE\x2DF\a\xE\x2\x2\x2DF\x85\x3\x2\x2\x2\x2E0\x2E1"+
		"\a\r\x2\x2\x2E1\x2E2\x5\x8CG\x2\x2E2\x2E3\a\xE\x2\x2\x2E3\x87\x3\x2\x2"+
		"\x2\x2E4\x2E5\a\r\x2\x2\x2E5\x2E8\x5|?\x2\x2E6\x2E7\t\x12\x2\x2\x2E7\x2E9"+
		"\x5\x8CG\x2\x2E8\x2E6\x3\x2\x2\x2\x2E8\x2E9\x3\x2\x2\x2\x2E9\x2EA\x3\x2"+
		"\x2\x2\x2EA\x2EB\a\xE\x2\x2\x2EB\x89\x3\x2\x2\x2\x2EC\x2ED\t\x13\x2\x2"+
		"\x2ED\x8B\x3\x2\x2\x2\x2EE\x2F4\x5\x8EH\x2\x2EF\x2F0\a\x11\x2\x2\x2F0"+
		"\x2F1\x5\x8CG\x2\x2F1\x2F2\a\a\x2\x2\x2F2\x2F3\x5\x8CG\x2\x2F3\x2F5\x3"+
		"\x2\x2\x2\x2F4\x2EF\x3\x2\x2\x2\x2F4\x2F5\x3\x2\x2\x2\x2F5\x8D\x3\x2\x2"+
		"\x2\x2F6\x2FB\x5\x90I\x2\x2F7\x2F8\a\x14\x2\x2\x2F8\x2FA\x5\x90I\x2\x2F9"+
		"\x2F7\x3\x2\x2\x2\x2FA\x2FD\x3\x2\x2\x2\x2FB\x2F9\x3\x2\x2\x2\x2FB\x2FC"+
		"\x3\x2\x2\x2\x2FC\x8F\x3\x2\x2\x2\x2FD\x2FB\x3\x2\x2\x2\x2FE\x303\x5\x92"+
		"J\x2\x2FF\x300\a\x15\x2\x2\x300\x302\x5\x92J\x2\x301\x2FF\x3\x2\x2\x2"+
		"\x302\x305\x3\x2\x2\x2\x303\x301\x3\x2\x2\x2\x303\x304\x3\x2\x2\x2\x304"+
		"\x91\x3\x2\x2\x2\x305\x303\x3\x2\x2\x2\x306\x30B\x5\x94K\x2\x307\x308"+
		"\a\x16\x2\x2\x308\x30A\x5\x94K\x2\x309\x307\x3\x2\x2\x2\x30A\x30D\x3\x2"+
		"\x2\x2\x30B\x309\x3\x2\x2\x2\x30B\x30C\x3\x2\x2\x2\x30C\x93\x3\x2\x2\x2"+
		"\x30D\x30B\x3\x2\x2\x2\x30E\x313\x5\x96L\x2\x30F\x310\t\x14\x2\x2\x310"+
		"\x312\x5\x96L\x2\x311\x30F\x3\x2\x2\x2\x312\x315\x3\x2\x2\x2\x313\x311"+
		"\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314\x95\x3\x2\x2\x2\x315\x313\x3\x2"+
		"\x2\x2\x316\x31B\x5\x98M\x2\x317\x318\t\x15\x2\x2\x318\x31A\x5\x98M\x2"+
		"\x319\x317\x3\x2\x2\x2\x31A\x31D\x3\x2\x2\x2\x31B\x319\x3\x2\x2\x2\x31B"+
		"\x31C\x3\x2\x2\x2\x31C\x97\x3\x2\x2\x2\x31D\x31B\x3\x2\x2\x2\x31E\x323"+
		"\x5\x9AN\x2\x31F\x320\t\x16\x2\x2\x320\x322\x5\x9AN\x2\x321\x31F\x3\x2"+
		"\x2\x2\x322\x325\x3\x2\x2\x2\x323\x321\x3\x2\x2\x2\x323\x324\x3\x2\x2"+
		"\x2\x324\x99\x3\x2\x2\x2\x325\x323\x3\x2\x2\x2\x326\x32B\x5\x9CO\x2\x327"+
		"\x328\t\x12\x2\x2\x328\x32A\x5\x9CO\x2\x329\x327\x3\x2\x2\x2\x32A\x32D"+
		"\x3\x2\x2\x2\x32B\x329\x3\x2\x2\x2\x32B\x32C\x3\x2\x2\x2\x32C\x9B\x3\x2"+
		"\x2\x2\x32D\x32B\x3\x2\x2\x2\x32E\x333\x5\x9EP\x2\x32F\x330\t\x17\x2\x2"+
		"\x330\x332\x5\x9EP\x2\x331\x32F\x3\x2\x2\x2\x332\x335\x3\x2\x2\x2\x333"+
		"\x331\x3\x2\x2\x2\x333\x334\x3\x2\x2\x2\x334\x9D\x3\x2\x2\x2\x335\x333"+
		"\x3\x2\x2\x2\x336\x33B\x5\xA0Q\x2\x337\x338\t\x18\x2\x2\x338\x33A\x5\xA0"+
		"Q\x2\x339\x337\x3\x2\x2\x2\x33A\x33D\x3\x2\x2\x2\x33B\x339\x3\x2\x2\x2"+
		"\x33B\x33C\x3\x2\x2\x2\x33C\x9F\x3\x2\x2\x2\x33D\x33B\x3\x2\x2\x2\x33E"+
		"\x354\x5\xA4S\x2\x33F\x354\x5\xA2R\x2\x340\x354\x5\xAAV\x2\x341\x342\a"+
		"\x12\x2\x2\x342\x354\x5\xA0Q\x2\x343\x344\a\x13\x2\x2\x344\x354\x5\xA0"+
		"Q\x2\x345\x346\a&\x2\x2\x346\x354\x5\xA0Q\x2\x347\x348\a)\x2\x2\x348\x354"+
		"\x5\xA0Q\x2\x349\x34A\a\xF\x2\x2\x34A\x34B\x5\x8CG\x2\x34B\x34C\a\x10"+
		"\x2\x2\x34C\x354\x3\x2\x2\x2\x34D\x34E\a\r\x2\x2\x34E\x34F\x5\x8CG\x2"+
		"\x34F\x350\a\xE\x2\x2\x350\x354\x3\x2\x2\x2\x351\x354\x5\xA6T\x2\x352"+
		"\x354\x5\xA8U\x2\x353\x33E\x3\x2\x2\x2\x353\x33F\x3\x2\x2\x2\x353\x340"+
		"\x3\x2\x2\x2\x353\x341\x3\x2\x2\x2\x353\x343\x3\x2\x2\x2\x353\x345\x3"+
		"\x2\x2\x2\x353\x347\x3\x2\x2\x2\x353\x349\x3\x2\x2\x2\x353\x34D\x3\x2"+
		"\x2\x2\x353\x351\x3\x2\x2\x2\x353\x352\x3\x2\x2\x2\x354\xA1\x3\x2\x2\x2"+
		"\x355\x356\a\xF1\x2\x2\x356\x357\a\r\x2\x2\x357\x365\a\xE\x2\x2\x358\x359"+
		"\a\xF1\x2\x2\x359\x35A\a\r\x2\x2\x35A\x35F\x5\x8CG\x2\x35B\x35C\a\v\x2"+
		"\x2\x35C\x35E\x5\x8CG\x2\x35D\x35B\x3\x2\x2\x2\x35E\x361\x3\x2\x2\x2\x35F"+
		"\x35D\x3\x2\x2\x2\x35F\x360\x3\x2\x2\x2\x360\x362\x3\x2\x2\x2\x361\x35F"+
		"\x3\x2\x2\x2\x362\x363\a\xE\x2\x2\x363\x365\x3\x2\x2\x2\x364\x355\x3\x2"+
		"\x2\x2\x364\x358\x3\x2\x2\x2\x365\xA3\x3\x2\x2\x2\x366\x367\t\x19\x2\x2"+
		"\x367\x36B\a\r\x2\x2\x368\x36C\x5\xB0Y\x2\x369\x36C\x5\xAEX\x2\x36A\x36C"+
		"\x5\xAAV\x2\x36B\x368\x3\x2\x2\x2\x36B\x369\x3\x2\x2\x2\x36B\x36A\x3\x2"+
		"\x2\x2\x36C\x36D\x3\x2\x2\x2\x36D\x36E\a\xE\x2\x2\x36E\x3BE\x3\x2\x2\x2"+
		"\x36F\x370\a\xD8\x2\x2\x370\x372\a\r\x2\x2\x371\x373\x5r:\x2\x372\x371"+
		"\x3\x2\x2\x2\x372\x373\x3\x2\x2\x2\x373\x374\x3\x2\x2\x2\x374\x3BE\a\xE"+
		"\x2\x2\x375\x376\a\xD9\x2\x2\x376\x378\a\r\x2\x2\x377\x379\x5r:\x2\x378"+
		"\x377\x3\x2\x2\x2\x378\x379\x3\x2\x2\x2\x379\x37A\x3\x2\x2\x2\x37A\x3BE"+
		"\a\xE\x2\x2\x37B\x37C\a\xDA\x2\x2\x37C\x37E\a\r\x2\x2\x37D\x37F\x5r:\x2"+
		"\x37E\x37D\x3\x2\x2\x2\x37E\x37F\x3\x2\x2\x2\x37F\x380\x3\x2\x2\x2\x380"+
		"\x3BE\a\xE\x2\x2\x381\x382\a\xDB\x2\x2\x382\x384\a\r\x2\x2\x383\x385\x5"+
		"r:\x2\x384\x383\x3\x2\x2\x2\x384\x385\x3\x2\x2\x2\x385\x386\x3\x2\x2\x2"+
		"\x386\x3BE\a\xE\x2\x2\x387\x388\a\xDC\x2\x2\x388\x38A\a\r\x2\x2\x389\x38B"+
		"\x5r:\x2\x38A\x389\x3\x2\x2\x2\x38A\x38B\x3\x2\x2\x2\x38B\x38C\x3\x2\x2"+
		"\x2\x38C\x3BE\a\xE\x2\x2\x38D\x38E\a\xDD\x2\x2\x38E\x390\a\r\x2\x2\x38F"+
		"\x391\x5r:\x2\x390\x38F\x3\x2\x2\x2\x390\x391\x3\x2\x2\x2\x391\x392\x3"+
		"\x2\x2\x2\x392\x3BE\a\xE\x2\x2\x393\x394\a\xDE\x2\x2\x394\x396\a\r\x2"+
		"\x2\x395\x397\x5r:\x2\x396\x395\x3\x2\x2\x2\x396\x397\x3\x2\x2\x2\x397"+
		"\x398\x3\x2\x2\x2\x398\x3BE\a\xE\x2\x2\x399\x39A\a\xDF\x2\x2\x39A\x39C"+
		"\a\r\x2\x2\x39B\x39D\x5r:\x2\x39C\x39B\x3\x2\x2\x2\x39C\x39D\x3\x2\x2"+
		"\x2\x39D\x39E\x3\x2\x2\x2\x39E\x3BE\a\xE\x2\x2\x39F\x3A0\a\xE0\x2\x2\x3A0"+
		"\x3A2\a\r\x2\x2\x3A1\x3A3\x5r:\x2\x3A2\x3A1\x3\x2\x2\x2\x3A2\x3A3\x3\x2"+
		"\x2\x2\x3A3\x3A4\x3\x2\x2\x2\x3A4\x3BE\a\xE\x2\x2\x3A5\x3A6\a\xE1\x2\x2"+
		"\x3A6\x3A8\a\r\x2\x2\x3A7\x3A9\x5r:\x2\x3A8\x3A7\x3\x2\x2\x2\x3A8\x3A9"+
		"\x3\x2\x2\x2\x3A9\x3AA\x3\x2\x2\x2\x3AA\x3BE\a\xE\x2\x2\x3AB\x3AC\a\xE2"+
		"\x2\x2\x3AC\x3AE\a\r\x2\x2\x3AD\x3AF\x5r:\x2\x3AE\x3AD\x3\x2\x2\x2\x3AE"+
		"\x3AF\x3\x2\x2\x2\x3AF\x3B0\x3\x2\x2\x2\x3B0\x3BE\a\xE\x2\x2\x3B1\x3B2"+
		"\a\xE3\x2\x2\x3B2\x3B4\a\r\x2\x2\x3B3\x3B5\x5r:\x2\x3B4\x3B3\x3\x2\x2"+
		"\x2\x3B4\x3B5\x3\x2\x2\x2\x3B5\x3B6\x3\x2\x2\x2\x3B6\x3BE\a\xE\x2\x2\x3B7"+
		"\x3B8\a\xE4\x2\x2\x3B8\x3BA\a\r\x2\x2\x3B9\x3BB\x5r:\x2\x3BA\x3B9\x3\x2"+
		"\x2\x2\x3BA\x3BB\x3\x2\x2\x2\x3BB\x3BC\x3\x2\x2\x2\x3BC\x3BE\a\xE\x2\x2"+
		"\x3BD\x366\x3\x2\x2\x2\x3BD\x36F\x3\x2\x2\x2\x3BD\x375\x3\x2\x2\x2\x3BD"+
		"\x37B\x3\x2\x2\x2\x3BD\x381\x3\x2\x2\x2\x3BD\x387\x3\x2\x2\x2\x3BD\x38D"+
		"\x3\x2\x2\x2\x3BD\x393\x3\x2\x2\x2\x3BD\x399\x3\x2\x2\x2\x3BD\x39F\x3"+
		"\x2\x2\x2\x3BD\x3A5\x3\x2\x2\x2\x3BD\x3AB\x3\x2\x2\x2\x3BD\x3B1\x3\x2"+
		"\x2\x2\x3BD\x3B7\x3\x2\x2\x2\x3BE\xA5\x3\x2\x2\x2\x3BF\x3C0\t\x1A\x2\x2"+
		"\x3C0\xA7\x3\x2\x2\x2\x3C1\x3C3\a\b\x2\x2\x3C2\x3C1\x3\x2\x2\x2\x3C2\x3C3"+
		"\x3\x2\x2\x2\x3C3\x3C4\x3\x2\x2\x2\x3C4\x3C9\a\xF1\x2\x2\x3C5\x3C6\a*"+
		"\x2\x2\x3C6\x3C8\a\xF1\x2\x2\x3C7\x3C5\x3\x2\x2\x2\x3C8\x3CB\x3\x2\x2"+
		"\x2\x3C9\x3C7\x3\x2\x2\x2\x3C9\x3CA\x3\x2\x2\x2\x3CA\xA9\x3\x2\x2\x2\x3CB"+
		"\x3C9\x3\x2\x2\x2\x3CC\x3CD\a\'\x2\x2\x3CD\x3CE\a\xF1\x2\x2\x3CE\x3CF"+
		"\a(\x2\x2\x3CF\xAB\x3\x2\x2\x2\x3D0\x3D7\x5t;\x2\x3D1\x3D7\x5v<\x2\x3D2"+
		"\x3D7\x5x=\x2\x3D3\x3D7\x5z>\x2\x3D4\x3D7\x5|?\x2\x3D5\x3D7\x5\x80\x41"+
		"\x2\x3D6\x3D0\x3\x2\x2\x2\x3D6\x3D1\x3\x2\x2\x2\x3D6\x3D2\x3\x2\x2\x2"+
		"\x3D6\x3D3\x3\x2\x2\x2\x3D6\x3D4\x3\x2\x2\x2\x3D6\x3D5\x3\x2\x2\x2\x3D7"+
		"\xAD\x3\x2\x2\x2\x3D8\x3DD\x5\xACW\x2\x3D9\x3DD\x5\x82\x42\x2\x3DA\x3DD"+
		"\x5\x84\x43\x2\x3DB\x3DD\x5\x8A\x46\x2\x3DC\x3D8\x3\x2\x2\x2\x3DC\x3D9"+
		"\x3\x2\x2\x2\x3DC\x3DA\x3\x2\x2\x2\x3DC\x3DB\x3\x2\x2\x2\x3DD\xAF\x3\x2"+
		"\x2\x2\x3DE\x3DF\t\x1B\x2\x2\x3DF\xB1\x3\x2\x2\x2X\xB6\xBD\xC2\xC8\xCD"+
		"\xD0\xD7\xDA\xDE\xE3\xE5\xE9\x106\x110\x124\x12D\x130\x15B\x16A\x170\x18A"+
		"\x193\x1A6\x1BC\x1C4\x1C9\x1D9\x1DB\x1E0\x200\x20C\x213\x21A\x221\x22A"+
		"\x231\x238\x23D\x249\x250\x259\x260\x267\x26E\x275\x27C\x283\x28A\x298"+
		"\x2A2\x2AF\x2C3\x2C8\x2E8\x2F4\x2FB\x303\x30B\x313\x31B\x323\x32B\x333"+
		"\x33B\x353\x35F\x364\x36B\x372\x378\x37E\x384\x38A\x390\x396\x39C\x3A2"+
		"\x3A8\x3AE\x3B4\x3BA\x3BD\x3C2\x3C9\x3D6\x3DC";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Spect.Net.Assembler.Generated
