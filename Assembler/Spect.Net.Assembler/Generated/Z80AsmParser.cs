//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dotne\source\repos\spectnetide\Assembler\AntlrZ80AsmParserGenerator\ParserGenerator\Z80Asm.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Spect.Net.Assembler.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class Z80AsmParser : Parser {
	public const int
		COMMENT=1, WS=2, NEWLINE=3, COLON=4, SCOLON=5, COMMA=6, ASSIGN=7, LPAR=8, 
		RPAR=9, LSBRAC=10, RSBRAC=11, QMARK=12, PLUS=13, MINUS=14, VBAR=15, UPARR=16, 
		AMP=17, EQOP=18, NEQOP=19, LTOP=20, LTEOP=21, GTOP=22, GTEOP=23, LSHOP=24, 
		RSHOP=25, MULOP=26, DIVOP=27, MODOP=28, TILDE=29, LDBRAC=30, RDBRAC=31, 
		EXCLM=32, A=33, B=34, C=35, D=36, E=37, H=38, L=39, I=40, R=41, XL=42, 
		XH=43, YL=44, YH=45, BC=46, DE=47, HL=48, SP=49, IX=50, IY=51, AF=52, 
		AF_=53, Z=54, NZ=55, NC=56, PO=57, PE=58, P=59, M=60, NOP=61, RLCA=62, 
		RRCA=63, RLA=64, RRA=65, DAA=66, CPL=67, SCF=68, CCF=69, HALT=70, RET=71, 
		EXX=72, DI=73, EI=74, NEG=75, RETN=76, RETI=77, RLD=78, RRD=79, LDI=80, 
		CPI=81, INI=82, OUTI=83, LDD=84, CPD=85, IND=86, OUTD=87, LDIR=88, CPIR=89, 
		INIR=90, OTIR=91, LDDR=92, CPDR=93, INDR=94, OTDR=95, LD=96, INC=97, DEC=98, 
		EX=99, ADD=100, ADC=101, SUB=102, SBC=103, AND=104, XOR=105, OR=106, CP=107, 
		DJNZ=108, JR=109, JP=110, CALL=111, RST=112, PUSH=113, POP=114, IN=115, 
		OUT=116, IM=117, RLC=118, RRC=119, RL=120, RR=121, SLA=122, SRA=123, SLL=124, 
		SRL=125, BIT=126, RES=127, SET=128, SWAPNIB=129, MUL=130, POPX=131, MIRROR=132, 
		TEST=133, NEXTREG=134, OUTINB=135, LDIX=136, LDIRX=137, LDDX=138, LDDRX=139, 
		PIXELDN=140, PIXELAD=141, SETAE=142, LDPIRX=143, LDIRSCALE=144, IFDEF=145, 
		IFNDEF=146, ENDIF=147, ELSE=148, DEFINE=149, UNDEF=150, INCLUDE=151, IF=152, 
		IFMOD=153, IFNMOD=154, ORGPRAG=155, ENTPRAG=156, XENTPRAG=157, EQUPRAG=158, 
		VARPRAG=159, DISPRAG=160, DBPRAG=161, DWPRAG=162, DMPRAG=163, SKIPRAG=164, 
		EXTPRAG=165, DSPRAG=166, FBPRAG=167, FWPRAG=168, MODPRAG=169, ALGPRAG=170, 
		TRACE=171, TRACEHEX=172, RNDSEED=173, DGPRAG=174, MACRO=175, ENDMACRO=176, 
		LOOP=177, ENDLOOP=178, REPEAT=179, UNTIL=180, WHILE=181, ENDWHILE=182, 
		IFSTMT=183, ELIF=184, ELSESTMT=185, ENDIFSTMT=186, FOR=187, TO=188, STEP=189, 
		FORNEXT=190, NEXT=191, BREAK=192, CONTINUE=193, HEXNUM=194, BINNUM=195, 
		DECNUM=196, REALNUM=197, CHAR=198, STRING=199, FSTRING=200, BOOLLIT=201, 
		TRUE=202, FALSE=203, IDENTIFIER=204, IDSTART=205, IDCONT=206, CURADDR=207, 
		CURCNT=208, ErrorCharacter=209;
	public const int
		RULE_compileUnit = 0, RULE_asmline = 1, RULE_label = 2, RULE_comment = 3, 
		RULE_pragma = 4, RULE_directive = 5, RULE_statement = 6, RULE_macroStatement = 7, 
		RULE_macroEndMarker = 8, RULE_loopStatement = 9, RULE_loopEndMarker = 10, 
		RULE_repeatStatement = 11, RULE_untilStatement = 12, RULE_whileStatement = 13, 
		RULE_whileEndMarker = 14, RULE_ifStatement = 15, RULE_elifStatement = 16, 
		RULE_elseStatement = 17, RULE_endifStatement = 18, RULE_forStatement = 19, 
		RULE_nextStatement = 20, RULE_breakStatement = 21, RULE_continueStatement = 22, 
		RULE_macroInvocation = 23, RULE_orgPragma = 24, RULE_entPragma = 25, RULE_xentPragma = 26, 
		RULE_dispPragma = 27, RULE_equPragma = 28, RULE_varPragma = 29, RULE_defbPragma = 30, 
		RULE_defwPragma = 31, RULE_defmPragma = 32, RULE_skipPragma = 33, RULE_externPragma = 34, 
		RULE_defsPragma = 35, RULE_fillbPragma = 36, RULE_fillwPragma = 37, RULE_modelPragma = 38, 
		RULE_alignPragma = 39, RULE_tracePragma = 40, RULE_rndSeedPragma = 41, 
		RULE_defgPragma = 42, RULE_operation = 43, RULE_trivialOperation = 44, 
		RULE_compoundOperation = 45, RULE_trivialNextOperation = 46, RULE_operand = 47, 
		RULE_reg8 = 48, RULE_reg8Idx = 49, RULE_reg8Spec = 50, RULE_reg16 = 51, 
		RULE_reg16Idx = 52, RULE_reg16Spec = 53, RULE_regIndirect = 54, RULE_cPort = 55, 
		RULE_memIndirect = 56, RULE_indexedAddr = 57, RULE_condition = 58, RULE_expr = 59, 
		RULE_orExpr = 60, RULE_xorExpr = 61, RULE_andExpr = 62, RULE_equExpr = 63, 
		RULE_relExpr = 64, RULE_shiftExpr = 65, RULE_addExpr = 66, RULE_multExpr = 67, 
		RULE_unaryExpr = 68, RULE_functionInvocation = 69, RULE_literalExpr = 70, 
		RULE_symbolExpr = 71, RULE_macroParam = 72;
	public static readonly string[] ruleNames = {
		"compileUnit", "asmline", "label", "comment", "pragma", "directive", "statement", 
		"macroStatement", "macroEndMarker", "loopStatement", "loopEndMarker", 
		"repeatStatement", "untilStatement", "whileStatement", "whileEndMarker", 
		"ifStatement", "elifStatement", "elseStatement", "endifStatement", "forStatement", 
		"nextStatement", "breakStatement", "continueStatement", "macroInvocation", 
		"orgPragma", "entPragma", "xentPragma", "dispPragma", "equPragma", "varPragma", 
		"defbPragma", "defwPragma", "defmPragma", "skipPragma", "externPragma", 
		"defsPragma", "fillbPragma", "fillwPragma", "modelPragma", "alignPragma", 
		"tracePragma", "rndSeedPragma", "defgPragma", "operation", "trivialOperation", 
		"compoundOperation", "trivialNextOperation", "operand", "reg8", "reg8Idx", 
		"reg8Spec", "reg16", "reg16Idx", "reg16Spec", "regIndirect", "cPort", 
		"memIndirect", "indexedAddr", "condition", "expr", "orExpr", "xorExpr", 
		"andExpr", "equExpr", "relExpr", "shiftExpr", "addExpr", "multExpr", "unaryExpr", 
		"functionInvocation", "literalExpr", "symbolExpr", "macroParam"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "':'", "';'", "','", "'='", "'('", "')'", "'['", 
		"']'", "'?'", "'+'", "'-'", "'|'", "'^'", "'&'", "'=='", "'!='", "'<'", 
		"'<='", "'>'", "'>='", "'<<'", "'>>'", "'*'", "'/'", "'%'", "'~'", "'{{'", 
		"'}}'", "'!'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'#ifdef'", "'#ifndef'", "'#endif'", 
		"'#else'", "'#define'", "'#undef'", "'#include'", "'#if'", "'#ifmod'", 
		"'#ifnmod'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "WS", "NEWLINE", "COLON", "SCOLON", "COMMA", "ASSIGN", 
		"LPAR", "RPAR", "LSBRAC", "RSBRAC", "QMARK", "PLUS", "MINUS", "VBAR", 
		"UPARR", "AMP", "EQOP", "NEQOP", "LTOP", "LTEOP", "GTOP", "GTEOP", "LSHOP", 
		"RSHOP", "MULOP", "DIVOP", "MODOP", "TILDE", "LDBRAC", "RDBRAC", "EXCLM", 
		"A", "B", "C", "D", "E", "H", "L", "I", "R", "XL", "XH", "YL", "YH", "BC", 
		"DE", "HL", "SP", "IX", "IY", "AF", "AF_", "Z", "NZ", "NC", "PO", "PE", 
		"P", "M", "NOP", "RLCA", "RRCA", "RLA", "RRA", "DAA", "CPL", "SCF", "CCF", 
		"HALT", "RET", "EXX", "DI", "EI", "NEG", "RETN", "RETI", "RLD", "RRD", 
		"LDI", "CPI", "INI", "OUTI", "LDD", "CPD", "IND", "OUTD", "LDIR", "CPIR", 
		"INIR", "OTIR", "LDDR", "CPDR", "INDR", "OTDR", "LD", "INC", "DEC", "EX", 
		"ADD", "ADC", "SUB", "SBC", "AND", "XOR", "OR", "CP", "DJNZ", "JR", "JP", 
		"CALL", "RST", "PUSH", "POP", "IN", "OUT", "IM", "RLC", "RRC", "RL", "RR", 
		"SLA", "SRA", "SLL", "SRL", "BIT", "RES", "SET", "SWAPNIB", "MUL", "POPX", 
		"MIRROR", "TEST", "NEXTREG", "OUTINB", "LDIX", "LDIRX", "LDDX", "LDDRX", 
		"PIXELDN", "PIXELAD", "SETAE", "LDPIRX", "LDIRSCALE", "IFDEF", "IFNDEF", 
		"ENDIF", "ELSE", "DEFINE", "UNDEF", "INCLUDE", "IF", "IFMOD", "IFNMOD", 
		"ORGPRAG", "ENTPRAG", "XENTPRAG", "EQUPRAG", "VARPRAG", "DISPRAG", "DBPRAG", 
		"DWPRAG", "DMPRAG", "SKIPRAG", "EXTPRAG", "DSPRAG", "FBPRAG", "FWPRAG", 
		"MODPRAG", "ALGPRAG", "TRACE", "TRACEHEX", "RNDSEED", "DGPRAG", "MACRO", 
		"ENDMACRO", "LOOP", "ENDLOOP", "REPEAT", "UNTIL", "WHILE", "ENDWHILE", 
		"IFSTMT", "ELIF", "ELSESTMT", "ENDIFSTMT", "FOR", "TO", "STEP", "FORNEXT", 
		"NEXT", "BREAK", "CONTINUE", "HEXNUM", "BINNUM", "DECNUM", "REALNUM", 
		"CHAR", "STRING", "FSTRING", "BOOLLIT", "TRUE", "FALSE", "IDENTIFIER", 
		"IDSTART", "IDCONT", "CURADDR", "CURCNT", "ErrorCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Z80Asm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Z80AsmParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Z80AsmParser.Eof, 0); }
		public AsmlineContext[] asmline() {
			return GetRuleContexts<AsmlineContext>();
		}
		public AsmlineContext asmline(int i) {
			return GetRuleContext<AsmlineContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(Z80AsmParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(Z80AsmParser.NEWLINE, i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			int _alt;
			State = 173;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146; Match(Eof);
				}
				break;
			case COMMENT:
			case NEWLINE:
			case ASSIGN:
			case LDBRAC:
			case NOP:
			case RLCA:
			case RRCA:
			case RLA:
			case RRA:
			case DAA:
			case CPL:
			case SCF:
			case CCF:
			case HALT:
			case RET:
			case EXX:
			case DI:
			case EI:
			case NEG:
			case RETN:
			case RETI:
			case RLD:
			case RRD:
			case LDI:
			case CPI:
			case INI:
			case OUTI:
			case LDD:
			case CPD:
			case IND:
			case OUTD:
			case LDIR:
			case CPIR:
			case INIR:
			case OTIR:
			case LDDR:
			case CPDR:
			case INDR:
			case OTDR:
			case LD:
			case INC:
			case DEC:
			case EX:
			case ADD:
			case ADC:
			case SUB:
			case SBC:
			case AND:
			case XOR:
			case OR:
			case CP:
			case DJNZ:
			case JR:
			case JP:
			case CALL:
			case RST:
			case PUSH:
			case POP:
			case IN:
			case OUT:
			case IM:
			case RLC:
			case RRC:
			case RL:
			case RR:
			case SLA:
			case SRA:
			case SLL:
			case SRL:
			case BIT:
			case RES:
			case SET:
			case SWAPNIB:
			case MUL:
			case MIRROR:
			case TEST:
			case NEXTREG:
			case OUTINB:
			case LDIX:
			case LDIRX:
			case LDDX:
			case LDDRX:
			case PIXELDN:
			case PIXELAD:
			case SETAE:
			case LDPIRX:
			case LDIRSCALE:
			case IFDEF:
			case IFNDEF:
			case ENDIF:
			case ELSE:
			case DEFINE:
			case UNDEF:
			case INCLUDE:
			case IF:
			case IFMOD:
			case IFNMOD:
			case ORGPRAG:
			case ENTPRAG:
			case XENTPRAG:
			case EQUPRAG:
			case VARPRAG:
			case DISPRAG:
			case DBPRAG:
			case DWPRAG:
			case DMPRAG:
			case SKIPRAG:
			case EXTPRAG:
			case DSPRAG:
			case FBPRAG:
			case FWPRAG:
			case MODPRAG:
			case ALGPRAG:
			case TRACE:
			case TRACEHEX:
			case RNDSEED:
			case DGPRAG:
			case MACRO:
			case ENDMACRO:
			case LOOP:
			case ENDLOOP:
			case REPEAT:
			case UNTIL:
			case WHILE:
			case ENDWHILE:
			case IFSTMT:
			case ELIF:
			case ELSESTMT:
			case ENDIFSTMT:
			case FOR:
			case FORNEXT:
			case NEXT:
			case BREAK:
			case CONTINUE:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 147; Match(NEWLINE);
					}
					}
					State = 152;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 153; asmline();
				State = 162;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 155;
						_errHandler.Sync(this);
						_la = _input.La(1);
						do {
							{
							{
							State = 154; Match(NEWLINE);
							}
							}
							State = 157;
							_errHandler.Sync(this);
							_la = _input.La(1);
						} while ( _la==NEWLINE );
						State = 159; asmline();
						}
						} 
					}
					State = 164;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				}
				State = 168;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 165; Match(NEWLINE);
					}
					}
					State = 170;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 171; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmlineContext : ParserRuleContext {
		public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public MacroInvocationContext macroInvocation() {
			return GetRuleContext<MacroInvocationContext>(0);
		}
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public AsmlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAsmline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAsmline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsmline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsmlineContext asmline() {
		AsmlineContext _localctx = new AsmlineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_asmline);
		int _la;
		try {
			State = 197;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 175; label();
					}
					break;
				}
				State = 183;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ASSIGN:
				case ORGPRAG:
				case ENTPRAG:
				case XENTPRAG:
				case EQUPRAG:
				case VARPRAG:
				case DISPRAG:
				case DBPRAG:
				case DWPRAG:
				case DMPRAG:
				case SKIPRAG:
				case EXTPRAG:
				case DSPRAG:
				case FBPRAG:
				case FWPRAG:
				case MODPRAG:
				case ALGPRAG:
				case TRACE:
				case TRACEHEX:
				case RNDSEED:
				case DGPRAG:
					{
					State = 178; pragma();
					}
					break;
				case NOP:
				case RLCA:
				case RRCA:
				case RLA:
				case RRA:
				case DAA:
				case CPL:
				case SCF:
				case CCF:
				case HALT:
				case RET:
				case EXX:
				case DI:
				case EI:
				case NEG:
				case RETN:
				case RETI:
				case RLD:
				case RRD:
				case LDI:
				case CPI:
				case INI:
				case OUTI:
				case LDD:
				case CPD:
				case IND:
				case OUTD:
				case LDIR:
				case CPIR:
				case INIR:
				case OTIR:
				case LDDR:
				case CPDR:
				case INDR:
				case OTDR:
				case LD:
				case INC:
				case DEC:
				case EX:
				case ADD:
				case ADC:
				case SUB:
				case SBC:
				case AND:
				case XOR:
				case OR:
				case CP:
				case DJNZ:
				case JR:
				case JP:
				case CALL:
				case RST:
				case PUSH:
				case POP:
				case IN:
				case OUT:
				case IM:
				case RLC:
				case RRC:
				case RL:
				case RR:
				case SLA:
				case SRA:
				case SLL:
				case SRL:
				case BIT:
				case RES:
				case SET:
				case SWAPNIB:
				case MUL:
				case MIRROR:
				case TEST:
				case NEXTREG:
				case OUTINB:
				case LDIX:
				case LDIRX:
				case LDDX:
				case LDDRX:
				case PIXELDN:
				case PIXELAD:
				case SETAE:
				case LDPIRX:
				case LDIRSCALE:
					{
					State = 179; operation();
					}
					break;
				case LDBRAC:
					{
					State = 180; macroParam();
					}
					break;
				case MACRO:
				case ENDMACRO:
				case LOOP:
				case ENDLOOP:
				case REPEAT:
				case UNTIL:
				case WHILE:
				case ENDWHILE:
				case IFSTMT:
				case ELIF:
				case ELSESTMT:
				case ENDIFSTMT:
				case FOR:
				case FORNEXT:
				case NEXT:
				case BREAK:
				case CONTINUE:
					{
					State = 181; statement();
					}
					break;
				case IDENTIFIER:
					{
					State = 182; macroInvocation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 186;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 185; comment();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; directive();
				State = 190;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 189; comment();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 192; comment();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 193; label();
				State = 195;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 194; comment();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode COLON() { return GetToken(Z80AsmParser.COLON, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(IDENTIFIER);
			State = 201;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 200; Match(COLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(Z80AsmParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		public OrgPragmaContext orgPragma() {
			return GetRuleContext<OrgPragmaContext>(0);
		}
		public EntPragmaContext entPragma() {
			return GetRuleContext<EntPragmaContext>(0);
		}
		public XentPragmaContext xentPragma() {
			return GetRuleContext<XentPragmaContext>(0);
		}
		public DispPragmaContext dispPragma() {
			return GetRuleContext<DispPragmaContext>(0);
		}
		public EquPragmaContext equPragma() {
			return GetRuleContext<EquPragmaContext>(0);
		}
		public VarPragmaContext varPragma() {
			return GetRuleContext<VarPragmaContext>(0);
		}
		public DefbPragmaContext defbPragma() {
			return GetRuleContext<DefbPragmaContext>(0);
		}
		public DefwPragmaContext defwPragma() {
			return GetRuleContext<DefwPragmaContext>(0);
		}
		public DefmPragmaContext defmPragma() {
			return GetRuleContext<DefmPragmaContext>(0);
		}
		public SkipPragmaContext skipPragma() {
			return GetRuleContext<SkipPragmaContext>(0);
		}
		public ExternPragmaContext externPragma() {
			return GetRuleContext<ExternPragmaContext>(0);
		}
		public DefsPragmaContext defsPragma() {
			return GetRuleContext<DefsPragmaContext>(0);
		}
		public FillbPragmaContext fillbPragma() {
			return GetRuleContext<FillbPragmaContext>(0);
		}
		public FillwPragmaContext fillwPragma() {
			return GetRuleContext<FillwPragmaContext>(0);
		}
		public ModelPragmaContext modelPragma() {
			return GetRuleContext<ModelPragmaContext>(0);
		}
		public AlignPragmaContext alignPragma() {
			return GetRuleContext<AlignPragmaContext>(0);
		}
		public TracePragmaContext tracePragma() {
			return GetRuleContext<TracePragmaContext>(0);
		}
		public RndSeedPragmaContext rndSeedPragma() {
			return GetRuleContext<RndSeedPragmaContext>(0);
		}
		public DefgPragmaContext defgPragma() {
			return GetRuleContext<DefgPragmaContext>(0);
		}
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_pragma);
		try {
			State = 224;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ORGPRAG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205; orgPragma();
				}
				break;
			case ENTPRAG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206; entPragma();
				}
				break;
			case XENTPRAG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 207; xentPragma();
				}
				break;
			case DISPRAG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 208; dispPragma();
				}
				break;
			case EQUPRAG:
				EnterOuterAlt(_localctx, 5);
				{
				State = 209; equPragma();
				}
				break;
			case ASSIGN:
			case VARPRAG:
				EnterOuterAlt(_localctx, 6);
				{
				State = 210; varPragma();
				}
				break;
			case DBPRAG:
				EnterOuterAlt(_localctx, 7);
				{
				State = 211; defbPragma();
				}
				break;
			case DWPRAG:
				EnterOuterAlt(_localctx, 8);
				{
				State = 212; defwPragma();
				}
				break;
			case DMPRAG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 213; defmPragma();
				}
				break;
			case SKIPRAG:
				EnterOuterAlt(_localctx, 10);
				{
				State = 214; skipPragma();
				}
				break;
			case EXTPRAG:
				EnterOuterAlt(_localctx, 11);
				{
				State = 215; externPragma();
				}
				break;
			case DSPRAG:
				EnterOuterAlt(_localctx, 12);
				{
				State = 216; defsPragma();
				}
				break;
			case FBPRAG:
				EnterOuterAlt(_localctx, 13);
				{
				State = 217; fillbPragma();
				}
				break;
			case FWPRAG:
				EnterOuterAlt(_localctx, 14);
				{
				State = 218; fillwPragma();
				}
				break;
			case MODPRAG:
				EnterOuterAlt(_localctx, 15);
				{
				State = 219; modelPragma();
				}
				break;
			case ALGPRAG:
				EnterOuterAlt(_localctx, 16);
				{
				State = 220; alignPragma();
				}
				break;
			case TRACE:
			case TRACEHEX:
				EnterOuterAlt(_localctx, 17);
				{
				State = 221; tracePragma();
				}
				break;
			case RNDSEED:
				EnterOuterAlt(_localctx, 18);
				{
				State = 222; rndSeedPragma();
				}
				break;
			case DGPRAG:
				EnterOuterAlt(_localctx, 19);
				{
				State = 223; defgPragma();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode IFDEF() { return GetToken(Z80AsmParser.IFDEF, 0); }
		public ITerminalNode IFNDEF() { return GetToken(Z80AsmParser.IFNDEF, 0); }
		public ITerminalNode DEFINE() { return GetToken(Z80AsmParser.DEFINE, 0); }
		public ITerminalNode UNDEF() { return GetToken(Z80AsmParser.UNDEF, 0); }
		public ITerminalNode IFMOD() { return GetToken(Z80AsmParser.IFMOD, 0); }
		public ITerminalNode IFNMOD() { return GetToken(Z80AsmParser.IFNMOD, 0); }
		public ITerminalNode ENDIF() { return GetToken(Z80AsmParser.ENDIF, 0); }
		public ITerminalNode ELSE() { return GetToken(Z80AsmParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(Z80AsmParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode INCLUDE() { return GetToken(Z80AsmParser.INCLUDE, 0); }
		public ITerminalNode STRING() { return GetToken(Z80AsmParser.STRING, 0); }
		public ITerminalNode FSTRING() { return GetToken(Z80AsmParser.FSTRING, 0); }
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_directive);
		int _la;
		try {
			State = 234;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IFDEF:
			case IFNDEF:
			case DEFINE:
			case UNDEF:
			case IFMOD:
			case IFNMOD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226;
				_la = _input.La(1);
				if ( !(((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (IFDEF - 145)) | (1L << (IFNDEF - 145)) | (1L << (DEFINE - 145)) | (1L << (UNDEF - 145)) | (1L << (IFMOD - 145)) | (1L << (IFNMOD - 145)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 227; Match(IDENTIFIER);
				}
				break;
			case ENDIF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228; Match(ENDIF);
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 229; Match(ELSE);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 230; Match(IF);
				State = 231; expr();
				}
				break;
			case INCLUDE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 232; Match(INCLUDE);
				State = 233;
				_la = _input.La(1);
				if ( !(_la==STRING || _la==FSTRING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public MacroStatementContext macroStatement() {
			return GetRuleContext<MacroStatementContext>(0);
		}
		public MacroEndMarkerContext macroEndMarker() {
			return GetRuleContext<MacroEndMarkerContext>(0);
		}
		public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		public LoopEndMarkerContext loopEndMarker() {
			return GetRuleContext<LoopEndMarkerContext>(0);
		}
		public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		public UntilStatementContext untilStatement() {
			return GetRuleContext<UntilStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public WhileEndMarkerContext whileEndMarker() {
			return GetRuleContext<WhileEndMarkerContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElifStatementContext elifStatement() {
			return GetRuleContext<ElifStatementContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public EndifStatementContext endifStatement() {
			return GetRuleContext<EndifStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public NextStatementContext nextStatement() {
			return GetRuleContext<NextStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 252;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case MACRO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236; macroStatement();
				}
				break;
			case ENDMACRO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237; macroEndMarker();
				}
				break;
			case LOOP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 238; loopStatement();
				}
				break;
			case ENDLOOP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 239; loopEndMarker();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 240; repeatStatement();
				}
				break;
			case UNTIL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 241; untilStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 242; whileStatement();
				}
				break;
			case ENDWHILE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 243; whileEndMarker();
				}
				break;
			case IFSTMT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 244; ifStatement();
				}
				break;
			case ELIF:
				EnterOuterAlt(_localctx, 10);
				{
				State = 245; elifStatement();
				}
				break;
			case ELSESTMT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 246; elseStatement();
				}
				break;
			case ENDIFSTMT:
				EnterOuterAlt(_localctx, 12);
				{
				State = 247; endifStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 13);
				{
				State = 248; forStatement();
				}
				break;
			case FORNEXT:
			case NEXT:
				EnterOuterAlt(_localctx, 14);
				{
				State = 249; nextStatement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 15);
				{
				State = 250; breakStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 251; continueStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroStatementContext : ParserRuleContext {
		public ITerminalNode MACRO() { return GetToken(Z80AsmParser.MACRO, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(Z80AsmParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Z80AsmParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public MacroStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroStatementContext macroStatement() {
		MacroStatementContext _localctx = new MacroStatementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_macroStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(MACRO);
			State = 255; Match(LPAR);
			State = 264;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 256; Match(IDENTIFIER);
				State = 261;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 257; Match(COMMA);
					State = 258; Match(IDENTIFIER);
					}
					}
					State = 263;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 266; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDMACRO() { return GetToken(Z80AsmParser.ENDMACRO, 0); }
		public MacroEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroEndMarkerContext macroEndMarker() {
		MacroEndMarkerContext _localctx = new MacroEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_macroEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(ENDMACRO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		public ITerminalNode LOOP() { return GetToken(Z80AsmParser.LOOP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; Match(LOOP);
			State = 271; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDLOOP() { return GetToken(Z80AsmParser.ENDLOOP, 0); }
		public LoopEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLoopEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLoopEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopEndMarkerContext loopEndMarker() {
		LoopEndMarkerContext _localctx = new LoopEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_loopEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(ENDLOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		public ITerminalNode REPEAT() { return GetToken(Z80AsmParser.REPEAT, 0); }
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(REPEAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilStatementContext : ParserRuleContext {
		public ITerminalNode UNTIL() { return GetToken(Z80AsmParser.UNTIL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UntilStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterUntilStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitUntilStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilStatementContext untilStatement() {
		UntilStatementContext _localctx = new UntilStatementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_untilStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(UNTIL);
			State = 278; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(Z80AsmParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; Match(WHILE);
			State = 281; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDWHILE() { return GetToken(Z80AsmParser.ENDWHILE, 0); }
		public WhileEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterWhileEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitWhileEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileEndMarkerContext whileEndMarker() {
		WhileEndMarkerContext _localctx = new WhileEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_whileEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(ENDWHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode IFSTMT() { return GetToken(Z80AsmParser.IFSTMT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; Match(IFSTMT);
			State = 286; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifStatementContext : ParserRuleContext {
		public ITerminalNode ELIF() { return GetToken(Z80AsmParser.ELIF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ElifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterElifStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitElifStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifStatementContext elifStatement() {
		ElifStatementContext _localctx = new ElifStatementContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_elifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(ELIF);
			State = 289; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ITerminalNode ELSESTMT() { return GetToken(Z80AsmParser.ELSESTMT, 0); }
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; Match(ELSESTMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndifStatementContext : ParserRuleContext {
		public ITerminalNode ENDIFSTMT() { return GetToken(Z80AsmParser.ENDIFSTMT, 0); }
		public EndifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEndifStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEndifStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndifStatementContext endifStatement() {
		EndifStatementContext _localctx = new EndifStatementContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_endifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(ENDIFSTMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(Z80AsmParser.FOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(Z80AsmParser.ASSIGN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TO() { return GetToken(Z80AsmParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(Z80AsmParser.STEP, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(FOR);
			State = 296; Match(IDENTIFIER);
			State = 297; Match(ASSIGN);
			State = 298; expr();
			State = 299; Match(TO);
			State = 300; expr();
			State = 303;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 301; Match(STEP);
				State = 302; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextStatementContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(Z80AsmParser.NEXT, 0); }
		public ITerminalNode FORNEXT() { return GetToken(Z80AsmParser.FORNEXT, 0); }
		public NextStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterNextStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitNextStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextStatementContext nextStatement() {
		NextStatementContext _localctx = new NextStatementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_nextStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			_la = _input.La(1);
			if ( !(_la==FORNEXT || _la==NEXT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(Z80AsmParser.BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(Z80AsmParser.CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroInvocationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public MacroInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroInvocationContext macroInvocation() {
		MacroInvocationContext _localctx = new MacroInvocationContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_macroInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(IDENTIFIER);
			State = 312; Match(LPAR);
			State = 321;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LSBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << LDBRAC) | (1L << EXCLM))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (HEXNUM - 194)) | (1L << (BINNUM - 194)) | (1L << (DECNUM - 194)) | (1L << (REALNUM - 194)) | (1L << (CHAR - 194)) | (1L << (STRING - 194)) | (1L << (BOOLLIT - 194)) | (1L << (IDENTIFIER - 194)) | (1L << (CURADDR - 194)) | (1L << (CURCNT - 194)))) != 0)) {
				{
				State = 313; expr();
				State = 318;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 314; Match(COMMA);
					State = 315; expr();
					}
					}
					State = 320;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 323; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrgPragmaContext : ParserRuleContext {
		public ITerminalNode ORGPRAG() { return GetToken(Z80AsmParser.ORGPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OrgPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orgPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOrgPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOrgPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrgPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrgPragmaContext orgPragma() {
		OrgPragmaContext _localctx = new OrgPragmaContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_orgPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; Match(ORGPRAG);
			State = 326; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntPragmaContext : ParserRuleContext {
		public ITerminalNode ENTPRAG() { return GetToken(Z80AsmParser.ENTPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EntPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEntPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEntPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntPragmaContext entPragma() {
		EntPragmaContext _localctx = new EntPragmaContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_entPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(ENTPRAG);
			State = 329; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XentPragmaContext : ParserRuleContext {
		public ITerminalNode XENTPRAG() { return GetToken(Z80AsmParser.XENTPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public XentPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xentPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterXentPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitXentPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXentPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XentPragmaContext xentPragma() {
		XentPragmaContext _localctx = new XentPragmaContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_xentPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; Match(XENTPRAG);
			State = 332; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DispPragmaContext : ParserRuleContext {
		public ITerminalNode DISPRAG() { return GetToken(Z80AsmParser.DISPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DispPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDispPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDispPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDispPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DispPragmaContext dispPragma() {
		DispPragmaContext _localctx = new DispPragmaContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_dispPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; Match(DISPRAG);
			State = 335; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquPragmaContext : ParserRuleContext {
		public ITerminalNode EQUPRAG() { return GetToken(Z80AsmParser.EQUPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EquPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEquPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEquPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquPragmaContext equPragma() {
		EquPragmaContext _localctx = new EquPragmaContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_equPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(EQUPRAG);
			State = 338; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarPragmaContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode VARPRAG() { return GetToken(Z80AsmParser.VARPRAG, 0); }
		public ITerminalNode ASSIGN() { return GetToken(Z80AsmParser.ASSIGN, 0); }
		public VarPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterVarPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitVarPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarPragmaContext varPragma() {
		VarPragmaContext _localctx = new VarPragmaContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_varPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			_la = _input.La(1);
			if ( !(_la==ASSIGN || _la==VARPRAG) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 341; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefbPragmaContext : ParserRuleContext {
		public ITerminalNode DBPRAG() { return GetToken(Z80AsmParser.DBPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public DefbPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defbPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefbPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefbPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefbPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefbPragmaContext defbPragma() {
		DefbPragmaContext _localctx = new DefbPragmaContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_defbPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(DBPRAG);
			State = 344; expr();
			State = 349;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 345; Match(COMMA);
				State = 346; expr();
				}
				}
				State = 351;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefwPragmaContext : ParserRuleContext {
		public ITerminalNode DWPRAG() { return GetToken(Z80AsmParser.DWPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public DefwPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defwPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefwPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefwPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefwPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefwPragmaContext defwPragma() {
		DefwPragmaContext _localctx = new DefwPragmaContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_defwPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; Match(DWPRAG);
			State = 353; expr();
			State = 358;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 354; Match(COMMA);
				State = 355; expr();
				}
				}
				State = 360;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefmPragmaContext : ParserRuleContext {
		public ITerminalNode DMPRAG() { return GetToken(Z80AsmParser.DMPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefmPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defmPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefmPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefmPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefmPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefmPragmaContext defmPragma() {
		DefmPragmaContext _localctx = new DefmPragmaContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_defmPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(DMPRAG);
			State = 362; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipPragmaContext : ParserRuleContext {
		public ITerminalNode SKIPRAG() { return GetToken(Z80AsmParser.SKIPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public SkipPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skipPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterSkipPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitSkipPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipPragmaContext skipPragma() {
		SkipPragmaContext _localctx = new SkipPragmaContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_skipPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(SKIPRAG);
			State = 365; expr();
			State = 368;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 366; Match(COMMA);
				State = 367; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternPragmaContext : ParserRuleContext {
		public ITerminalNode EXTPRAG() { return GetToken(Z80AsmParser.EXTPRAG, 0); }
		public ExternPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterExternPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitExternPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternPragmaContext externPragma() {
		ExternPragmaContext _localctx = new ExternPragmaContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_externPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; Match(EXTPRAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefsPragmaContext : ParserRuleContext {
		public ITerminalNode DSPRAG() { return GetToken(Z80AsmParser.DSPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefsPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defsPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefsPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefsPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefsPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefsPragmaContext defsPragma() {
		DefsPragmaContext _localctx = new DefsPragmaContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_defsPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; Match(DSPRAG);
			State = 373; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillbPragmaContext : ParserRuleContext {
		public ITerminalNode FBPRAG() { return GetToken(Z80AsmParser.FBPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public FillbPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillbPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFillbPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFillbPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillbPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillbPragmaContext fillbPragma() {
		FillbPragmaContext _localctx = new FillbPragmaContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_fillbPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; Match(FBPRAG);
			State = 376; expr();
			State = 377; Match(COMMA);
			State = 378; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillwPragmaContext : ParserRuleContext {
		public ITerminalNode FWPRAG() { return GetToken(Z80AsmParser.FWPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public FillwPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillwPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFillwPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFillwPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillwPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillwPragmaContext fillwPragma() {
		FillwPragmaContext _localctx = new FillwPragmaContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_fillwPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(FWPRAG);
			State = 381; expr();
			State = 382; Match(COMMA);
			State = 383; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelPragmaContext : ParserRuleContext {
		public ITerminalNode MODPRAG() { return GetToken(Z80AsmParser.MODPRAG, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode NEXT() { return GetToken(Z80AsmParser.NEXT, 0); }
		public ModelPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterModelPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitModelPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelPragmaContext modelPragma() {
		ModelPragmaContext _localctx = new ModelPragmaContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_modelPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385; Match(MODPRAG);
			State = 386;
			_la = _input.La(1);
			if ( !(_la==NEXT || _la==IDENTIFIER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignPragmaContext : ParserRuleContext {
		public ITerminalNode ALGPRAG() { return GetToken(Z80AsmParser.ALGPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AlignPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAlignPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAlignPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlignPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlignPragmaContext alignPragma() {
		AlignPragmaContext _localctx = new AlignPragmaContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_alignPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; Match(ALGPRAG);
			State = 390;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LSBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << LDBRAC) | (1L << EXCLM))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (HEXNUM - 194)) | (1L << (BINNUM - 194)) | (1L << (DECNUM - 194)) | (1L << (REALNUM - 194)) | (1L << (CHAR - 194)) | (1L << (STRING - 194)) | (1L << (BOOLLIT - 194)) | (1L << (IDENTIFIER - 194)) | (1L << (CURADDR - 194)) | (1L << (CURCNT - 194)))) != 0)) {
				{
				State = 389; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TracePragmaContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TRACE() { return GetToken(Z80AsmParser.TRACE, 0); }
		public ITerminalNode TRACEHEX() { return GetToken(Z80AsmParser.TRACEHEX, 0); }
		public TracePragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tracePragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTracePragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTracePragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTracePragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TracePragmaContext tracePragma() {
		TracePragmaContext _localctx = new TracePragmaContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_tracePragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			_la = _input.La(1);
			if ( !(_la==TRACE || _la==TRACEHEX) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 393; expr();
			State = 398;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 394; Match(COMMA);
				State = 395; expr();
				}
				}
				State = 400;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RndSeedPragmaContext : ParserRuleContext {
		public ITerminalNode RNDSEED() { return GetToken(Z80AsmParser.RNDSEED, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RndSeedPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rndSeedPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRndSeedPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRndSeedPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRndSeedPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RndSeedPragmaContext rndSeedPragma() {
		RndSeedPragmaContext _localctx = new RndSeedPragmaContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_rndSeedPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(RNDSEED);
			State = 403;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LSBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << LDBRAC) | (1L << EXCLM))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (HEXNUM - 194)) | (1L << (BINNUM - 194)) | (1L << (DECNUM - 194)) | (1L << (REALNUM - 194)) | (1L << (CHAR - 194)) | (1L << (STRING - 194)) | (1L << (BOOLLIT - 194)) | (1L << (IDENTIFIER - 194)) | (1L << (CURADDR - 194)) | (1L << (CURCNT - 194)))) != 0)) {
				{
				State = 402; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefgPragmaContext : ParserRuleContext {
		public ITerminalNode DGPRAG() { return GetToken(Z80AsmParser.DGPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefgPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defgPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefgPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefgPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefgPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefgPragmaContext defgPragma() {
		DefgPragmaContext _localctx = new DefgPragmaContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_defgPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405; Match(DGPRAG);
			State = 406; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public TrivialOperationContext trivialOperation() {
			return GetRuleContext<TrivialOperationContext>(0);
		}
		public CompoundOperationContext compoundOperation() {
			return GetRuleContext<CompoundOperationContext>(0);
		}
		public TrivialNextOperationContext trivialNextOperation() {
			return GetRuleContext<TrivialNextOperationContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_operation);
		try {
			State = 411;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NOP:
			case RLCA:
			case RRCA:
			case RLA:
			case RRA:
			case DAA:
			case CPL:
			case SCF:
			case CCF:
			case HALT:
			case EXX:
			case DI:
			case EI:
			case NEG:
			case RETN:
			case RETI:
			case RLD:
			case RRD:
			case LDI:
			case CPI:
			case INI:
			case OUTI:
			case LDD:
			case CPD:
			case IND:
			case OUTD:
			case LDIR:
			case CPIR:
			case INIR:
			case OTIR:
			case LDDR:
			case CPDR:
			case INDR:
			case OTDR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408; trivialOperation();
				}
				break;
			case RET:
			case LD:
			case INC:
			case DEC:
			case EX:
			case ADD:
			case ADC:
			case SUB:
			case SBC:
			case AND:
			case XOR:
			case OR:
			case CP:
			case DJNZ:
			case JR:
			case JP:
			case CALL:
			case RST:
			case PUSH:
			case POP:
			case IN:
			case OUT:
			case IM:
			case RLC:
			case RRC:
			case RL:
			case RR:
			case SLA:
			case SRA:
			case SLL:
			case SRL:
			case BIT:
			case RES:
			case SET:
			case MIRROR:
			case TEST:
			case NEXTREG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409; compoundOperation();
				}
				break;
			case SWAPNIB:
			case MUL:
			case OUTINB:
			case LDIX:
			case LDIRX:
			case LDDX:
			case LDDRX:
			case PIXELDN:
			case PIXELAD:
			case SETAE:
			case LDPIRX:
			case LDIRSCALE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 410; trivialNextOperation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrivialOperationContext : ParserRuleContext {
		public ITerminalNode NOP() { return GetToken(Z80AsmParser.NOP, 0); }
		public ITerminalNode RLCA() { return GetToken(Z80AsmParser.RLCA, 0); }
		public ITerminalNode RRCA() { return GetToken(Z80AsmParser.RRCA, 0); }
		public ITerminalNode RLA() { return GetToken(Z80AsmParser.RLA, 0); }
		public ITerminalNode RRA() { return GetToken(Z80AsmParser.RRA, 0); }
		public ITerminalNode DAA() { return GetToken(Z80AsmParser.DAA, 0); }
		public ITerminalNode CPL() { return GetToken(Z80AsmParser.CPL, 0); }
		public ITerminalNode SCF() { return GetToken(Z80AsmParser.SCF, 0); }
		public ITerminalNode CCF() { return GetToken(Z80AsmParser.CCF, 0); }
		public ITerminalNode HALT() { return GetToken(Z80AsmParser.HALT, 0); }
		public ITerminalNode EXX() { return GetToken(Z80AsmParser.EXX, 0); }
		public ITerminalNode DI() { return GetToken(Z80AsmParser.DI, 0); }
		public ITerminalNode EI() { return GetToken(Z80AsmParser.EI, 0); }
		public ITerminalNode NEG() { return GetToken(Z80AsmParser.NEG, 0); }
		public ITerminalNode RETN() { return GetToken(Z80AsmParser.RETN, 0); }
		public ITerminalNode RETI() { return GetToken(Z80AsmParser.RETI, 0); }
		public ITerminalNode RLD() { return GetToken(Z80AsmParser.RLD, 0); }
		public ITerminalNode RRD() { return GetToken(Z80AsmParser.RRD, 0); }
		public ITerminalNode LDI() { return GetToken(Z80AsmParser.LDI, 0); }
		public ITerminalNode CPI() { return GetToken(Z80AsmParser.CPI, 0); }
		public ITerminalNode INI() { return GetToken(Z80AsmParser.INI, 0); }
		public ITerminalNode OUTI() { return GetToken(Z80AsmParser.OUTI, 0); }
		public ITerminalNode LDD() { return GetToken(Z80AsmParser.LDD, 0); }
		public ITerminalNode CPD() { return GetToken(Z80AsmParser.CPD, 0); }
		public ITerminalNode IND() { return GetToken(Z80AsmParser.IND, 0); }
		public ITerminalNode OUTD() { return GetToken(Z80AsmParser.OUTD, 0); }
		public ITerminalNode LDIR() { return GetToken(Z80AsmParser.LDIR, 0); }
		public ITerminalNode CPIR() { return GetToken(Z80AsmParser.CPIR, 0); }
		public ITerminalNode INIR() { return GetToken(Z80AsmParser.INIR, 0); }
		public ITerminalNode OTIR() { return GetToken(Z80AsmParser.OTIR, 0); }
		public ITerminalNode LDDR() { return GetToken(Z80AsmParser.LDDR, 0); }
		public ITerminalNode CPDR() { return GetToken(Z80AsmParser.CPDR, 0); }
		public ITerminalNode INDR() { return GetToken(Z80AsmParser.INDR, 0); }
		public ITerminalNode OTDR() { return GetToken(Z80AsmParser.OTDR, 0); }
		public TrivialOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trivialOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTrivialOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTrivialOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrivialOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrivialOperationContext trivialOperation() {
		TrivialOperationContext _localctx = new TrivialOperationContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_trivialOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			_la = _input.La(1);
			if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (NOP - 61)) | (1L << (RLCA - 61)) | (1L << (RRCA - 61)) | (1L << (RLA - 61)) | (1L << (RRA - 61)) | (1L << (DAA - 61)) | (1L << (CPL - 61)) | (1L << (SCF - 61)) | (1L << (CCF - 61)) | (1L << (HALT - 61)) | (1L << (EXX - 61)) | (1L << (DI - 61)) | (1L << (EI - 61)) | (1L << (NEG - 61)) | (1L << (RETN - 61)) | (1L << (RETI - 61)) | (1L << (RLD - 61)) | (1L << (RRD - 61)) | (1L << (LDI - 61)) | (1L << (CPI - 61)) | (1L << (INI - 61)) | (1L << (OUTI - 61)) | (1L << (LDD - 61)) | (1L << (CPD - 61)) | (1L << (IND - 61)) | (1L << (OUTD - 61)) | (1L << (LDIR - 61)) | (1L << (CPIR - 61)) | (1L << (INIR - 61)) | (1L << (OTIR - 61)) | (1L << (LDDR - 61)) | (1L << (CPDR - 61)) | (1L << (INDR - 61)) | (1L << (OTDR - 61)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundOperationContext : ParserRuleContext {
		public ITerminalNode LD() { return GetToken(Z80AsmParser.LD, 0); }
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public ITerminalNode INC() { return GetToken(Z80AsmParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(Z80AsmParser.DEC, 0); }
		public ITerminalNode EX() { return GetToken(Z80AsmParser.EX, 0); }
		public ITerminalNode ADD() { return GetToken(Z80AsmParser.ADD, 0); }
		public ITerminalNode ADC() { return GetToken(Z80AsmParser.ADC, 0); }
		public ITerminalNode SUB() { return GetToken(Z80AsmParser.SUB, 0); }
		public ITerminalNode SBC() { return GetToken(Z80AsmParser.SBC, 0); }
		public ITerminalNode AND() { return GetToken(Z80AsmParser.AND, 0); }
		public ITerminalNode XOR() { return GetToken(Z80AsmParser.XOR, 0); }
		public ITerminalNode OR() { return GetToken(Z80AsmParser.OR, 0); }
		public ITerminalNode CP() { return GetToken(Z80AsmParser.CP, 0); }
		public ITerminalNode DJNZ() { return GetToken(Z80AsmParser.DJNZ, 0); }
		public ITerminalNode JR() { return GetToken(Z80AsmParser.JR, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode JP() { return GetToken(Z80AsmParser.JP, 0); }
		public ITerminalNode CALL() { return GetToken(Z80AsmParser.CALL, 0); }
		public ITerminalNode RET() { return GetToken(Z80AsmParser.RET, 0); }
		public ITerminalNode RST() { return GetToken(Z80AsmParser.RST, 0); }
		public ITerminalNode PUSH() { return GetToken(Z80AsmParser.PUSH, 0); }
		public ITerminalNode POP() { return GetToken(Z80AsmParser.POP, 0); }
		public ITerminalNode IN() { return GetToken(Z80AsmParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(Z80AsmParser.OUT, 0); }
		public ITerminalNode IM() { return GetToken(Z80AsmParser.IM, 0); }
		public ITerminalNode RLC() { return GetToken(Z80AsmParser.RLC, 0); }
		public ITerminalNode RRC() { return GetToken(Z80AsmParser.RRC, 0); }
		public ITerminalNode RL() { return GetToken(Z80AsmParser.RL, 0); }
		public ITerminalNode RR() { return GetToken(Z80AsmParser.RR, 0); }
		public ITerminalNode SLA() { return GetToken(Z80AsmParser.SLA, 0); }
		public ITerminalNode SRA() { return GetToken(Z80AsmParser.SRA, 0); }
		public ITerminalNode SLL() { return GetToken(Z80AsmParser.SLL, 0); }
		public ITerminalNode SRL() { return GetToken(Z80AsmParser.SRL, 0); }
		public ITerminalNode BIT() { return GetToken(Z80AsmParser.BIT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RES() { return GetToken(Z80AsmParser.RES, 0); }
		public ITerminalNode SET() { return GetToken(Z80AsmParser.SET, 0); }
		public ITerminalNode MIRROR() { return GetToken(Z80AsmParser.MIRROR, 0); }
		public ITerminalNode TEST() { return GetToken(Z80AsmParser.TEST, 0); }
		public ITerminalNode NEXTREG() { return GetToken(Z80AsmParser.NEXTREG, 0); }
		public CompoundOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCompoundOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCompoundOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundOperationContext compoundOperation() {
		CompoundOperationContext _localctx = new CompoundOperationContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_compoundOperation);
		int _la;
		try {
			State = 618;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 415; Match(LD);
				State = 416; operand();
				State = 417; Match(COMMA);
				State = 418; operand();
				}
				break;
			case INC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 420; Match(INC);
				State = 421; operand();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 422; Match(DEC);
				State = 423; operand();
				}
				break;
			case EX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 424; Match(EX);
				State = 425; operand();
				State = 426; Match(COMMA);
				State = 427; operand();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 429; Match(ADD);
				State = 430; operand();
				State = 431; Match(COMMA);
				State = 432; operand();
				}
				break;
			case ADC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 434; Match(ADC);
				State = 435; operand();
				State = 436; Match(COMMA);
				State = 437; operand();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 7);
				{
				State = 439; Match(SUB);
				State = 443;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					State = 440; operand();
					State = 441; Match(COMMA);
					}
					break;
				}
				State = 445; operand();
				}
				break;
			case SBC:
				EnterOuterAlt(_localctx, 8);
				{
				State = 446; Match(SBC);
				State = 447; operand();
				State = 448; Match(COMMA);
				State = 449; operand();
				}
				break;
			case AND:
				EnterOuterAlt(_localctx, 9);
				{
				State = 451; Match(AND);
				State = 455;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					State = 452; operand();
					State = 453; Match(COMMA);
					}
					break;
				}
				State = 457; operand();
				}
				break;
			case XOR:
				EnterOuterAlt(_localctx, 10);
				{
				State = 458; Match(XOR);
				State = 462;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					State = 459; operand();
					State = 460; Match(COMMA);
					}
					break;
				}
				State = 464; operand();
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 11);
				{
				State = 465; Match(OR);
				State = 469;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
				case 1:
					{
					State = 466; operand();
					State = 467; Match(COMMA);
					}
					break;
				}
				State = 471; operand();
				}
				break;
			case CP:
				EnterOuterAlt(_localctx, 12);
				{
				State = 472; Match(CP);
				State = 476;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
				case 1:
					{
					State = 473; operand();
					State = 474; Match(COMMA);
					}
					break;
				}
				State = 478; operand();
				}
				break;
			case DJNZ:
				EnterOuterAlt(_localctx, 13);
				{
				State = 479; Match(DJNZ);
				State = 480; operand();
				}
				break;
			case JR:
				EnterOuterAlt(_localctx, 14);
				{
				State = 481; Match(JR);
				State = 485;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
				case 1:
					{
					State = 482; condition();
					State = 483; Match(COMMA);
					}
					break;
				}
				State = 487; operand();
				}
				break;
			case JP:
				EnterOuterAlt(_localctx, 15);
				{
				State = 488; Match(JP);
				State = 492;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
				case 1:
					{
					State = 489; condition();
					State = 490; Match(COMMA);
					}
					break;
				}
				State = 494; operand();
				}
				break;
			case CALL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 495; Match(CALL);
				State = 499;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
				case 1:
					{
					State = 496; condition();
					State = 497; Match(COMMA);
					}
					break;
				}
				State = 501; operand();
				}
				break;
			case RET:
				EnterOuterAlt(_localctx, 17);
				{
				State = 502; Match(RET);
				State = 504;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << C) | (1L << Z) | (1L << NZ) | (1L << NC) | (1L << PO) | (1L << PE) | (1L << P) | (1L << M))) != 0)) {
					{
					State = 503; condition();
					}
				}

				}
				break;
			case RST:
				EnterOuterAlt(_localctx, 18);
				{
				State = 506; Match(RST);
				State = 507; operand();
				}
				break;
			case PUSH:
				EnterOuterAlt(_localctx, 19);
				{
				State = 508; Match(PUSH);
				State = 509; operand();
				}
				break;
			case POP:
				EnterOuterAlt(_localctx, 20);
				{
				State = 510; Match(POP);
				State = 511; operand();
				}
				break;
			case IN:
				EnterOuterAlt(_localctx, 21);
				{
				State = 512; Match(IN);
				State = 516;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					State = 513; operand();
					State = 514; Match(COMMA);
					}
					break;
				}
				State = 518; operand();
				}
				break;
			case OUT:
				EnterOuterAlt(_localctx, 22);
				{
				State = 519; Match(OUT);
				State = 523;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
				case 1:
					{
					State = 520; operand();
					State = 521; Match(COMMA);
					}
					break;
				}
				State = 525; operand();
				}
				break;
			case IM:
				EnterOuterAlt(_localctx, 23);
				{
				State = 526; Match(IM);
				State = 527; operand();
				}
				break;
			case RLC:
				EnterOuterAlt(_localctx, 24);
				{
				State = 528; Match(RLC);
				State = 532;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					State = 529; operand();
					State = 530; Match(COMMA);
					}
					break;
				}
				State = 534; operand();
				}
				break;
			case RRC:
				EnterOuterAlt(_localctx, 25);
				{
				State = 535; Match(RRC);
				State = 539;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					State = 536; operand();
					State = 537; Match(COMMA);
					}
					break;
				}
				State = 541; operand();
				}
				break;
			case RL:
				EnterOuterAlt(_localctx, 26);
				{
				State = 542; Match(RL);
				State = 546;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					State = 543; operand();
					State = 544; Match(COMMA);
					}
					break;
				}
				State = 548; operand();
				}
				break;
			case RR:
				EnterOuterAlt(_localctx, 27);
				{
				State = 549; Match(RR);
				State = 553;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					State = 550; operand();
					State = 551; Match(COMMA);
					}
					break;
				}
				State = 555; operand();
				}
				break;
			case SLA:
				EnterOuterAlt(_localctx, 28);
				{
				State = 556; Match(SLA);
				State = 560;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					State = 557; operand();
					State = 558; Match(COMMA);
					}
					break;
				}
				State = 562; operand();
				}
				break;
			case SRA:
				EnterOuterAlt(_localctx, 29);
				{
				State = 563; Match(SRA);
				State = 567;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					State = 564; operand();
					State = 565; Match(COMMA);
					}
					break;
				}
				State = 569; operand();
				}
				break;
			case SLL:
				EnterOuterAlt(_localctx, 30);
				{
				State = 570; Match(SLL);
				State = 574;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					State = 571; operand();
					State = 572; Match(COMMA);
					}
					break;
				}
				State = 576; operand();
				}
				break;
			case SRL:
				EnterOuterAlt(_localctx, 31);
				{
				State = 577; Match(SRL);
				State = 581;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					State = 578; operand();
					State = 579; Match(COMMA);
					}
					break;
				}
				State = 583; operand();
				}
				break;
			case BIT:
				EnterOuterAlt(_localctx, 32);
				{
				State = 584; Match(BIT);
				State = 585; expr();
				State = 586; Match(COMMA);
				State = 587; operand();
				}
				break;
			case RES:
				EnterOuterAlt(_localctx, 33);
				{
				State = 589; Match(RES);
				State = 590; expr();
				State = 591; Match(COMMA);
				State = 595;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					State = 592; operand();
					State = 593; Match(COMMA);
					}
					break;
				}
				State = 597; operand();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 34);
				{
				State = 599; Match(SET);
				State = 600; expr();
				State = 601; Match(COMMA);
				State = 605;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					State = 602; operand();
					State = 603; Match(COMMA);
					}
					break;
				}
				State = 607; operand();
				}
				break;
			case MIRROR:
				EnterOuterAlt(_localctx, 35);
				{
				State = 609; Match(MIRROR);
				State = 610; operand();
				}
				break;
			case TEST:
				EnterOuterAlt(_localctx, 36);
				{
				State = 611; Match(TEST);
				State = 612; operand();
				}
				break;
			case NEXTREG:
				EnterOuterAlt(_localctx, 37);
				{
				State = 613; Match(NEXTREG);
				State = 614; operand();
				State = 615; Match(COMMA);
				State = 616; operand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrivialNextOperationContext : ParserRuleContext {
		public ITerminalNode SWAPNIB() { return GetToken(Z80AsmParser.SWAPNIB, 0); }
		public ITerminalNode MUL() { return GetToken(Z80AsmParser.MUL, 0); }
		public ITerminalNode OUTINB() { return GetToken(Z80AsmParser.OUTINB, 0); }
		public ITerminalNode LDIX() { return GetToken(Z80AsmParser.LDIX, 0); }
		public ITerminalNode LDIRX() { return GetToken(Z80AsmParser.LDIRX, 0); }
		public ITerminalNode LDDX() { return GetToken(Z80AsmParser.LDDX, 0); }
		public ITerminalNode LDDRX() { return GetToken(Z80AsmParser.LDDRX, 0); }
		public ITerminalNode PIXELDN() { return GetToken(Z80AsmParser.PIXELDN, 0); }
		public ITerminalNode PIXELAD() { return GetToken(Z80AsmParser.PIXELAD, 0); }
		public ITerminalNode SETAE() { return GetToken(Z80AsmParser.SETAE, 0); }
		public ITerminalNode LDPIRX() { return GetToken(Z80AsmParser.LDPIRX, 0); }
		public ITerminalNode LDIRSCALE() { return GetToken(Z80AsmParser.LDIRSCALE, 0); }
		public TrivialNextOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trivialNextOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTrivialNextOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTrivialNextOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrivialNextOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrivialNextOperationContext trivialNextOperation() {
		TrivialNextOperationContext _localctx = new TrivialNextOperationContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_trivialNextOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			_la = _input.La(1);
			if ( !(((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SWAPNIB - 129)) | (1L << (MUL - 129)) | (1L << (OUTINB - 129)) | (1L << (LDIX - 129)) | (1L << (LDIRX - 129)) | (1L << (LDDX - 129)) | (1L << (LDDRX - 129)) | (1L << (PIXELDN - 129)) | (1L << (PIXELAD - 129)) | (1L << (SETAE - 129)) | (1L << (LDPIRX - 129)) | (1L << (LDIRSCALE - 129)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public Reg8Context reg8() {
			return GetRuleContext<Reg8Context>(0);
		}
		public Reg8IdxContext reg8Idx() {
			return GetRuleContext<Reg8IdxContext>(0);
		}
		public Reg8SpecContext reg8Spec() {
			return GetRuleContext<Reg8SpecContext>(0);
		}
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public Reg16SpecContext reg16Spec() {
			return GetRuleContext<Reg16SpecContext>(0);
		}
		public RegIndirectContext regIndirect() {
			return GetRuleContext<RegIndirectContext>(0);
		}
		public CPortContext cPort() {
			return GetRuleContext<CPortContext>(0);
		}
		public MemIndirectContext memIndirect() {
			return GetRuleContext<MemIndirectContext>(0);
		}
		public IndexedAddrContext indexedAddr() {
			return GetRuleContext<IndexedAddrContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_operand);
		try {
			State = 634;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 622; reg8();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 623; reg8Idx();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 624; reg8Spec();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 625; reg16();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 626; reg16Idx();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 627; reg16Spec();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 628; regIndirect();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 629; cPort();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 630; memIndirect();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 631; indexedAddr();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 632; expr();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 633; condition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8Context : ParserRuleContext {
		public ITerminalNode A() { return GetToken(Z80AsmParser.A, 0); }
		public ITerminalNode B() { return GetToken(Z80AsmParser.B, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode D() { return GetToken(Z80AsmParser.D, 0); }
		public ITerminalNode E() { return GetToken(Z80AsmParser.E, 0); }
		public ITerminalNode H() { return GetToken(Z80AsmParser.H, 0); }
		public ITerminalNode L() { return GetToken(Z80AsmParser.L, 0); }
		public Reg8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8Context reg8() {
		Reg8Context _localctx = new Reg8Context(_ctx, State);
		EnterRule(_localctx, 96, RULE_reg8);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A) | (1L << B) | (1L << C) | (1L << D) | (1L << E) | (1L << H) | (1L << L))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8IdxContext : ParserRuleContext {
		public ITerminalNode XL() { return GetToken(Z80AsmParser.XL, 0); }
		public ITerminalNode XH() { return GetToken(Z80AsmParser.XH, 0); }
		public ITerminalNode YL() { return GetToken(Z80AsmParser.YL, 0); }
		public ITerminalNode YH() { return GetToken(Z80AsmParser.YH, 0); }
		public Reg8IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8IdxContext reg8Idx() {
		Reg8IdxContext _localctx = new Reg8IdxContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_reg8Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << XL) | (1L << XH) | (1L << YL) | (1L << YH))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8SpecContext : ParserRuleContext {
		public ITerminalNode I() { return GetToken(Z80AsmParser.I, 0); }
		public ITerminalNode R() { return GetToken(Z80AsmParser.R, 0); }
		public Reg8SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8SpecContext reg8Spec() {
		Reg8SpecContext _localctx = new Reg8SpecContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_reg8Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			_la = _input.La(1);
			if ( !(_la==I || _la==R) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16Context : ParserRuleContext {
		public ITerminalNode BC() { return GetToken(Z80AsmParser.BC, 0); }
		public ITerminalNode DE() { return GetToken(Z80AsmParser.DE, 0); }
		public ITerminalNode HL() { return GetToken(Z80AsmParser.HL, 0); }
		public ITerminalNode SP() { return GetToken(Z80AsmParser.SP, 0); }
		public Reg16Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16Context reg16() {
		Reg16Context _localctx = new Reg16Context(_ctx, State);
		EnterRule(_localctx, 102, RULE_reg16);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BC) | (1L << DE) | (1L << HL) | (1L << SP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16IdxContext : ParserRuleContext {
		public ITerminalNode IX() { return GetToken(Z80AsmParser.IX, 0); }
		public ITerminalNode IY() { return GetToken(Z80AsmParser.IY, 0); }
		public Reg16IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16IdxContext reg16Idx() {
		Reg16IdxContext _localctx = new Reg16IdxContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_reg16Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			_la = _input.La(1);
			if ( !(_la==IX || _la==IY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16SpecContext : ParserRuleContext {
		public ITerminalNode AF() { return GetToken(Z80AsmParser.AF, 0); }
		public ITerminalNode AF_() { return GetToken(Z80AsmParser.AF_, 0); }
		public Reg16SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16SpecContext reg16Spec() {
		Reg16SpecContext _localctx = new Reg16SpecContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_reg16Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			_la = _input.La(1);
			if ( !(_la==AF || _la==AF_) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegIndirectContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public RegIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRegIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRegIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegIndirectContext regIndirect() {
		RegIndirectContext _localctx = new RegIndirectContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_regIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648; Match(LPAR);
			{
			State = 649; reg16();
			}
			State = 650; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CPortContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public CPortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cPort; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCPort(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCPort(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCPort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CPortContext cPort() {
		CPortContext _localctx = new CPortContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_cPort);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652; Match(LPAR);
			State = 653; Match(C);
			State = 654; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemIndirectContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public MemIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMemIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMemIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemIndirectContext memIndirect() {
		MemIndirectContext _localctx = new MemIndirectContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_memIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656; Match(LPAR);
			State = 657; expr();
			State = 658; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexedAddrContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(Z80AsmParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(Z80AsmParser.MINUS, 0); }
		public IndexedAddrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexedAddr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIndexedAddr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIndexedAddr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexedAddr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexedAddrContext indexedAddr() {
		IndexedAddrContext _localctx = new IndexedAddrContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_indexedAddr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660; Match(LPAR);
			State = 661; reg16Idx();
			State = 664;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 662;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 663; expr();
				}
			}

			State = 666; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ITerminalNode Z() { return GetToken(Z80AsmParser.Z, 0); }
		public ITerminalNode NZ() { return GetToken(Z80AsmParser.NZ, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode NC() { return GetToken(Z80AsmParser.NC, 0); }
		public ITerminalNode PO() { return GetToken(Z80AsmParser.PO, 0); }
		public ITerminalNode PE() { return GetToken(Z80AsmParser.PE, 0); }
		public ITerminalNode P() { return GetToken(Z80AsmParser.P, 0); }
		public ITerminalNode M() { return GetToken(Z80AsmParser.M, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << C) | (1L << Z) | (1L << NZ) | (1L << NC) | (1L << PO) | (1L << PE) | (1L << P) | (1L << M))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(Z80AsmParser.QMARK, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(Z80AsmParser.COLON, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670; orExpr();
			State = 676;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==QMARK) {
				{
				State = 671; Match(QMARK);
				State = 672; expr();
				State = 673; Match(COLON);
				State = 674; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		public XorExprContext[] xorExpr() {
			return GetRuleContexts<XorExprContext>();
		}
		public XorExprContext xorExpr(int i) {
			return GetRuleContext<XorExprContext>(i);
		}
		public ITerminalNode[] VBAR() { return GetTokens(Z80AsmParser.VBAR); }
		public ITerminalNode VBAR(int i) {
			return GetToken(Z80AsmParser.VBAR, i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_orExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678; xorExpr();
			State = 683;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==VBAR) {
				{
				{
				State = 679; Match(VBAR);
				State = 680; xorExpr();
				}
				}
				State = 685;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorExprContext : ParserRuleContext {
		public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		public ITerminalNode[] UPARR() { return GetTokens(Z80AsmParser.UPARR); }
		public ITerminalNode UPARR(int i) {
			return GetToken(Z80AsmParser.UPARR, i);
		}
		public XorExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterXorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitXorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorExprContext xorExpr() {
		XorExprContext _localctx = new XorExprContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_xorExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686; andExpr();
			State = 691;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==UPARR) {
				{
				{
				State = 687; Match(UPARR);
				State = 688; andExpr();
				}
				}
				State = 693;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		public EquExprContext[] equExpr() {
			return GetRuleContexts<EquExprContext>();
		}
		public EquExprContext equExpr(int i) {
			return GetRuleContext<EquExprContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(Z80AsmParser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(Z80AsmParser.AMP, i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694; equExpr();
			State = 699;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AMP) {
				{
				{
				State = 695; Match(AMP);
				State = 696; equExpr();
				}
				}
				State = 701;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquExprContext : ParserRuleContext {
		public RelExprContext[] relExpr() {
			return GetRuleContexts<RelExprContext>();
		}
		public RelExprContext relExpr(int i) {
			return GetRuleContext<RelExprContext>(i);
		}
		public ITerminalNode[] EQOP() { return GetTokens(Z80AsmParser.EQOP); }
		public ITerminalNode EQOP(int i) {
			return GetToken(Z80AsmParser.EQOP, i);
		}
		public ITerminalNode[] NEQOP() { return GetTokens(Z80AsmParser.NEQOP); }
		public ITerminalNode NEQOP(int i) {
			return GetToken(Z80AsmParser.NEQOP, i);
		}
		public EquExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEquExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEquExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquExprContext equExpr() {
		EquExprContext _localctx = new EquExprContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_equExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702; relExpr();
			State = 707;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==EQOP || _la==NEQOP) {
				{
				{
				State = 703;
				_la = _input.La(1);
				if ( !(_la==EQOP || _la==NEQOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 704; relExpr();
				}
				}
				State = 709;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		public ShiftExprContext[] shiftExpr() {
			return GetRuleContexts<ShiftExprContext>();
		}
		public ShiftExprContext shiftExpr(int i) {
			return GetRuleContext<ShiftExprContext>(i);
		}
		public ITerminalNode[] LTOP() { return GetTokens(Z80AsmParser.LTOP); }
		public ITerminalNode LTOP(int i) {
			return GetToken(Z80AsmParser.LTOP, i);
		}
		public ITerminalNode[] LTEOP() { return GetTokens(Z80AsmParser.LTEOP); }
		public ITerminalNode LTEOP(int i) {
			return GetToken(Z80AsmParser.LTEOP, i);
		}
		public ITerminalNode[] GTOP() { return GetTokens(Z80AsmParser.GTOP); }
		public ITerminalNode GTOP(int i) {
			return GetToken(Z80AsmParser.GTOP, i);
		}
		public ITerminalNode[] GTEOP() { return GetTokens(Z80AsmParser.GTEOP); }
		public ITerminalNode GTEOP(int i) {
			return GetToken(Z80AsmParser.GTEOP, i);
		}
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710; shiftExpr();
			State = 715;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP))) != 0)) {
				{
				{
				State = 711;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 712; shiftExpr();
				}
				}
				State = 717;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ITerminalNode[] LSHOP() { return GetTokens(Z80AsmParser.LSHOP); }
		public ITerminalNode LSHOP(int i) {
			return GetToken(Z80AsmParser.LSHOP, i);
		}
		public ITerminalNode[] RSHOP() { return GetTokens(Z80AsmParser.RSHOP); }
		public ITerminalNode RSHOP(int i) {
			return GetToken(Z80AsmParser.RSHOP, i);
		}
		public ShiftExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterShiftExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitShiftExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExprContext shiftExpr() {
		ShiftExprContext _localctx = new ShiftExprContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_shiftExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718; addExpr();
			State = 723;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LSHOP || _la==RSHOP) {
				{
				{
				State = 719;
				_la = _input.La(1);
				if ( !(_la==LSHOP || _la==RSHOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 720; addExpr();
				}
				}
				State = 725;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MultExprContext[] multExpr() {
			return GetRuleContexts<MultExprContext>();
		}
		public MultExprContext multExpr(int i) {
			return GetRuleContext<MultExprContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(Z80AsmParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(Z80AsmParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(Z80AsmParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(Z80AsmParser.MINUS, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_addExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726; multExpr();
			State = 731;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 727;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 728; multExpr();
				}
				}
				State = 733;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExprContext : ParserRuleContext {
		public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		public ITerminalNode[] MULOP() { return GetTokens(Z80AsmParser.MULOP); }
		public ITerminalNode MULOP(int i) {
			return GetToken(Z80AsmParser.MULOP, i);
		}
		public ITerminalNode[] DIVOP() { return GetTokens(Z80AsmParser.DIVOP); }
		public ITerminalNode DIVOP(int i) {
			return GetToken(Z80AsmParser.DIVOP, i);
		}
		public ITerminalNode[] MODOP() { return GetTokens(Z80AsmParser.MODOP); }
		public ITerminalNode MODOP(int i) {
			return GetToken(Z80AsmParser.MODOP, i);
		}
		public MultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExprContext multExpr() {
		MultExprContext _localctx = new MultExprContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_multExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; unaryExpr();
			State = 739;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULOP) | (1L << DIVOP) | (1L << MODOP))) != 0)) {
				{
				{
				State = 735;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULOP) | (1L << DIVOP) | (1L << MODOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 736; unaryExpr();
				}
				}
				State = 741;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public FunctionInvocationContext functionInvocation() {
			return GetRuleContext<FunctionInvocationContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(Z80AsmParser.PLUS, 0); }
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(Z80AsmParser.MINUS, 0); }
		public ITerminalNode TILDE() { return GetToken(Z80AsmParser.TILDE, 0); }
		public ITerminalNode EXCLM() { return GetToken(Z80AsmParser.EXCLM, 0); }
		public ITerminalNode LSBRAC() { return GetToken(Z80AsmParser.LSBRAC, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RSBRAC() { return GetToken(Z80AsmParser.RSBRAC, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		public SymbolExprContext symbolExpr() {
			return GetRuleContext<SymbolExprContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_unaryExpr);
		try {
			State = 762;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 742; functionInvocation();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 743; macroParam();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 744; Match(PLUS);
				State = 745; unaryExpr();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 746; Match(MINUS);
				State = 747; unaryExpr();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 748; Match(TILDE);
				State = 749; unaryExpr();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 750; Match(EXCLM);
				State = 751; unaryExpr();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 752; Match(LSBRAC);
				State = 753; expr();
				State = 754; Match(RSBRAC);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 756; Match(LPAR);
				State = 757; expr();
				State = 758; Match(RPAR);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 760; literalExpr();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 761; symbolExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionInvocationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public FunctionInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFunctionInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFunctionInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionInvocationContext functionInvocation() {
		FunctionInvocationContext _localctx = new FunctionInvocationContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_functionInvocation);
		int _la;
		try {
			State = 779;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 764; Match(IDENTIFIER);
				State = 765; Match(LPAR);
				State = 766; Match(RPAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 767; Match(IDENTIFIER);
				State = 768; Match(LPAR);
				State = 769; expr();
				State = 774;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 770; Match(COMMA);
					State = 771; expr();
					}
					}
					State = 776;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 777; Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExprContext : ParserRuleContext {
		public ITerminalNode HEXNUM() { return GetToken(Z80AsmParser.HEXNUM, 0); }
		public ITerminalNode DECNUM() { return GetToken(Z80AsmParser.DECNUM, 0); }
		public ITerminalNode CHAR() { return GetToken(Z80AsmParser.CHAR, 0); }
		public ITerminalNode BINNUM() { return GetToken(Z80AsmParser.BINNUM, 0); }
		public ITerminalNode REALNUM() { return GetToken(Z80AsmParser.REALNUM, 0); }
		public ITerminalNode BOOLLIT() { return GetToken(Z80AsmParser.BOOLLIT, 0); }
		public ITerminalNode STRING() { return GetToken(Z80AsmParser.STRING, 0); }
		public ITerminalNode CURADDR() { return GetToken(Z80AsmParser.CURADDR, 0); }
		public ITerminalNode CURCNT() { return GetToken(Z80AsmParser.CURCNT, 0); }
		public LiteralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExprContext literalExpr() {
		LiteralExprContext _localctx = new LiteralExprContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_literalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			_la = _input.La(1);
			if ( !(((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (HEXNUM - 194)) | (1L << (BINNUM - 194)) | (1L << (DECNUM - 194)) | (1L << (REALNUM - 194)) | (1L << (CHAR - 194)) | (1L << (STRING - 194)) | (1L << (BOOLLIT - 194)) | (1L << (CURADDR - 194)) | (1L << (CURCNT - 194)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolExprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public SymbolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterSymbolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitSymbolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolExprContext symbolExpr() {
		SymbolExprContext _localctx = new SymbolExprContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_symbolExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroParamContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public MacroParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroParamContext macroParam() {
		MacroParamContext _localctx = new MacroParamContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_macroParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785; Match(LDBRAC);
			State = 786; Match(IDENTIFIER);
			State = 787; Match(RDBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xD3\x318\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x3\x2\x3\x2\a\x2\x97\n\x2\f"+
		"\x2\xE\x2\x9A\v\x2\x3\x2\x3\x2\x6\x2\x9E\n\x2\r\x2\xE\x2\x9F\x3\x2\a\x2"+
		"\xA3\n\x2\f\x2\xE\x2\xA6\v\x2\x3\x2\a\x2\xA9\n\x2\f\x2\xE\x2\xAC\v\x2"+
		"\x3\x2\x3\x2\x5\x2\xB0\n\x2\x3\x3\x5\x3\xB3\n\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x5\x3\xBA\n\x3\x3\x3\x5\x3\xBD\n\x3\x3\x3\x3\x3\x5\x3\xC1\n"+
		"\x3\x3\x3\x3\x3\x3\x3\x5\x3\xC6\n\x3\x5\x3\xC8\n\x3\x3\x4\x3\x4\x5\x4"+
		"\xCC\n\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5"+
		"\x6\xE3\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\xED\n\a\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x5\b\xFF\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\a\t\x106\n\t\f\t\xE\t\x109"+
		"\v\t\x5\t\x10B\n\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3"+
		"\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3"+
		"\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x132\n\x15\x3\x16\x3\x16"+
		"\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19"+
		"\x13F\n\x19\f\x19\xE\x19\x142\v\x19\x5\x19\x144\n\x19\x3\x19\x3\x19\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 "+
		"\a \x15E\n \f \xE \x161\v \x3!\x3!\x3!\x3!\a!\x167\n!\f!\xE!\x16A\v!\x3"+
		"\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x5#\x173\n#\x3$\x3$\x3%\x3%\x3%\x3&\x3&\x3"+
		"&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3)\x3)\x5)\x189\n)\x3"+
		"*\x3*\x3*\x3*\a*\x18F\n*\f*\xE*\x192\v*\x3+\x3+\x5+\x196\n+\x3,\x3,\x3"+
		",\x3-\x3-\x3-\x5-\x19E\n-\x3.\x3.\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/"+
		"\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3"+
		"/\x3/\x5/\x1BE\n/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x1CA\n/"+
		"\x3/\x3/\x3/\x3/\x3/\x5/\x1D1\n/\x3/\x3/\x3/\x3/\x3/\x5/\x1D8\n/\x3/\x3"+
		"/\x3/\x3/\x3/\x5/\x1DF\n/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x1E8\n/\x3/"+
		"\x3/\x3/\x3/\x3/\x5/\x1EF\n/\x3/\x3/\x3/\x3/\x3/\x5/\x1F6\n/\x3/\x3/\x3"+
		"/\x5/\x1FB\n/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x207\n/\x3/"+
		"\x3/\x3/\x3/\x3/\x5/\x20E\n/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x217\n/\x3"+
		"/\x3/\x3/\x3/\x3/\x5/\x21E\n/\x3/\x3/\x3/\x3/\x3/\x5/\x225\n/\x3/\x3/"+
		"\x3/\x3/\x3/\x5/\x22C\n/\x3/\x3/\x3/\x3/\x3/\x5/\x233\n/\x3/\x3/\x3/\x3"+
		"/\x3/\x5/\x23A\n/\x3/\x3/\x3/\x3/\x3/\x5/\x241\n/\x3/\x3/\x3/\x3/\x3/"+
		"\x5/\x248\n/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x256"+
		"\n/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x260\n/\x3/\x3/\x3/\x3/\x3/\x3"+
		"/\x3/\x3/\x3/\x3/\x3/\x5/\x26D\n/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3"+
		"\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x27D"+
		"\n\x31\x3\x32\x3\x32\x3\x33\x3\x33\x3\x34\x3\x34\x3\x35\x3\x35\x3\x36"+
		"\x3\x36\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39"+
		"\x3\x39\x3:\x3:\x3:\x3:\x3;\x3;\x3;\x3;\x5;\x29B\n;\x3;\x3;\x3<\x3<\x3"+
		"=\x3=\x3=\x3=\x3=\x3=\x5=\x2A7\n=\x3>\x3>\x3>\a>\x2AC\n>\f>\xE>\x2AF\v"+
		">\x3?\x3?\x3?\a?\x2B4\n?\f?\xE?\x2B7\v?\x3@\x3@\x3@\a@\x2BC\n@\f@\xE@"+
		"\x2BF\v@\x3\x41\x3\x41\x3\x41\a\x41\x2C4\n\x41\f\x41\xE\x41\x2C7\v\x41"+
		"\x3\x42\x3\x42\x3\x42\a\x42\x2CC\n\x42\f\x42\xE\x42\x2CF\v\x42\x3\x43"+
		"\x3\x43\x3\x43\a\x43\x2D4\n\x43\f\x43\xE\x43\x2D7\v\x43\x3\x44\x3\x44"+
		"\x3\x44\a\x44\x2DC\n\x44\f\x44\xE\x44\x2DF\v\x44\x3\x45\x3\x45\x3\x45"+
		"\a\x45\x2E4\n\x45\f\x45\xE\x45\x2E7\v\x45\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x2FD\n\x46\x3G\x3G\x3"+
		"G\x3G\x3G\x3G\x3G\x3G\aG\x307\nG\fG\xEG\x30A\vG\x3G\x3G\x5G\x30E\nG\x3"+
		"H\x3H\x3I\x3I\x3J\x3J\x3J\x3J\x3J\x2\x2\x2K\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<"+
		"\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z"+
		"\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2"+
		"x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E"+
		"\x2\x90\x2\x92\x2\x2\x17\x5\x2\x93\x94\x97\x98\x9B\x9C\x3\x2\xC9\xCA\x3"+
		"\x2\xC0\xC1\x4\x2\t\t\xA1\xA1\x4\x2\xC1\xC1\xCE\xCE\x3\x2\xAD\xAE\x4\x2"+
		"?HJ\x61\x4\x2\x83\x84\x89\x92\x3\x2#)\x3\x2,/\x3\x2*+\x3\x2\x30\x33\x3"+
		"\x2\x34\x35\x3\x2\x36\x37\x3\x2\xF\x10\x4\x2%%\x38>\x3\x2\x14\x15\x3\x2"+
		"\x16\x19\x3\x2\x1A\x1B\x3\x2\x1C\x1E\x5\x2\xC4\xC9\xCB\xCB\xD1\xD2\x36A"+
		"\x2\xAF\x3\x2\x2\x2\x4\xC7\x3\x2\x2\x2\x6\xC9\x3\x2\x2\x2\b\xCD\x3\x2"+
		"\x2\x2\n\xE2\x3\x2\x2\x2\f\xEC\x3\x2\x2\x2\xE\xFE\x3\x2\x2\x2\x10\x100"+
		"\x3\x2\x2\x2\x12\x10E\x3\x2\x2\x2\x14\x110\x3\x2\x2\x2\x16\x113\x3\x2"+
		"\x2\x2\x18\x115\x3\x2\x2\x2\x1A\x117\x3\x2\x2\x2\x1C\x11A\x3\x2\x2\x2"+
		"\x1E\x11D\x3\x2\x2\x2 \x11F\x3\x2\x2\x2\"\x122\x3\x2\x2\x2$\x125\x3\x2"+
		"\x2\x2&\x127\x3\x2\x2\x2(\x129\x3\x2\x2\x2*\x133\x3\x2\x2\x2,\x135\x3"+
		"\x2\x2\x2.\x137\x3\x2\x2\x2\x30\x139\x3\x2\x2\x2\x32\x147\x3\x2\x2\x2"+
		"\x34\x14A\x3\x2\x2\x2\x36\x14D\x3\x2\x2\x2\x38\x150\x3\x2\x2\x2:\x153"+
		"\x3\x2\x2\x2<\x156\x3\x2\x2\x2>\x159\x3\x2\x2\x2@\x162\x3\x2\x2\x2\x42"+
		"\x16B\x3\x2\x2\x2\x44\x16E\x3\x2\x2\x2\x46\x174\x3\x2\x2\x2H\x176\x3\x2"+
		"\x2\x2J\x179\x3\x2\x2\x2L\x17E\x3\x2\x2\x2N\x183\x3\x2\x2\x2P\x186\x3"+
		"\x2\x2\x2R\x18A\x3\x2\x2\x2T\x193\x3\x2\x2\x2V\x197\x3\x2\x2\x2X\x19D"+
		"\x3\x2\x2\x2Z\x19F\x3\x2\x2\x2\\\x26C\x3\x2\x2\x2^\x26E\x3\x2\x2\x2`\x27C"+
		"\x3\x2\x2\x2\x62\x27E\x3\x2\x2\x2\x64\x280\x3\x2\x2\x2\x66\x282\x3\x2"+
		"\x2\x2h\x284\x3\x2\x2\x2j\x286\x3\x2\x2\x2l\x288\x3\x2\x2\x2n\x28A\x3"+
		"\x2\x2\x2p\x28E\x3\x2\x2\x2r\x292\x3\x2\x2\x2t\x296\x3\x2\x2\x2v\x29E"+
		"\x3\x2\x2\x2x\x2A0\x3\x2\x2\x2z\x2A8\x3\x2\x2\x2|\x2B0\x3\x2\x2\x2~\x2B8"+
		"\x3\x2\x2\x2\x80\x2C0\x3\x2\x2\x2\x82\x2C8\x3\x2\x2\x2\x84\x2D0\x3\x2"+
		"\x2\x2\x86\x2D8\x3\x2\x2\x2\x88\x2E0\x3\x2\x2\x2\x8A\x2FC\x3\x2\x2\x2"+
		"\x8C\x30D\x3\x2\x2\x2\x8E\x30F\x3\x2\x2\x2\x90\x311\x3\x2\x2\x2\x92\x313"+
		"\x3\x2\x2\x2\x94\xB0\a\x2\x2\x3\x95\x97\a\x5\x2\x2\x96\x95\x3\x2\x2\x2"+
		"\x97\x9A\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9B\x3"+
		"\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9B\xA4\x5\x4\x3\x2\x9C\x9E\a\x5\x2\x2\x9D"+
		"\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\x9F\xA0\x3\x2"+
		"\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA3\x5\x4\x3\x2\xA2\x9D\x3\x2\x2\x2\xA3"+
		"\xA6\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xAA\x3\x2"+
		"\x2\x2\xA6\xA4\x3\x2\x2\x2\xA7\xA9\a\x5\x2\x2\xA8\xA7\x3\x2\x2\x2\xA9"+
		"\xAC\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAD\x3\x2"+
		"\x2\x2\xAC\xAA\x3\x2\x2\x2\xAD\xAE\a\x2\x2\x3\xAE\xB0\x3\x2\x2\x2\xAF"+
		"\x94\x3\x2\x2\x2\xAF\x98\x3\x2\x2\x2\xB0\x3\x3\x2\x2\x2\xB1\xB3\x5\x6"+
		"\x4\x2\xB2\xB1\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB9\x3\x2\x2\x2\xB4"+
		"\xBA\x5\n\x6\x2\xB5\xBA\x5X-\x2\xB6\xBA\x5\x92J\x2\xB7\xBA\x5\xE\b\x2"+
		"\xB8\xBA\x5\x30\x19\x2\xB9\xB4\x3\x2\x2\x2\xB9\xB5\x3\x2\x2\x2\xB9\xB6"+
		"\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9\xB8\x3\x2\x2\x2\xBA\xBC\x3\x2\x2"+
		"\x2\xBB\xBD\x5\b\x5\x2\xBC\xBB\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xC8"+
		"\x3\x2\x2\x2\xBE\xC0\x5\f\a\x2\xBF\xC1\x5\b\x5\x2\xC0\xBF\x3\x2\x2\x2"+
		"\xC0\xC1\x3\x2\x2\x2\xC1\xC8\x3\x2\x2\x2\xC2\xC8\x5\b\x5\x2\xC3\xC5\x5"+
		"\x6\x4\x2\xC4\xC6\x5\b\x5\x2\xC5\xC4\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6"+
		"\xC8\x3\x2\x2\x2\xC7\xB2\x3\x2\x2\x2\xC7\xBE\x3\x2\x2\x2\xC7\xC2\x3\x2"+
		"\x2\x2\xC7\xC3\x3\x2\x2\x2\xC8\x5\x3\x2\x2\x2\xC9\xCB\a\xCE\x2\x2\xCA"+
		"\xCC\a\x6\x2\x2\xCB\xCA\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\a\x3\x2\x2"+
		"\x2\xCD\xCE\a\x3\x2\x2\xCE\t\x3\x2\x2\x2\xCF\xE3\x5\x32\x1A\x2\xD0\xE3"+
		"\x5\x34\x1B\x2\xD1\xE3\x5\x36\x1C\x2\xD2\xE3\x5\x38\x1D\x2\xD3\xE3\x5"+
		":\x1E\x2\xD4\xE3\x5<\x1F\x2\xD5\xE3\x5> \x2\xD6\xE3\x5@!\x2\xD7\xE3\x5"+
		"\x42\"\x2\xD8\xE3\x5\x44#\x2\xD9\xE3\x5\x46$\x2\xDA\xE3\x5H%\x2\xDB\xE3"+
		"\x5J&\x2\xDC\xE3\x5L\'\x2\xDD\xE3\x5N(\x2\xDE\xE3\x5P)\x2\xDF\xE3\x5R"+
		"*\x2\xE0\xE3\x5T+\x2\xE1\xE3\x5V,\x2\xE2\xCF\x3\x2\x2\x2\xE2\xD0\x3\x2"+
		"\x2\x2\xE2\xD1\x3\x2\x2\x2\xE2\xD2\x3\x2\x2\x2\xE2\xD3\x3\x2\x2\x2\xE2"+
		"\xD4\x3\x2\x2\x2\xE2\xD5\x3\x2\x2\x2\xE2\xD6\x3\x2\x2\x2\xE2\xD7\x3\x2"+
		"\x2\x2\xE2\xD8\x3\x2\x2\x2\xE2\xD9\x3\x2\x2\x2\xE2\xDA\x3\x2\x2\x2\xE2"+
		"\xDB\x3\x2\x2\x2\xE2\xDC\x3\x2\x2\x2\xE2\xDD\x3\x2\x2\x2\xE2\xDE\x3\x2"+
		"\x2\x2\xE2\xDF\x3\x2\x2\x2\xE2\xE0\x3\x2\x2\x2\xE2\xE1\x3\x2\x2\x2\xE3"+
		"\v\x3\x2\x2\x2\xE4\xE5\t\x2\x2\x2\xE5\xED\a\xCE\x2\x2\xE6\xED\a\x95\x2"+
		"\x2\xE7\xED\a\x96\x2\x2\xE8\xE9\a\x9A\x2\x2\xE9\xED\x5x=\x2\xEA\xEB\a"+
		"\x99\x2\x2\xEB\xED\t\x3\x2\x2\xEC\xE4\x3\x2\x2\x2\xEC\xE6\x3\x2\x2\x2"+
		"\xEC\xE7\x3\x2\x2\x2\xEC\xE8\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xED\r\x3"+
		"\x2\x2\x2\xEE\xFF\x5\x10\t\x2\xEF\xFF\x5\x12\n\x2\xF0\xFF\x5\x14\v\x2"+
		"\xF1\xFF\x5\x16\f\x2\xF2\xFF\x5\x18\r\x2\xF3\xFF\x5\x1A\xE\x2\xF4\xFF"+
		"\x5\x1C\xF\x2\xF5\xFF\x5\x1E\x10\x2\xF6\xFF\x5 \x11\x2\xF7\xFF\x5\"\x12"+
		"\x2\xF8\xFF\x5$\x13\x2\xF9\xFF\x5&\x14\x2\xFA\xFF\x5(\x15\x2\xFB\xFF\x5"+
		"*\x16\x2\xFC\xFF\x5,\x17\x2\xFD\xFF\x5.\x18\x2\xFE\xEE\x3\x2\x2\x2\xFE"+
		"\xEF\x3\x2\x2\x2\xFE\xF0\x3\x2\x2\x2\xFE\xF1\x3\x2\x2\x2\xFE\xF2\x3\x2"+
		"\x2\x2\xFE\xF3\x3\x2\x2\x2\xFE\xF4\x3\x2\x2\x2\xFE\xF5\x3\x2\x2\x2\xFE"+
		"\xF6\x3\x2\x2\x2\xFE\xF7\x3\x2\x2\x2\xFE\xF8\x3\x2\x2\x2\xFE\xF9\x3\x2"+
		"\x2\x2\xFE\xFA\x3\x2\x2\x2\xFE\xFB\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFE"+
		"\xFD\x3\x2\x2\x2\xFF\xF\x3\x2\x2\x2\x100\x101\a\xB1\x2\x2\x101\x10A\a"+
		"\n\x2\x2\x102\x107\a\xCE\x2\x2\x103\x104\a\b\x2\x2\x104\x106\a\xCE\x2"+
		"\x2\x105\x103\x3\x2\x2\x2\x106\x109\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2"+
		"\x107\x108\x3\x2\x2\x2\x108\x10B\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x10A"+
		"\x102\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10D"+
		"\a\v\x2\x2\x10D\x11\x3\x2\x2\x2\x10E\x10F\a\xB2\x2\x2\x10F\x13\x3\x2\x2"+
		"\x2\x110\x111\a\xB3\x2\x2\x111\x112\x5x=\x2\x112\x15\x3\x2\x2\x2\x113"+
		"\x114\a\xB4\x2\x2\x114\x17\x3\x2\x2\x2\x115\x116\a\xB5\x2\x2\x116\x19"+
		"\x3\x2\x2\x2\x117\x118\a\xB6\x2\x2\x118\x119\x5x=\x2\x119\x1B\x3\x2\x2"+
		"\x2\x11A\x11B\a\xB7\x2\x2\x11B\x11C\x5x=\x2\x11C\x1D\x3\x2\x2\x2\x11D"+
		"\x11E\a\xB8\x2\x2\x11E\x1F\x3\x2\x2\x2\x11F\x120\a\xB9\x2\x2\x120\x121"+
		"\x5x=\x2\x121!\x3\x2\x2\x2\x122\x123\a\xBA\x2\x2\x123\x124\x5x=\x2\x124"+
		"#\x3\x2\x2\x2\x125\x126\a\xBB\x2\x2\x126%\x3\x2\x2\x2\x127\x128\a\xBC"+
		"\x2\x2\x128\'\x3\x2\x2\x2\x129\x12A\a\xBD\x2\x2\x12A\x12B\a\xCE\x2\x2"+
		"\x12B\x12C\a\t\x2\x2\x12C\x12D\x5x=\x2\x12D\x12E\a\xBE\x2\x2\x12E\x131"+
		"\x5x=\x2\x12F\x130\a\xBF\x2\x2\x130\x132\x5x=\x2\x131\x12F\x3\x2\x2\x2"+
		"\x131\x132\x3\x2\x2\x2\x132)\x3\x2\x2\x2\x133\x134\t\x4\x2\x2\x134+\x3"+
		"\x2\x2\x2\x135\x136\a\xC2\x2\x2\x136-\x3\x2\x2\x2\x137\x138\a\xC3\x2\x2"+
		"\x138/\x3\x2\x2\x2\x139\x13A\a\xCE\x2\x2\x13A\x143\a\n\x2\x2\x13B\x140"+
		"\x5x=\x2\x13C\x13D\a\b\x2\x2\x13D\x13F\x5x=\x2\x13E\x13C\x3\x2\x2\x2\x13F"+
		"\x142\x3\x2\x2\x2\x140\x13E\x3\x2\x2\x2\x140\x141\x3\x2\x2\x2\x141\x144"+
		"\x3\x2\x2\x2\x142\x140\x3\x2\x2\x2\x143\x13B\x3\x2\x2\x2\x143\x144\x3"+
		"\x2\x2\x2\x144\x145\x3\x2\x2\x2\x145\x146\a\v\x2\x2\x146\x31\x3\x2\x2"+
		"\x2\x147\x148\a\x9D\x2\x2\x148\x149\x5x=\x2\x149\x33\x3\x2\x2\x2\x14A"+
		"\x14B\a\x9E\x2\x2\x14B\x14C\x5x=\x2\x14C\x35\x3\x2\x2\x2\x14D\x14E\a\x9F"+
		"\x2\x2\x14E\x14F\x5x=\x2\x14F\x37\x3\x2\x2\x2\x150\x151\a\xA2\x2\x2\x151"+
		"\x152\x5x=\x2\x152\x39\x3\x2\x2\x2\x153\x154\a\xA0\x2\x2\x154\x155\x5"+
		"x=\x2\x155;\x3\x2\x2\x2\x156\x157\t\x5\x2\x2\x157\x158\x5x=\x2\x158=\x3"+
		"\x2\x2\x2\x159\x15A\a\xA3\x2\x2\x15A\x15F\x5x=\x2\x15B\x15C\a\b\x2\x2"+
		"\x15C\x15E\x5x=\x2\x15D\x15B\x3\x2\x2\x2\x15E\x161\x3\x2\x2\x2\x15F\x15D"+
		"\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160?\x3\x2\x2\x2\x161\x15F\x3\x2\x2"+
		"\x2\x162\x163\a\xA4\x2\x2\x163\x168\x5x=\x2\x164\x165\a\b\x2\x2\x165\x167"+
		"\x5x=\x2\x166\x164\x3\x2\x2\x2\x167\x16A\x3\x2\x2\x2\x168\x166\x3\x2\x2"+
		"\x2\x168\x169\x3\x2\x2\x2\x169\x41\x3\x2\x2\x2\x16A\x168\x3\x2\x2\x2\x16B"+
		"\x16C\a\xA5\x2\x2\x16C\x16D\x5x=\x2\x16D\x43\x3\x2\x2\x2\x16E\x16F\a\xA6"+
		"\x2\x2\x16F\x172\x5x=\x2\x170\x171\a\b\x2\x2\x171\x173\x5x=\x2\x172\x170"+
		"\x3\x2\x2\x2\x172\x173\x3\x2\x2\x2\x173\x45\x3\x2\x2\x2\x174\x175\a\xA7"+
		"\x2\x2\x175G\x3\x2\x2\x2\x176\x177\a\xA8\x2\x2\x177\x178\x5x=\x2\x178"+
		"I\x3\x2\x2\x2\x179\x17A\a\xA9\x2\x2\x17A\x17B\x5x=\x2\x17B\x17C\a\b\x2"+
		"\x2\x17C\x17D\x5x=\x2\x17DK\x3\x2\x2\x2\x17E\x17F\a\xAA\x2\x2\x17F\x180"+
		"\x5x=\x2\x180\x181\a\b\x2\x2\x181\x182\x5x=\x2\x182M\x3\x2\x2\x2\x183"+
		"\x184\a\xAB\x2\x2\x184\x185\t\x6\x2\x2\x185O\x3\x2\x2\x2\x186\x188\a\xAC"+
		"\x2\x2\x187\x189\x5x=\x2\x188\x187\x3\x2\x2\x2\x188\x189\x3\x2\x2\x2\x189"+
		"Q\x3\x2\x2\x2\x18A\x18B\t\a\x2\x2\x18B\x190\x5x=\x2\x18C\x18D\a\b\x2\x2"+
		"\x18D\x18F\x5x=\x2\x18E\x18C\x3\x2\x2\x2\x18F\x192\x3\x2\x2\x2\x190\x18E"+
		"\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191S\x3\x2\x2\x2\x192\x190\x3\x2\x2"+
		"\x2\x193\x195\a\xAF\x2\x2\x194\x196\x5x=\x2\x195\x194\x3\x2\x2\x2\x195"+
		"\x196\x3\x2\x2\x2\x196U\x3\x2\x2\x2\x197\x198\a\xB0\x2\x2\x198\x199\x5"+
		"x=\x2\x199W\x3\x2\x2\x2\x19A\x19E\x5Z.\x2\x19B\x19E\x5\\/\x2\x19C\x19E"+
		"\x5^\x30\x2\x19D\x19A\x3\x2\x2\x2\x19D\x19B\x3\x2\x2\x2\x19D\x19C\x3\x2"+
		"\x2\x2\x19EY\x3\x2\x2\x2\x19F\x1A0\t\b\x2\x2\x1A0[\x3\x2\x2\x2\x1A1\x1A2"+
		"\a\x62\x2\x2\x1A2\x1A3\x5`\x31\x2\x1A3\x1A4\a\b\x2\x2\x1A4\x1A5\x5`\x31"+
		"\x2\x1A5\x26D\x3\x2\x2\x2\x1A6\x1A7\a\x63\x2\x2\x1A7\x26D\x5`\x31\x2\x1A8"+
		"\x1A9\a\x64\x2\x2\x1A9\x26D\x5`\x31\x2\x1AA\x1AB\a\x65\x2\x2\x1AB\x1AC"+
		"\x5`\x31\x2\x1AC\x1AD\a\b\x2\x2\x1AD\x1AE\x5`\x31\x2\x1AE\x26D\x3\x2\x2"+
		"\x2\x1AF\x1B0\a\x66\x2\x2\x1B0\x1B1\x5`\x31\x2\x1B1\x1B2\a\b\x2\x2\x1B2"+
		"\x1B3\x5`\x31\x2\x1B3\x26D\x3\x2\x2\x2\x1B4\x1B5\ag\x2\x2\x1B5\x1B6\x5"+
		"`\x31\x2\x1B6\x1B7\a\b\x2\x2\x1B7\x1B8\x5`\x31\x2\x1B8\x26D\x3\x2\x2\x2"+
		"\x1B9\x1BD\ah\x2\x2\x1BA\x1BB\x5`\x31\x2\x1BB\x1BC\a\b\x2\x2\x1BC\x1BE"+
		"\x3\x2\x2\x2\x1BD\x1BA\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1BF\x3"+
		"\x2\x2\x2\x1BF\x26D\x5`\x31\x2\x1C0\x1C1\ai\x2\x2\x1C1\x1C2\x5`\x31\x2"+
		"\x1C2\x1C3\a\b\x2\x2\x1C3\x1C4\x5`\x31\x2\x1C4\x26D\x3\x2\x2\x2\x1C5\x1C9"+
		"\aj\x2\x2\x1C6\x1C7\x5`\x31\x2\x1C7\x1C8\a\b\x2\x2\x1C8\x1CA\x3\x2\x2"+
		"\x2\x1C9\x1C6\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2"+
		"\x1CB\x26D\x5`\x31\x2\x1CC\x1D0\ak\x2\x2\x1CD\x1CE\x5`\x31\x2\x1CE\x1CF"+
		"\a\b\x2\x2\x1CF\x1D1\x3\x2\x2\x2\x1D0\x1CD\x3\x2\x2\x2\x1D0\x1D1\x3\x2"+
		"\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2\x26D\x5`\x31\x2\x1D3\x1D7\al\x2\x2\x1D4"+
		"\x1D5\x5`\x31\x2\x1D5\x1D6\a\b\x2\x2\x1D6\x1D8\x3\x2\x2\x2\x1D7\x1D4\x3"+
		"\x2\x2\x2\x1D7\x1D8\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9\x26D\x5`\x31"+
		"\x2\x1DA\x1DE\am\x2\x2\x1DB\x1DC\x5`\x31\x2\x1DC\x1DD\a\b\x2\x2\x1DD\x1DF"+
		"\x3\x2\x2\x2\x1DE\x1DB\x3\x2\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1E0\x3"+
		"\x2\x2\x2\x1E0\x26D\x5`\x31\x2\x1E1\x1E2\an\x2\x2\x1E2\x26D\x5`\x31\x2"+
		"\x1E3\x1E7\ao\x2\x2\x1E4\x1E5\x5v<\x2\x1E5\x1E6\a\b\x2\x2\x1E6\x1E8\x3"+
		"\x2\x2\x2\x1E7\x1E4\x3\x2\x2\x2\x1E7\x1E8\x3\x2\x2\x2\x1E8\x1E9\x3\x2"+
		"\x2\x2\x1E9\x26D\x5`\x31\x2\x1EA\x1EE\ap\x2\x2\x1EB\x1EC\x5v<\x2\x1EC"+
		"\x1ED\a\b\x2\x2\x1ED\x1EF\x3\x2\x2\x2\x1EE\x1EB\x3\x2\x2\x2\x1EE\x1EF"+
		"\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2\x2\x1F0\x26D\x5`\x31\x2\x1F1\x1F5\aq\x2"+
		"\x2\x1F2\x1F3\x5v<\x2\x1F3\x1F4\a\b\x2\x2\x1F4\x1F6\x3\x2\x2\x2\x1F5\x1F2"+
		"\x3\x2\x2\x2\x1F5\x1F6\x3\x2\x2\x2\x1F6\x1F7\x3\x2\x2\x2\x1F7\x26D\x5"+
		"`\x31\x2\x1F8\x1FA\aI\x2\x2\x1F9\x1FB\x5v<\x2\x1FA\x1F9\x3\x2\x2\x2\x1FA"+
		"\x1FB\x3\x2\x2\x2\x1FB\x26D\x3\x2\x2\x2\x1FC\x1FD\ar\x2\x2\x1FD\x26D\x5"+
		"`\x31\x2\x1FE\x1FF\as\x2\x2\x1FF\x26D\x5`\x31\x2\x200\x201\at\x2\x2\x201"+
		"\x26D\x5`\x31\x2\x202\x206\au\x2\x2\x203\x204\x5`\x31\x2\x204\x205\a\b"+
		"\x2\x2\x205\x207\x3\x2\x2\x2\x206\x203\x3\x2\x2\x2\x206\x207\x3\x2\x2"+
		"\x2\x207\x208\x3\x2\x2\x2\x208\x26D\x5`\x31\x2\x209\x20D\av\x2\x2\x20A"+
		"\x20B\x5`\x31\x2\x20B\x20C\a\b\x2\x2\x20C\x20E\x3\x2\x2\x2\x20D\x20A\x3"+
		"\x2\x2\x2\x20D\x20E\x3\x2\x2\x2\x20E\x20F\x3\x2\x2\x2\x20F\x26D\x5`\x31"+
		"\x2\x210\x211\aw\x2\x2\x211\x26D\x5`\x31\x2\x212\x216\ax\x2\x2\x213\x214"+
		"\x5`\x31\x2\x214\x215\a\b\x2\x2\x215\x217\x3\x2\x2\x2\x216\x213\x3\x2"+
		"\x2\x2\x216\x217\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x218\x26D\x5`\x31\x2"+
		"\x219\x21D\ay\x2\x2\x21A\x21B\x5`\x31\x2\x21B\x21C\a\b\x2\x2\x21C\x21E"+
		"\x3\x2\x2\x2\x21D\x21A\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x21F\x3"+
		"\x2\x2\x2\x21F\x26D\x5`\x31\x2\x220\x224\az\x2\x2\x221\x222\x5`\x31\x2"+
		"\x222\x223\a\b\x2\x2\x223\x225\x3\x2\x2\x2\x224\x221\x3\x2\x2\x2\x224"+
		"\x225\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226\x26D\x5`\x31\x2\x227\x22B"+
		"\a{\x2\x2\x228\x229\x5`\x31\x2\x229\x22A\a\b\x2\x2\x22A\x22C\x3\x2\x2"+
		"\x2\x22B\x228\x3\x2\x2\x2\x22B\x22C\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2"+
		"\x22D\x26D\x5`\x31\x2\x22E\x232\a|\x2\x2\x22F\x230\x5`\x31\x2\x230\x231"+
		"\a\b\x2\x2\x231\x233\x3\x2\x2\x2\x232\x22F\x3\x2\x2\x2\x232\x233\x3\x2"+
		"\x2\x2\x233\x234\x3\x2\x2\x2\x234\x26D\x5`\x31\x2\x235\x239\a}\x2\x2\x236"+
		"\x237\x5`\x31\x2\x237\x238\a\b\x2\x2\x238\x23A\x3\x2\x2\x2\x239\x236\x3"+
		"\x2\x2\x2\x239\x23A\x3\x2\x2\x2\x23A\x23B\x3\x2\x2\x2\x23B\x26D\x5`\x31"+
		"\x2\x23C\x240\a~\x2\x2\x23D\x23E\x5`\x31\x2\x23E\x23F\a\b\x2\x2\x23F\x241"+
		"\x3\x2\x2\x2\x240\x23D\x3\x2\x2\x2\x240\x241\x3\x2\x2\x2\x241\x242\x3"+
		"\x2\x2\x2\x242\x26D\x5`\x31\x2\x243\x247\a\x7F\x2\x2\x244\x245\x5`\x31"+
		"\x2\x245\x246\a\b\x2\x2\x246\x248\x3\x2\x2\x2\x247\x244\x3\x2\x2\x2\x247"+
		"\x248\x3\x2\x2\x2\x248\x249\x3\x2\x2\x2\x249\x26D\x5`\x31\x2\x24A\x24B"+
		"\a\x80\x2\x2\x24B\x24C\x5x=\x2\x24C\x24D\a\b\x2\x2\x24D\x24E\x5`\x31\x2"+
		"\x24E\x26D\x3\x2\x2\x2\x24F\x250\a\x81\x2\x2\x250\x251\x5x=\x2\x251\x255"+
		"\a\b\x2\x2\x252\x253\x5`\x31\x2\x253\x254\a\b\x2\x2\x254\x256\x3\x2\x2"+
		"\x2\x255\x252\x3\x2\x2\x2\x255\x256\x3\x2\x2\x2\x256\x257\x3\x2\x2\x2"+
		"\x257\x258\x5`\x31\x2\x258\x26D\x3\x2\x2\x2\x259\x25A\a\x82\x2\x2\x25A"+
		"\x25B\x5x=\x2\x25B\x25F\a\b\x2\x2\x25C\x25D\x5`\x31\x2\x25D\x25E\a\b\x2"+
		"\x2\x25E\x260\x3\x2\x2\x2\x25F\x25C\x3\x2\x2\x2\x25F\x260\x3\x2\x2\x2"+
		"\x260\x261\x3\x2\x2\x2\x261\x262\x5`\x31\x2\x262\x26D\x3\x2\x2\x2\x263"+
		"\x264\a\x86\x2\x2\x264\x26D\x5`\x31\x2\x265\x266\a\x87\x2\x2\x266\x26D"+
		"\x5`\x31\x2\x267\x268\a\x88\x2\x2\x268\x269\x5`\x31\x2\x269\x26A\a\b\x2"+
		"\x2\x26A\x26B\x5`\x31\x2\x26B\x26D\x3\x2\x2\x2\x26C\x1A1\x3\x2\x2\x2\x26C"+
		"\x1A6\x3\x2\x2\x2\x26C\x1A8\x3\x2\x2\x2\x26C\x1AA\x3\x2\x2\x2\x26C\x1AF"+
		"\x3\x2\x2\x2\x26C\x1B4\x3\x2\x2\x2\x26C\x1B9\x3\x2\x2\x2\x26C\x1C0\x3"+
		"\x2\x2\x2\x26C\x1C5\x3\x2\x2\x2\x26C\x1CC\x3\x2\x2\x2\x26C\x1D3\x3\x2"+
		"\x2\x2\x26C\x1DA\x3\x2\x2\x2\x26C\x1E1\x3\x2\x2\x2\x26C\x1E3\x3\x2\x2"+
		"\x2\x26C\x1EA\x3\x2\x2\x2\x26C\x1F1\x3\x2\x2\x2\x26C\x1F8\x3\x2\x2\x2"+
		"\x26C\x1FC\x3\x2\x2\x2\x26C\x1FE\x3\x2\x2\x2\x26C\x200\x3\x2\x2\x2\x26C"+
		"\x202\x3\x2\x2\x2\x26C\x209\x3\x2\x2\x2\x26C\x210\x3\x2\x2\x2\x26C\x212"+
		"\x3\x2\x2\x2\x26C\x219\x3\x2\x2\x2\x26C\x220\x3\x2\x2\x2\x26C\x227\x3"+
		"\x2\x2\x2\x26C\x22E\x3\x2\x2\x2\x26C\x235\x3\x2\x2\x2\x26C\x23C\x3\x2"+
		"\x2\x2\x26C\x243\x3\x2\x2\x2\x26C\x24A\x3\x2\x2\x2\x26C\x24F\x3\x2\x2"+
		"\x2\x26C\x259\x3\x2\x2\x2\x26C\x263\x3\x2\x2\x2\x26C\x265\x3\x2\x2\x2"+
		"\x26C\x267\x3\x2\x2\x2\x26D]\x3\x2\x2\x2\x26E\x26F\t\t\x2\x2\x26F_\x3"+
		"\x2\x2\x2\x270\x27D\x5\x62\x32\x2\x271\x27D\x5\x64\x33\x2\x272\x27D\x5"+
		"\x66\x34\x2\x273\x27D\x5h\x35\x2\x274\x27D\x5j\x36\x2\x275\x27D\x5l\x37"+
		"\x2\x276\x27D\x5n\x38\x2\x277\x27D\x5p\x39\x2\x278\x27D\x5r:\x2\x279\x27D"+
		"\x5t;\x2\x27A\x27D\x5x=\x2\x27B\x27D\x5v<\x2\x27C\x270\x3\x2\x2\x2\x27C"+
		"\x271\x3\x2\x2\x2\x27C\x272\x3\x2\x2\x2\x27C\x273\x3\x2\x2\x2\x27C\x274"+
		"\x3\x2\x2\x2\x27C\x275\x3\x2\x2\x2\x27C\x276\x3\x2\x2\x2\x27C\x277\x3"+
		"\x2\x2\x2\x27C\x278\x3\x2\x2\x2\x27C\x279\x3\x2\x2\x2\x27C\x27A\x3\x2"+
		"\x2\x2\x27C\x27B\x3\x2\x2\x2\x27D\x61\x3\x2\x2\x2\x27E\x27F\t\n\x2\x2"+
		"\x27F\x63\x3\x2\x2\x2\x280\x281\t\v\x2\x2\x281\x65\x3\x2\x2\x2\x282\x283"+
		"\t\f\x2\x2\x283g\x3\x2\x2\x2\x284\x285\t\r\x2\x2\x285i\x3\x2\x2\x2\x286"+
		"\x287\t\xE\x2\x2\x287k\x3\x2\x2\x2\x288\x289\t\xF\x2\x2\x289m\x3\x2\x2"+
		"\x2\x28A\x28B\a\n\x2\x2\x28B\x28C\x5h\x35\x2\x28C\x28D\a\v\x2\x2\x28D"+
		"o\x3\x2\x2\x2\x28E\x28F\a\n\x2\x2\x28F\x290\a%\x2\x2\x290\x291\a\v\x2"+
		"\x2\x291q\x3\x2\x2\x2\x292\x293\a\n\x2\x2\x293\x294\x5x=\x2\x294\x295"+
		"\a\v\x2\x2\x295s\x3\x2\x2\x2\x296\x297\a\n\x2\x2\x297\x29A\x5j\x36\x2"+
		"\x298\x299\t\x10\x2\x2\x299\x29B\x5x=\x2\x29A\x298\x3\x2\x2\x2\x29A\x29B"+
		"\x3\x2\x2\x2\x29B\x29C\x3\x2\x2\x2\x29C\x29D\a\v\x2\x2\x29Du\x3\x2\x2"+
		"\x2\x29E\x29F\t\x11\x2\x2\x29Fw\x3\x2\x2\x2\x2A0\x2A6\x5z>\x2\x2A1\x2A2"+
		"\a\xE\x2\x2\x2A2\x2A3\x5x=\x2\x2A3\x2A4\a\x6\x2\x2\x2A4\x2A5\x5x=\x2\x2A5"+
		"\x2A7\x3\x2\x2\x2\x2A6\x2A1\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7y\x3"+
		"\x2\x2\x2\x2A8\x2AD\x5|?\x2\x2A9\x2AA\a\x11\x2\x2\x2AA\x2AC\x5|?\x2\x2AB"+
		"\x2A9\x3\x2\x2\x2\x2AC\x2AF\x3\x2\x2\x2\x2AD\x2AB\x3\x2\x2\x2\x2AD\x2AE"+
		"\x3\x2\x2\x2\x2AE{\x3\x2\x2\x2\x2AF\x2AD\x3\x2\x2\x2\x2B0\x2B5\x5~@\x2"+
		"\x2B1\x2B2\a\x12\x2\x2\x2B2\x2B4\x5~@\x2\x2B3\x2B1\x3\x2\x2\x2\x2B4\x2B7"+
		"\x3\x2\x2\x2\x2B5\x2B3\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6}\x3\x2\x2"+
		"\x2\x2B7\x2B5\x3\x2\x2\x2\x2B8\x2BD\x5\x80\x41\x2\x2B9\x2BA\a\x13\x2\x2"+
		"\x2BA\x2BC\x5\x80\x41\x2\x2BB\x2B9\x3\x2\x2\x2\x2BC\x2BF\x3\x2\x2\x2\x2BD"+
		"\x2BB\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE\x7F\x3\x2\x2\x2\x2BF\x2BD"+
		"\x3\x2\x2\x2\x2C0\x2C5\x5\x82\x42\x2\x2C1\x2C2\t\x12\x2\x2\x2C2\x2C4\x5"+
		"\x82\x42\x2\x2C3\x2C1\x3\x2\x2\x2\x2C4\x2C7\x3\x2\x2\x2\x2C5\x2C3\x3\x2"+
		"\x2\x2\x2C5\x2C6\x3\x2\x2\x2\x2C6\x81\x3\x2\x2\x2\x2C7\x2C5\x3\x2\x2\x2"+
		"\x2C8\x2CD\x5\x84\x43\x2\x2C9\x2CA\t\x13\x2\x2\x2CA\x2CC\x5\x84\x43\x2"+
		"\x2CB\x2C9\x3\x2\x2\x2\x2CC\x2CF\x3\x2\x2\x2\x2CD\x2CB\x3\x2\x2\x2\x2CD"+
		"\x2CE\x3\x2\x2\x2\x2CE\x83\x3\x2\x2\x2\x2CF\x2CD\x3\x2\x2\x2\x2D0\x2D5"+
		"\x5\x86\x44\x2\x2D1\x2D2\t\x14\x2\x2\x2D2\x2D4\x5\x86\x44\x2\x2D3\x2D1"+
		"\x3\x2\x2\x2\x2D4\x2D7\x3\x2\x2\x2\x2D5\x2D3\x3\x2\x2\x2\x2D5\x2D6\x3"+
		"\x2\x2\x2\x2D6\x85\x3\x2\x2\x2\x2D7\x2D5\x3\x2\x2\x2\x2D8\x2DD\x5\x88"+
		"\x45\x2\x2D9\x2DA\t\x10\x2\x2\x2DA\x2DC\x5\x88\x45\x2\x2DB\x2D9\x3\x2"+
		"\x2\x2\x2DC\x2DF\x3\x2\x2\x2\x2DD\x2DB\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2"+
		"\x2\x2DE\x87\x3\x2\x2\x2\x2DF\x2DD\x3\x2\x2\x2\x2E0\x2E5\x5\x8A\x46\x2"+
		"\x2E1\x2E2\t\x15\x2\x2\x2E2\x2E4\x5\x8A\x46\x2\x2E3\x2E1\x3\x2\x2\x2\x2E4"+
		"\x2E7\x3\x2\x2\x2\x2E5\x2E3\x3\x2\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6\x89"+
		"\x3\x2\x2\x2\x2E7\x2E5\x3\x2\x2\x2\x2E8\x2FD\x5\x8CG\x2\x2E9\x2FD\x5\x92"+
		"J\x2\x2EA\x2EB\a\xF\x2\x2\x2EB\x2FD\x5\x8A\x46\x2\x2EC\x2ED\a\x10\x2\x2"+
		"\x2ED\x2FD\x5\x8A\x46\x2\x2EE\x2EF\a\x1F\x2\x2\x2EF\x2FD\x5\x8A\x46\x2"+
		"\x2F0\x2F1\a\"\x2\x2\x2F1\x2FD\x5\x8A\x46\x2\x2F2\x2F3\a\f\x2\x2\x2F3"+
		"\x2F4\x5x=\x2\x2F4\x2F5\a\r\x2\x2\x2F5\x2FD\x3\x2\x2\x2\x2F6\x2F7\a\n"+
		"\x2\x2\x2F7\x2F8\x5x=\x2\x2F8\x2F9\a\v\x2\x2\x2F9\x2FD\x3\x2\x2\x2\x2FA"+
		"\x2FD\x5\x8EH\x2\x2FB\x2FD\x5\x90I\x2\x2FC\x2E8\x3\x2\x2\x2\x2FC\x2E9"+
		"\x3\x2\x2\x2\x2FC\x2EA\x3\x2\x2\x2\x2FC\x2EC\x3\x2\x2\x2\x2FC\x2EE\x3"+
		"\x2\x2\x2\x2FC\x2F0\x3\x2\x2\x2\x2FC\x2F2\x3\x2\x2\x2\x2FC\x2F6\x3\x2"+
		"\x2\x2\x2FC\x2FA\x3\x2\x2\x2\x2FC\x2FB\x3\x2\x2\x2\x2FD\x8B\x3\x2\x2\x2"+
		"\x2FE\x2FF\a\xCE\x2\x2\x2FF\x300\a\n\x2\x2\x300\x30E\a\v\x2\x2\x301\x302"+
		"\a\xCE\x2\x2\x302\x303\a\n\x2\x2\x303\x308\x5x=\x2\x304\x305\a\b\x2\x2"+
		"\x305\x307\x5x=\x2\x306\x304\x3\x2\x2\x2\x307\x30A\x3\x2\x2\x2\x308\x306"+
		"\x3\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309\x30B\x3\x2\x2\x2\x30A\x308\x3"+
		"\x2\x2\x2\x30B\x30C\a\v\x2\x2\x30C\x30E\x3\x2\x2\x2\x30D\x2FE\x3\x2\x2"+
		"\x2\x30D\x301\x3\x2\x2\x2\x30E\x8D\x3\x2\x2\x2\x30F\x310\t\x16\x2\x2\x310"+
		"\x8F\x3\x2\x2\x2\x311\x312\a\xCE\x2\x2\x312\x91\x3\x2\x2\x2\x313\x314"+
		"\a \x2\x2\x314\x315\a\xCE\x2\x2\x315\x316\a!\x2\x2\x316\x93\x3\x2\x2\x2"+
		"\x41\x98\x9F\xA4\xAA\xAF\xB2\xB9\xBC\xC0\xC5\xC7\xCB\xE2\xEC\xFE\x107"+
		"\x10A\x131\x140\x143\x15F\x168\x172\x188\x190\x195\x19D\x1BD\x1C9\x1D0"+
		"\x1D7\x1DE\x1E7\x1EE\x1F5\x1FA\x206\x20D\x216\x21D\x224\x22B\x232\x239"+
		"\x240\x247\x255\x25F\x26C\x27C\x29A\x2A6\x2AD\x2B5\x2BD\x2C5\x2CD\x2D5"+
		"\x2DD\x2E5\x2FC\x308\x30D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Spect.Net.Assembler.Generated
