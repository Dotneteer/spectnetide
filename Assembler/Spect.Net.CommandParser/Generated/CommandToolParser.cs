//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dotne\source\repos\spectnetide\Assembler\AntlrCommandParserGenerator\AntlrCommandParserGenerator\CommandTool.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Spect.Net.CommandParser.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CommandToolParser : Parser {
	public const int
		WS=1, LESS=2, LESSEQ=3, GREAT=4, GREATEQ=5, EQ=6, MULT=7, HASH=8, ADD=9, 
		DASH=10, COLON=11, B=12, C=13, D=14, EB=15, EW=16, G=17, GS=18, G1=19, 
		G2=20, G3=21, G4=22, H=23, J=24, L=25, LW=26, M=27, P=28, R=29, RD=30, 
		S=31, SB=32, T=33, TB=34, RB=35, UB=36, XD=37, XW=38, W=39, RETRIEVE=40, 
		SECTION=41, LITERAL=42, LITCH=43, OTHER=44;
	public const int
		RULE_compileUnit = 0, RULE_toolCommand = 1, RULE_gotoCommand = 2, RULE_romPageCommand = 3, 
		RULE_bankPageCommand = 4, RULE_memModeCommand = 5, RULE_labelCommand = 6, 
		RULE_commentCommand = 7, RULE_prefixCommentCommand = 8, RULE_setBreakpointCommand = 9, 
		RULE_toggleBreakpointCommand = 10, RULE_removeBreakpointCommand = 11, 
		RULE_updateBreakpointCommand = 12, RULE_eraseAllBreakpointsCommand = 13, 
		RULE_retrieveCommand = 14, RULE_literalCommand = 15, RULE_disassemblyTypeCommand = 16, 
		RULE_reDisassemblyCommand = 17, RULE_jumpCommand = 18, RULE_sectionCommand = 19, 
		RULE_addWatchCommand = 20, RULE_removeWatchCommand = 21, RULE_updateWatchCommand = 22, 
		RULE_labelWidthCommand = 23, RULE_exchangeWatchCommand = 24, RULE_eraseAllWatchCommand = 25, 
		RULE_compactCommand = 26, RULE_exportDisassemblyCommand = 27;
	public static readonly string[] ruleNames = {
		"compileUnit", "toolCommand", "gotoCommand", "romPageCommand", "bankPageCommand", 
		"memModeCommand", "labelCommand", "commentCommand", "prefixCommentCommand", 
		"setBreakpointCommand", "toggleBreakpointCommand", "removeBreakpointCommand", 
		"updateBreakpointCommand", "eraseAllBreakpointsCommand", "retrieveCommand", 
		"literalCommand", "disassemblyTypeCommand", "reDisassemblyCommand", "jumpCommand", 
		"sectionCommand", "addWatchCommand", "removeWatchCommand", "updateWatchCommand", 
		"labelWidthCommand", "exchangeWatchCommand", "eraseAllWatchCommand", "compactCommand", 
		"exportDisassemblyCommand"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'<'", "'<='", "'>'", "'>='", "'='", "'*'", "'#'", "'+'", 
		"'-'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "LESS", "LESSEQ", "GREAT", "GREATEQ", "EQ", "MULT", "HASH", 
		"ADD", "DASH", "COLON", "B", "C", "D", "EB", "EW", "G", "GS", "G1", "G2", 
		"G3", "G4", "H", "J", "L", "LW", "M", "P", "R", "RD", "S", "SB", "T", 
		"TB", "RB", "UB", "XD", "XW", "W", "RETRIEVE", "SECTION", "LITERAL", "LITCH", 
		"OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CommandTool.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CommandToolParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ToolCommandContext toolCommand() {
			return GetRuleContext<ToolCommandContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CommandToolParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; toolCommand();
			State = 57; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToolCommandContext : ParserRuleContext {
		public GotoCommandContext gotoCommand() {
			return GetRuleContext<GotoCommandContext>(0);
		}
		public RomPageCommandContext romPageCommand() {
			return GetRuleContext<RomPageCommandContext>(0);
		}
		public BankPageCommandContext bankPageCommand() {
			return GetRuleContext<BankPageCommandContext>(0);
		}
		public MemModeCommandContext memModeCommand() {
			return GetRuleContext<MemModeCommandContext>(0);
		}
		public LabelCommandContext labelCommand() {
			return GetRuleContext<LabelCommandContext>(0);
		}
		public CommentCommandContext commentCommand() {
			return GetRuleContext<CommentCommandContext>(0);
		}
		public PrefixCommentCommandContext prefixCommentCommand() {
			return GetRuleContext<PrefixCommentCommandContext>(0);
		}
		public SetBreakpointCommandContext setBreakpointCommand() {
			return GetRuleContext<SetBreakpointCommandContext>(0);
		}
		public ToggleBreakpointCommandContext toggleBreakpointCommand() {
			return GetRuleContext<ToggleBreakpointCommandContext>(0);
		}
		public RemoveBreakpointCommandContext removeBreakpointCommand() {
			return GetRuleContext<RemoveBreakpointCommandContext>(0);
		}
		public UpdateBreakpointCommandContext updateBreakpointCommand() {
			return GetRuleContext<UpdateBreakpointCommandContext>(0);
		}
		public EraseAllBreakpointsCommandContext eraseAllBreakpointsCommand() {
			return GetRuleContext<EraseAllBreakpointsCommandContext>(0);
		}
		public RetrieveCommandContext retrieveCommand() {
			return GetRuleContext<RetrieveCommandContext>(0);
		}
		public LiteralCommandContext literalCommand() {
			return GetRuleContext<LiteralCommandContext>(0);
		}
		public DisassemblyTypeCommandContext disassemblyTypeCommand() {
			return GetRuleContext<DisassemblyTypeCommandContext>(0);
		}
		public ReDisassemblyCommandContext reDisassemblyCommand() {
			return GetRuleContext<ReDisassemblyCommandContext>(0);
		}
		public JumpCommandContext jumpCommand() {
			return GetRuleContext<JumpCommandContext>(0);
		}
		public SectionCommandContext sectionCommand() {
			return GetRuleContext<SectionCommandContext>(0);
		}
		public AddWatchCommandContext addWatchCommand() {
			return GetRuleContext<AddWatchCommandContext>(0);
		}
		public RemoveWatchCommandContext removeWatchCommand() {
			return GetRuleContext<RemoveWatchCommandContext>(0);
		}
		public UpdateWatchCommandContext updateWatchCommand() {
			return GetRuleContext<UpdateWatchCommandContext>(0);
		}
		public LabelWidthCommandContext labelWidthCommand() {
			return GetRuleContext<LabelWidthCommandContext>(0);
		}
		public ExchangeWatchCommandContext exchangeWatchCommand() {
			return GetRuleContext<ExchangeWatchCommandContext>(0);
		}
		public EraseAllWatchCommandContext eraseAllWatchCommand() {
			return GetRuleContext<EraseAllWatchCommandContext>(0);
		}
		public CompactCommandContext compactCommand() {
			return GetRuleContext<CompactCommandContext>(0);
		}
		public ExportDisassemblyCommandContext exportDisassemblyCommand() {
			return GetRuleContext<ExportDisassemblyCommandContext>(0);
		}
		public ToolCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toolCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterToolCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitToolCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToolCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToolCommandContext toolCommand() {
		ToolCommandContext _localctx = new ToolCommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_toolCommand);
		try {
			State = 85;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case G:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59; gotoCommand();
				}
				break;
			case R:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60; romPageCommand();
				}
				break;
			case B:
				EnterOuterAlt(_localctx, 3);
				{
				State = 61; bankPageCommand();
				}
				break;
			case M:
				EnterOuterAlt(_localctx, 4);
				{
				State = 62; memModeCommand();
				}
				break;
			case L:
				EnterOuterAlt(_localctx, 5);
				{
				State = 63; labelCommand();
				}
				break;
			case C:
				EnterOuterAlt(_localctx, 6);
				{
				State = 64; commentCommand();
				}
				break;
			case P:
				EnterOuterAlt(_localctx, 7);
				{
				State = 65; prefixCommentCommand();
				}
				break;
			case SB:
				EnterOuterAlt(_localctx, 8);
				{
				State = 66; setBreakpointCommand();
				}
				break;
			case TB:
				EnterOuterAlt(_localctx, 9);
				{
				State = 67; toggleBreakpointCommand();
				}
				break;
			case RB:
				EnterOuterAlt(_localctx, 10);
				{
				State = 68; removeBreakpointCommand();
				}
				break;
			case UB:
				EnterOuterAlt(_localctx, 11);
				{
				State = 69; updateBreakpointCommand();
				}
				break;
			case EB:
				EnterOuterAlt(_localctx, 12);
				{
				State = 70; eraseAllBreakpointsCommand();
				}
				break;
			case RETRIEVE:
				EnterOuterAlt(_localctx, 13);
				{
				State = 71; retrieveCommand();
				}
				break;
			case D:
				EnterOuterAlt(_localctx, 14);
				{
				State = 72; literalCommand();
				}
				break;
			case T:
				EnterOuterAlt(_localctx, 15);
				{
				State = 73; disassemblyTypeCommand();
				}
				break;
			case RD:
				EnterOuterAlt(_localctx, 16);
				{
				State = 74; reDisassemblyCommand();
				}
				break;
			case J:
				EnterOuterAlt(_localctx, 17);
				{
				State = 75; jumpCommand();
				}
				break;
			case SECTION:
				EnterOuterAlt(_localctx, 18);
				{
				State = 76; sectionCommand();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 19);
				{
				State = 77; addWatchCommand();
				}
				break;
			case DASH:
				EnterOuterAlt(_localctx, 20);
				{
				State = 78; removeWatchCommand();
				}
				break;
			case MULT:
				EnterOuterAlt(_localctx, 21);
				{
				State = 79; updateWatchCommand();
				}
				break;
			case LW:
				EnterOuterAlt(_localctx, 22);
				{
				State = 80; labelWidthCommand();
				}
				break;
			case XW:
				EnterOuterAlt(_localctx, 23);
				{
				State = 81; exchangeWatchCommand();
				}
				break;
			case EW:
				EnterOuterAlt(_localctx, 24);
				{
				State = 82; eraseAllWatchCommand();
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 25);
				{
				State = 83; compactCommand();
				}
				break;
			case XD:
				EnterOuterAlt(_localctx, 26);
				{
				State = 84; exportDisassemblyCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoCommandContext : ParserRuleContext {
		public ITerminalNode G() { return GetToken(CommandToolParser.G, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public GotoCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterGotoCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitGotoCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoCommandContext gotoCommand() {
		GotoCommandContext _localctx = new GotoCommandContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_gotoCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(G);
			State = 89;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 88; Match(WS);
				}
			}

			State = 91; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RomPageCommandContext : ParserRuleContext {
		public ITerminalNode R() { return GetToken(CommandToolParser.R, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public RomPageCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_romPageCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterRomPageCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitRomPageCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRomPageCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RomPageCommandContext romPageCommand() {
		RomPageCommandContext _localctx = new RomPageCommandContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_romPageCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(R);
			State = 95;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 94; Match(WS);
				}
			}

			State = 97; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BankPageCommandContext : ParserRuleContext {
		public ITerminalNode B() { return GetToken(CommandToolParser.B, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public BankPageCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bankPageCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterBankPageCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitBankPageCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBankPageCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BankPageCommandContext bankPageCommand() {
		BankPageCommandContext _localctx = new BankPageCommandContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_bankPageCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(B);
			State = 101;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 100; Match(WS);
				}
			}

			State = 103; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemModeCommandContext : ParserRuleContext {
		public ITerminalNode M() { return GetToken(CommandToolParser.M, 0); }
		public MemModeCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memModeCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterMemModeCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitMemModeCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemModeCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemModeCommandContext memModeCommand() {
		MemModeCommandContext _localctx = new MemModeCommandContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_memModeCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(M);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelCommandContext : ParserRuleContext {
		public ITerminalNode L() { return GetToken(CommandToolParser.L, 0); }
		public ITerminalNode[] LITERAL() { return GetTokens(CommandToolParser.LITERAL); }
		public ITerminalNode LITERAL(int i) {
			return GetToken(CommandToolParser.LITERAL, i);
		}
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public LabelCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterLabelCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitLabelCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelCommandContext labelCommand() {
		LabelCommandContext _localctx = new LabelCommandContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_labelCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(L);
			State = 109;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 108; Match(WS);
				}
			}

			State = 111; Match(LITERAL);
			State = 114;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 112; Match(WS);
				State = 113; Match(LITERAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentCommandContext : ParserRuleContext {
		public ITerminalNode C() { return GetToken(CommandToolParser.C, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public CommentCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterCommentCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitCommentCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentCommandContext commentCommand() {
		CommentCommandContext _localctx = new CommentCommandContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_commentCommand);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(C);
			State = 118;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 117; Match(WS);
				}
			}

			State = 120; Match(LITERAL);
			State = 122;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 121; Match(WS);
				}
				break;
			}
			State = 127;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 124;
					MatchWildcard();
					}
					} 
				}
				State = 129;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixCommentCommandContext : ParserRuleContext {
		public ITerminalNode P() { return GetToken(CommandToolParser.P, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public PrefixCommentCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixCommentCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterPrefixCommentCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitPrefixCommentCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixCommentCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixCommentCommandContext prefixCommentCommand() {
		PrefixCommentCommandContext _localctx = new PrefixCommentCommandContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_prefixCommentCommand);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(P);
			State = 132;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 131; Match(WS);
				}
			}

			State = 134; Match(LITERAL);
			State = 136;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 135; Match(WS);
				}
				break;
			}
			State = 141;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 138;
					MatchWildcard();
					}
					} 
				}
				State = 143;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetBreakpointCommandContext : ParserRuleContext {
		public ITerminalNode SB() { return GetToken(CommandToolParser.SB, 0); }
		public ITerminalNode[] LITERAL() { return GetTokens(CommandToolParser.LITERAL); }
		public ITerminalNode LITERAL(int i) {
			return GetToken(CommandToolParser.LITERAL, i);
		}
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public ITerminalNode H() { return GetToken(CommandToolParser.H, 0); }
		public ITerminalNode C() { return GetToken(CommandToolParser.C, 0); }
		public ITerminalNode LESS() { return GetToken(CommandToolParser.LESS, 0); }
		public ITerminalNode LESSEQ() { return GetToken(CommandToolParser.LESSEQ, 0); }
		public ITerminalNode GREAT() { return GetToken(CommandToolParser.GREAT, 0); }
		public ITerminalNode GREATEQ() { return GetToken(CommandToolParser.GREATEQ, 0); }
		public ITerminalNode EQ() { return GetToken(CommandToolParser.EQ, 0); }
		public ITerminalNode MULT() { return GetToken(CommandToolParser.MULT, 0); }
		public SetBreakpointCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setBreakpointCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterSetBreakpointCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitSetBreakpointCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetBreakpointCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetBreakpointCommandContext setBreakpointCommand() {
		SetBreakpointCommandContext _localctx = new SetBreakpointCommandContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_setBreakpointCommand);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(SB);
			State = 146;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 145; Match(WS);
				}
			}

			State = 148; Match(LITERAL);
			State = 159;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 149; Match(WS);
				State = 150; Match(H);
				State = 152;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 151; Match(WS);
					}
				}

				State = 154;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS) | (1L << LESSEQ) | (1L << GREAT) | (1L << GREATEQ) | (1L << EQ) | (1L << MULT))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 156;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 155; Match(WS);
					}
				}

				State = 158; Match(LITERAL);
				}
				break;
			}
			State = 170;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 161; Match(WS);
				State = 162; Match(C);
				State = 163; Match(WS);
				State = 167;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 164;
						MatchWildcard();
						}
						} 
					}
					State = 169;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToggleBreakpointCommandContext : ParserRuleContext {
		public ITerminalNode TB() { return GetToken(CommandToolParser.TB, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public ToggleBreakpointCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toggleBreakpointCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterToggleBreakpointCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitToggleBreakpointCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToggleBreakpointCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToggleBreakpointCommandContext toggleBreakpointCommand() {
		ToggleBreakpointCommandContext _localctx = new ToggleBreakpointCommandContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_toggleBreakpointCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(TB);
			State = 174;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 173; Match(WS);
				}
			}

			State = 176; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveBreakpointCommandContext : ParserRuleContext {
		public ITerminalNode RB() { return GetToken(CommandToolParser.RB, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public RemoveBreakpointCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeBreakpointCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterRemoveBreakpointCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitRemoveBreakpointCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveBreakpointCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveBreakpointCommandContext removeBreakpointCommand() {
		RemoveBreakpointCommandContext _localctx = new RemoveBreakpointCommandContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_removeBreakpointCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(RB);
			State = 180;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 179; Match(WS);
				}
			}

			State = 182; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBreakpointCommandContext : ParserRuleContext {
		public ITerminalNode UB() { return GetToken(CommandToolParser.UB, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public UpdateBreakpointCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBreakpointCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterUpdateBreakpointCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitUpdateBreakpointCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBreakpointCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBreakpointCommandContext updateBreakpointCommand() {
		UpdateBreakpointCommandContext _localctx = new UpdateBreakpointCommandContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_updateBreakpointCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(UB);
			State = 186;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 185; Match(WS);
				}
			}

			State = 188; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseAllBreakpointsCommandContext : ParserRuleContext {
		public ITerminalNode EB() { return GetToken(CommandToolParser.EB, 0); }
		public EraseAllBreakpointsCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseAllBreakpointsCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterEraseAllBreakpointsCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitEraseAllBreakpointsCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseAllBreakpointsCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseAllBreakpointsCommandContext eraseAllBreakpointsCommand() {
		EraseAllBreakpointsCommandContext _localctx = new EraseAllBreakpointsCommandContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_eraseAllBreakpointsCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(EB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetrieveCommandContext : ParserRuleContext {
		public ITerminalNode RETRIEVE() { return GetToken(CommandToolParser.RETRIEVE, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public RetrieveCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retrieveCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterRetrieveCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitRetrieveCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetrieveCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetrieveCommandContext retrieveCommand() {
		RetrieveCommandContext _localctx = new RetrieveCommandContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_retrieveCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(RETRIEVE);
			State = 194;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 193; Match(WS);
				}
			}

			State = 196; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralCommandContext : ParserRuleContext {
		public ITerminalNode D() { return GetToken(CommandToolParser.D, 0); }
		public ITerminalNode[] LITERAL() { return GetTokens(CommandToolParser.LITERAL); }
		public ITerminalNode LITERAL(int i) {
			return GetToken(CommandToolParser.LITERAL, i);
		}
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public ITerminalNode HASH() { return GetToken(CommandToolParser.HASH, 0); }
		public LiteralCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterLiteralCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitLiteralCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralCommandContext literalCommand() {
		LiteralCommandContext _localctx = new LiteralCommandContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_literalCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(D);
			State = 200;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 199; Match(WS);
				}
			}

			State = 202; Match(LITERAL);
			State = 205;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 203; Match(WS);
				State = 204;
				_la = _input.La(1);
				if ( !(_la==HASH || _la==LITERAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisassemblyTypeCommandContext : ParserRuleContext {
		public ITerminalNode T() { return GetToken(CommandToolParser.T, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public DisassemblyTypeCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disassemblyTypeCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterDisassemblyTypeCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitDisassemblyTypeCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisassemblyTypeCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisassemblyTypeCommandContext disassemblyTypeCommand() {
		DisassemblyTypeCommandContext _localctx = new DisassemblyTypeCommandContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_disassemblyTypeCommand);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(T);
			State = 209;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 208; Match(WS);
				}
				break;
			}
			State = 214;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 211;
					MatchWildcard();
					}
					} 
				}
				State = 216;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReDisassemblyCommandContext : ParserRuleContext {
		public ITerminalNode RD() { return GetToken(CommandToolParser.RD, 0); }
		public ReDisassemblyCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reDisassemblyCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterReDisassemblyCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitReDisassemblyCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReDisassemblyCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReDisassemblyCommandContext reDisassemblyCommand() {
		ReDisassemblyCommandContext _localctx = new ReDisassemblyCommandContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_reDisassemblyCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(RD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpCommandContext : ParserRuleContext {
		public ITerminalNode J() { return GetToken(CommandToolParser.J, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public JumpCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterJumpCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitJumpCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpCommandContext jumpCommand() {
		JumpCommandContext _localctx = new JumpCommandContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_jumpCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(J);
			State = 221;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 220; Match(WS);
				}
			}

			State = 223; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionCommandContext : ParserRuleContext {
		public ITerminalNode SECTION() { return GetToken(CommandToolParser.SECTION, 0); }
		public ITerminalNode[] LITERAL() { return GetTokens(CommandToolParser.LITERAL); }
		public ITerminalNode LITERAL(int i) {
			return GetToken(CommandToolParser.LITERAL, i);
		}
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public SectionCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sectionCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterSectionCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitSectionCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSectionCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionCommandContext sectionCommand() {
		SectionCommandContext _localctx = new SectionCommandContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_sectionCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(SECTION);
			State = 227;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 226; Match(WS);
				}
			}

			State = 229; Match(LITERAL);
			State = 230; Match(WS);
			State = 231; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddWatchCommandContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(CommandToolParser.ADD, 0); }
		public AddWatchCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addWatchCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterAddWatchCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitAddWatchCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddWatchCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddWatchCommandContext addWatchCommand() {
		AddWatchCommandContext _localctx = new AddWatchCommandContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_addWatchCommand);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(ADD);
			State = 237;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 234;
					MatchWildcard();
					}
					} 
				}
				State = 239;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveWatchCommandContext : ParserRuleContext {
		public ITerminalNode DASH() { return GetToken(CommandToolParser.DASH, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public RemoveWatchCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeWatchCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterRemoveWatchCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitRemoveWatchCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveWatchCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveWatchCommandContext removeWatchCommand() {
		RemoveWatchCommandContext _localctx = new RemoveWatchCommandContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_removeWatchCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(DASH);
			State = 242;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 241; Match(WS);
				}
			}

			State = 244; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateWatchCommandContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(CommandToolParser.MULT, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public UpdateWatchCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateWatchCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterUpdateWatchCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitUpdateWatchCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateWatchCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateWatchCommandContext updateWatchCommand() {
		UpdateWatchCommandContext _localctx = new UpdateWatchCommandContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_updateWatchCommand);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(MULT);
			State = 248;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 247; Match(WS);
				}
			}

			State = 250; Match(LITERAL);
			State = 254;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 251;
					MatchWildcard();
					}
					} 
				}
				State = 256;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelWidthCommandContext : ParserRuleContext {
		public ITerminalNode LW() { return GetToken(CommandToolParser.LW, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public LabelWidthCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelWidthCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterLabelWidthCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitLabelWidthCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelWidthCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelWidthCommandContext labelWidthCommand() {
		LabelWidthCommandContext _localctx = new LabelWidthCommandContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_labelWidthCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(LW);
			State = 259;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 258; Match(WS);
				}
			}

			State = 261; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExchangeWatchCommandContext : ParserRuleContext {
		public ITerminalNode XW() { return GetToken(CommandToolParser.XW, 0); }
		public ITerminalNode[] LITERAL() { return GetTokens(CommandToolParser.LITERAL); }
		public ITerminalNode LITERAL(int i) {
			return GetToken(CommandToolParser.LITERAL, i);
		}
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public ExchangeWatchCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exchangeWatchCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterExchangeWatchCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitExchangeWatchCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExchangeWatchCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExchangeWatchCommandContext exchangeWatchCommand() {
		ExchangeWatchCommandContext _localctx = new ExchangeWatchCommandContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_exchangeWatchCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(XW);
			State = 265;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 264; Match(WS);
				}
			}

			State = 267; Match(LITERAL);
			State = 268; Match(WS);
			State = 269; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseAllWatchCommandContext : ParserRuleContext {
		public ITerminalNode EW() { return GetToken(CommandToolParser.EW, 0); }
		public EraseAllWatchCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseAllWatchCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterEraseAllWatchCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitEraseAllWatchCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseAllWatchCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseAllWatchCommandContext eraseAllWatchCommand() {
		EraseAllWatchCommandContext _localctx = new EraseAllWatchCommandContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_eraseAllWatchCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(EW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompactCommandContext : ParserRuleContext {
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public CompactCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compactCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterCompactCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitCompactCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompactCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompactCommandContext compactCommand() {
		CompactCommandContext _localctx = new CompactCommandContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_compactCommand);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(LITERAL);
			State = 277;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 274;
					MatchWildcard();
					}
					} 
				}
				State = 279;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportDisassemblyCommandContext : ParserRuleContext {
		public ITerminalNode XD() { return GetToken(CommandToolParser.XD, 0); }
		public ITerminalNode[] LITERAL() { return GetTokens(CommandToolParser.LITERAL); }
		public ITerminalNode LITERAL(int i) {
			return GetToken(CommandToolParser.LITERAL, i);
		}
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public ExportDisassemblyCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportDisassemblyCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterExportDisassemblyCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitExportDisassemblyCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDisassemblyCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportDisassemblyCommandContext exportDisassemblyCommand() {
		ExportDisassemblyCommandContext _localctx = new ExportDisassemblyCommandContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_exportDisassemblyCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; Match(XD);
			State = 282;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 281; Match(WS);
				}
			}

			State = 284; Match(LITERAL);
			State = 285; Match(WS);
			State = 286; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3.\x123\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5"+
		"\x3X\n\x3\x3\x4\x3\x4\x5\x4\\\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x5\x5\x62\n"+
		"\x5\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6h\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3"+
		"\b\x5\bp\n\b\x3\b\x3\b\x3\b\x5\bu\n\b\x3\t\x3\t\x5\ty\n\t\x3\t\x3\t\x5"+
		"\t}\n\t\x3\t\a\t\x80\n\t\f\t\xE\t\x83\v\t\x3\n\x3\n\x5\n\x87\n\n\x3\n"+
		"\x3\n\x5\n\x8B\n\n\x3\n\a\n\x8E\n\n\f\n\xE\n\x91\v\n\x3\v\x3\v\x5\v\x95"+
		"\n\v\x3\v\x3\v\x3\v\x3\v\x5\v\x9B\n\v\x3\v\x3\v\x5\v\x9F\n\v\x3\v\x5\v"+
		"\xA2\n\v\x3\v\x3\v\x3\v\x3\v\a\v\xA8\n\v\f\v\xE\v\xAB\v\v\x5\v\xAD\n\v"+
		"\x3\f\x3\f\x5\f\xB1\n\f\x3\f\x3\f\x3\r\x3\r\x5\r\xB7\n\r\x3\r\x3\r\x3"+
		"\xE\x3\xE\x5\xE\xBD\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x5\x10"+
		"\xC5\n\x10\x3\x10\x3\x10\x3\x11\x3\x11\x5\x11\xCB\n\x11\x3\x11\x3\x11"+
		"\x3\x11\x5\x11\xD0\n\x11\x3\x12\x3\x12\x5\x12\xD4\n\x12\x3\x12\a\x12\xD7"+
		"\n\x12\f\x12\xE\x12\xDA\v\x12\x3\x13\x3\x13\x3\x14\x3\x14\x5\x14\xE0\n"+
		"\x14\x3\x14\x3\x14\x3\x15\x3\x15\x5\x15\xE6\n\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x16\x3\x16\a\x16\xEE\n\x16\f\x16\xE\x16\xF1\v\x16\x3\x17\x3"+
		"\x17\x5\x17\xF5\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\xFB\n\x18\x3"+
		"\x18\x3\x18\a\x18\xFF\n\x18\f\x18\xE\x18\x102\v\x18\x3\x19\x3\x19\x5\x19"+
		"\x106\n\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x5\x1A\x10C\n\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\a\x1C\x116\n\x1C\f\x1C\xE\x1C"+
		"\x119\v\x1C\x3\x1D\x3\x1D\x5\x1D\x11D\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\t\x81\x8F\xA9\xD8\xEF\x100\x117\x2\x2\x1E\x2\x2\x4\x2\x6\x2\b"+
		"\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		"\x2\x4\x3\x2\x4\t\x4\x2\n\n,,\x142\x2:\x3\x2\x2\x2\x4W\x3\x2\x2\x2\x6"+
		"Y\x3\x2\x2\x2\b_\x3\x2\x2\x2\n\x65\x3\x2\x2\x2\fk\x3\x2\x2\x2\xEm\x3\x2"+
		"\x2\x2\x10v\x3\x2\x2\x2\x12\x84\x3\x2\x2\x2\x14\x92\x3\x2\x2\x2\x16\xAE"+
		"\x3\x2\x2\x2\x18\xB4\x3\x2\x2\x2\x1A\xBA\x3\x2\x2\x2\x1C\xC0\x3\x2\x2"+
		"\x2\x1E\xC2\x3\x2\x2\x2 \xC8\x3\x2\x2\x2\"\xD1\x3\x2\x2\x2$\xDB\x3\x2"+
		"\x2\x2&\xDD\x3\x2\x2\x2(\xE3\x3\x2\x2\x2*\xEB\x3\x2\x2\x2,\xF2\x3\x2\x2"+
		"\x2.\xF8\x3\x2\x2\x2\x30\x103\x3\x2\x2\x2\x32\x109\x3\x2\x2\x2\x34\x111"+
		"\x3\x2\x2\x2\x36\x113\x3\x2\x2\x2\x38\x11A\x3\x2\x2\x2:;\x5\x4\x3\x2;"+
		"<\a\x2\x2\x3<\x3\x3\x2\x2\x2=X\x5\x6\x4\x2>X\x5\b\x5\x2?X\x5\n\x6\x2@"+
		"X\x5\f\a\x2\x41X\x5\xE\b\x2\x42X\x5\x10\t\x2\x43X\x5\x12\n\x2\x44X\x5"+
		"\x14\v\x2\x45X\x5\x16\f\x2\x46X\x5\x18\r\x2GX\x5\x1A\xE\x2HX\x5\x1C\xF"+
		"\x2IX\x5\x1E\x10\x2JX\x5 \x11\x2KX\x5\"\x12\x2LX\x5$\x13\x2MX\x5&\x14"+
		"\x2NX\x5(\x15\x2OX\x5*\x16\x2PX\x5,\x17\x2QX\x5.\x18\x2RX\x5\x30\x19\x2"+
		"SX\x5\x32\x1A\x2TX\x5\x34\x1B\x2UX\x5\x36\x1C\x2VX\x5\x38\x1D\x2W=\x3"+
		"\x2\x2\x2W>\x3\x2\x2\x2W?\x3\x2\x2\x2W@\x3\x2\x2\x2W\x41\x3\x2\x2\x2W"+
		"\x42\x3\x2\x2\x2W\x43\x3\x2\x2\x2W\x44\x3\x2\x2\x2W\x45\x3\x2\x2\x2W\x46"+
		"\x3\x2\x2\x2WG\x3\x2\x2\x2WH\x3\x2\x2\x2WI\x3\x2\x2\x2WJ\x3\x2\x2\x2W"+
		"K\x3\x2\x2\x2WL\x3\x2\x2\x2WM\x3\x2\x2\x2WN\x3\x2\x2\x2WO\x3\x2\x2\x2"+
		"WP\x3\x2\x2\x2WQ\x3\x2\x2\x2WR\x3\x2\x2\x2WS\x3\x2\x2\x2WT\x3\x2\x2\x2"+
		"WU\x3\x2\x2\x2WV\x3\x2\x2\x2X\x5\x3\x2\x2\x2Y[\a\x13\x2\x2Z\\\a\x3\x2"+
		"\x2[Z\x3\x2\x2\x2[\\\x3\x2\x2\x2\\]\x3\x2\x2\x2]^\a,\x2\x2^\a\x3\x2\x2"+
		"\x2_\x61\a\x1F\x2\x2`\x62\a\x3\x2\x2\x61`\x3\x2\x2\x2\x61\x62\x3\x2\x2"+
		"\x2\x62\x63\x3\x2\x2\x2\x63\x64\a,\x2\x2\x64\t\x3\x2\x2\x2\x65g\a\xE\x2"+
		"\x2\x66h\a\x3\x2\x2g\x66\x3\x2\x2\x2gh\x3\x2\x2\x2hi\x3\x2\x2\x2ij\a,"+
		"\x2\x2j\v\x3\x2\x2\x2kl\a\x1D\x2\x2l\r\x3\x2\x2\x2mo\a\x1B\x2\x2np\a\x3"+
		"\x2\x2on\x3\x2\x2\x2op\x3\x2\x2\x2pq\x3\x2\x2\x2qt\a,\x2\x2rs\a\x3\x2"+
		"\x2su\a,\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2\x2u\xF\x3\x2\x2\x2vx\a\xF\x2\x2"+
		"wy\a\x3\x2\x2xw\x3\x2\x2\x2xy\x3\x2\x2\x2yz\x3\x2\x2\x2z|\a,\x2\x2{}\a"+
		"\x3\x2\x2|{\x3\x2\x2\x2|}\x3\x2\x2\x2}\x81\x3\x2\x2\x2~\x80\v\x2\x2\x2"+
		"\x7F~\x3\x2\x2\x2\x80\x83\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x81\x7F\x3\x2"+
		"\x2\x2\x82\x11\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x84\x86\a\x1E\x2\x2\x85"+
		"\x87\a\x3\x2\x2\x86\x85\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x88\x3\x2"+
		"\x2\x2\x88\x8A\a,\x2\x2\x89\x8B\a\x3\x2\x2\x8A\x89\x3\x2\x2\x2\x8A\x8B"+
		"\x3\x2\x2\x2\x8B\x8F\x3\x2\x2\x2\x8C\x8E\v\x2\x2\x2\x8D\x8C\x3\x2\x2\x2"+
		"\x8E\x91\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x90\x13\x3"+
		"\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x92\x94\a\"\x2\x2\x93\x95\a\x3\x2\x2\x94"+
		"\x93\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96\xA1\a,\x2"+
		"\x2\x97\x98\a\x3\x2\x2\x98\x9A\a\x19\x2\x2\x99\x9B\a\x3\x2\x2\x9A\x99"+
		"\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9E\t\x2\x2\x2"+
		"\x9D\x9F\a\x3\x2\x2\x9E\x9D\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA0\x3"+
		"\x2\x2\x2\xA0\xA2\a,\x2\x2\xA1\x97\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2"+
		"\xAC\x3\x2\x2\x2\xA3\xA4\a\x3\x2\x2\xA4\xA5\a\xF\x2\x2\xA5\xA9\a\x3\x2"+
		"\x2\xA6\xA8\v\x2\x2\x2\xA7\xA6\x3\x2\x2\x2\xA8\xAB\x3\x2\x2\x2\xA9\xAA"+
		"\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xAA\xAD\x3\x2\x2\x2\xAB\xA9\x3\x2\x2"+
		"\x2\xAC\xA3\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\x15\x3\x2\x2\x2\xAE\xB0"+
		"\a$\x2\x2\xAF\xB1\a\x3\x2\x2\xB0\xAF\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1"+
		"\xB2\x3\x2\x2\x2\xB2\xB3\a,\x2\x2\xB3\x17\x3\x2\x2\x2\xB4\xB6\a%\x2\x2"+
		"\xB5\xB7\a\x3\x2\x2\xB6\xB5\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB8\x3"+
		"\x2\x2\x2\xB8\xB9\a,\x2\x2\xB9\x19\x3\x2\x2\x2\xBA\xBC\a&\x2\x2\xBB\xBD"+
		"\a\x3\x2\x2\xBC\xBB\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2"+
		"\xBE\xBF\a,\x2\x2\xBF\x1B\x3\x2\x2\x2\xC0\xC1\a\x11\x2\x2\xC1\x1D\x3\x2"+
		"\x2\x2\xC2\xC4\a*\x2\x2\xC3\xC5\a\x3\x2\x2\xC4\xC3\x3\x2\x2\x2\xC4\xC5"+
		"\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC7\a,\x2\x2\xC7\x1F\x3\x2\x2\x2"+
		"\xC8\xCA\a\x10\x2\x2\xC9\xCB\a\x3\x2\x2\xCA\xC9\x3\x2\x2\x2\xCA\xCB\x3"+
		"\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xCF\a,\x2\x2\xCD\xCE\a\x3\x2\x2\xCE"+
		"\xD0\t\x3\x2\x2\xCF\xCD\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0!\x3\x2\x2"+
		"\x2\xD1\xD3\a#\x2\x2\xD2\xD4\a\x3\x2\x2\xD3\xD2\x3\x2\x2\x2\xD3\xD4\x3"+
		"\x2\x2\x2\xD4\xD8\x3\x2\x2\x2\xD5\xD7\v\x2\x2\x2\xD6\xD5\x3\x2\x2\x2\xD7"+
		"\xDA\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD9#\x3\x2\x2"+
		"\x2\xDA\xD8\x3\x2\x2\x2\xDB\xDC\a \x2\x2\xDC%\x3\x2\x2\x2\xDD\xDF\a\x1A"+
		"\x2\x2\xDE\xE0\a\x3\x2\x2\xDF\xDE\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0"+
		"\xE1\x3\x2\x2\x2\xE1\xE2\a,\x2\x2\xE2\'\x3\x2\x2\x2\xE3\xE5\a+\x2\x2\xE4"+
		"\xE6\a\x3\x2\x2\xE5\xE4\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xE7\x3\x2"+
		"\x2\x2\xE7\xE8\a,\x2\x2\xE8\xE9\a\x3\x2\x2\xE9\xEA\a,\x2\x2\xEA)\x3\x2"+
		"\x2\x2\xEB\xEF\a\v\x2\x2\xEC\xEE\v\x2\x2\x2\xED\xEC\x3\x2\x2\x2\xEE\xF1"+
		"\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xF0+\x3\x2\x2\x2"+
		"\xF1\xEF\x3\x2\x2\x2\xF2\xF4\a\f\x2\x2\xF3\xF5\a\x3\x2\x2\xF4\xF3\x3\x2"+
		"\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\xF7\a,\x2\x2\xF7-\x3"+
		"\x2\x2\x2\xF8\xFA\a\t\x2\x2\xF9\xFB\a\x3\x2\x2\xFA\xF9\x3\x2\x2\x2\xFA"+
		"\xFB\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\x100\a,\x2\x2\xFD\xFF\v\x2\x2"+
		"\x2\xFE\xFD\x3\x2\x2\x2\xFF\x102\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x100"+
		"\xFE\x3\x2\x2\x2\x101/\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2\x103\x105\a\x1C"+
		"\x2\x2\x104\x106\a\x3\x2\x2\x105\x104\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2"+
		"\x106\x107\x3\x2\x2\x2\x107\x108\a,\x2\x2\x108\x31\x3\x2\x2\x2\x109\x10B"+
		"\a(\x2\x2\x10A\x10C\a\x3\x2\x2\x10B\x10A\x3\x2\x2\x2\x10B\x10C\x3\x2\x2"+
		"\x2\x10C\x10D\x3\x2\x2\x2\x10D\x10E\a,\x2\x2\x10E\x10F\a\x3\x2\x2\x10F"+
		"\x110\a,\x2\x2\x110\x33\x3\x2\x2\x2\x111\x112\a\x12\x2\x2\x112\x35\x3"+
		"\x2\x2\x2\x113\x117\a,\x2\x2\x114\x116\v\x2\x2\x2\x115\x114\x3\x2\x2\x2"+
		"\x116\x119\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x117\x115\x3\x2\x2\x2\x118"+
		"\x37\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2\x11A\x11C\a\'\x2\x2\x11B\x11D\a"+
		"\x3\x2\x2\x11C\x11B\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x11E\x3\x2"+
		"\x2\x2\x11E\x11F\a,\x2\x2\x11F\x120\a\x3\x2\x2\x120\x121\a,\x2\x2\x121"+
		"\x39\x3\x2\x2\x2&W[\x61gotx|\x81\x86\x8A\x8F\x94\x9A\x9E\xA1\xA9\xAC\xB0"+
		"\xB6\xBC\xC4\xCA\xCF\xD3\xD8\xDF\xE5\xEF\xF4\xFA\x100\x105\x10B\x117\x11C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Spect.Net.CommandParser.Generated
