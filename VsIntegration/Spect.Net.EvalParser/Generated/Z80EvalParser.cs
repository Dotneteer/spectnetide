//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dotne\source\repos\spectnetide\Assembler\AntlrZ80EvalGenerator\AntlrZ80EvalGenerator\Z80Eval.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrZ80EvalGenerator {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class Z80EvalParser : Parser {
	public const int
		WS=1, COLON=2, SCOLON=3, COMMA=4, ASSIGN=5, LPAR=6, RPAR=7, LSBRAC=8, 
		RSBRAC=9, QMARK=10, PLUS=11, MINUS=12, VBAR=13, UPARR=14, AMP=15, EQOP=16, 
		CIEQOP=17, NEQOP=18, CINEQOP=19, LTOP=20, LTEOP=21, GTOP=22, GTEOP=23, 
		LSHOP=24, RSHOP=25, MULOP=26, DIVOP=27, MODOP=28, TILDE=29, LDBRAC=30, 
		RDBRAC=31, EXCLM=32, A=33, B=34, C=35, D=36, E=37, H=38, L=39, I=40, R=41, 
		XL=42, XH=43, YL=44, YH=45, BC=46, DE=47, HL=48, SP=49, IX=50, IY=51, 
		AF=52, AF_=53, ZF=54, NZF=55, CF=56, NCF=57, POF=58, PEF=59, PF=60, MF=61, 
		HEXNUM=62, BINNUM=63, DECNUM=64, CHAR=65, IDENTIFIER=66, IDSTART=67, IDCONT=68, 
		BYTEF=69, CHARF=70, HEX2F=71, HEX4F=72, HEX8F=73, WORDF=74, DWORDF=75, 
		BITV8F=76, BITV16F=77, STR0F=78, STRF=79, ErrorCharacter=80;
	public const int
		RULE_compileUnit = 0, RULE_formatSpec = 1, RULE_expr = 2, RULE_orExpr = 3, 
		RULE_xorExpr = 4, RULE_andExpr = 5, RULE_equExpr = 6, RULE_relExpr = 7, 
		RULE_shiftExpr = 8, RULE_addExpr = 9, RULE_multExpr = 10, RULE_unaryExpr = 11, 
		RULE_literalExpr = 12, RULE_symbolExpr = 13, RULE_z80Spec = 14, RULE_reg8 = 15, 
		RULE_reg8Idx = 16, RULE_reg8Spec = 17, RULE_reg16 = 18, RULE_reg16Idx = 19, 
		RULE_reg16Std = 20, RULE_reg16Spec = 21, RULE_regIndirect = 22, RULE_memIndirect = 23, 
		RULE_flags = 24;
	public static readonly string[] ruleNames = {
		"compileUnit", "formatSpec", "expr", "orExpr", "xorExpr", "andExpr", "equExpr", 
		"relExpr", "shiftExpr", "addExpr", "multExpr", "unaryExpr", "literalExpr", 
		"symbolExpr", "z80Spec", "reg8", "reg8Idx", "reg8Spec", "reg16", "reg16Idx", 
		"reg16Std", "reg16Spec", "regIndirect", "memIndirect", "flags"
	};

	private static readonly string[] _LiteralNames = {
		null, "' '", "':'", "';'", "','", "'='", "'('", "')'", "'['", "']'", "'?'", 
		"'+'", "'-'", "'|'", "'^'", "'&'", "'=='", "'==='", "'!='", "'!=='", "'<'", 
		"'<='", "'>'", "'>='", "'<<'", "'>>'", "'*'", "'/'", "'%'", "'~'", "'{{'", 
		"'}}'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COLON", "SCOLON", "COMMA", "ASSIGN", "LPAR", "RPAR", "LSBRAC", 
		"RSBRAC", "QMARK", "PLUS", "MINUS", "VBAR", "UPARR", "AMP", "EQOP", "CIEQOP", 
		"NEQOP", "CINEQOP", "LTOP", "LTEOP", "GTOP", "GTEOP", "LSHOP", "RSHOP", 
		"MULOP", "DIVOP", "MODOP", "TILDE", "LDBRAC", "RDBRAC", "EXCLM", "A", 
		"B", "C", "D", "E", "H", "L", "I", "R", "XL", "XH", "YL", "YH", "BC", 
		"DE", "HL", "SP", "IX", "IY", "AF", "AF_", "ZF", "NZF", "CF", "NCF", "POF", 
		"PEF", "PF", "MF", "HEXNUM", "BINNUM", "DECNUM", "CHAR", "IDENTIFIER", 
		"IDSTART", "IDCONT", "BYTEF", "CHARF", "HEX2F", "HEX4F", "HEX8F", "WORDF", 
		"DWORDF", "BITV8F", "BITV16F", "STR0F", "STRF", "ErrorCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Z80Eval.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Z80EvalParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Z80EvalParser.Eof, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FormatSpecContext formatSpec() {
			return GetRuleContext<FormatSpecContext>(0);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (TILDE - 6)) | (1L << (EXCLM - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (ZF - 6)) | (1L << (NZF - 6)) | (1L << (CF - 6)) | (1L << (NCF - 6)) | (1L << (POF - 6)) | (1L << (PEF - 6)) | (1L << (PF - 6)) | (1L << (MF - 6)) | (1L << (HEXNUM - 6)) | (1L << (BINNUM - 6)) | (1L << (DECNUM - 6)) | (1L << (CHAR - 6)) | (1L << (IDENTIFIER - 6)))) != 0)) {
				{
				State = 50; expr();
				}
			}

			State = 54;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BYTEF - 69)) | (1L << (CHARF - 69)) | (1L << (HEX2F - 69)) | (1L << (HEX4F - 69)) | (1L << (HEX8F - 69)) | (1L << (WORDF - 69)) | (1L << (DWORDF - 69)) | (1L << (BITV8F - 69)) | (1L << (BITV16F - 69)) | (1L << (STR0F - 69)) | (1L << (STRF - 69)))) != 0)) {
				{
				State = 53; formatSpec();
				}
			}

			State = 56; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatSpecContext : ParserRuleContext {
		public ITerminalNode BYTEF() { return GetToken(Z80EvalParser.BYTEF, 0); }
		public ITerminalNode CHARF() { return GetToken(Z80EvalParser.CHARF, 0); }
		public ITerminalNode HEX2F() { return GetToken(Z80EvalParser.HEX2F, 0); }
		public ITerminalNode HEX4F() { return GetToken(Z80EvalParser.HEX4F, 0); }
		public ITerminalNode HEX8F() { return GetToken(Z80EvalParser.HEX8F, 0); }
		public ITerminalNode WORDF() { return GetToken(Z80EvalParser.WORDF, 0); }
		public ITerminalNode DWORDF() { return GetToken(Z80EvalParser.DWORDF, 0); }
		public ITerminalNode BITV8F() { return GetToken(Z80EvalParser.BITV8F, 0); }
		public ITerminalNode BITV16F() { return GetToken(Z80EvalParser.BITV16F, 0); }
		public ITerminalNode STR0F() { return GetToken(Z80EvalParser.STR0F, 0); }
		public ITerminalNode STRF() { return GetToken(Z80EvalParser.STRF, 0); }
		public FormatSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterFormatSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitFormatSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatSpecContext formatSpec() {
		FormatSpecContext _localctx = new FormatSpecContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_formatSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			_la = _input.La(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BYTEF - 69)) | (1L << (CHARF - 69)) | (1L << (HEX2F - 69)) | (1L << (HEX4F - 69)) | (1L << (HEX8F - 69)) | (1L << (WORDF - 69)) | (1L << (DWORDF - 69)) | (1L << (BITV8F - 69)) | (1L << (BITV16F - 69)) | (1L << (STR0F - 69)) | (1L << (STRF - 69)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(Z80EvalParser.QMARK, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(Z80EvalParser.COLON, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; orExpr();
			State = 66;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==QMARK) {
				{
				State = 61; Match(QMARK);
				State = 62; expr();
				State = 63; Match(COLON);
				State = 64; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		public XorExprContext[] xorExpr() {
			return GetRuleContexts<XorExprContext>();
		}
		public XorExprContext xorExpr(int i) {
			return GetRuleContext<XorExprContext>(i);
		}
		public ITerminalNode[] VBAR() { return GetTokens(Z80EvalParser.VBAR); }
		public ITerminalNode VBAR(int i) {
			return GetToken(Z80EvalParser.VBAR, i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_orExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; xorExpr();
			State = 73;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==VBAR) {
				{
				{
				State = 69; Match(VBAR);
				State = 70; xorExpr();
				}
				}
				State = 75;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorExprContext : ParserRuleContext {
		public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		public ITerminalNode[] UPARR() { return GetTokens(Z80EvalParser.UPARR); }
		public ITerminalNode UPARR(int i) {
			return GetToken(Z80EvalParser.UPARR, i);
		}
		public XorExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterXorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitXorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorExprContext xorExpr() {
		XorExprContext _localctx = new XorExprContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_xorExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; andExpr();
			State = 81;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==UPARR) {
				{
				{
				State = 77; Match(UPARR);
				State = 78; andExpr();
				}
				}
				State = 83;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		public EquExprContext[] equExpr() {
			return GetRuleContexts<EquExprContext>();
		}
		public EquExprContext equExpr(int i) {
			return GetRuleContext<EquExprContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(Z80EvalParser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(Z80EvalParser.AMP, i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; equExpr();
			State = 89;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AMP) {
				{
				{
				State = 85; Match(AMP);
				State = 86; equExpr();
				}
				}
				State = 91;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquExprContext : ParserRuleContext {
		public RelExprContext[] relExpr() {
			return GetRuleContexts<RelExprContext>();
		}
		public RelExprContext relExpr(int i) {
			return GetRuleContext<RelExprContext>(i);
		}
		public ITerminalNode[] EQOP() { return GetTokens(Z80EvalParser.EQOP); }
		public ITerminalNode EQOP(int i) {
			return GetToken(Z80EvalParser.EQOP, i);
		}
		public ITerminalNode[] NEQOP() { return GetTokens(Z80EvalParser.NEQOP); }
		public ITerminalNode NEQOP(int i) {
			return GetToken(Z80EvalParser.NEQOP, i);
		}
		public ITerminalNode[] CIEQOP() { return GetTokens(Z80EvalParser.CIEQOP); }
		public ITerminalNode CIEQOP(int i) {
			return GetToken(Z80EvalParser.CIEQOP, i);
		}
		public ITerminalNode[] CINEQOP() { return GetTokens(Z80EvalParser.CINEQOP); }
		public ITerminalNode CINEQOP(int i) {
			return GetToken(Z80EvalParser.CINEQOP, i);
		}
		public EquExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterEquExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitEquExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquExprContext equExpr() {
		EquExprContext _localctx = new EquExprContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_equExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; relExpr();
			State = 97;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQOP) | (1L << CIEQOP) | (1L << NEQOP) | (1L << CINEQOP))) != 0)) {
				{
				{
				State = 93;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQOP) | (1L << CIEQOP) | (1L << NEQOP) | (1L << CINEQOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 94; relExpr();
				}
				}
				State = 99;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		public ShiftExprContext[] shiftExpr() {
			return GetRuleContexts<ShiftExprContext>();
		}
		public ShiftExprContext shiftExpr(int i) {
			return GetRuleContext<ShiftExprContext>(i);
		}
		public ITerminalNode[] LTOP() { return GetTokens(Z80EvalParser.LTOP); }
		public ITerminalNode LTOP(int i) {
			return GetToken(Z80EvalParser.LTOP, i);
		}
		public ITerminalNode[] LTEOP() { return GetTokens(Z80EvalParser.LTEOP); }
		public ITerminalNode LTEOP(int i) {
			return GetToken(Z80EvalParser.LTEOP, i);
		}
		public ITerminalNode[] GTOP() { return GetTokens(Z80EvalParser.GTOP); }
		public ITerminalNode GTOP(int i) {
			return GetToken(Z80EvalParser.GTOP, i);
		}
		public ITerminalNode[] GTEOP() { return GetTokens(Z80EvalParser.GTEOP); }
		public ITerminalNode GTEOP(int i) {
			return GetToken(Z80EvalParser.GTEOP, i);
		}
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; shiftExpr();
			State = 105;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP))) != 0)) {
				{
				{
				State = 101;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 102; shiftExpr();
				}
				}
				State = 107;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ITerminalNode[] LSHOP() { return GetTokens(Z80EvalParser.LSHOP); }
		public ITerminalNode LSHOP(int i) {
			return GetToken(Z80EvalParser.LSHOP, i);
		}
		public ITerminalNode[] RSHOP() { return GetTokens(Z80EvalParser.RSHOP); }
		public ITerminalNode RSHOP(int i) {
			return GetToken(Z80EvalParser.RSHOP, i);
		}
		public ShiftExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterShiftExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitShiftExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExprContext shiftExpr() {
		ShiftExprContext _localctx = new ShiftExprContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_shiftExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; addExpr();
			State = 113;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LSHOP || _la==RSHOP) {
				{
				{
				State = 109;
				_la = _input.La(1);
				if ( !(_la==LSHOP || _la==RSHOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 110; addExpr();
				}
				}
				State = 115;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MultExprContext[] multExpr() {
			return GetRuleContexts<MultExprContext>();
		}
		public MultExprContext multExpr(int i) {
			return GetRuleContext<MultExprContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(Z80EvalParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(Z80EvalParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(Z80EvalParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(Z80EvalParser.MINUS, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_addExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; multExpr();
			State = 121;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 117;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 118; multExpr();
				}
				}
				State = 123;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExprContext : ParserRuleContext {
		public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		public ITerminalNode[] MULOP() { return GetTokens(Z80EvalParser.MULOP); }
		public ITerminalNode MULOP(int i) {
			return GetToken(Z80EvalParser.MULOP, i);
		}
		public ITerminalNode[] DIVOP() { return GetTokens(Z80EvalParser.DIVOP); }
		public ITerminalNode DIVOP(int i) {
			return GetToken(Z80EvalParser.DIVOP, i);
		}
		public ITerminalNode[] MODOP() { return GetTokens(Z80EvalParser.MODOP); }
		public ITerminalNode MODOP(int i) {
			return GetToken(Z80EvalParser.MODOP, i);
		}
		public MultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExprContext multExpr() {
		MultExprContext _localctx = new MultExprContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_multExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; unaryExpr();
			State = 129;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULOP) | (1L << DIVOP) | (1L << MODOP))) != 0)) {
				{
				{
				State = 125;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULOP) | (1L << DIVOP) | (1L << MODOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 126; unaryExpr();
				}
				}
				State = 131;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(Z80EvalParser.PLUS, 0); }
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(Z80EvalParser.MINUS, 0); }
		public ITerminalNode TILDE() { return GetToken(Z80EvalParser.TILDE, 0); }
		public ITerminalNode EXCLM() { return GetToken(Z80EvalParser.EXCLM, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80EvalParser.LPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80EvalParser.RPAR, 0); }
		public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		public SymbolExprContext symbolExpr() {
			return GetRuleContext<SymbolExprContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_unaryExpr);
		try {
			State = 146;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132; Match(PLUS);
				State = 133; unaryExpr();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134; Match(MINUS);
				State = 135; unaryExpr();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 136; Match(TILDE);
				State = 137; unaryExpr();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 138; Match(EXCLM);
				State = 139; unaryExpr();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 140; Match(LPAR);
				State = 141; expr();
				State = 142; Match(RPAR);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 144; literalExpr();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 145; symbolExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExprContext : ParserRuleContext {
		public ITerminalNode HEXNUM() { return GetToken(Z80EvalParser.HEXNUM, 0); }
		public ITerminalNode DECNUM() { return GetToken(Z80EvalParser.DECNUM, 0); }
		public ITerminalNode CHAR() { return GetToken(Z80EvalParser.CHAR, 0); }
		public ITerminalNode BINNUM() { return GetToken(Z80EvalParser.BINNUM, 0); }
		public Z80SpecContext z80Spec() {
			return GetRuleContext<Z80SpecContext>(0);
		}
		public LiteralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExprContext literalExpr() {
		LiteralExprContext _localctx = new LiteralExprContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_literalExpr);
		try {
			State = 153;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case HEXNUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148; Match(HEXNUM);
				}
				break;
			case DECNUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; Match(DECNUM);
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 150; Match(CHAR);
				}
				break;
			case BINNUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 151; Match(BINNUM);
				}
				break;
			case LPAR:
			case LSBRAC:
			case A:
			case B:
			case C:
			case D:
			case E:
			case H:
			case L:
			case I:
			case R:
			case XL:
			case XH:
			case YL:
			case YH:
			case BC:
			case DE:
			case HL:
			case SP:
			case IX:
			case IY:
			case AF:
			case AF_:
			case ZF:
			case NZF:
			case CF:
			case NCF:
			case POF:
			case PEF:
			case PF:
			case MF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 152; z80Spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolExprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80EvalParser.IDENTIFIER, 0); }
		public SymbolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterSymbolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitSymbolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolExprContext symbolExpr() {
		SymbolExprContext _localctx = new SymbolExprContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_symbolExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Z80SpecContext : ParserRuleContext {
		public Reg8Context reg8() {
			return GetRuleContext<Reg8Context>(0);
		}
		public Reg8IdxContext reg8Idx() {
			return GetRuleContext<Reg8IdxContext>(0);
		}
		public Reg8SpecContext reg8Spec() {
			return GetRuleContext<Reg8SpecContext>(0);
		}
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public Reg16SpecContext reg16Spec() {
			return GetRuleContext<Reg16SpecContext>(0);
		}
		public RegIndirectContext regIndirect() {
			return GetRuleContext<RegIndirectContext>(0);
		}
		public MemIndirectContext memIndirect() {
			return GetRuleContext<MemIndirectContext>(0);
		}
		public FlagsContext flags() {
			return GetRuleContext<FlagsContext>(0);
		}
		public Z80SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_z80Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterZ80Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitZ80Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZ80Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Z80SpecContext z80Spec() {
		Z80SpecContext _localctx = new Z80SpecContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_z80Spec);
		try {
			State = 166;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case A:
			case B:
			case C:
			case D:
			case E:
			case H:
			case L:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; reg8();
				}
				break;
			case XL:
			case XH:
			case YL:
			case YH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; reg8Idx();
				}
				break;
			case I:
			case R:
				EnterOuterAlt(_localctx, 3);
				{
				State = 159; reg8Spec();
				}
				break;
			case BC:
			case DE:
			case HL:
			case SP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 160; reg16();
				}
				break;
			case IX:
			case IY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 161; reg16Idx();
				}
				break;
			case AF:
			case AF_:
				EnterOuterAlt(_localctx, 6);
				{
				State = 162; reg16Spec();
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 163; regIndirect();
				}
				break;
			case LSBRAC:
				EnterOuterAlt(_localctx, 8);
				{
				State = 164; memIndirect();
				}
				break;
			case ZF:
			case NZF:
			case CF:
			case NCF:
			case POF:
			case PEF:
			case PF:
			case MF:
				EnterOuterAlt(_localctx, 9);
				{
				State = 165; flags();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8Context : ParserRuleContext {
		public ITerminalNode A() { return GetToken(Z80EvalParser.A, 0); }
		public ITerminalNode B() { return GetToken(Z80EvalParser.B, 0); }
		public ITerminalNode C() { return GetToken(Z80EvalParser.C, 0); }
		public ITerminalNode D() { return GetToken(Z80EvalParser.D, 0); }
		public ITerminalNode E() { return GetToken(Z80EvalParser.E, 0); }
		public ITerminalNode H() { return GetToken(Z80EvalParser.H, 0); }
		public ITerminalNode L() { return GetToken(Z80EvalParser.L, 0); }
		public Reg8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterReg8(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitReg8(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8Context reg8() {
		Reg8Context _localctx = new Reg8Context(_ctx, State);
		EnterRule(_localctx, 30, RULE_reg8);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A) | (1L << B) | (1L << C) | (1L << D) | (1L << E) | (1L << H) | (1L << L))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8IdxContext : ParserRuleContext {
		public ITerminalNode XL() { return GetToken(Z80EvalParser.XL, 0); }
		public ITerminalNode XH() { return GetToken(Z80EvalParser.XH, 0); }
		public ITerminalNode YL() { return GetToken(Z80EvalParser.YL, 0); }
		public ITerminalNode YH() { return GetToken(Z80EvalParser.YH, 0); }
		public Reg8IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterReg8Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitReg8Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8IdxContext reg8Idx() {
		Reg8IdxContext _localctx = new Reg8IdxContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_reg8Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << XL) | (1L << XH) | (1L << YL) | (1L << YH))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8SpecContext : ParserRuleContext {
		public ITerminalNode I() { return GetToken(Z80EvalParser.I, 0); }
		public ITerminalNode R() { return GetToken(Z80EvalParser.R, 0); }
		public Reg8SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterReg8Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitReg8Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8SpecContext reg8Spec() {
		Reg8SpecContext _localctx = new Reg8SpecContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_reg8Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			_la = _input.La(1);
			if ( !(_la==I || _la==R) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16Context : ParserRuleContext {
		public ITerminalNode BC() { return GetToken(Z80EvalParser.BC, 0); }
		public ITerminalNode DE() { return GetToken(Z80EvalParser.DE, 0); }
		public ITerminalNode HL() { return GetToken(Z80EvalParser.HL, 0); }
		public ITerminalNode SP() { return GetToken(Z80EvalParser.SP, 0); }
		public Reg16Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterReg16(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitReg16(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16Context reg16() {
		Reg16Context _localctx = new Reg16Context(_ctx, State);
		EnterRule(_localctx, 36, RULE_reg16);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BC) | (1L << DE) | (1L << HL) | (1L << SP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16IdxContext : ParserRuleContext {
		public ITerminalNode IX() { return GetToken(Z80EvalParser.IX, 0); }
		public ITerminalNode IY() { return GetToken(Z80EvalParser.IY, 0); }
		public Reg16IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterReg16Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitReg16Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16IdxContext reg16Idx() {
		Reg16IdxContext _localctx = new Reg16IdxContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_reg16Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			_la = _input.La(1);
			if ( !(_la==IX || _la==IY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16StdContext : ParserRuleContext {
		public ITerminalNode BC() { return GetToken(Z80EvalParser.BC, 0); }
		public ITerminalNode DE() { return GetToken(Z80EvalParser.DE, 0); }
		public ITerminalNode HL() { return GetToken(Z80EvalParser.HL, 0); }
		public ITerminalNode IX() { return GetToken(Z80EvalParser.IX, 0); }
		public ITerminalNode IY() { return GetToken(Z80EvalParser.IY, 0); }
		public Reg16StdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Std; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterReg16Std(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitReg16Std(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Std(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16StdContext reg16Std() {
		Reg16StdContext _localctx = new Reg16StdContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_reg16Std);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BC) | (1L << DE) | (1L << HL) | (1L << IX) | (1L << IY))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16SpecContext : ParserRuleContext {
		public ITerminalNode AF() { return GetToken(Z80EvalParser.AF, 0); }
		public ITerminalNode AF_() { return GetToken(Z80EvalParser.AF_, 0); }
		public Reg16SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterReg16Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitReg16Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16SpecContext reg16Spec() {
		Reg16SpecContext _localctx = new Reg16SpecContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_reg16Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_la = _input.La(1);
			if ( !(_la==AF || _la==AF_) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegIndirectContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80EvalParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80EvalParser.RPAR, 0); }
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public RegIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterRegIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitRegIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegIndirectContext regIndirect() {
		RegIndirectContext _localctx = new RegIndirectContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_regIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(LPAR);
			{
			State = 183; reg16();
			}
			State = 184; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemIndirectContext : ParserRuleContext {
		public ITerminalNode LSBRAC() { return GetToken(Z80EvalParser.LSBRAC, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RSBRAC() { return GetToken(Z80EvalParser.RSBRAC, 0); }
		public MemIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterMemIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitMemIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemIndirectContext memIndirect() {
		MemIndirectContext _localctx = new MemIndirectContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_memIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(LSBRAC);
			State = 187; expr();
			State = 188; Match(RSBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlagsContext : ParserRuleContext {
		public ITerminalNode ZF() { return GetToken(Z80EvalParser.ZF, 0); }
		public ITerminalNode NZF() { return GetToken(Z80EvalParser.NZF, 0); }
		public ITerminalNode CF() { return GetToken(Z80EvalParser.CF, 0); }
		public ITerminalNode NCF() { return GetToken(Z80EvalParser.NCF, 0); }
		public ITerminalNode POF() { return GetToken(Z80EvalParser.POF, 0); }
		public ITerminalNode PEF() { return GetToken(Z80EvalParser.PEF, 0); }
		public ITerminalNode PF() { return GetToken(Z80EvalParser.PF, 0); }
		public ITerminalNode MF() { return GetToken(Z80EvalParser.MF, 0); }
		public FlagsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flags; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterFlags(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitFlags(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlags(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlagsContext flags() {
		FlagsContext _localctx = new FlagsContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_flags);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ZF) | (1L << NZF) | (1L << CF) | (1L << NCF) | (1L << POF) | (1L << PEF) | (1L << PF) | (1L << MF))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3R\xC3\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x3\x2"+
		"\x5\x2\x36\n\x2\x3\x2\x5\x2\x39\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x45\n\x4\x3\x5\x3\x5\x3\x5\a\x5J\n\x5"+
		"\f\x5\xE\x5M\v\x5\x3\x6\x3\x6\x3\x6\a\x6R\n\x6\f\x6\xE\x6U\v\x6\x3\a\x3"+
		"\a\x3\a\a\aZ\n\a\f\a\xE\a]\v\a\x3\b\x3\b\x3\b\a\b\x62\n\b\f\b\xE\b\x65"+
		"\v\b\x3\t\x3\t\x3\t\a\tj\n\t\f\t\xE\tm\v\t\x3\n\x3\n\x3\n\a\nr\n\n\f\n"+
		"\xE\nu\v\n\x3\v\x3\v\x3\v\a\vz\n\v\f\v\xE\v}\v\v\x3\f\x3\f\x3\f\a\f\x82"+
		"\n\f\f\f\xE\f\x85\v\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x5\r\x95\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE"+
		"\x9C\n\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x5\x10\xA9\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3"+
		"\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x2"+
		"\x2\x2\x1B\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30"+
		"\x2\x32\x2\x2\x10\x3\x2GQ\x3\x2\x12\x15\x3\x2\x16\x19\x3\x2\x1A\x1B\x3"+
		"\x2\r\xE\x3\x2\x1C\x1E\x3\x2#)\x3\x2,/\x3\x2*+\x3\x2\x30\x33\x3\x2\x34"+
		"\x35\x4\x2\x30\x32\x34\x35\x3\x2\x36\x37\x3\x2\x38?\xC6\x2\x35\x3\x2\x2"+
		"\x2\x4<\x3\x2\x2\x2\x6>\x3\x2\x2\x2\b\x46\x3\x2\x2\x2\nN\x3\x2\x2\x2\f"+
		"V\x3\x2\x2\x2\xE^\x3\x2\x2\x2\x10\x66\x3\x2\x2\x2\x12n\x3\x2\x2\x2\x14"+
		"v\x3\x2\x2\x2\x16~\x3\x2\x2\x2\x18\x94\x3\x2\x2\x2\x1A\x9B\x3\x2\x2\x2"+
		"\x1C\x9D\x3\x2\x2\x2\x1E\xA8\x3\x2\x2\x2 \xAA\x3\x2\x2\x2\"\xAC\x3\x2"+
		"\x2\x2$\xAE\x3\x2\x2\x2&\xB0\x3\x2\x2\x2(\xB2\x3\x2\x2\x2*\xB4\x3\x2\x2"+
		"\x2,\xB6\x3\x2\x2\x2.\xB8\x3\x2\x2\x2\x30\xBC\x3\x2\x2\x2\x32\xC0\x3\x2"+
		"\x2\x2\x34\x36\x5\x6\x4\x2\x35\x34\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36"+
		"\x38\x3\x2\x2\x2\x37\x39\x5\x4\x3\x2\x38\x37\x3\x2\x2\x2\x38\x39\x3\x2"+
		"\x2\x2\x39:\x3\x2\x2\x2:;\a\x2\x2\x3;\x3\x3\x2\x2\x2<=\t\x2\x2\x2=\x5"+
		"\x3\x2\x2\x2>\x44\x5\b\x5\x2?@\a\f\x2\x2@\x41\x5\x6\x4\x2\x41\x42\a\x4"+
		"\x2\x2\x42\x43\x5\x6\x4\x2\x43\x45\x3\x2\x2\x2\x44?\x3\x2\x2\x2\x44\x45"+
		"\x3\x2\x2\x2\x45\a\x3\x2\x2\x2\x46K\x5\n\x6\x2GH\a\xF\x2\x2HJ\x5\n\x6"+
		"\x2IG\x3\x2\x2\x2JM\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2L\t\x3\x2\x2"+
		"\x2MK\x3\x2\x2\x2NS\x5\f\a\x2OP\a\x10\x2\x2PR\x5\f\a\x2QO\x3\x2\x2\x2"+
		"RU\x3\x2\x2\x2SQ\x3\x2\x2\x2ST\x3\x2\x2\x2T\v\x3\x2\x2\x2US\x3\x2\x2\x2"+
		"V[\x5\xE\b\x2WX\a\x11\x2\x2XZ\x5\xE\b\x2YW\x3\x2\x2\x2Z]\x3\x2\x2\x2["+
		"Y\x3\x2\x2\x2[\\\x3\x2\x2\x2\\\r\x3\x2\x2\x2][\x3\x2\x2\x2^\x63\x5\x10"+
		"\t\x2_`\t\x3\x2\x2`\x62\x5\x10\t\x2\x61_\x3\x2\x2\x2\x62\x65\x3\x2\x2"+
		"\x2\x63\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\xF\x3\x2\x2\x2\x65\x63"+
		"\x3\x2\x2\x2\x66k\x5\x12\n\x2gh\t\x4\x2\x2hj\x5\x12\n\x2ig\x3\x2\x2\x2"+
		"jm\x3\x2\x2\x2ki\x3\x2\x2\x2kl\x3\x2\x2\x2l\x11\x3\x2\x2\x2mk\x3\x2\x2"+
		"\x2ns\x5\x14\v\x2op\t\x5\x2\x2pr\x5\x14\v\x2qo\x3\x2\x2\x2ru\x3\x2\x2"+
		"\x2sq\x3\x2\x2\x2st\x3\x2\x2\x2t\x13\x3\x2\x2\x2us\x3\x2\x2\x2v{\x5\x16"+
		"\f\x2wx\t\x6\x2\x2xz\x5\x16\f\x2yw\x3\x2\x2\x2z}\x3\x2\x2\x2{y\x3\x2\x2"+
		"\x2{|\x3\x2\x2\x2|\x15\x3\x2\x2\x2}{\x3\x2\x2\x2~\x83\x5\x18\r\x2\x7F"+
		"\x80\t\a\x2\x2\x80\x82\x5\x18\r\x2\x81\x7F\x3\x2\x2\x2\x82\x85\x3\x2\x2"+
		"\x2\x83\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x17\x3\x2\x2\x2\x85\x83"+
		"\x3\x2\x2\x2\x86\x87\a\r\x2\x2\x87\x95\x5\x18\r\x2\x88\x89\a\xE\x2\x2"+
		"\x89\x95\x5\x18\r\x2\x8A\x8B\a\x1F\x2\x2\x8B\x95\x5\x18\r\x2\x8C\x8D\a"+
		"\"\x2\x2\x8D\x95\x5\x18\r\x2\x8E\x8F\a\b\x2\x2\x8F\x90\x5\x6\x4\x2\x90"+
		"\x91\a\t\x2\x2\x91\x95\x3\x2\x2\x2\x92\x95\x5\x1A\xE\x2\x93\x95\x5\x1C"+
		"\xF\x2\x94\x86\x3\x2\x2\x2\x94\x88\x3\x2\x2\x2\x94\x8A\x3\x2\x2\x2\x94"+
		"\x8C\x3\x2\x2\x2\x94\x8E\x3\x2\x2\x2\x94\x92\x3\x2\x2\x2\x94\x93\x3\x2"+
		"\x2\x2\x95\x19\x3\x2\x2\x2\x96\x9C\a@\x2\x2\x97\x9C\a\x42\x2\x2\x98\x9C"+
		"\a\x43\x2\x2\x99\x9C\a\x41\x2\x2\x9A\x9C\x5\x1E\x10\x2\x9B\x96\x3\x2\x2"+
		"\x2\x9B\x97\x3\x2\x2\x2\x9B\x98\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9B\x9A"+
		"\x3\x2\x2\x2\x9C\x1B\x3\x2\x2\x2\x9D\x9E\a\x44\x2\x2\x9E\x1D\x3\x2\x2"+
		"\x2\x9F\xA9\x5 \x11\x2\xA0\xA9\x5\"\x12\x2\xA1\xA9\x5$\x13\x2\xA2\xA9"+
		"\x5&\x14\x2\xA3\xA9\x5(\x15\x2\xA4\xA9\x5,\x17\x2\xA5\xA9\x5.\x18\x2\xA6"+
		"\xA9\x5\x30\x19\x2\xA7\xA9\x5\x32\x1A\x2\xA8\x9F\x3\x2\x2\x2\xA8\xA0\x3"+
		"\x2\x2\x2\xA8\xA1\x3\x2\x2\x2\xA8\xA2\x3\x2\x2\x2\xA8\xA3\x3\x2\x2\x2"+
		"\xA8\xA4\x3\x2\x2\x2\xA8\xA5\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA7\x3"+
		"\x2\x2\x2\xA9\x1F\x3\x2\x2\x2\xAA\xAB\t\b\x2\x2\xAB!\x3\x2\x2\x2\xAC\xAD"+
		"\t\t\x2\x2\xAD#\x3\x2\x2\x2\xAE\xAF\t\n\x2\x2\xAF%\x3\x2\x2\x2\xB0\xB1"+
		"\t\v\x2\x2\xB1\'\x3\x2\x2\x2\xB2\xB3\t\f\x2\x2\xB3)\x3\x2\x2\x2\xB4\xB5"+
		"\t\r\x2\x2\xB5+\x3\x2\x2\x2\xB6\xB7\t\xE\x2\x2\xB7-\x3\x2\x2\x2\xB8\xB9"+
		"\a\b\x2\x2\xB9\xBA\x5&\x14\x2\xBA\xBB\a\t\x2\x2\xBB/\x3\x2\x2\x2\xBC\xBD"+
		"\a\n\x2\x2\xBD\xBE\x5\x6\x4\x2\xBE\xBF\a\v\x2\x2\xBF\x31\x3\x2\x2\x2\xC0"+
		"\xC1\t\xF\x2\x2\xC1\x33\x3\x2\x2\x2\x10\x35\x38\x44KS[\x63ks{\x83\x94"+
		"\x9B\xA8";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AntlrZ80EvalGenerator
