//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dotne\source\repos\spectnetide\v2\Assembler\AntlrZ80AsmParserGenerator\ParserGenerator\Z80Asm.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Spect.Net.Assembler.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class Z80AsmParser : Z80AsmBaseParser {
	public const int
		WS=1, BLCOMMENT=2, COMMENT=3, NEWLINE=4, COLON=5, DCOLON=6, SCOLON=7, 
		COMSEP=8, COMMA=9, ASSIGN=10, LPAR=11, RPAR=12, LSBRAC=13, RSBRAC=14, 
		QMARK=15, PLUS=16, MINUS=17, VBAR=18, UPARR=19, AMP=20, EQOP=21, CIEQOP=22, 
		NEQOP=23, CINEQOP=24, LTOP=25, LTEOP=26, GTOP=27, GTEOP=28, LSHOP=29, 
		RSHOP=30, MULOP=31, DIVOP=32, MODOP=33, MINOP=34, MAXOP=35, TILDE=36, 
		LDBRAC=37, RDBRAC=38, EXCLM=39, DOT=40, GOESTO=41, A=42, B=43, C=44, D=45, 
		E=46, H=47, L=48, I=49, R=50, XL=51, XH=52, YL=53, YH=54, BC=55, DE=56, 
		HL=57, SP=58, IX=59, IY=60, AF=61, AF_=62, Z=63, NZ=64, NC=65, PO=66, 
		PE=67, P=68, M=69, NOP=70, RLCA=71, RRCA=72, RLA=73, RRA=74, DAA=75, CPL=76, 
		SCF=77, CCF=78, HALT=79, RET=80, EXX=81, DI=82, EI=83, NEG=84, RETN=85, 
		RETI=86, RLD=87, RRD=88, LDI=89, CPI=90, INI=91, OUTI=92, LDD=93, CPD=94, 
		IND=95, OUTD=96, LDIR=97, CPIR=98, INIR=99, OTIR=100, LDDR=101, CPDR=102, 
		INDR=103, OTDR=104, LD=105, INC=106, DEC=107, EX=108, ADD=109, ADC=110, 
		SUB=111, SBC=112, AND=113, XOR=114, OR=115, CP=116, DJNZ=117, JR=118, 
		JP=119, CALL=120, RST=121, PUSH=122, POP=123, IN=124, OUT=125, IM=126, 
		RLC=127, RRC=128, RL=129, RR=130, SLA=131, SRA=132, SLL=133, SRL=134, 
		BIT=135, RES=136, SET=137, SWAPNIB=138, MUL=139, POPX=140, MIRROR=141, 
		TEST=142, NEXTREG=143, OUTINB=144, LDIX=145, LDIRX=146, LDDX=147, LDDRX=148, 
		PIXELDN=149, PIXELAD=150, SETAE=151, LDPIRX=152, LDIRSCALE=153, IFDEF=154, 
		IFNDEF=155, ENDIF=156, ELSE=157, DEFINE=158, UNDEF=159, INCLUDE=160, IF=161, 
		IFMOD=162, IFNMOD=163, LINEDIR=164, ORGPRAG=165, BANKPRAG=166, XORGPR=167, 
		ENTPRAG=168, XENTPRAG=169, EQUPRAG=170, VARPRAG=171, DISPRAG=172, DBPRAG=173, 
		DWPRAG=174, DMPRAG=175, DNPRAG=176, DHPRAG=177, DGXPRAG=178, DGPRAG=179, 
		DCPRAG=180, SKIPRAG=181, EXTPRAG=182, DSPRAG=183, FBPRAG=184, FWPRAG=185, 
		MODPRAG=186, ALGPRAG=187, TRACE=188, TRACEHEX=189, RNDSEED=190, ERRORPR=191, 
		INCBIN=192, COMPAREBIN=193, ZXBPRAG=194, MACRO=195, ENDMACRO=196, PROC=197, 
		ENDPROC=198, LOOP=199, ENDLOOP=200, REPEAT=201, UNTIL=202, WHILE=203, 
		ENDWHILE=204, IFSTMT=205, IFUSED=206, IFNUSED=207, ELIF=208, ELSESTMT=209, 
		ENDIFSTMT=210, FOR=211, TO=212, STEP=213, FORNEXT=214, NEXT=215, BREAK=216, 
		CONTINUE=217, MODULE=218, ENDMOD=219, STRUCT=220, ENDST=221, LOCAL=222, 
		TEXTOF=223, LTEXTOF=224, HREG=225, LREG=226, DEF=227, ISREG8=228, ISREG8STD=229, 
		ISREG8SPEC=230, ISREG8IDX=231, ISREG16=232, ISREG16STD=233, ISREG16IDX=234, 
		ISREGINDIRECT=235, ISCPORT=236, ISINDEXEDADDR=237, ISCONDITION=238, ISEXPR=239, 
		HEXNUM=240, BINNUM=241, OCTNUM=242, DECNUM=243, CURADDR=244, REALNUM=245, 
		CHAR=246, STRING=247, FSTRING=248, BOOLLIT=249, TRUE=250, FALSE=251, IDENTIFIER=252, 
		IDSTART=253, IDCONT=254, CURCNT=255, NONEARG=256, ErrorCharacter=257;
	public const int
		RULE_compileUnit = 0, RULE_asmline = 1, RULE_lineBody = 2, RULE_label = 3, 
		RULE_comment = 4, RULE_pragma = 5, RULE_directive = 6, RULE_statement = 7, 
		RULE_iterationTest = 8, RULE_macroStatement = 9, RULE_macroEndMarker = 10, 
		RULE_procStatement = 11, RULE_procEndMarker = 12, RULE_loopEndMarker = 13, 
		RULE_repeatStatement = 14, RULE_whileEndMarker = 15, RULE_ifStatement = 16, 
		RULE_elseStatement = 17, RULE_endifStatement = 18, RULE_forStatement = 19, 
		RULE_nextStatement = 20, RULE_breakStatement = 21, RULE_continueStatement = 22, 
		RULE_moduleStatement = 23, RULE_moduleEndMarker = 24, RULE_structStatement = 25, 
		RULE_structEndMarker = 26, RULE_localStatement = 27, RULE_macroOrStructInvocation = 28, 
		RULE_macroArgument = 29, RULE_fieldAssignment = 30, RULE_orgPragma = 31, 
		RULE_bankPragma = 32, RULE_xorgPragma = 33, RULE_entPragma = 34, RULE_xentPragma = 35, 
		RULE_dispPragma = 36, RULE_equPragma = 37, RULE_varPragma = 38, RULE_defbPragma = 39, 
		RULE_defwPragma = 40, RULE_defcPragma = 41, RULE_defmPragma = 42, RULE_defnPragma = 43, 
		RULE_defhPragma = 44, RULE_skipPragma = 45, RULE_externPragma = 46, RULE_defsPragma = 47, 
		RULE_fillbPragma = 48, RULE_fillwPragma = 49, RULE_modelPragma = 50, RULE_alignPragma = 51, 
		RULE_tracePragma = 52, RULE_rndSeedPragma = 53, RULE_defgxPragma = 54, 
		RULE_defgPragma = 55, RULE_errorPragma = 56, RULE_incBinPragma = 57, RULE_compareBinPragma = 58, 
		RULE_zxBasicPragma = 59, RULE_byteEmPragma = 60, RULE_operation = 61, 
		RULE_trivialOperation = 62, RULE_compoundOperation = 63, RULE_trivialNextOperation = 64, 
		RULE_operand = 65, RULE_reg8 = 66, RULE_reg8Idx = 67, RULE_reg8Spec = 68, 
		RULE_reg16 = 69, RULE_reg16Idx = 70, RULE_reg16Std = 71, RULE_reg16Spec = 72, 
		RULE_regIndirect = 73, RULE_cPort = 74, RULE_memIndirect = 75, RULE_indexedAddr = 76, 
		RULE_condition = 77, RULE_expr = 78, RULE_functionInvocation = 79, RULE_builtinFunctionInvocation = 80, 
		RULE_literal = 81, RULE_symbol = 82, RULE_macroParam = 83, RULE_regs = 84, 
		RULE_regsAndConds = 85, RULE_mnemonic = 86;
	public static readonly string[] ruleNames = {
		"compileUnit", "asmline", "lineBody", "label", "comment", "pragma", "directive", 
		"statement", "iterationTest", "macroStatement", "macroEndMarker", "procStatement", 
		"procEndMarker", "loopEndMarker", "repeatStatement", "whileEndMarker", 
		"ifStatement", "elseStatement", "endifStatement", "forStatement", "nextStatement", 
		"breakStatement", "continueStatement", "moduleStatement", "moduleEndMarker", 
		"structStatement", "structEndMarker", "localStatement", "macroOrStructInvocation", 
		"macroArgument", "fieldAssignment", "orgPragma", "bankPragma", "xorgPragma", 
		"entPragma", "xentPragma", "dispPragma", "equPragma", "varPragma", "defbPragma", 
		"defwPragma", "defcPragma", "defmPragma", "defnPragma", "defhPragma", 
		"skipPragma", "externPragma", "defsPragma", "fillbPragma", "fillwPragma", 
		"modelPragma", "alignPragma", "tracePragma", "rndSeedPragma", "defgxPragma", 
		"defgPragma", "errorPragma", "incBinPragma", "compareBinPragma", "zxBasicPragma", 
		"byteEmPragma", "operation", "trivialOperation", "compoundOperation", 
		"trivialNextOperation", "operand", "reg8", "reg8Idx", "reg8Spec", "reg16", 
		"reg16Idx", "reg16Std", "reg16Spec", "regIndirect", "cPort", "memIndirect", 
		"indexedAddr", "condition", "expr", "functionInvocation", "builtinFunctionInvocation", 
		"literal", "symbol", "macroParam", "regs", "regsAndConds", "mnemonic"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "':'", "'::'", "';'", "'//'", "','", "'='", 
		"'('", "')'", "'['", "']'", "'?'", "'+'", "'-'", "'|'", "'^'", "'&'", 
		"'=='", "'==='", "'!='", "'!=='", "'<'", "'<='", "'>'", "'>='", "'<<'", 
		"'>>'", "'*'", "'/'", "'%'", "'<?'", "'>?'", "'~'", "'{{'", "'}}'", "'!'", 
		"'.'", "'->'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'#ifdef'", "'#ifndef'", "'#endif'", 
		"'#else'", "'#define'", "'#undef'", "'#include'", "'#if'", "'#ifmod'", 
		"'#ifnmod'", "'#line'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'$'", 
		null, null, null, null, null, null, null, null, null, null, null, "'$<none>$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "BLCOMMENT", "COMMENT", "NEWLINE", "COLON", "DCOLON", "SCOLON", 
		"COMSEP", "COMMA", "ASSIGN", "LPAR", "RPAR", "LSBRAC", "RSBRAC", "QMARK", 
		"PLUS", "MINUS", "VBAR", "UPARR", "AMP", "EQOP", "CIEQOP", "NEQOP", "CINEQOP", 
		"LTOP", "LTEOP", "GTOP", "GTEOP", "LSHOP", "RSHOP", "MULOP", "DIVOP", 
		"MODOP", "MINOP", "MAXOP", "TILDE", "LDBRAC", "RDBRAC", "EXCLM", "DOT", 
		"GOESTO", "A", "B", "C", "D", "E", "H", "L", "I", "R", "XL", "XH", "YL", 
		"YH", "BC", "DE", "HL", "SP", "IX", "IY", "AF", "AF_", "Z", "NZ", "NC", 
		"PO", "PE", "P", "M", "NOP", "RLCA", "RRCA", "RLA", "RRA", "DAA", "CPL", 
		"SCF", "CCF", "HALT", "RET", "EXX", "DI", "EI", "NEG", "RETN", "RETI", 
		"RLD", "RRD", "LDI", "CPI", "INI", "OUTI", "LDD", "CPD", "IND", "OUTD", 
		"LDIR", "CPIR", "INIR", "OTIR", "LDDR", "CPDR", "INDR", "OTDR", "LD", 
		"INC", "DEC", "EX", "ADD", "ADC", "SUB", "SBC", "AND", "XOR", "OR", "CP", 
		"DJNZ", "JR", "JP", "CALL", "RST", "PUSH", "POP", "IN", "OUT", "IM", "RLC", 
		"RRC", "RL", "RR", "SLA", "SRA", "SLL", "SRL", "BIT", "RES", "SET", "SWAPNIB", 
		"MUL", "POPX", "MIRROR", "TEST", "NEXTREG", "OUTINB", "LDIX", "LDIRX", 
		"LDDX", "LDDRX", "PIXELDN", "PIXELAD", "SETAE", "LDPIRX", "LDIRSCALE", 
		"IFDEF", "IFNDEF", "ENDIF", "ELSE", "DEFINE", "UNDEF", "INCLUDE", "IF", 
		"IFMOD", "IFNMOD", "LINEDIR", "ORGPRAG", "BANKPRAG", "XORGPR", "ENTPRAG", 
		"XENTPRAG", "EQUPRAG", "VARPRAG", "DISPRAG", "DBPRAG", "DWPRAG", "DMPRAG", 
		"DNPRAG", "DHPRAG", "DGXPRAG", "DGPRAG", "DCPRAG", "SKIPRAG", "EXTPRAG", 
		"DSPRAG", "FBPRAG", "FWPRAG", "MODPRAG", "ALGPRAG", "TRACE", "TRACEHEX", 
		"RNDSEED", "ERRORPR", "INCBIN", "COMPAREBIN", "ZXBPRAG", "MACRO", "ENDMACRO", 
		"PROC", "ENDPROC", "LOOP", "ENDLOOP", "REPEAT", "UNTIL", "WHILE", "ENDWHILE", 
		"IFSTMT", "IFUSED", "IFNUSED", "ELIF", "ELSESTMT", "ENDIFSTMT", "FOR", 
		"TO", "STEP", "FORNEXT", "NEXT", "BREAK", "CONTINUE", "MODULE", "ENDMOD", 
		"STRUCT", "ENDST", "LOCAL", "TEXTOF", "LTEXTOF", "HREG", "LREG", "DEF", 
		"ISREG8", "ISREG8STD", "ISREG8SPEC", "ISREG8IDX", "ISREG16", "ISREG16STD", 
		"ISREG16IDX", "ISREGINDIRECT", "ISCPORT", "ISINDEXEDADDR", "ISCONDITION", 
		"ISEXPR", "HEXNUM", "BINNUM", "OCTNUM", "DECNUM", "CURADDR", "REALNUM", 
		"CHAR", "STRING", "FSTRING", "BOOLLIT", "TRUE", "FALSE", "IDENTIFIER", 
		"IDSTART", "IDCONT", "CURCNT", "NONEARG", "ErrorCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Z80Asm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Z80AsmParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Z80AsmParser.Eof, 0); }
		public AsmlineContext[] asmline() {
			return GetRuleContexts<AsmlineContext>();
		}
		public AsmlineContext asmline(int i) {
			return GetRuleContext<AsmlineContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(Z80AsmParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(Z80AsmParser.NEWLINE, i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			int _alt;
			State = 201;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 175; Match(NEWLINE);
						}
						} 
					}
					State = 180;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
				}
				State = 181; asmline();
				State = 190;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 183;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 182; Match(NEWLINE);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 185;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						State = 187; asmline();
						}
						} 
					}
					State = 192;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				}
				State = 196;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 193; Match(NEWLINE);
					}
					}
					State = 198;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 199; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmlineContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public LineBodyContext lineBody() {
			return GetRuleContext<LineBodyContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public AsmlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAsmline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAsmline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsmline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsmlineContext asmline() {
		AsmlineContext _localctx = new AsmlineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_asmline);
		int _la;
		try {
			State = 216;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Eof:
			case COMMENT:
			case NEWLINE:
			case ASSIGN:
			case LDBRAC:
			case GOESTO:
			case NOP:
			case RLCA:
			case RRCA:
			case RLA:
			case RRA:
			case DAA:
			case CPL:
			case SCF:
			case CCF:
			case HALT:
			case RET:
			case EXX:
			case DI:
			case EI:
			case NEG:
			case RETN:
			case RETI:
			case RLD:
			case RRD:
			case LDI:
			case CPI:
			case INI:
			case OUTI:
			case LDD:
			case CPD:
			case IND:
			case OUTD:
			case LDIR:
			case CPIR:
			case INIR:
			case OTIR:
			case LDDR:
			case CPDR:
			case INDR:
			case OTDR:
			case LD:
			case INC:
			case DEC:
			case EX:
			case ADD:
			case ADC:
			case SUB:
			case SBC:
			case AND:
			case XOR:
			case OR:
			case CP:
			case DJNZ:
			case JR:
			case JP:
			case CALL:
			case RST:
			case PUSH:
			case POP:
			case IN:
			case OUT:
			case IM:
			case RLC:
			case RRC:
			case RL:
			case RR:
			case SLA:
			case SRA:
			case SLL:
			case SRL:
			case BIT:
			case RES:
			case SET:
			case SWAPNIB:
			case MUL:
			case MIRROR:
			case TEST:
			case NEXTREG:
			case OUTINB:
			case LDIX:
			case LDIRX:
			case LDDX:
			case LDDRX:
			case PIXELDN:
			case PIXELAD:
			case SETAE:
			case LDPIRX:
			case LDIRSCALE:
			case ORGPRAG:
			case BANKPRAG:
			case XORGPR:
			case ENTPRAG:
			case XENTPRAG:
			case EQUPRAG:
			case VARPRAG:
			case DISPRAG:
			case DBPRAG:
			case DWPRAG:
			case DMPRAG:
			case DNPRAG:
			case DHPRAG:
			case DGXPRAG:
			case DGPRAG:
			case DCPRAG:
			case SKIPRAG:
			case EXTPRAG:
			case DSPRAG:
			case FBPRAG:
			case FWPRAG:
			case MODPRAG:
			case ALGPRAG:
			case TRACE:
			case TRACEHEX:
			case RNDSEED:
			case ERRORPR:
			case INCBIN:
			case COMPAREBIN:
			case ZXBPRAG:
			case MACRO:
			case ENDMACRO:
			case PROC:
			case ENDPROC:
			case LOOP:
			case ENDLOOP:
			case REPEAT:
			case UNTIL:
			case WHILE:
			case ENDWHILE:
			case IFSTMT:
			case IFUSED:
			case IFNUSED:
			case ELIF:
			case ELSESTMT:
			case ENDIFSTMT:
			case FOR:
			case FORNEXT:
			case NEXT:
			case BREAK:
			case CONTINUE:
			case MODULE:
			case ENDMOD:
			case STRUCT:
			case ENDST:
			case LOCAL:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 203; label();
					}
					break;
				}
				State = 207;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << LDBRAC) | (1L << GOESTO))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (NOP - 70)) | (1L << (RLCA - 70)) | (1L << (RRCA - 70)) | (1L << (RLA - 70)) | (1L << (RRA - 70)) | (1L << (DAA - 70)) | (1L << (CPL - 70)) | (1L << (SCF - 70)) | (1L << (CCF - 70)) | (1L << (HALT - 70)) | (1L << (RET - 70)) | (1L << (EXX - 70)) | (1L << (DI - 70)) | (1L << (EI - 70)) | (1L << (NEG - 70)) | (1L << (RETN - 70)) | (1L << (RETI - 70)) | (1L << (RLD - 70)) | (1L << (RRD - 70)) | (1L << (LDI - 70)) | (1L << (CPI - 70)) | (1L << (INI - 70)) | (1L << (OUTI - 70)) | (1L << (LDD - 70)) | (1L << (CPD - 70)) | (1L << (IND - 70)) | (1L << (OUTD - 70)) | (1L << (LDIR - 70)) | (1L << (CPIR - 70)) | (1L << (INIR - 70)) | (1L << (OTIR - 70)) | (1L << (LDDR - 70)) | (1L << (CPDR - 70)) | (1L << (INDR - 70)) | (1L << (OTDR - 70)) | (1L << (LD - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (EX - 70)) | (1L << (ADD - 70)) | (1L << (ADC - 70)) | (1L << (SUB - 70)) | (1L << (SBC - 70)) | (1L << (AND - 70)) | (1L << (XOR - 70)) | (1L << (OR - 70)) | (1L << (CP - 70)) | (1L << (DJNZ - 70)) | (1L << (JR - 70)) | (1L << (JP - 70)) | (1L << (CALL - 70)) | (1L << (RST - 70)) | (1L << (PUSH - 70)) | (1L << (POP - 70)) | (1L << (IN - 70)) | (1L << (OUT - 70)) | (1L << (IM - 70)) | (1L << (RLC - 70)) | (1L << (RRC - 70)) | (1L << (RL - 70)) | (1L << (RR - 70)) | (1L << (SLA - 70)) | (1L << (SRA - 70)) | (1L << (SLL - 70)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (SRL - 134)) | (1L << (BIT - 134)) | (1L << (RES - 134)) | (1L << (SET - 134)) | (1L << (SWAPNIB - 134)) | (1L << (MUL - 134)) | (1L << (MIRROR - 134)) | (1L << (TEST - 134)) | (1L << (NEXTREG - 134)) | (1L << (OUTINB - 134)) | (1L << (LDIX - 134)) | (1L << (LDIRX - 134)) | (1L << (LDDX - 134)) | (1L << (LDDRX - 134)) | (1L << (PIXELDN - 134)) | (1L << (PIXELAD - 134)) | (1L << (SETAE - 134)) | (1L << (LDPIRX - 134)) | (1L << (LDIRSCALE - 134)) | (1L << (ORGPRAG - 134)) | (1L << (BANKPRAG - 134)) | (1L << (XORGPR - 134)) | (1L << (ENTPRAG - 134)) | (1L << (XENTPRAG - 134)) | (1L << (EQUPRAG - 134)) | (1L << (VARPRAG - 134)) | (1L << (DISPRAG - 134)) | (1L << (DBPRAG - 134)) | (1L << (DWPRAG - 134)) | (1L << (DMPRAG - 134)) | (1L << (DNPRAG - 134)) | (1L << (DHPRAG - 134)) | (1L << (DGXPRAG - 134)) | (1L << (DGPRAG - 134)) | (1L << (DCPRAG - 134)) | (1L << (SKIPRAG - 134)) | (1L << (EXTPRAG - 134)) | (1L << (DSPRAG - 134)) | (1L << (FBPRAG - 134)) | (1L << (FWPRAG - 134)) | (1L << (MODPRAG - 134)) | (1L << (ALGPRAG - 134)) | (1L << (TRACE - 134)) | (1L << (TRACEHEX - 134)) | (1L << (RNDSEED - 134)) | (1L << (ERRORPR - 134)) | (1L << (INCBIN - 134)) | (1L << (COMPAREBIN - 134)) | (1L << (ZXBPRAG - 134)) | (1L << (MACRO - 134)) | (1L << (ENDMACRO - 134)) | (1L << (PROC - 134)))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (ENDPROC - 198)) | (1L << (LOOP - 198)) | (1L << (ENDLOOP - 198)) | (1L << (REPEAT - 198)) | (1L << (UNTIL - 198)) | (1L << (WHILE - 198)) | (1L << (ENDWHILE - 198)) | (1L << (IFSTMT - 198)) | (1L << (IFUSED - 198)) | (1L << (IFNUSED - 198)) | (1L << (ELIF - 198)) | (1L << (ELSESTMT - 198)) | (1L << (ENDIFSTMT - 198)) | (1L << (FOR - 198)) | (1L << (FORNEXT - 198)) | (1L << (NEXT - 198)) | (1L << (BREAK - 198)) | (1L << (CONTINUE - 198)) | (1L << (MODULE - 198)) | (1L << (ENDMOD - 198)) | (1L << (STRUCT - 198)) | (1L << (ENDST - 198)) | (1L << (LOCAL - 198)) | (1L << (IDENTIFIER - 198)))) != 0)) {
					{
					State = 206; lineBody();
					}
				}

				State = 210;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 209; comment();
					}
				}

				}
				break;
			case IFDEF:
			case IFNDEF:
			case ENDIF:
			case ELSE:
			case DEFINE:
			case UNDEF:
			case INCLUDE:
			case IF:
			case IFMOD:
			case IFNMOD:
			case LINEDIR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212; directive();
				State = 214;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 213; comment();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineBodyContext : ParserRuleContext {
		public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public MacroOrStructInvocationContext macroOrStructInvocation() {
			return GetRuleContext<MacroOrStructInvocationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FieldAssignmentContext fieldAssignment() {
			return GetRuleContext<FieldAssignmentContext>(0);
		}
		public LineBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLineBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLineBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineBodyContext lineBody() {
		LineBodyContext _localctx = new LineBodyContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_lineBody);
		try {
			State = 224;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218; pragma();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219; operation();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 220; macroParam();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 221; macroOrStructInvocation();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 222; statement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 223; fieldAssignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode COLON() { return GetToken(Z80AsmParser.COLON, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_label);
		try {
			State = 230;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226; Match(IDENTIFIER);
				State = 227; Match(COLON);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228; Match(IDENTIFIER);
				State = 229;
				if (!(!this.exprStart())) throw new FailedPredicateException(this, "!this.exprStart()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(Z80AsmParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		public OrgPragmaContext orgPragma() {
			return GetRuleContext<OrgPragmaContext>(0);
		}
		public BankPragmaContext bankPragma() {
			return GetRuleContext<BankPragmaContext>(0);
		}
		public XorgPragmaContext xorgPragma() {
			return GetRuleContext<XorgPragmaContext>(0);
		}
		public EntPragmaContext entPragma() {
			return GetRuleContext<EntPragmaContext>(0);
		}
		public XentPragmaContext xentPragma() {
			return GetRuleContext<XentPragmaContext>(0);
		}
		public DispPragmaContext dispPragma() {
			return GetRuleContext<DispPragmaContext>(0);
		}
		public EquPragmaContext equPragma() {
			return GetRuleContext<EquPragmaContext>(0);
		}
		public VarPragmaContext varPragma() {
			return GetRuleContext<VarPragmaContext>(0);
		}
		public DefbPragmaContext defbPragma() {
			return GetRuleContext<DefbPragmaContext>(0);
		}
		public DefwPragmaContext defwPragma() {
			return GetRuleContext<DefwPragmaContext>(0);
		}
		public DefmPragmaContext defmPragma() {
			return GetRuleContext<DefmPragmaContext>(0);
		}
		public DefcPragmaContext defcPragma() {
			return GetRuleContext<DefcPragmaContext>(0);
		}
		public DefnPragmaContext defnPragma() {
			return GetRuleContext<DefnPragmaContext>(0);
		}
		public DefhPragmaContext defhPragma() {
			return GetRuleContext<DefhPragmaContext>(0);
		}
		public SkipPragmaContext skipPragma() {
			return GetRuleContext<SkipPragmaContext>(0);
		}
		public ExternPragmaContext externPragma() {
			return GetRuleContext<ExternPragmaContext>(0);
		}
		public DefsPragmaContext defsPragma() {
			return GetRuleContext<DefsPragmaContext>(0);
		}
		public FillbPragmaContext fillbPragma() {
			return GetRuleContext<FillbPragmaContext>(0);
		}
		public FillwPragmaContext fillwPragma() {
			return GetRuleContext<FillwPragmaContext>(0);
		}
		public ModelPragmaContext modelPragma() {
			return GetRuleContext<ModelPragmaContext>(0);
		}
		public AlignPragmaContext alignPragma() {
			return GetRuleContext<AlignPragmaContext>(0);
		}
		public TracePragmaContext tracePragma() {
			return GetRuleContext<TracePragmaContext>(0);
		}
		public RndSeedPragmaContext rndSeedPragma() {
			return GetRuleContext<RndSeedPragmaContext>(0);
		}
		public DefgxPragmaContext defgxPragma() {
			return GetRuleContext<DefgxPragmaContext>(0);
		}
		public DefgPragmaContext defgPragma() {
			return GetRuleContext<DefgPragmaContext>(0);
		}
		public ErrorPragmaContext errorPragma() {
			return GetRuleContext<ErrorPragmaContext>(0);
		}
		public IncBinPragmaContext incBinPragma() {
			return GetRuleContext<IncBinPragmaContext>(0);
		}
		public CompareBinPragmaContext compareBinPragma() {
			return GetRuleContext<CompareBinPragmaContext>(0);
		}
		public ZxBasicPragmaContext zxBasicPragma() {
			return GetRuleContext<ZxBasicPragmaContext>(0);
		}
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_pragma);
		try {
			State = 263;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ORGPRAG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; orgPragma();
				}
				break;
			case BANKPRAG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235; bankPragma();
				}
				break;
			case XORGPR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 236; xorgPragma();
				}
				break;
			case ENTPRAG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 237; entPragma();
				}
				break;
			case XENTPRAG:
				EnterOuterAlt(_localctx, 5);
				{
				State = 238; xentPragma();
				}
				break;
			case DISPRAG:
				EnterOuterAlt(_localctx, 6);
				{
				State = 239; dispPragma();
				}
				break;
			case EQUPRAG:
				EnterOuterAlt(_localctx, 7);
				{
				State = 240; equPragma();
				}
				break;
			case ASSIGN:
			case VARPRAG:
				EnterOuterAlt(_localctx, 8);
				{
				State = 241; varPragma();
				}
				break;
			case DBPRAG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 242; defbPragma();
				}
				break;
			case DWPRAG:
				EnterOuterAlt(_localctx, 10);
				{
				State = 243; defwPragma();
				}
				break;
			case DMPRAG:
				EnterOuterAlt(_localctx, 11);
				{
				State = 244; defmPragma();
				}
				break;
			case DCPRAG:
				EnterOuterAlt(_localctx, 12);
				{
				State = 245; defcPragma();
				}
				break;
			case DNPRAG:
				EnterOuterAlt(_localctx, 13);
				{
				State = 246; defnPragma();
				}
				break;
			case DHPRAG:
				EnterOuterAlt(_localctx, 14);
				{
				State = 247; defhPragma();
				}
				break;
			case SKIPRAG:
				EnterOuterAlt(_localctx, 15);
				{
				State = 248; skipPragma();
				}
				break;
			case EXTPRAG:
				EnterOuterAlt(_localctx, 16);
				{
				State = 249; externPragma();
				}
				break;
			case DSPRAG:
				EnterOuterAlt(_localctx, 17);
				{
				State = 250; defsPragma();
				}
				break;
			case FBPRAG:
				EnterOuterAlt(_localctx, 18);
				{
				State = 251; fillbPragma();
				}
				break;
			case FWPRAG:
				EnterOuterAlt(_localctx, 19);
				{
				State = 252; fillwPragma();
				}
				break;
			case MODPRAG:
				EnterOuterAlt(_localctx, 20);
				{
				State = 253; modelPragma();
				}
				break;
			case ALGPRAG:
				EnterOuterAlt(_localctx, 21);
				{
				State = 254; alignPragma();
				}
				break;
			case TRACE:
			case TRACEHEX:
				EnterOuterAlt(_localctx, 22);
				{
				State = 255; tracePragma();
				}
				break;
			case RNDSEED:
				EnterOuterAlt(_localctx, 23);
				{
				State = 256; rndSeedPragma();
				}
				break;
			case DGXPRAG:
				EnterOuterAlt(_localctx, 24);
				{
				State = 257; defgxPragma();
				}
				break;
			case DGPRAG:
				EnterOuterAlt(_localctx, 25);
				{
				State = 258; defgPragma();
				}
				break;
			case ERRORPR:
				EnterOuterAlt(_localctx, 26);
				{
				State = 259; errorPragma();
				}
				break;
			case INCBIN:
				EnterOuterAlt(_localctx, 27);
				{
				State = 260; incBinPragma();
				}
				break;
			case COMPAREBIN:
				EnterOuterAlt(_localctx, 28);
				{
				State = 261; compareBinPragma();
				}
				break;
			case ZXBPRAG:
				EnterOuterAlt(_localctx, 29);
				{
				State = 262; zxBasicPragma();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode IFDEF() { return GetToken(Z80AsmParser.IFDEF, 0); }
		public ITerminalNode IFNDEF() { return GetToken(Z80AsmParser.IFNDEF, 0); }
		public ITerminalNode DEFINE() { return GetToken(Z80AsmParser.DEFINE, 0); }
		public ITerminalNode UNDEF() { return GetToken(Z80AsmParser.UNDEF, 0); }
		public ITerminalNode IFMOD() { return GetToken(Z80AsmParser.IFMOD, 0); }
		public ITerminalNode IFNMOD() { return GetToken(Z80AsmParser.IFNMOD, 0); }
		public ITerminalNode ENDIF() { return GetToken(Z80AsmParser.ENDIF, 0); }
		public ITerminalNode ELSE() { return GetToken(Z80AsmParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(Z80AsmParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode INCLUDE() { return GetToken(Z80AsmParser.INCLUDE, 0); }
		public ITerminalNode STRING() { return GetToken(Z80AsmParser.STRING, 0); }
		public ITerminalNode FSTRING() { return GetToken(Z80AsmParser.FSTRING, 0); }
		public ITerminalNode LINEDIR() { return GetToken(Z80AsmParser.LINEDIR, 0); }
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_directive);
		int _la;
		try {
			State = 281;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IFDEF:
			case IFNDEF:
			case DEFINE:
			case UNDEF:
			case IFMOD:
			case IFNMOD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265;
				_la = _input.La(1);
				if ( !(((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & ((1L << (IFDEF - 154)) | (1L << (IFNDEF - 154)) | (1L << (DEFINE - 154)) | (1L << (UNDEF - 154)) | (1L << (IFMOD - 154)) | (1L << (IFNMOD - 154)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 266; Match(IDENTIFIER);
				}
				break;
			case ENDIF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 267; Match(ENDIF);
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 268; Match(ELSE);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 269; Match(IF);
				State = 270; expr(0);
				}
				break;
			case INCLUDE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 271; Match(INCLUDE);
				State = 272;
				_la = _input.La(1);
				if ( !(_la==STRING || _la==FSTRING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case LINEDIR:
				EnterOuterAlt(_localctx, 6);
				{
				State = 273; Match(LINEDIR);
				State = 274; expr(0);
				State = 279;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==STRING) {
					{
					State = 276;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 275; Match(COMMA);
						}
					}

					State = 278; Match(STRING);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IterationTestContext iterationTest() {
			return GetRuleContext<IterationTestContext>(0);
		}
		public MacroStatementContext macroStatement() {
			return GetRuleContext<MacroStatementContext>(0);
		}
		public MacroEndMarkerContext macroEndMarker() {
			return GetRuleContext<MacroEndMarkerContext>(0);
		}
		public LoopEndMarkerContext loopEndMarker() {
			return GetRuleContext<LoopEndMarkerContext>(0);
		}
		public WhileEndMarkerContext whileEndMarker() {
			return GetRuleContext<WhileEndMarkerContext>(0);
		}
		public ProcStatementContext procStatement() {
			return GetRuleContext<ProcStatementContext>(0);
		}
		public ProcEndMarkerContext procEndMarker() {
			return GetRuleContext<ProcEndMarkerContext>(0);
		}
		public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public EndifStatementContext endifStatement() {
			return GetRuleContext<EndifStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public NextStatementContext nextStatement() {
			return GetRuleContext<NextStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public ModuleStatementContext moduleStatement() {
			return GetRuleContext<ModuleStatementContext>(0);
		}
		public ModuleEndMarkerContext moduleEndMarker() {
			return GetRuleContext<ModuleEndMarkerContext>(0);
		}
		public StructStatementContext structStatement() {
			return GetRuleContext<StructStatementContext>(0);
		}
		public StructEndMarkerContext structEndMarker() {
			return GetRuleContext<StructEndMarkerContext>(0);
		}
		public LocalStatementContext localStatement() {
			return GetRuleContext<LocalStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 303;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LOOP:
			case UNTIL:
			case WHILE:
			case ELIF:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283; iterationTest();
				}
				break;
			case MACRO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284; macroStatement();
				}
				break;
			case ENDMACRO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 285; macroEndMarker();
				}
				break;
			case ENDLOOP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 286; loopEndMarker();
				}
				break;
			case ENDWHILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 287; whileEndMarker();
				}
				break;
			case PROC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 288; procStatement();
				}
				break;
			case ENDPROC:
				EnterOuterAlt(_localctx, 7);
				{
				State = 289; procEndMarker();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 290; repeatStatement();
				}
				break;
			case IFSTMT:
			case IFUSED:
			case IFNUSED:
				EnterOuterAlt(_localctx, 9);
				{
				State = 291; ifStatement();
				}
				break;
			case ELSESTMT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 292; elseStatement();
				}
				break;
			case ENDIFSTMT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 293; endifStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 12);
				{
				State = 294; forStatement();
				}
				break;
			case FORNEXT:
			case NEXT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 295; nextStatement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 14);
				{
				State = 296; breakStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 15);
				{
				State = 297; continueStatement();
				}
				break;
			case MODULE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 298; moduleStatement();
				}
				break;
			case ENDMOD:
				EnterOuterAlt(_localctx, 17);
				{
				State = 299; moduleEndMarker();
				}
				break;
			case STRUCT:
				EnterOuterAlt(_localctx, 18);
				{
				State = 300; structStatement();
				}
				break;
			case ENDST:
				EnterOuterAlt(_localctx, 19);
				{
				State = 301; structEndMarker();
				}
				break;
			case LOCAL:
				EnterOuterAlt(_localctx, 20);
				{
				State = 302; localStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationTestContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode LOOP() { return GetToken(Z80AsmParser.LOOP, 0); }
		public ITerminalNode WHILE() { return GetToken(Z80AsmParser.WHILE, 0); }
		public ITerminalNode UNTIL() { return GetToken(Z80AsmParser.UNTIL, 0); }
		public ITerminalNode ELIF() { return GetToken(Z80AsmParser.ELIF, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public IterationTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationTest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIterationTest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIterationTest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationTestContext iterationTest() {
		IterationTestContext _localctx = new IterationTestContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_iterationTest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LOOP:
				{
				State = 305; Match(LOOP);
				}
				break;
			case WHILE:
				{
				State = 306; Match(WHILE);
				}
				break;
			case UNTIL:
				{
				State = 307; Match(UNTIL);
				}
				break;
			case ELIF:
				{
				State = 308; Match(ELIF);
				}
				break;
			case IDENTIFIER:
				{
				State = 309; Match(IDENTIFIER);
				State = 310;
				if (!(this.p("loop", "while", "until", "elif"))) throw new FailedPredicateException(this, "this.p(\"loop\", \"while\", \"until\", \"elif\")");
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 313; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroStatementContext : ParserRuleContext {
		public ITerminalNode MACRO() { return GetToken(Z80AsmParser.MACRO, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(Z80AsmParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Z80AsmParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public MacroStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroStatementContext macroStatement() {
		MacroStatementContext _localctx = new MacroStatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_macroStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(MACRO);
			State = 316; Match(LPAR);
			State = 325;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 317; Match(IDENTIFIER);
				State = 322;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 318; Match(COMMA);
					State = 319; Match(IDENTIFIER);
					}
					}
					State = 324;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 327; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDMACRO() { return GetToken(Z80AsmParser.ENDMACRO, 0); }
		public MacroEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroEndMarkerContext macroEndMarker() {
		MacroEndMarkerContext _localctx = new MacroEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_macroEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; Match(ENDMACRO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcStatementContext : ParserRuleContext {
		public ITerminalNode PROC() { return GetToken(Z80AsmParser.PROC, 0); }
		public ProcStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterProcStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitProcStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcStatementContext procStatement() {
		ProcStatementContext _localctx = new ProcStatementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_procStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; Match(PROC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDPROC() { return GetToken(Z80AsmParser.ENDPROC, 0); }
		public ProcEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterProcEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitProcEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcEndMarkerContext procEndMarker() {
		ProcEndMarkerContext _localctx = new ProcEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_procEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(ENDPROC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDLOOP() { return GetToken(Z80AsmParser.ENDLOOP, 0); }
		public LoopEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLoopEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLoopEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopEndMarkerContext loopEndMarker() {
		LoopEndMarkerContext _localctx = new LoopEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_loopEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; Match(ENDLOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		public ITerminalNode REPEAT() { return GetToken(Z80AsmParser.REPEAT, 0); }
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(REPEAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDWHILE() { return GetToken(Z80AsmParser.ENDWHILE, 0); }
		public WhileEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterWhileEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitWhileEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileEndMarkerContext whileEndMarker() {
		WhileEndMarkerContext _localctx = new WhileEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_whileEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(ENDWHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode IFSTMT() { return GetToken(Z80AsmParser.IFSTMT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IFUSED() { return GetToken(Z80AsmParser.IFUSED, 0); }
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public ITerminalNode IFNUSED() { return GetToken(Z80AsmParser.IFNUSED, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_ifStatement);
		try {
			State = 347;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IFSTMT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 341; Match(IFSTMT);
				State = 342; expr(0);
				}
				break;
			case IFUSED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343; Match(IFUSED);
				State = 344; symbol();
				}
				break;
			case IFNUSED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 345; Match(IFNUSED);
				State = 346; symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ITerminalNode ELSESTMT() { return GetToken(Z80AsmParser.ELSESTMT, 0); }
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(ELSESTMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndifStatementContext : ParserRuleContext {
		public ITerminalNode ENDIFSTMT() { return GetToken(Z80AsmParser.ENDIFSTMT, 0); }
		public EndifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEndifStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEndifStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndifStatementContext endifStatement() {
		EndifStatementContext _localctx = new EndifStatementContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_endifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; Match(ENDIFSTMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(Z80AsmParser.FOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(Z80AsmParser.ASSIGN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TO() { return GetToken(Z80AsmParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(Z80AsmParser.STEP, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(FOR);
			State = 354; Match(IDENTIFIER);
			State = 355; Match(ASSIGN);
			State = 356; expr(0);
			State = 357; Match(TO);
			State = 358; expr(0);
			State = 361;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 359; Match(STEP);
				State = 360; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextStatementContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(Z80AsmParser.NEXT, 0); }
		public ITerminalNode FORNEXT() { return GetToken(Z80AsmParser.FORNEXT, 0); }
		public NextStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterNextStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitNextStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextStatementContext nextStatement() {
		NextStatementContext _localctx = new NextStatementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_nextStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			_la = _input.La(1);
			if ( !(_la==FORNEXT || _la==NEXT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(Z80AsmParser.BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(Z80AsmParser.CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleStatementContext : ParserRuleContext {
		public ITerminalNode MODULE() { return GetToken(Z80AsmParser.MODULE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ModuleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterModuleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitModuleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleStatementContext moduleStatement() {
		ModuleStatementContext _localctx = new ModuleStatementContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_moduleStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; Match(MODULE);
			State = 371;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 370; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDMOD() { return GetToken(Z80AsmParser.ENDMOD, 0); }
		public ModuleEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterModuleEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitModuleEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleEndMarkerContext moduleEndMarker() {
		ModuleEndMarkerContext _localctx = new ModuleEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_moduleEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(ENDMOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructStatementContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(Z80AsmParser.STRUCT, 0); }
		public StructStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterStructStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitStructStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructStatementContext structStatement() {
		StructStatementContext _localctx = new StructStatementContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_structStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; Match(STRUCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDST() { return GetToken(Z80AsmParser.ENDST, 0); }
		public StructEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterStructEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitStructEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructEndMarkerContext structEndMarker() {
		StructEndMarkerContext _localctx = new StructEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_structEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(ENDST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalStatementContext : ParserRuleContext {
		public ITerminalNode LOCAL() { return GetToken(Z80AsmParser.LOCAL, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(Z80AsmParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Z80AsmParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public LocalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLocalStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLocalStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalStatementContext localStatement() {
		LocalStatementContext _localctx = new LocalStatementContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_localStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; Match(LOCAL);
			State = 380; Match(IDENTIFIER);
			State = 385;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 381; Match(COMMA);
				State = 382; Match(IDENTIFIER);
				}
				}
				State = 387;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroOrStructInvocationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public MacroArgumentContext[] macroArgument() {
			return GetRuleContexts<MacroArgumentContext>();
		}
		public MacroArgumentContext macroArgument(int i) {
			return GetRuleContext<MacroArgumentContext>(i);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public MacroOrStructInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroOrStructInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroOrStructInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroOrStructInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroOrStructInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroOrStructInvocationContext macroOrStructInvocation() {
		MacroOrStructInvocationContext _localctx = new MacroOrStructInvocationContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_macroOrStructInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; Match(IDENTIFIER);
			State = 389; Match(LPAR);
			State = 390; macroArgument();
			State = 395;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 391; Match(COMMA);
				State = 392; macroArgument();
				}
				}
				State = 397;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 398; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroArgumentContext : ParserRuleContext {
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public MacroArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroArgumentContext macroArgument() {
		MacroArgumentContext _localctx = new MacroArgumentContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_macroArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
				{
				State = 400; operand();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAssignmentContext : ParserRuleContext {
		public ITerminalNode GOESTO() { return GetToken(Z80AsmParser.GOESTO, 0); }
		public ByteEmPragmaContext byteEmPragma() {
			return GetRuleContext<ByteEmPragmaContext>(0);
		}
		public FieldAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFieldAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFieldAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAssignmentContext fieldAssignment() {
		FieldAssignmentContext _localctx = new FieldAssignmentContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_fieldAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; Match(GOESTO);
			State = 404; byteEmPragma();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrgPragmaContext : ParserRuleContext {
		public ITerminalNode ORGPRAG() { return GetToken(Z80AsmParser.ORGPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OrgPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orgPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOrgPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOrgPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrgPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrgPragmaContext orgPragma() {
		OrgPragmaContext _localctx = new OrgPragmaContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_orgPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; Match(ORGPRAG);
			State = 407; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BankPragmaContext : ParserRuleContext {
		public ITerminalNode BANKPRAG() { return GetToken(Z80AsmParser.BANKPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public BankPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bankPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBankPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBankPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBankPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BankPragmaContext bankPragma() {
		BankPragmaContext _localctx = new BankPragmaContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_bankPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409; Match(BANKPRAG);
			State = 410; expr(0);
			State = 413;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 411; Match(COMMA);
				State = 412; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorgPragmaContext : ParserRuleContext {
		public ITerminalNode XORGPR() { return GetToken(Z80AsmParser.XORGPR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public XorgPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorgPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterXorgPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitXorgPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorgPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorgPragmaContext xorgPragma() {
		XorgPragmaContext _localctx = new XorgPragmaContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_xorgPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415; Match(XORGPR);
			State = 416; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntPragmaContext : ParserRuleContext {
		public ITerminalNode ENTPRAG() { return GetToken(Z80AsmParser.ENTPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EntPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEntPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEntPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntPragmaContext entPragma() {
		EntPragmaContext _localctx = new EntPragmaContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_entPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; Match(ENTPRAG);
			State = 419; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XentPragmaContext : ParserRuleContext {
		public ITerminalNode XENTPRAG() { return GetToken(Z80AsmParser.XENTPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public XentPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xentPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterXentPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitXentPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXentPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XentPragmaContext xentPragma() {
		XentPragmaContext _localctx = new XentPragmaContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_xentPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421; Match(XENTPRAG);
			State = 422; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DispPragmaContext : ParserRuleContext {
		public ITerminalNode DISPRAG() { return GetToken(Z80AsmParser.DISPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DispPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDispPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDispPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDispPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DispPragmaContext dispPragma() {
		DispPragmaContext _localctx = new DispPragmaContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_dispPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(DISPRAG);
			State = 425; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquPragmaContext : ParserRuleContext {
		public ITerminalNode EQUPRAG() { return GetToken(Z80AsmParser.EQUPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EquPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEquPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEquPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquPragmaContext equPragma() {
		EquPragmaContext _localctx = new EquPragmaContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_equPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(EQUPRAG);
			State = 428; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarPragmaContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode VARPRAG() { return GetToken(Z80AsmParser.VARPRAG, 0); }
		public ITerminalNode ASSIGN() { return GetToken(Z80AsmParser.ASSIGN, 0); }
		public VarPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterVarPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitVarPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarPragmaContext varPragma() {
		VarPragmaContext _localctx = new VarPragmaContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_varPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			_la = _input.La(1);
			if ( !(_la==ASSIGN || _la==VARPRAG) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 431; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefbPragmaContext : ParserRuleContext {
		public ITerminalNode DBPRAG() { return GetToken(Z80AsmParser.DBPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public DefbPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defbPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefbPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefbPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefbPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefbPragmaContext defbPragma() {
		DefbPragmaContext _localctx = new DefbPragmaContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_defbPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; Match(DBPRAG);
			State = 434; expr(0);
			State = 439;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 435; Match(COMMA);
				State = 436; expr(0);
				}
				}
				State = 441;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefwPragmaContext : ParserRuleContext {
		public ITerminalNode DWPRAG() { return GetToken(Z80AsmParser.DWPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public DefwPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defwPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefwPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefwPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefwPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefwPragmaContext defwPragma() {
		DefwPragmaContext _localctx = new DefwPragmaContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_defwPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; Match(DWPRAG);
			State = 443; expr(0);
			State = 448;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 444; Match(COMMA);
				State = 445; expr(0);
				}
				}
				State = 450;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefcPragmaContext : ParserRuleContext {
		public ITerminalNode DCPRAG() { return GetToken(Z80AsmParser.DCPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefcPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defcPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefcPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefcPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefcPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefcPragmaContext defcPragma() {
		DefcPragmaContext _localctx = new DefcPragmaContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_defcPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(DCPRAG);
			State = 452; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefmPragmaContext : ParserRuleContext {
		public ITerminalNode DMPRAG() { return GetToken(Z80AsmParser.DMPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefmPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defmPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefmPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefmPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefmPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefmPragmaContext defmPragma() {
		DefmPragmaContext _localctx = new DefmPragmaContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_defmPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; Match(DMPRAG);
			State = 455; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefnPragmaContext : ParserRuleContext {
		public ITerminalNode DNPRAG() { return GetToken(Z80AsmParser.DNPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefnPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defnPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefnPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefnPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefnPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefnPragmaContext defnPragma() {
		DefnPragmaContext _localctx = new DefnPragmaContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_defnPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(DNPRAG);
			State = 458; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefhPragmaContext : ParserRuleContext {
		public ITerminalNode DHPRAG() { return GetToken(Z80AsmParser.DHPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefhPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defhPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefhPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefhPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefhPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefhPragmaContext defhPragma() {
		DefhPragmaContext _localctx = new DefhPragmaContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_defhPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(DHPRAG);
			State = 461; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipPragmaContext : ParserRuleContext {
		public ITerminalNode SKIPRAG() { return GetToken(Z80AsmParser.SKIPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public SkipPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skipPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterSkipPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitSkipPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipPragmaContext skipPragma() {
		SkipPragmaContext _localctx = new SkipPragmaContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_skipPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(SKIPRAG);
			State = 464; expr(0);
			State = 467;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 465; Match(COMMA);
				State = 466; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternPragmaContext : ParserRuleContext {
		public ITerminalNode EXTPRAG() { return GetToken(Z80AsmParser.EXTPRAG, 0); }
		public ExternPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterExternPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitExternPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternPragmaContext externPragma() {
		ExternPragmaContext _localctx = new ExternPragmaContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_externPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469; Match(EXTPRAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefsPragmaContext : ParserRuleContext {
		public ITerminalNode DSPRAG() { return GetToken(Z80AsmParser.DSPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public DefsPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defsPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefsPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefsPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefsPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefsPragmaContext defsPragma() {
		DefsPragmaContext _localctx = new DefsPragmaContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_defsPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; Match(DSPRAG);
			State = 472; expr(0);
			State = 475;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 473; Match(COMMA);
				State = 474; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillbPragmaContext : ParserRuleContext {
		public ITerminalNode FBPRAG() { return GetToken(Z80AsmParser.FBPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public FillbPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillbPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFillbPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFillbPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillbPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillbPragmaContext fillbPragma() {
		FillbPragmaContext _localctx = new FillbPragmaContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_fillbPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477; Match(FBPRAG);
			State = 478; expr(0);
			State = 479; Match(COMMA);
			State = 480; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillwPragmaContext : ParserRuleContext {
		public ITerminalNode FWPRAG() { return GetToken(Z80AsmParser.FWPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public FillwPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillwPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFillwPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFillwPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillwPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillwPragmaContext fillwPragma() {
		FillwPragmaContext _localctx = new FillwPragmaContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_fillwPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; Match(FWPRAG);
			State = 483; expr(0);
			State = 484; Match(COMMA);
			State = 485; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelPragmaContext : ParserRuleContext {
		public ITerminalNode MODPRAG() { return GetToken(Z80AsmParser.MODPRAG, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode NEXT() { return GetToken(Z80AsmParser.NEXT, 0); }
		public ModelPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterModelPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitModelPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelPragmaContext modelPragma() {
		ModelPragmaContext _localctx = new ModelPragmaContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_modelPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; Match(MODPRAG);
			State = 488;
			_la = _input.La(1);
			if ( !(_la==NEXT || _la==IDENTIFIER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignPragmaContext : ParserRuleContext {
		public ITerminalNode ALGPRAG() { return GetToken(Z80AsmParser.ALGPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AlignPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAlignPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAlignPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlignPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlignPragmaContext alignPragma() {
		AlignPragmaContext _localctx = new AlignPragmaContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_alignPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490; Match(ALGPRAG);
			State = 492;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DCOLON) | (1L << LPAR) | (1L << LSBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << MULOP) | (1L << TILDE) | (1L << LDBRAC) | (1L << EXCLM) | (1L << DOT))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)))) != 0)) {
				{
				State = 491; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TracePragmaContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TRACE() { return GetToken(Z80AsmParser.TRACE, 0); }
		public ITerminalNode TRACEHEX() { return GetToken(Z80AsmParser.TRACEHEX, 0); }
		public TracePragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tracePragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTracePragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTracePragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTracePragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TracePragmaContext tracePragma() {
		TracePragmaContext _localctx = new TracePragmaContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_tracePragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			_la = _input.La(1);
			if ( !(_la==TRACE || _la==TRACEHEX) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 495; expr(0);
			State = 500;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 496; Match(COMMA);
				State = 497; expr(0);
				}
				}
				State = 502;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RndSeedPragmaContext : ParserRuleContext {
		public ITerminalNode RNDSEED() { return GetToken(Z80AsmParser.RNDSEED, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RndSeedPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rndSeedPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRndSeedPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRndSeedPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRndSeedPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RndSeedPragmaContext rndSeedPragma() {
		RndSeedPragmaContext _localctx = new RndSeedPragmaContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_rndSeedPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; Match(RNDSEED);
			State = 505;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DCOLON) | (1L << LPAR) | (1L << LSBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << MULOP) | (1L << TILDE) | (1L << LDBRAC) | (1L << EXCLM) | (1L << DOT))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)))) != 0)) {
				{
				State = 504; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefgxPragmaContext : ParserRuleContext {
		public ITerminalNode DGXPRAG() { return GetToken(Z80AsmParser.DGXPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefgxPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defgxPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefgxPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefgxPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefgxPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefgxPragmaContext defgxPragma() {
		DefgxPragmaContext _localctx = new DefgxPragmaContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_defgxPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507; Match(DGXPRAG);
			State = 508; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefgPragmaContext : ParserRuleContext {
		public ITerminalNode DGPRAG() { return GetToken(Z80AsmParser.DGPRAG, 0); }
		public DefgPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defgPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefgPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefgPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefgPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefgPragmaContext defgPragma() {
		DefgPragmaContext _localctx = new DefgPragmaContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_defgPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510; Match(DGPRAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorPragmaContext : ParserRuleContext {
		public ITerminalNode ERRORPR() { return GetToken(Z80AsmParser.ERRORPR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ErrorPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterErrorPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitErrorPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorPragmaContext errorPragma() {
		ErrorPragmaContext _localctx = new ErrorPragmaContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_errorPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512; Match(ERRORPR);
			State = 513; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncBinPragmaContext : ParserRuleContext {
		public ITerminalNode INCBIN() { return GetToken(Z80AsmParser.INCBIN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IncBinPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incBinPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIncBinPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIncBinPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncBinPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncBinPragmaContext incBinPragma() {
		IncBinPragmaContext _localctx = new IncBinPragmaContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_incBinPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515; Match(INCBIN);
			State = 516; expr(0);
			State = 523;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 517; Match(COMMA);
				State = 518; expr(0);
				State = 521;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 519; Match(COMMA);
					State = 520; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareBinPragmaContext : ParserRuleContext {
		public ITerminalNode COMPAREBIN() { return GetToken(Z80AsmParser.COMPAREBIN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CompareBinPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareBinPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCompareBinPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCompareBinPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareBinPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareBinPragmaContext compareBinPragma() {
		CompareBinPragmaContext _localctx = new CompareBinPragmaContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_compareBinPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; Match(COMPAREBIN);
			State = 526; expr(0);
			State = 533;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 527; Match(COMMA);
				State = 528; expr(0);
				State = 531;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 529; Match(COMMA);
					State = 530; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZxBasicPragmaContext : ParserRuleContext {
		public ITerminalNode ZXBPRAG() { return GetToken(Z80AsmParser.ZXBPRAG, 0); }
		public ZxBasicPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxBasicPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterZxBasicPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitZxBasicPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxBasicPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZxBasicPragmaContext zxBasicPragma() {
		ZxBasicPragmaContext _localctx = new ZxBasicPragmaContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_zxBasicPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535; Match(ZXBPRAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ByteEmPragmaContext : ParserRuleContext {
		public DefbPragmaContext defbPragma() {
			return GetRuleContext<DefbPragmaContext>(0);
		}
		public DefwPragmaContext defwPragma() {
			return GetRuleContext<DefwPragmaContext>(0);
		}
		public DefcPragmaContext defcPragma() {
			return GetRuleContext<DefcPragmaContext>(0);
		}
		public DefmPragmaContext defmPragma() {
			return GetRuleContext<DefmPragmaContext>(0);
		}
		public DefnPragmaContext defnPragma() {
			return GetRuleContext<DefnPragmaContext>(0);
		}
		public DefhPragmaContext defhPragma() {
			return GetRuleContext<DefhPragmaContext>(0);
		}
		public DefsPragmaContext defsPragma() {
			return GetRuleContext<DefsPragmaContext>(0);
		}
		public FillbPragmaContext fillbPragma() {
			return GetRuleContext<FillbPragmaContext>(0);
		}
		public FillwPragmaContext fillwPragma() {
			return GetRuleContext<FillwPragmaContext>(0);
		}
		public DefgxPragmaContext defgxPragma() {
			return GetRuleContext<DefgxPragmaContext>(0);
		}
		public DefgPragmaContext defgPragma() {
			return GetRuleContext<DefgPragmaContext>(0);
		}
		public ByteEmPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byteEmPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterByteEmPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitByteEmPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByteEmPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ByteEmPragmaContext byteEmPragma() {
		ByteEmPragmaContext _localctx = new ByteEmPragmaContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_byteEmPragma);
		try {
			State = 548;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DBPRAG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 537; defbPragma();
				}
				break;
			case DWPRAG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 538; defwPragma();
				}
				break;
			case DCPRAG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 539; defcPragma();
				}
				break;
			case DMPRAG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 540; defmPragma();
				}
				break;
			case DNPRAG:
				EnterOuterAlt(_localctx, 5);
				{
				State = 541; defnPragma();
				}
				break;
			case DHPRAG:
				EnterOuterAlt(_localctx, 6);
				{
				State = 542; defhPragma();
				}
				break;
			case DSPRAG:
				EnterOuterAlt(_localctx, 7);
				{
				State = 543; defsPragma();
				}
				break;
			case FBPRAG:
				EnterOuterAlt(_localctx, 8);
				{
				State = 544; fillbPragma();
				}
				break;
			case FWPRAG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 545; fillwPragma();
				}
				break;
			case DGXPRAG:
				EnterOuterAlt(_localctx, 10);
				{
				State = 546; defgxPragma();
				}
				break;
			case DGPRAG:
				EnterOuterAlt(_localctx, 11);
				{
				State = 547; defgPragma();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public TrivialOperationContext trivialOperation() {
			return GetRuleContext<TrivialOperationContext>(0);
		}
		public CompoundOperationContext compoundOperation() {
			return GetRuleContext<CompoundOperationContext>(0);
		}
		public TrivialNextOperationContext trivialNextOperation() {
			return GetRuleContext<TrivialNextOperationContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_operation);
		try {
			State = 553;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NOP:
			case RLCA:
			case RRCA:
			case RLA:
			case RRA:
			case DAA:
			case CPL:
			case SCF:
			case CCF:
			case HALT:
			case EXX:
			case DI:
			case EI:
			case NEG:
			case RETN:
			case RETI:
			case RLD:
			case RRD:
			case LDI:
			case CPI:
			case INI:
			case OUTI:
			case LDD:
			case CPD:
			case IND:
			case OUTD:
			case LDIR:
			case CPIR:
			case INIR:
			case OTIR:
			case LDDR:
			case CPDR:
			case INDR:
			case OTDR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 550; trivialOperation();
				}
				break;
			case RET:
			case LD:
			case INC:
			case DEC:
			case EX:
			case ADD:
			case ADC:
			case SUB:
			case SBC:
			case AND:
			case XOR:
			case OR:
			case CP:
			case DJNZ:
			case JR:
			case JP:
			case CALL:
			case RST:
			case PUSH:
			case POP:
			case IN:
			case OUT:
			case IM:
			case RLC:
			case RRC:
			case RL:
			case RR:
			case SLA:
			case SRA:
			case SLL:
			case SRL:
			case BIT:
			case RES:
			case SET:
			case MIRROR:
			case TEST:
			case NEXTREG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 551; compoundOperation();
				}
				break;
			case SWAPNIB:
			case MUL:
			case OUTINB:
			case LDIX:
			case LDIRX:
			case LDDX:
			case LDDRX:
			case PIXELDN:
			case PIXELAD:
			case SETAE:
			case LDPIRX:
			case LDIRSCALE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 552; trivialNextOperation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrivialOperationContext : ParserRuleContext {
		public ITerminalNode NOP() { return GetToken(Z80AsmParser.NOP, 0); }
		public ITerminalNode RLCA() { return GetToken(Z80AsmParser.RLCA, 0); }
		public ITerminalNode RRCA() { return GetToken(Z80AsmParser.RRCA, 0); }
		public ITerminalNode RLA() { return GetToken(Z80AsmParser.RLA, 0); }
		public ITerminalNode RRA() { return GetToken(Z80AsmParser.RRA, 0); }
		public ITerminalNode DAA() { return GetToken(Z80AsmParser.DAA, 0); }
		public ITerminalNode CPL() { return GetToken(Z80AsmParser.CPL, 0); }
		public ITerminalNode SCF() { return GetToken(Z80AsmParser.SCF, 0); }
		public ITerminalNode CCF() { return GetToken(Z80AsmParser.CCF, 0); }
		public ITerminalNode HALT() { return GetToken(Z80AsmParser.HALT, 0); }
		public ITerminalNode EXX() { return GetToken(Z80AsmParser.EXX, 0); }
		public ITerminalNode DI() { return GetToken(Z80AsmParser.DI, 0); }
		public ITerminalNode EI() { return GetToken(Z80AsmParser.EI, 0); }
		public ITerminalNode NEG() { return GetToken(Z80AsmParser.NEG, 0); }
		public ITerminalNode RETN() { return GetToken(Z80AsmParser.RETN, 0); }
		public ITerminalNode RETI() { return GetToken(Z80AsmParser.RETI, 0); }
		public ITerminalNode RLD() { return GetToken(Z80AsmParser.RLD, 0); }
		public ITerminalNode RRD() { return GetToken(Z80AsmParser.RRD, 0); }
		public ITerminalNode LDI() { return GetToken(Z80AsmParser.LDI, 0); }
		public ITerminalNode CPI() { return GetToken(Z80AsmParser.CPI, 0); }
		public ITerminalNode INI() { return GetToken(Z80AsmParser.INI, 0); }
		public ITerminalNode OUTI() { return GetToken(Z80AsmParser.OUTI, 0); }
		public ITerminalNode LDD() { return GetToken(Z80AsmParser.LDD, 0); }
		public ITerminalNode CPD() { return GetToken(Z80AsmParser.CPD, 0); }
		public ITerminalNode IND() { return GetToken(Z80AsmParser.IND, 0); }
		public ITerminalNode OUTD() { return GetToken(Z80AsmParser.OUTD, 0); }
		public ITerminalNode LDIR() { return GetToken(Z80AsmParser.LDIR, 0); }
		public ITerminalNode CPIR() { return GetToken(Z80AsmParser.CPIR, 0); }
		public ITerminalNode INIR() { return GetToken(Z80AsmParser.INIR, 0); }
		public ITerminalNode OTIR() { return GetToken(Z80AsmParser.OTIR, 0); }
		public ITerminalNode LDDR() { return GetToken(Z80AsmParser.LDDR, 0); }
		public ITerminalNode CPDR() { return GetToken(Z80AsmParser.CPDR, 0); }
		public ITerminalNode INDR() { return GetToken(Z80AsmParser.INDR, 0); }
		public ITerminalNode OTDR() { return GetToken(Z80AsmParser.OTDR, 0); }
		public TrivialOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trivialOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTrivialOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTrivialOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrivialOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrivialOperationContext trivialOperation() {
		TrivialOperationContext _localctx = new TrivialOperationContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_trivialOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555;
			_la = _input.La(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (NOP - 70)) | (1L << (RLCA - 70)) | (1L << (RRCA - 70)) | (1L << (RLA - 70)) | (1L << (RRA - 70)) | (1L << (DAA - 70)) | (1L << (CPL - 70)) | (1L << (SCF - 70)) | (1L << (CCF - 70)) | (1L << (HALT - 70)) | (1L << (EXX - 70)) | (1L << (DI - 70)) | (1L << (EI - 70)) | (1L << (NEG - 70)) | (1L << (RETN - 70)) | (1L << (RETI - 70)) | (1L << (RLD - 70)) | (1L << (RRD - 70)) | (1L << (LDI - 70)) | (1L << (CPI - 70)) | (1L << (INI - 70)) | (1L << (OUTI - 70)) | (1L << (LDD - 70)) | (1L << (CPD - 70)) | (1L << (IND - 70)) | (1L << (OUTD - 70)) | (1L << (LDIR - 70)) | (1L << (CPIR - 70)) | (1L << (INIR - 70)) | (1L << (OTIR - 70)) | (1L << (LDDR - 70)) | (1L << (CPDR - 70)) | (1L << (INDR - 70)) | (1L << (OTDR - 70)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundOperationContext : ParserRuleContext {
		public ITerminalNode LD() { return GetToken(Z80AsmParser.LD, 0); }
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public ITerminalNode INC() { return GetToken(Z80AsmParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(Z80AsmParser.DEC, 0); }
		public ITerminalNode EX() { return GetToken(Z80AsmParser.EX, 0); }
		public ITerminalNode ADD() { return GetToken(Z80AsmParser.ADD, 0); }
		public ITerminalNode ADC() { return GetToken(Z80AsmParser.ADC, 0); }
		public ITerminalNode SUB() { return GetToken(Z80AsmParser.SUB, 0); }
		public ITerminalNode SBC() { return GetToken(Z80AsmParser.SBC, 0); }
		public ITerminalNode AND() { return GetToken(Z80AsmParser.AND, 0); }
		public ITerminalNode XOR() { return GetToken(Z80AsmParser.XOR, 0); }
		public ITerminalNode OR() { return GetToken(Z80AsmParser.OR, 0); }
		public ITerminalNode CP() { return GetToken(Z80AsmParser.CP, 0); }
		public ITerminalNode DJNZ() { return GetToken(Z80AsmParser.DJNZ, 0); }
		public ITerminalNode JR() { return GetToken(Z80AsmParser.JR, 0); }
		public ITerminalNode JP() { return GetToken(Z80AsmParser.JP, 0); }
		public ITerminalNode CALL() { return GetToken(Z80AsmParser.CALL, 0); }
		public ITerminalNode RET() { return GetToken(Z80AsmParser.RET, 0); }
		public ITerminalNode RST() { return GetToken(Z80AsmParser.RST, 0); }
		public ITerminalNode PUSH() { return GetToken(Z80AsmParser.PUSH, 0); }
		public ITerminalNode POP() { return GetToken(Z80AsmParser.POP, 0); }
		public ITerminalNode IN() { return GetToken(Z80AsmParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(Z80AsmParser.OUT, 0); }
		public ITerminalNode IM() { return GetToken(Z80AsmParser.IM, 0); }
		public ITerminalNode RLC() { return GetToken(Z80AsmParser.RLC, 0); }
		public ITerminalNode RRC() { return GetToken(Z80AsmParser.RRC, 0); }
		public ITerminalNode RL() { return GetToken(Z80AsmParser.RL, 0); }
		public ITerminalNode RR() { return GetToken(Z80AsmParser.RR, 0); }
		public ITerminalNode SLA() { return GetToken(Z80AsmParser.SLA, 0); }
		public ITerminalNode SRA() { return GetToken(Z80AsmParser.SRA, 0); }
		public ITerminalNode SLL() { return GetToken(Z80AsmParser.SLL, 0); }
		public ITerminalNode SRL() { return GetToken(Z80AsmParser.SRL, 0); }
		public ITerminalNode BIT() { return GetToken(Z80AsmParser.BIT, 0); }
		public ITerminalNode RES() { return GetToken(Z80AsmParser.RES, 0); }
		public ITerminalNode SET() { return GetToken(Z80AsmParser.SET, 0); }
		public ITerminalNode MIRROR() { return GetToken(Z80AsmParser.MIRROR, 0); }
		public ITerminalNode TEST() { return GetToken(Z80AsmParser.TEST, 0); }
		public ITerminalNode NEXTREG() { return GetToken(Z80AsmParser.NEXTREG, 0); }
		public CompoundOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCompoundOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCompoundOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundOperationContext compoundOperation() {
		CompoundOperationContext _localctx = new CompoundOperationContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_compoundOperation);
		int _la;
		try {
			State = 760;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 557; Match(LD);
				State = 558; operand();
				State = 559; Match(COMMA);
				State = 560; operand();
				}
				break;
			case INC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 562; Match(INC);
				State = 563; operand();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 564; Match(DEC);
				State = 565; operand();
				}
				break;
			case EX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 566; Match(EX);
				State = 567; operand();
				State = 568; Match(COMMA);
				State = 569; operand();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 571; Match(ADD);
				State = 572; operand();
				State = 573; Match(COMMA);
				State = 574; operand();
				}
				break;
			case ADC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 576; Match(ADC);
				State = 577; operand();
				State = 578; Match(COMMA);
				State = 579; operand();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 7);
				{
				State = 581; Match(SUB);
				State = 585;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					State = 582; operand();
					State = 583; Match(COMMA);
					}
					break;
				}
				State = 587; operand();
				}
				break;
			case SBC:
				EnterOuterAlt(_localctx, 8);
				{
				State = 588; Match(SBC);
				State = 589; operand();
				State = 590; Match(COMMA);
				State = 591; operand();
				}
				break;
			case AND:
				EnterOuterAlt(_localctx, 9);
				{
				State = 593; Match(AND);
				State = 597;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					State = 594; operand();
					State = 595; Match(COMMA);
					}
					break;
				}
				State = 599; operand();
				}
				break;
			case XOR:
				EnterOuterAlt(_localctx, 10);
				{
				State = 600; Match(XOR);
				State = 604;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					State = 601; operand();
					State = 602; Match(COMMA);
					}
					break;
				}
				State = 606; operand();
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 11);
				{
				State = 607; Match(OR);
				State = 611;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					State = 608; operand();
					State = 609; Match(COMMA);
					}
					break;
				}
				State = 613; operand();
				}
				break;
			case CP:
				EnterOuterAlt(_localctx, 12);
				{
				State = 614; Match(CP);
				State = 618;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					State = 615; operand();
					State = 616; Match(COMMA);
					}
					break;
				}
				State = 620; operand();
				}
				break;
			case DJNZ:
				EnterOuterAlt(_localctx, 13);
				{
				State = 621; Match(DJNZ);
				State = 622; operand();
				}
				break;
			case JR:
				EnterOuterAlt(_localctx, 14);
				{
				State = 623; Match(JR);
				State = 627;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					State = 624; operand();
					State = 625; Match(COMMA);
					}
					break;
				}
				State = 629; operand();
				}
				break;
			case JP:
				EnterOuterAlt(_localctx, 15);
				{
				State = 630; Match(JP);
				State = 634;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					State = 631; operand();
					State = 632; Match(COMMA);
					}
					break;
				}
				State = 636; operand();
				}
				break;
			case CALL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 637; Match(CALL);
				State = 641;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					State = 638; operand();
					State = 639; Match(COMMA);
					}
					break;
				}
				State = 643; operand();
				}
				break;
			case RET:
				EnterOuterAlt(_localctx, 17);
				{
				State = 644; Match(RET);
				State = 646;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
					{
					State = 645; operand();
					}
				}

				}
				break;
			case RST:
				EnterOuterAlt(_localctx, 18);
				{
				State = 648; Match(RST);
				State = 649; operand();
				}
				break;
			case PUSH:
				EnterOuterAlt(_localctx, 19);
				{
				State = 650; Match(PUSH);
				State = 651; operand();
				}
				break;
			case POP:
				EnterOuterAlt(_localctx, 20);
				{
				State = 652; Match(POP);
				State = 653; operand();
				}
				break;
			case IN:
				EnterOuterAlt(_localctx, 21);
				{
				State = 654; Match(IN);
				State = 658;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					State = 655; operand();
					State = 656; Match(COMMA);
					}
					break;
				}
				State = 660; operand();
				}
				break;
			case OUT:
				EnterOuterAlt(_localctx, 22);
				{
				State = 661; Match(OUT);
				State = 665;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					State = 662; operand();
					State = 663; Match(COMMA);
					}
					break;
				}
				State = 667; operand();
				}
				break;
			case IM:
				EnterOuterAlt(_localctx, 23);
				{
				State = 668; Match(IM);
				State = 669; operand();
				}
				break;
			case RLC:
				EnterOuterAlt(_localctx, 24);
				{
				State = 670; Match(RLC);
				State = 674;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					State = 671; operand();
					State = 672; Match(COMMA);
					}
					break;
				}
				State = 676; operand();
				}
				break;
			case RRC:
				EnterOuterAlt(_localctx, 25);
				{
				State = 677; Match(RRC);
				State = 681;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
				case 1:
					{
					State = 678; operand();
					State = 679; Match(COMMA);
					}
					break;
				}
				State = 683; operand();
				}
				break;
			case RL:
				EnterOuterAlt(_localctx, 26);
				{
				State = 684; Match(RL);
				State = 688;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
				case 1:
					{
					State = 685; operand();
					State = 686; Match(COMMA);
					}
					break;
				}
				State = 690; operand();
				}
				break;
			case RR:
				EnterOuterAlt(_localctx, 27);
				{
				State = 691; Match(RR);
				State = 695;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					State = 692; operand();
					State = 693; Match(COMMA);
					}
					break;
				}
				State = 697; operand();
				}
				break;
			case SLA:
				EnterOuterAlt(_localctx, 28);
				{
				State = 698; Match(SLA);
				State = 702;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					State = 699; operand();
					State = 700; Match(COMMA);
					}
					break;
				}
				State = 704; operand();
				}
				break;
			case SRA:
				EnterOuterAlt(_localctx, 29);
				{
				State = 705; Match(SRA);
				State = 709;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
				case 1:
					{
					State = 706; operand();
					State = 707; Match(COMMA);
					}
					break;
				}
				State = 711; operand();
				}
				break;
			case SLL:
				EnterOuterAlt(_localctx, 30);
				{
				State = 712; Match(SLL);
				State = 716;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					State = 713; operand();
					State = 714; Match(COMMA);
					}
					break;
				}
				State = 718; operand();
				}
				break;
			case SRL:
				EnterOuterAlt(_localctx, 31);
				{
				State = 719; Match(SRL);
				State = 723;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					State = 720; operand();
					State = 721; Match(COMMA);
					}
					break;
				}
				State = 725; operand();
				}
				break;
			case BIT:
				EnterOuterAlt(_localctx, 32);
				{
				State = 726; Match(BIT);
				State = 727; operand();
				State = 728; Match(COMMA);
				State = 729; operand();
				}
				break;
			case RES:
				EnterOuterAlt(_localctx, 33);
				{
				State = 731; Match(RES);
				State = 732; operand();
				State = 733; Match(COMMA);
				State = 737;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
				case 1:
					{
					State = 734; operand();
					State = 735; Match(COMMA);
					}
					break;
				}
				State = 739; operand();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 34);
				{
				State = 741; Match(SET);
				State = 742; operand();
				State = 743; Match(COMMA);
				State = 747;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					State = 744; operand();
					State = 745; Match(COMMA);
					}
					break;
				}
				State = 749; operand();
				}
				break;
			case MIRROR:
				EnterOuterAlt(_localctx, 35);
				{
				State = 751; Match(MIRROR);
				State = 752; operand();
				}
				break;
			case TEST:
				EnterOuterAlt(_localctx, 36);
				{
				State = 753; Match(TEST);
				State = 754; operand();
				}
				break;
			case NEXTREG:
				EnterOuterAlt(_localctx, 37);
				{
				State = 755; Match(NEXTREG);
				State = 756; operand();
				State = 757; Match(COMMA);
				State = 758; operand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrivialNextOperationContext : ParserRuleContext {
		public ITerminalNode SWAPNIB() { return GetToken(Z80AsmParser.SWAPNIB, 0); }
		public ITerminalNode MUL() { return GetToken(Z80AsmParser.MUL, 0); }
		public ITerminalNode OUTINB() { return GetToken(Z80AsmParser.OUTINB, 0); }
		public ITerminalNode LDIX() { return GetToken(Z80AsmParser.LDIX, 0); }
		public ITerminalNode LDIRX() { return GetToken(Z80AsmParser.LDIRX, 0); }
		public ITerminalNode LDDX() { return GetToken(Z80AsmParser.LDDX, 0); }
		public ITerminalNode LDDRX() { return GetToken(Z80AsmParser.LDDRX, 0); }
		public ITerminalNode PIXELDN() { return GetToken(Z80AsmParser.PIXELDN, 0); }
		public ITerminalNode PIXELAD() { return GetToken(Z80AsmParser.PIXELAD, 0); }
		public ITerminalNode SETAE() { return GetToken(Z80AsmParser.SETAE, 0); }
		public ITerminalNode LDPIRX() { return GetToken(Z80AsmParser.LDPIRX, 0); }
		public ITerminalNode LDIRSCALE() { return GetToken(Z80AsmParser.LDIRSCALE, 0); }
		public TrivialNextOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trivialNextOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTrivialNextOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTrivialNextOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrivialNextOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrivialNextOperationContext trivialNextOperation() {
		TrivialNextOperationContext _localctx = new TrivialNextOperationContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_trivialNextOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 762;
			_la = _input.La(1);
			if ( !(((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (SWAPNIB - 138)) | (1L << (MUL - 138)) | (1L << (OUTINB - 138)) | (1L << (LDIX - 138)) | (1L << (LDIRX - 138)) | (1L << (LDDX - 138)) | (1L << (LDDRX - 138)) | (1L << (PIXELDN - 138)) | (1L << (PIXELAD - 138)) | (1L << (SETAE - 138)) | (1L << (LDPIRX - 138)) | (1L << (LDIRSCALE - 138)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public Reg8Context reg8() {
			return GetRuleContext<Reg8Context>(0);
		}
		public Reg8IdxContext reg8Idx() {
			return GetRuleContext<Reg8IdxContext>(0);
		}
		public Reg8SpecContext reg8Spec() {
			return GetRuleContext<Reg8SpecContext>(0);
		}
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public Reg16SpecContext reg16Spec() {
			return GetRuleContext<Reg16SpecContext>(0);
		}
		public RegIndirectContext regIndirect() {
			return GetRuleContext<RegIndirectContext>(0);
		}
		public CPortContext cPort() {
			return GetRuleContext<CPortContext>(0);
		}
		public MemIndirectContext memIndirect() {
			return GetRuleContext<MemIndirectContext>(0);
		}
		public IndexedAddrContext indexedAddr() {
			return GetRuleContext<IndexedAddrContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode HREG() { return GetToken(Z80AsmParser.HREG, 0); }
		public ITerminalNode LREG() { return GetToken(Z80AsmParser.LREG, 0); }
		public Reg16StdContext reg16Std() {
			return GetRuleContext<Reg16StdContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public ITerminalNode NONEARG() { return GetToken(Z80AsmParser.NONEARG, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_operand);
		int _la;
		try {
			State = 785;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 764; reg8();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 765; reg8Idx();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 766; reg8Spec();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 767; reg16();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 768; reg16Idx();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 769; reg16Spec();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 770; regIndirect();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 771; cPort();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 772; memIndirect();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 773; indexedAddr();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 774; expr(0);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 775; condition();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 776;
				_la = _input.La(1);
				if ( !(_la==HREG || _la==LREG) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 777; Match(LPAR);
				State = 780;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case BC:
				case DE:
				case HL:
				case IX:
				case IY:
					{
					State = 778; reg16Std();
					}
					break;
				case LDBRAC:
					{
					State = 779; macroParam();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 782; Match(RPAR);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 784; Match(NONEARG);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8Context : ParserRuleContext {
		public ITerminalNode A() { return GetToken(Z80AsmParser.A, 0); }
		public ITerminalNode B() { return GetToken(Z80AsmParser.B, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode D() { return GetToken(Z80AsmParser.D, 0); }
		public ITerminalNode E() { return GetToken(Z80AsmParser.E, 0); }
		public ITerminalNode H() { return GetToken(Z80AsmParser.H, 0); }
		public ITerminalNode L() { return GetToken(Z80AsmParser.L, 0); }
		public Reg8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8Context reg8() {
		Reg8Context _localctx = new Reg8Context(_ctx, State);
		EnterRule(_localctx, 132, RULE_reg8);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A) | (1L << B) | (1L << C) | (1L << D) | (1L << E) | (1L << H) | (1L << L))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8IdxContext : ParserRuleContext {
		public ITerminalNode XL() { return GetToken(Z80AsmParser.XL, 0); }
		public ITerminalNode XH() { return GetToken(Z80AsmParser.XH, 0); }
		public ITerminalNode YL() { return GetToken(Z80AsmParser.YL, 0); }
		public ITerminalNode YH() { return GetToken(Z80AsmParser.YH, 0); }
		public Reg8IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8IdxContext reg8Idx() {
		Reg8IdxContext _localctx = new Reg8IdxContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_reg8Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << XL) | (1L << XH) | (1L << YL) | (1L << YH))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8SpecContext : ParserRuleContext {
		public ITerminalNode I() { return GetToken(Z80AsmParser.I, 0); }
		public ITerminalNode R() { return GetToken(Z80AsmParser.R, 0); }
		public Reg8SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8SpecContext reg8Spec() {
		Reg8SpecContext _localctx = new Reg8SpecContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_reg8Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			_la = _input.La(1);
			if ( !(_la==I || _la==R) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16Context : ParserRuleContext {
		public ITerminalNode BC() { return GetToken(Z80AsmParser.BC, 0); }
		public ITerminalNode DE() { return GetToken(Z80AsmParser.DE, 0); }
		public ITerminalNode HL() { return GetToken(Z80AsmParser.HL, 0); }
		public ITerminalNode SP() { return GetToken(Z80AsmParser.SP, 0); }
		public Reg16Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16Context reg16() {
		Reg16Context _localctx = new Reg16Context(_ctx, State);
		EnterRule(_localctx, 138, RULE_reg16);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BC) | (1L << DE) | (1L << HL) | (1L << SP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16IdxContext : ParserRuleContext {
		public ITerminalNode IX() { return GetToken(Z80AsmParser.IX, 0); }
		public ITerminalNode IY() { return GetToken(Z80AsmParser.IY, 0); }
		public Reg16IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16IdxContext reg16Idx() {
		Reg16IdxContext _localctx = new Reg16IdxContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_reg16Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795;
			_la = _input.La(1);
			if ( !(_la==IX || _la==IY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16StdContext : ParserRuleContext {
		public ITerminalNode BC() { return GetToken(Z80AsmParser.BC, 0); }
		public ITerminalNode DE() { return GetToken(Z80AsmParser.DE, 0); }
		public ITerminalNode HL() { return GetToken(Z80AsmParser.HL, 0); }
		public ITerminalNode IX() { return GetToken(Z80AsmParser.IX, 0); }
		public ITerminalNode IY() { return GetToken(Z80AsmParser.IY, 0); }
		public Reg16StdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Std; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Std(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Std(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Std(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16StdContext reg16Std() {
		Reg16StdContext _localctx = new Reg16StdContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_reg16Std);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BC) | (1L << DE) | (1L << HL) | (1L << IX) | (1L << IY))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16SpecContext : ParserRuleContext {
		public ITerminalNode AF() { return GetToken(Z80AsmParser.AF, 0); }
		public ITerminalNode AF_() { return GetToken(Z80AsmParser.AF_, 0); }
		public Reg16SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16SpecContext reg16Spec() {
		Reg16SpecContext _localctx = new Reg16SpecContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_reg16Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			_la = _input.La(1);
			if ( !(_la==AF || _la==AF_) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegIndirectContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public RegIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRegIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRegIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegIndirectContext regIndirect() {
		RegIndirectContext _localctx = new RegIndirectContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_regIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801; Match(LPAR);
			{
			State = 802; reg16();
			}
			State = 803; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CPortContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public CPortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cPort; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCPort(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCPort(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCPort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CPortContext cPort() {
		CPortContext _localctx = new CPortContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_cPort);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805; Match(LPAR);
			State = 806; Match(C);
			State = 807; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemIndirectContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public MemIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMemIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMemIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemIndirectContext memIndirect() {
		MemIndirectContext _localctx = new MemIndirectContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_memIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809; Match(LPAR);
			State = 810; expr(0);
			State = 811; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexedAddrContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(Z80AsmParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(Z80AsmParser.MINUS, 0); }
		public IndexedAddrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexedAddr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIndexedAddr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIndexedAddr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexedAddr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexedAddrContext indexedAddr() {
		IndexedAddrContext _localctx = new IndexedAddrContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_indexedAddr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813; Match(LPAR);
			State = 814; reg16Idx();
			State = 817;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 815;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 816; expr(0);
				}
			}

			State = 819; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ITerminalNode Z() { return GetToken(Z80AsmParser.Z, 0); }
		public ITerminalNode NZ() { return GetToken(Z80AsmParser.NZ, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode NC() { return GetToken(Z80AsmParser.NC, 0); }
		public ITerminalNode PO() { return GetToken(Z80AsmParser.PO, 0); }
		public ITerminalNode PE() { return GetToken(Z80AsmParser.PE, 0); }
		public ITerminalNode P() { return GetToken(Z80AsmParser.P, 0); }
		public ITerminalNode M() { return GetToken(Z80AsmParser.M, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			_la = _input.La(1);
			if ( !(((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (C - 44)) | (1L << (Z - 44)) | (1L << (NZ - 44)) | (1L << (NC - 44)) | (1L << (PO - 44)) | (1L << (PE - 44)) | (1L << (P - 44)) | (1L << (M - 44)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionInvocationExprContext : ExprContext {
		public FunctionInvocationContext functionInvocation() {
			return GetRuleContext<FunctionInvocationContext>(0);
		}
		public FunctionInvocationExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFunctionInvocationExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFunctionInvocationExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExprContext : ExprContext {
		public ITerminalNode PLUS() { return GetToken(Z80AsmParser.PLUS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryPlusExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterUnaryPlusExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitUnaryPlusExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode QMARK() { return GetToken(Z80AsmParser.QMARK, 0); }
		public ITerminalNode COLON() { return GetToken(Z80AsmParser.COLON, 0); }
		public TernaryExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTernaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTernaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(Z80AsmParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(Z80AsmParser.MINUS, 0); }
		public AddExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SymbolExprContext : ExprContext {
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public SymbolExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterSymbolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitSymbolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExprContext : ExprContext {
		public ITerminalNode MINUS() { return GetToken(Z80AsmParser.MINUS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryMinusExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EquExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQOP() { return GetToken(Z80AsmParser.EQOP, 0); }
		public ITerminalNode NEQOP() { return GetToken(Z80AsmParser.NEQOP, 0); }
		public ITerminalNode CIEQOP() { return GetToken(Z80AsmParser.CIEQOP, 0); }
		public ITerminalNode CINEQOP() { return GetToken(Z80AsmParser.CINEQOP, 0); }
		public EquExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEquExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEquExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode UPARR() { return GetToken(Z80AsmParser.UPARR, 0); }
		public XorExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterXorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitXorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MacroParamExprContext : ExprContext {
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public MacroParamExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroParamExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroParamExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroParamExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryNotExprContext : ExprContext {
		public ITerminalNode TILDE() { return GetToken(Z80AsmParser.TILDE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BinaryNotExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBinaryNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBinaryNotExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MULOP() { return GetToken(Z80AsmParser.MULOP, 0); }
		public ITerminalNode DIVOP() { return GetToken(Z80AsmParser.DIVOP, 0); }
		public ITerminalNode MODOP() { return GetToken(Z80AsmParser.MODOP, 0); }
		public ITerminalNode MINOP() { return GetToken(Z80AsmParser.MINOP, 0); }
		public ITerminalNode MAXOP() { return GetToken(Z80AsmParser.MAXOP, 0); }
		public MultExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketedExprContext : ExprContext {
		public ITerminalNode LSBRAC() { return GetToken(Z80AsmParser.LSBRAC, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RSBRAC() { return GetToken(Z80AsmParser.RSBRAC, 0); }
		public BracketedExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBracketedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBracketedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalNotExprContext : ExprContext {
		public ITerminalNode EXCLM() { return GetToken(Z80AsmParser.EXCLM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LogicalNotExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLogicalNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLogicalNotExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode VBAR() { return GetToken(Z80AsmParser.VBAR, 0); }
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AMP() { return GetToken(Z80AsmParser.AMP, 0); }
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LSHOP() { return GetToken(Z80AsmParser.LSHOP, 0); }
		public ITerminalNode RSHOP() { return GetToken(Z80AsmParser.RSHOP, 0); }
		public ShiftExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterShiftExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitShiftExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExprContext : ExprContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ParenthesizedExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinMaxExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MINOP() { return GetToken(Z80AsmParser.MINOP, 0); }
		public ITerminalNode MAXOP() { return GetToken(Z80AsmParser.MAXOP, 0); }
		public MinMaxExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMinMaxExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMinMaxExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinMaxExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BuiltInFunctionExprContext : ExprContext {
		public BuiltinFunctionInvocationContext builtinFunctionInvocation() {
			return GetRuleContext<BuiltinFunctionInvocationContext>(0);
		}
		public BuiltInFunctionExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBuiltInFunctionExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBuiltInFunctionExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInFunctionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LTOP() { return GetToken(Z80AsmParser.LTOP, 0); }
		public ITerminalNode LTEOP() { return GetToken(Z80AsmParser.LTEOP, 0); }
		public ITerminalNode GTOP() { return GetToken(Z80AsmParser.GTOP, 0); }
		public ITerminalNode GTEOP() { return GetToken(Z80AsmParser.GTEOP, 0); }
		public RelExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 156;
		EnterRecursionRule(_localctx, 156, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 845;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				_localctx = new BuiltInFunctionExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 824; builtinFunctionInvocation();
				}
				break;

			case 2:
				{
				_localctx = new FunctionInvocationExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 825; functionInvocation();
				}
				break;

			case 3:
				{
				_localctx = new MacroParamExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 826; macroParam();
				}
				break;

			case 4:
				{
				_localctx = new UnaryPlusExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 827; Match(PLUS);
				State = 828; expr(18);
				}
				break;

			case 5:
				{
				_localctx = new UnaryMinusExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 829; Match(MINUS);
				State = 830; expr(17);
				}
				break;

			case 6:
				{
				_localctx = new BinaryNotExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 831; Match(TILDE);
				State = 832; expr(16);
				}
				break;

			case 7:
				{
				_localctx = new LogicalNotExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 833; Match(EXCLM);
				State = 834; expr(15);
				}
				break;

			case 8:
				{
				_localctx = new BracketedExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 835; Match(LSBRAC);
				State = 836; expr(0);
				State = 837; Match(RSBRAC);
				}
				break;

			case 9:
				{
				_localctx = new ParenthesizedExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 839; Match(LPAR);
				State = 840; expr(0);
				State = 841; Match(RPAR);
				}
				break;

			case 10:
				{
				_localctx = new LiteralExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 843; literal();
				}
				break;

			case 11:
				{
				_localctx = new SymbolExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 844; symbol();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 882;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,67,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 880;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
					case 1:
						{
						_localctx = new MinMaxExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 847;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 848;
						((MinMaxExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MINOP || _la==MAXOP) ) {
							((MinMaxExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 849; expr(11);
						}
						break;

					case 2:
						{
						_localctx = new MultExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 850;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 851;
						((MultExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULOP) | (1L << DIVOP) | (1L << MODOP) | (1L << MINOP) | (1L << MAXOP))) != 0)) ) {
							((MultExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 852; expr(10);
						}
						break;

					case 3:
						{
						_localctx = new AddExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 853;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 854;
						((AddExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 855; expr(9);
						}
						break;

					case 4:
						{
						_localctx = new ShiftExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 856;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 857;
						((ShiftExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==LSHOP || _la==RSHOP) ) {
							((ShiftExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 858; expr(8);
						}
						break;

					case 5:
						{
						_localctx = new RelExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 859;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 860;
						((RelExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP))) != 0)) ) {
							((RelExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 861; expr(7);
						}
						break;

					case 6:
						{
						_localctx = new EquExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 862;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 863;
						((EquExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQOP) | (1L << CIEQOP) | (1L << NEQOP) | (1L << CINEQOP))) != 0)) ) {
							((EquExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 864; expr(6);
						}
						break;

					case 7:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 865;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 866; Match(AMP);
						State = 867; expr(5);
						}
						break;

					case 8:
						{
						_localctx = new XorExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 868;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 869; Match(UPARR);
						State = 870; expr(4);
						}
						break;

					case 9:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 871;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 872; Match(VBAR);
						State = 873; expr(3);
						}
						break;

					case 10:
						{
						_localctx = new TernaryExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 874;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 875; Match(QMARK);
						State = 876; expr(0);
						State = 877; Match(COLON);
						State = 878; expr(2);
						}
						break;
					}
					} 
				}
				State = 884;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,67,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionInvocationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public FunctionInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFunctionInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFunctionInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionInvocationContext functionInvocation() {
		FunctionInvocationContext _localctx = new FunctionInvocationContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_functionInvocation);
		int _la;
		try {
			State = 900;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 885; Match(IDENTIFIER);
				State = 886; Match(LPAR);
				State = 887; Match(RPAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 888; Match(IDENTIFIER);
				State = 889; Match(LPAR);
				State = 890; expr(0);
				State = 895;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 891; Match(COMMA);
					State = 892; expr(0);
					}
					}
					State = 897;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 898; Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinFunctionInvocationContext : ParserRuleContext {
		public BuiltinFunctionInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinFunctionInvocation; } }
	 
		public BuiltinFunctionInvocationContext() { }
		public virtual void CopyFrom(BuiltinFunctionInvocationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TextOfInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode TEXTOF() { return GetToken(Z80AsmParser.TEXTOF, 0); }
		public ITerminalNode LTEXTOF() { return GetToken(Z80AsmParser.LTEXTOF, 0); }
		public MnemonicContext mnemonic() {
			return GetRuleContext<MnemonicContext>(0);
		}
		public RegsAndCondsContext regsAndConds() {
			return GetRuleContext<RegsAndCondsContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public TextOfInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTextOfInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTextOfInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextOfInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsIndexedAddrInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISINDEXEDADDR() { return GetToken(Z80AsmParser.ISINDEXEDADDR, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsIndexedAddrInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsIndexedAddrInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsIndexedAddrInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsIndexedAddrInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsReg16IdxInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREG16IDX() { return GetToken(Z80AsmParser.ISREG16IDX, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsReg16IdxInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsReg16IdxInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsReg16IdxInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsReg16IdxInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsReg16InvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREG16() { return GetToken(Z80AsmParser.ISREG16, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsReg16InvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsReg16Invoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsReg16Invoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsReg16Invoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsReg8IdxInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREG8IDX() { return GetToken(Z80AsmParser.ISREG8IDX, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsReg8IdxInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsReg8IdxInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsReg8IdxInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsReg8IdxInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsReg8StdInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREG8STD() { return GetToken(Z80AsmParser.ISREG8STD, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsReg8StdInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsReg8StdInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsReg8StdInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsReg8StdInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsReg8StdSpecInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREG8SPEC() { return GetToken(Z80AsmParser.ISREG8SPEC, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsReg8StdSpecInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsReg8StdSpecInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsReg8StdSpecInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsReg8StdSpecInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode DEF() { return GetToken(Z80AsmParser.DEF, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public DefInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsConditionInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISCONDITION() { return GetToken(Z80AsmParser.ISCONDITION, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsConditionInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsConditionInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsConditionInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsConditionInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsRegIndirectInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREGINDIRECT() { return GetToken(Z80AsmParser.ISREGINDIRECT, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsRegIndirectInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsRegIndirectInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsRegIndirectInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsRegIndirectInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsReg8InvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREG8() { return GetToken(Z80AsmParser.ISREG8, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsReg8InvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsReg8Invoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsReg8Invoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsReg8Invoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsReg16StdInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISREG16STD() { return GetToken(Z80AsmParser.ISREG16STD, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsReg16StdInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsReg16StdInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsReg16StdInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsReg16StdInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsExprInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISEXPR() { return GetToken(Z80AsmParser.ISEXPR, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsExprInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsExprInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsExprInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsExprInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsCportInvokeContext : BuiltinFunctionInvocationContext {
		public ITerminalNode ISCPORT() { return GetToken(Z80AsmParser.ISCPORT, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IsCportInvokeContext(BuiltinFunctionInvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIsCportInvoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIsCportInvoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCportInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltinFunctionInvocationContext builtinFunctionInvocation() {
		BuiltinFunctionInvocationContext _localctx = new BuiltinFunctionInvocationContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_builtinFunctionInvocation);
		int _la;
		try {
			State = 989;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TEXTOF:
			case LTEXTOF:
				_localctx = new TextOfInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 902;
				_la = _input.La(1);
				if ( !(_la==TEXTOF || _la==LTEXTOF) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 903; Match(LPAR);
				State = 907;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case NOP:
				case RLCA:
				case RRCA:
				case RLA:
				case RRA:
				case DAA:
				case CPL:
				case SCF:
				case CCF:
				case HALT:
				case RET:
				case EXX:
				case DI:
				case EI:
				case NEG:
				case RETN:
				case RETI:
				case RLD:
				case RRD:
				case LDI:
				case CPI:
				case INI:
				case OUTI:
				case LDD:
				case CPD:
				case IND:
				case OUTD:
				case LDIR:
				case CPIR:
				case INIR:
				case OTIR:
				case LDDR:
				case CPDR:
				case INDR:
				case OTDR:
				case LD:
				case INC:
				case DEC:
				case EX:
				case ADD:
				case ADC:
				case SUB:
				case SBC:
				case AND:
				case XOR:
				case OR:
				case CP:
				case DJNZ:
				case JR:
				case JP:
				case CALL:
				case RST:
				case PUSH:
				case POP:
				case IN:
				case OUT:
				case IM:
				case RLC:
				case RRC:
				case RL:
				case RR:
				case SLA:
				case SRA:
				case SLL:
				case SRL:
				case BIT:
				case RES:
				case SET:
				case SWAPNIB:
				case MUL:
				case POPX:
				case MIRROR:
				case TEST:
				case NEXTREG:
				case OUTINB:
				case LDIX:
				case LDIRX:
				case LDDX:
				case LDDRX:
				case PIXELDN:
				case PIXELAD:
				case SETAE:
				case LDPIRX:
					{
					State = 904; mnemonic();
					}
					break;
				case LPAR:
				case A:
				case B:
				case C:
				case D:
				case E:
				case H:
				case L:
				case I:
				case R:
				case XL:
				case XH:
				case YL:
				case YH:
				case BC:
				case DE:
				case HL:
				case SP:
				case IX:
				case IY:
				case AF:
				case AF_:
				case Z:
				case NZ:
				case NC:
				case PO:
				case PE:
				case P:
				case M:
					{
					State = 905; regsAndConds();
					}
					break;
				case LDBRAC:
					{
					State = 906; macroParam();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 909; Match(RPAR);
				}
				break;
			case DEF:
				_localctx = new DefInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 911; Match(DEF);
				State = 912; Match(LPAR);
				State = 914;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
					{
					State = 913; operand();
					}
				}

				State = 916; Match(RPAR);
				}
				break;
			case ISREG8:
				_localctx = new IsReg8InvokeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 917; Match(ISREG8);
				State = 918; Match(LPAR);
				State = 920;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
					{
					State = 919; operand();
					}
				}

				State = 922; Match(RPAR);
				}
				break;
			case ISREG8STD:
				_localctx = new IsReg8StdInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 923; Match(ISREG8STD);
				State = 924; Match(LPAR);
				State = 926;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
					{
					State = 925; operand();
					}
				}

				State = 928; Match(RPAR);
				}
				break;
			case ISREG8SPEC:
				_localctx = new IsReg8StdSpecInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 929; Match(ISREG8SPEC);
				State = 930; Match(LPAR);
				State = 932;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
					{
					State = 931; operand();
					}
				}

				State = 934; Match(RPAR);
				}
				break;
			case ISREG8IDX:
				_localctx = new IsReg8IdxInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 935; Match(ISREG8IDX);
				State = 936; Match(LPAR);
				State = 938;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
					{
					State = 937; operand();
					}
				}

				State = 940; Match(RPAR);
				}
				break;
			case ISREG16:
				_localctx = new IsReg16InvokeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 941; Match(ISREG16);
				State = 942; Match(LPAR);
				State = 944;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
					{
					State = 943; operand();
					}
				}

				State = 946; Match(RPAR);
				}
				break;
			case ISREG16STD:
				_localctx = new IsReg16StdInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 947; Match(ISREG16STD);
				State = 948; Match(LPAR);
				State = 950;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
					{
					State = 949; operand();
					}
				}

				State = 952; Match(RPAR);
				}
				break;
			case ISREG16IDX:
				_localctx = new IsReg16IdxInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 953; Match(ISREG16IDX);
				State = 954; Match(LPAR);
				State = 956;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
					{
					State = 955; operand();
					}
				}

				State = 958; Match(RPAR);
				}
				break;
			case ISREGINDIRECT:
				_localctx = new IsRegIndirectInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 959; Match(ISREGINDIRECT);
				State = 960; Match(LPAR);
				State = 962;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
					{
					State = 961; operand();
					}
				}

				State = 964; Match(RPAR);
				}
				break;
			case ISCPORT:
				_localctx = new IsCportInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 965; Match(ISCPORT);
				State = 966; Match(LPAR);
				State = 968;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
					{
					State = 967; operand();
					}
				}

				State = 970; Match(RPAR);
				}
				break;
			case ISINDEXEDADDR:
				_localctx = new IsIndexedAddrInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 971; Match(ISINDEXEDADDR);
				State = 972; Match(LPAR);
				State = 974;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
					{
					State = 973; operand();
					}
				}

				State = 976; Match(RPAR);
				}
				break;
			case ISCONDITION:
				_localctx = new IsConditionInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 977; Match(ISCONDITION);
				State = 978; Match(LPAR);
				State = 980;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
					{
					State = 979; operand();
					}
				}

				State = 982; Match(RPAR);
				}
				break;
			case ISEXPR:
				_localctx = new IsExprInvokeContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 983; Match(ISEXPR);
				State = 984; Match(LPAR);
				State = 986;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (DCOLON - 6)) | (1L << (LPAR - 6)) | (1L << (LSBRAC - 6)) | (1L << (PLUS - 6)) | (1L << (MINUS - 6)) | (1L << (MULOP - 6)) | (1L << (TILDE - 6)) | (1L << (LDBRAC - 6)) | (1L << (EXCLM - 6)) | (1L << (DOT - 6)) | (1L << (A - 6)) | (1L << (B - 6)) | (1L << (C - 6)) | (1L << (D - 6)) | (1L << (E - 6)) | (1L << (H - 6)) | (1L << (L - 6)) | (1L << (I - 6)) | (1L << (R - 6)) | (1L << (XL - 6)) | (1L << (XH - 6)) | (1L << (YL - 6)) | (1L << (YH - 6)) | (1L << (BC - 6)) | (1L << (DE - 6)) | (1L << (HL - 6)) | (1L << (SP - 6)) | (1L << (IX - 6)) | (1L << (IY - 6)) | (1L << (AF - 6)) | (1L << (AF_ - 6)) | (1L << (Z - 6)) | (1L << (NZ - 6)) | (1L << (NC - 6)) | (1L << (PO - 6)) | (1L << (PE - 6)) | (1L << (P - 6)) | (1L << (M - 6)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (TEXTOF - 223)) | (1L << (LTEXTOF - 223)) | (1L << (HREG - 223)) | (1L << (LREG - 223)) | (1L << (DEF - 223)) | (1L << (ISREG8 - 223)) | (1L << (ISREG8STD - 223)) | (1L << (ISREG8SPEC - 223)) | (1L << (ISREG8IDX - 223)) | (1L << (ISREG16 - 223)) | (1L << (ISREG16STD - 223)) | (1L << (ISREG16IDX - 223)) | (1L << (ISREGINDIRECT - 223)) | (1L << (ISCPORT - 223)) | (1L << (ISINDEXEDADDR - 223)) | (1L << (ISCONDITION - 223)) | (1L << (ISEXPR - 223)) | (1L << (HEXNUM - 223)) | (1L << (BINNUM - 223)) | (1L << (OCTNUM - 223)) | (1L << (DECNUM - 223)) | (1L << (CURADDR - 223)) | (1L << (REALNUM - 223)) | (1L << (CHAR - 223)) | (1L << (STRING - 223)) | (1L << (BOOLLIT - 223)) | (1L << (IDENTIFIER - 223)) | (1L << (CURCNT - 223)) | (1L << (NONEARG - 223)))) != 0)) {
					{
					State = 985; operand();
					}
				}

				State = 988; Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringLiteralContext : LiteralContext {
		public ITerminalNode STRING() { return GetToken(Z80AsmParser.STRING, 0); }
		public StringLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinLiteralContext : LiteralContext {
		public ITerminalNode BINNUM() { return GetToken(Z80AsmParser.BINNUM, 0); }
		public BinLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBinLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBinLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HexLiteralContext : LiteralContext {
		public ITerminalNode HEXNUM() { return GetToken(Z80AsmParser.HEXNUM, 0); }
		public HexLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterHexLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitHexLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolLiteralContext : LiteralContext {
		public ITerminalNode BOOLLIT() { return GetToken(Z80AsmParser.BOOLLIT, 0); }
		public BoolLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RealLiteralContext : LiteralContext {
		public ITerminalNode REALNUM() { return GetToken(Z80AsmParser.REALNUM, 0); }
		public RealLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRealLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRealLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurCounterLiteralContext : LiteralContext {
		public ITerminalNode CURCNT() { return GetToken(Z80AsmParser.CURCNT, 0); }
		public CurCounterLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCurCounterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCurCounterLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurCounterLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharLiteralContext : LiteralContext {
		public ITerminalNode CHAR() { return GetToken(Z80AsmParser.CHAR, 0); }
		public CharLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCharLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCharLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OctalLiteralContext : LiteralContext {
		public ITerminalNode OCTNUM() { return GetToken(Z80AsmParser.OCTNUM, 0); }
		public OctalLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOctalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOctalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOctalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalLiteralContext : LiteralContext {
		public ITerminalNode DECNUM() { return GetToken(Z80AsmParser.DECNUM, 0); }
		public DecimalLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurAddrLiteralContext : LiteralContext {
		public ITerminalNode CURADDR() { return GetToken(Z80AsmParser.CURADDR, 0); }
		public ITerminalNode DOT() { return GetToken(Z80AsmParser.DOT, 0); }
		public ITerminalNode MULOP() { return GetToken(Z80AsmParser.MULOP, 0); }
		public CurAddrLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCurAddrLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCurAddrLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurAddrLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_literal);
		int _la;
		try {
			State = 1001;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case HEXNUM:
				_localctx = new HexLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 991; Match(HEXNUM);
				}
				break;
			case DECNUM:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 992; Match(DECNUM);
				}
				break;
			case OCTNUM:
				_localctx = new OctalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 993; Match(OCTNUM);
				}
				break;
			case CHAR:
				_localctx = new CharLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 994; Match(CHAR);
				}
				break;
			case BINNUM:
				_localctx = new BinLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 995; Match(BINNUM);
				}
				break;
			case REALNUM:
				_localctx = new RealLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 996; Match(REALNUM);
				}
				break;
			case BOOLLIT:
				_localctx = new BoolLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 997; Match(BOOLLIT);
				}
				break;
			case STRING:
				_localctx = new StringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 998; Match(STRING);
				}
				break;
			case MULOP:
			case DOT:
			case CURADDR:
				_localctx = new CurAddrLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 999;
				_la = _input.La(1);
				if ( !(_la==MULOP || _la==DOT || _la==CURADDR) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case CURCNT:
				_localctx = new CurCounterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1000; Match(CURCNT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode DCOLON() { return GetToken(Z80AsmParser.DCOLON, 0); }
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1004;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DCOLON) {
				{
				State = 1003; Match(DCOLON);
				}
			}

			State = 1006; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroParamContext : ParserRuleContext {
		public ITerminalNode LDBRAC() { return GetToken(Z80AsmParser.LDBRAC, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode RDBRAC() { return GetToken(Z80AsmParser.RDBRAC, 0); }
		public MacroParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroParamContext macroParam() {
		MacroParamContext _localctx = new MacroParamContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_macroParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008; Match(LDBRAC);
			State = 1009; Match(IDENTIFIER);
			State = 1010; Match(RDBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegsContext : ParserRuleContext {
		public Reg8Context reg8() {
			return GetRuleContext<Reg8Context>(0);
		}
		public Reg8IdxContext reg8Idx() {
			return GetRuleContext<Reg8IdxContext>(0);
		}
		public Reg8SpecContext reg8Spec() {
			return GetRuleContext<Reg8SpecContext>(0);
		}
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public Reg16SpecContext reg16Spec() {
			return GetRuleContext<Reg16SpecContext>(0);
		}
		public RegsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRegs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRegs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegsContext regs() {
		RegsContext _localctx = new RegsContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_regs);
		try {
			State = 1018;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case A:
			case B:
			case C:
			case D:
			case E:
			case H:
			case L:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1012; reg8();
				}
				break;
			case XL:
			case XH:
			case YL:
			case YH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1013; reg8Idx();
				}
				break;
			case I:
			case R:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1014; reg8Spec();
				}
				break;
			case BC:
			case DE:
			case HL:
			case SP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1015; reg16();
				}
				break;
			case IX:
			case IY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1016; reg16Idx();
				}
				break;
			case AF:
			case AF_:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1017; reg16Spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegsAndCondsContext : ParserRuleContext {
		public RegsContext regs() {
			return GetRuleContext<RegsContext>(0);
		}
		public RegIndirectContext regIndirect() {
			return GetRuleContext<RegIndirectContext>(0);
		}
		public CPortContext cPort() {
			return GetRuleContext<CPortContext>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public RegsAndCondsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regsAndConds; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRegsAndConds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRegsAndConds(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegsAndConds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegsAndCondsContext regsAndConds() {
		RegsAndCondsContext _localctx = new RegsAndCondsContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_regsAndConds);
		try {
			State = 1024;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1020; regs();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1021; regIndirect();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1022; cPort();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1023; condition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MnemonicContext : ParserRuleContext {
		public ITerminalNode NOP() { return GetToken(Z80AsmParser.NOP, 0); }
		public ITerminalNode RLCA() { return GetToken(Z80AsmParser.RLCA, 0); }
		public ITerminalNode RRCA() { return GetToken(Z80AsmParser.RRCA, 0); }
		public ITerminalNode RLA() { return GetToken(Z80AsmParser.RLA, 0); }
		public ITerminalNode RRA() { return GetToken(Z80AsmParser.RRA, 0); }
		public ITerminalNode DAA() { return GetToken(Z80AsmParser.DAA, 0); }
		public ITerminalNode CPL() { return GetToken(Z80AsmParser.CPL, 0); }
		public ITerminalNode SCF() { return GetToken(Z80AsmParser.SCF, 0); }
		public ITerminalNode CCF() { return GetToken(Z80AsmParser.CCF, 0); }
		public ITerminalNode HALT() { return GetToken(Z80AsmParser.HALT, 0); }
		public ITerminalNode RET() { return GetToken(Z80AsmParser.RET, 0); }
		public ITerminalNode EXX() { return GetToken(Z80AsmParser.EXX, 0); }
		public ITerminalNode DI() { return GetToken(Z80AsmParser.DI, 0); }
		public ITerminalNode EI() { return GetToken(Z80AsmParser.EI, 0); }
		public ITerminalNode NEG() { return GetToken(Z80AsmParser.NEG, 0); }
		public ITerminalNode RETN() { return GetToken(Z80AsmParser.RETN, 0); }
		public ITerminalNode RETI() { return GetToken(Z80AsmParser.RETI, 0); }
		public ITerminalNode RLD() { return GetToken(Z80AsmParser.RLD, 0); }
		public ITerminalNode RRD() { return GetToken(Z80AsmParser.RRD, 0); }
		public ITerminalNode LDI() { return GetToken(Z80AsmParser.LDI, 0); }
		public ITerminalNode CPI() { return GetToken(Z80AsmParser.CPI, 0); }
		public ITerminalNode INI() { return GetToken(Z80AsmParser.INI, 0); }
		public ITerminalNode OUTI() { return GetToken(Z80AsmParser.OUTI, 0); }
		public ITerminalNode LDD() { return GetToken(Z80AsmParser.LDD, 0); }
		public ITerminalNode CPD() { return GetToken(Z80AsmParser.CPD, 0); }
		public ITerminalNode IND() { return GetToken(Z80AsmParser.IND, 0); }
		public ITerminalNode OUTD() { return GetToken(Z80AsmParser.OUTD, 0); }
		public ITerminalNode LDIR() { return GetToken(Z80AsmParser.LDIR, 0); }
		public ITerminalNode CPIR() { return GetToken(Z80AsmParser.CPIR, 0); }
		public ITerminalNode INIR() { return GetToken(Z80AsmParser.INIR, 0); }
		public ITerminalNode OTIR() { return GetToken(Z80AsmParser.OTIR, 0); }
		public ITerminalNode LDDR() { return GetToken(Z80AsmParser.LDDR, 0); }
		public ITerminalNode CPDR() { return GetToken(Z80AsmParser.CPDR, 0); }
		public ITerminalNode INDR() { return GetToken(Z80AsmParser.INDR, 0); }
		public ITerminalNode OTDR() { return GetToken(Z80AsmParser.OTDR, 0); }
		public ITerminalNode LD() { return GetToken(Z80AsmParser.LD, 0); }
		public ITerminalNode INC() { return GetToken(Z80AsmParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(Z80AsmParser.DEC, 0); }
		public ITerminalNode EX() { return GetToken(Z80AsmParser.EX, 0); }
		public ITerminalNode ADD() { return GetToken(Z80AsmParser.ADD, 0); }
		public ITerminalNode ADC() { return GetToken(Z80AsmParser.ADC, 0); }
		public ITerminalNode SUB() { return GetToken(Z80AsmParser.SUB, 0); }
		public ITerminalNode SBC() { return GetToken(Z80AsmParser.SBC, 0); }
		public ITerminalNode AND() { return GetToken(Z80AsmParser.AND, 0); }
		public ITerminalNode XOR() { return GetToken(Z80AsmParser.XOR, 0); }
		public ITerminalNode OR() { return GetToken(Z80AsmParser.OR, 0); }
		public ITerminalNode CP() { return GetToken(Z80AsmParser.CP, 0); }
		public ITerminalNode DJNZ() { return GetToken(Z80AsmParser.DJNZ, 0); }
		public ITerminalNode JR() { return GetToken(Z80AsmParser.JR, 0); }
		public ITerminalNode JP() { return GetToken(Z80AsmParser.JP, 0); }
		public ITerminalNode CALL() { return GetToken(Z80AsmParser.CALL, 0); }
		public ITerminalNode RST() { return GetToken(Z80AsmParser.RST, 0); }
		public ITerminalNode PUSH() { return GetToken(Z80AsmParser.PUSH, 0); }
		public ITerminalNode POP() { return GetToken(Z80AsmParser.POP, 0); }
		public ITerminalNode IN() { return GetToken(Z80AsmParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(Z80AsmParser.OUT, 0); }
		public ITerminalNode IM() { return GetToken(Z80AsmParser.IM, 0); }
		public ITerminalNode RLC() { return GetToken(Z80AsmParser.RLC, 0); }
		public ITerminalNode RRC() { return GetToken(Z80AsmParser.RRC, 0); }
		public ITerminalNode RL() { return GetToken(Z80AsmParser.RL, 0); }
		public ITerminalNode RR() { return GetToken(Z80AsmParser.RR, 0); }
		public ITerminalNode SLA() { return GetToken(Z80AsmParser.SLA, 0); }
		public ITerminalNode SRA() { return GetToken(Z80AsmParser.SRA, 0); }
		public ITerminalNode SLL() { return GetToken(Z80AsmParser.SLL, 0); }
		public ITerminalNode SRL() { return GetToken(Z80AsmParser.SRL, 0); }
		public ITerminalNode BIT() { return GetToken(Z80AsmParser.BIT, 0); }
		public ITerminalNode RES() { return GetToken(Z80AsmParser.RES, 0); }
		public ITerminalNode SET() { return GetToken(Z80AsmParser.SET, 0); }
		public ITerminalNode SWAPNIB() { return GetToken(Z80AsmParser.SWAPNIB, 0); }
		public ITerminalNode MUL() { return GetToken(Z80AsmParser.MUL, 0); }
		public ITerminalNode POPX() { return GetToken(Z80AsmParser.POPX, 0); }
		public ITerminalNode MIRROR() { return GetToken(Z80AsmParser.MIRROR, 0); }
		public ITerminalNode TEST() { return GetToken(Z80AsmParser.TEST, 0); }
		public ITerminalNode NEXTREG() { return GetToken(Z80AsmParser.NEXTREG, 0); }
		public ITerminalNode OUTINB() { return GetToken(Z80AsmParser.OUTINB, 0); }
		public ITerminalNode LDIX() { return GetToken(Z80AsmParser.LDIX, 0); }
		public ITerminalNode LDIRX() { return GetToken(Z80AsmParser.LDIRX, 0); }
		public ITerminalNode LDDX() { return GetToken(Z80AsmParser.LDDX, 0); }
		public ITerminalNode LDDRX() { return GetToken(Z80AsmParser.LDDRX, 0); }
		public ITerminalNode PIXELDN() { return GetToken(Z80AsmParser.PIXELDN, 0); }
		public ITerminalNode PIXELAD() { return GetToken(Z80AsmParser.PIXELAD, 0); }
		public ITerminalNode SETAE() { return GetToken(Z80AsmParser.SETAE, 0); }
		public ITerminalNode LDPIRX() { return GetToken(Z80AsmParser.LDPIRX, 0); }
		public MnemonicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mnemonic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMnemonic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMnemonic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMnemonic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MnemonicContext mnemonic() {
		MnemonicContext _localctx = new MnemonicContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_mnemonic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1026;
			_la = _input.La(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (NOP - 70)) | (1L << (RLCA - 70)) | (1L << (RRCA - 70)) | (1L << (RLA - 70)) | (1L << (RRA - 70)) | (1L << (DAA - 70)) | (1L << (CPL - 70)) | (1L << (SCF - 70)) | (1L << (CCF - 70)) | (1L << (HALT - 70)) | (1L << (RET - 70)) | (1L << (EXX - 70)) | (1L << (DI - 70)) | (1L << (EI - 70)) | (1L << (NEG - 70)) | (1L << (RETN - 70)) | (1L << (RETI - 70)) | (1L << (RLD - 70)) | (1L << (RRD - 70)) | (1L << (LDI - 70)) | (1L << (CPI - 70)) | (1L << (INI - 70)) | (1L << (OUTI - 70)) | (1L << (LDD - 70)) | (1L << (CPD - 70)) | (1L << (IND - 70)) | (1L << (OUTD - 70)) | (1L << (LDIR - 70)) | (1L << (CPIR - 70)) | (1L << (INIR - 70)) | (1L << (OTIR - 70)) | (1L << (LDDR - 70)) | (1L << (CPDR - 70)) | (1L << (INDR - 70)) | (1L << (OTDR - 70)) | (1L << (LD - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (EX - 70)) | (1L << (ADD - 70)) | (1L << (ADC - 70)) | (1L << (SUB - 70)) | (1L << (SBC - 70)) | (1L << (AND - 70)) | (1L << (XOR - 70)) | (1L << (OR - 70)) | (1L << (CP - 70)) | (1L << (DJNZ - 70)) | (1L << (JR - 70)) | (1L << (JP - 70)) | (1L << (CALL - 70)) | (1L << (RST - 70)) | (1L << (PUSH - 70)) | (1L << (POP - 70)) | (1L << (IN - 70)) | (1L << (OUT - 70)) | (1L << (IM - 70)) | (1L << (RLC - 70)) | (1L << (RRC - 70)) | (1L << (RL - 70)) | (1L << (RR - 70)) | (1L << (SLA - 70)) | (1L << (SRA - 70)) | (1L << (SLL - 70)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (SRL - 134)) | (1L << (BIT - 134)) | (1L << (RES - 134)) | (1L << (SET - 134)) | (1L << (SWAPNIB - 134)) | (1L << (MUL - 134)) | (1L << (POPX - 134)) | (1L << (MIRROR - 134)) | (1L << (TEST - 134)) | (1L << (NEXTREG - 134)) | (1L << (OUTINB - 134)) | (1L << (LDIX - 134)) | (1L << (LDIRX - 134)) | (1L << (LDDX - 134)) | (1L << (LDDRX - 134)) | (1L << (PIXELDN - 134)) | (1L << (PIXELAD - 134)) | (1L << (SETAE - 134)) | (1L << (LDPIRX - 134)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return label_sempred((LabelContext)_localctx, predIndex);

		case 8: return iterationTest_sempred((IterationTestContext)_localctx, predIndex);

		case 78: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool label_sempred(LabelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return !this.exprStart();
		}
		return true;
	}
	private bool iterationTest_sempred(IterationTestContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return this.p("loop", "while", "until", "elif");
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 10);

		case 3: return Precpred(_ctx, 9);

		case 4: return Precpred(_ctx, 8);

		case 5: return Precpred(_ctx, 7);

		case 6: return Precpred(_ctx, 6);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x103\x407\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x3\x2\x3\x2\a\x2\xB3\n\x2\f\x2\xE\x2\xB6\v\x2\x3\x2\x3\x2\x6\x2\xBA"+
		"\n\x2\r\x2\xE\x2\xBB\x3\x2\a\x2\xBF\n\x2\f\x2\xE\x2\xC2\v\x2\x3\x2\a\x2"+
		"\xC5\n\x2\f\x2\xE\x2\xC8\v\x2\x3\x2\x3\x2\x5\x2\xCC\n\x2\x3\x3\x5\x3\xCF"+
		"\n\x3\x3\x3\x5\x3\xD2\n\x3\x3\x3\x5\x3\xD5\n\x3\x3\x3\x3\x3\x5\x3\xD9"+
		"\n\x3\x5\x3\xDB\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\xE3\n\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\xE9\n\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x10A\n"+
		"\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x117\n"+
		"\b\x3\b\x5\b\x11A\n\b\x5\b\x11C\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t"+
		"\x132\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x13A\n\n\x3\n\x3\n\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\a\v\x143\n\v\f\v\xE\v\x146\v\v\x5\v\x148\n\v\x3\v\x3"+
		"\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3"+
		"\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x15E\n\x12\x3\x13"+
		"\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x5\x15\x16C\n\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3"+
		"\x19\x3\x19\x5\x19\x176\n\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\x182\n\x1D\f\x1D\xE\x1D\x185\v\x1D"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x18C\n\x1E\f\x1E\xE\x1E\x18F"+
		"\v\x1E\x3\x1E\x3\x1E\x3\x1F\x5\x1F\x194\n\x1F\x3 \x3 \x3 \x3!\x3!\x3!"+
		"\x3\"\x3\"\x3\"\x3\"\x5\"\x1A0\n\"\x3#\x3#\x3#\x3$\x3$\x3$\x3%\x3%\x3"+
		"%\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3)\x3)\x3)\x3)\a)\x1B8\n)\f"+
		")\xE)\x1BB\v)\x3*\x3*\x3*\x3*\a*\x1C1\n*\f*\xE*\x1C4\v*\x3+\x3+\x3+\x3"+
		",\x3,\x3,\x3-\x3-\x3-\x3.\x3.\x3.\x3/\x3/\x3/\x3/\x5/\x1D6\n/\x3\x30\x3"+
		"\x30\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x1DE\n\x31\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34"+
		"\x3\x35\x3\x35\x5\x35\x1EF\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\a\x36\x1F5"+
		"\n\x36\f\x36\xE\x36\x1F8\v\x36\x3\x37\x3\x37\x5\x37\x1FC\n\x37\x3\x38"+
		"\x3\x38\x3\x38\x3\x39\x3\x39\x3:\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x3;\x5;\x20C"+
		"\n;\x5;\x20E\n;\x3<\x3<\x3<\x3<\x3<\x3<\x5<\x216\n<\x5<\x218\n<\x3=\x3"+
		"=\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x5>\x227\n>\x3?\x3?\x3?"+
		"\x5?\x22C\n?\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x5\x41\x24C\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x5\x41\x258\n\x41\x3\x41\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x5\x41\x25F\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x266"+
		"\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x26D\n\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x276\n\x41\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x5\x41\x27D\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x5\x41\x284\n\x41\x3\x41\x3\x41\x3\x41\x5\x41\x289\n\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x295"+
		"\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x29C\n\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x2A5\n\x41\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x5\x41\x2AC\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x5\x41\x2B3\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x2BA"+
		"\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x2C1\n\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x5\x41\x2C8\n\x41\x3\x41\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x5\x41\x2CF\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x2D6"+
		"\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x5\x41\x2E4\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x5\x41\x2EE\n\x41\x3\x41\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x2FB\n\x41\x3"+
		"\x42\x3\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3"+
		"\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x30F\n\x43"+
		"\x3\x43\x3\x43\x3\x43\x5\x43\x314\n\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3"+
		"\x46\x3\x46\x3G\x3G\x3H\x3H\x3I\x3I\x3J\x3J\x3K\x3K\x3K\x3K\x3L\x3L\x3"+
		"L\x3L\x3M\x3M\x3M\x3M\x3N\x3N\x3N\x3N\x5N\x334\nN\x3N\x3N\x3O\x3O\x3P"+
		"\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3"+
		"P\x3P\x3P\x3P\x5P\x350\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P"+
		"\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3"+
		"P\x3P\x3P\x3P\x3P\aP\x373\nP\fP\xEP\x376\vP\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3"+
		"Q\x3Q\aQ\x380\nQ\fQ\xEQ\x383\vQ\x3Q\x3Q\x5Q\x387\nQ\x3R\x3R\x3R\x3R\x3"+
		"R\x5R\x38E\nR\x3R\x3R\x3R\x3R\x3R\x5R\x395\nR\x3R\x3R\x3R\x3R\x5R\x39B"+
		"\nR\x3R\x3R\x3R\x3R\x5R\x3A1\nR\x3R\x3R\x3R\x3R\x5R\x3A7\nR\x3R\x3R\x3"+
		"R\x3R\x5R\x3AD\nR\x3R\x3R\x3R\x3R\x5R\x3B3\nR\x3R\x3R\x3R\x3R\x5R\x3B9"+
		"\nR\x3R\x3R\x3R\x3R\x5R\x3BF\nR\x3R\x3R\x3R\x3R\x5R\x3C5\nR\x3R\x3R\x3"+
		"R\x3R\x5R\x3CB\nR\x3R\x3R\x3R\x3R\x5R\x3D1\nR\x3R\x3R\x3R\x3R\x5R\x3D7"+
		"\nR\x3R\x3R\x3R\x3R\x5R\x3DD\nR\x3R\x5R\x3E0\nR\x3S\x3S\x3S\x3S\x3S\x3"+
		"S\x3S\x3S\x3S\x3S\x5S\x3EC\nS\x3T\x5T\x3EF\nT\x3T\x3T\x3U\x3U\x3U\x3U"+
		"\x3V\x3V\x3V\x3V\x3V\x3V\x5V\x3FD\nV\x3W\x3W\x3W\x3W\x5W\x403\nW\x3X\x3"+
		"X\x3X\x2\x2\x3\x9EY\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12"+
		"\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2"+
		",\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44"+
		"\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2"+
		"\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2"+
		"\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2"+
		"\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2"+
		"\xAA\x2\xAC\x2\xAE\x2\x2\x1C\x5\x2\x9C\x9D\xA0\xA1\xA4\xA5\x3\x2\xF9\xFA"+
		"\x3\x2\xD8\xD9\x4\x2\f\f\xAD\xAD\x4\x2\xD9\xD9\xFE\xFE\x3\x2\xBE\xBF\x4"+
		"\x2HQSj\x4\x2\x8C\x8D\x92\x9B\x3\x2\xE3\xE4\x3\x2,\x32\x3\x2\x35\x38\x3"+
		"\x2\x33\x34\x3\x2\x39<\x3\x2=>\x4\x2\x39;=>\x3\x2?@\x3\x2\x12\x13\x4\x2"+
		"..\x41G\x3\x2$%\x3\x2!%\x3\x2\x1F \x3\x2\x1B\x1E\x3\x2\x17\x1A\x3\x2\xE1"+
		"\xE2\x5\x2!!**\xF6\xF6\x3\x2H\x9A\x4A6\x2\xCB\x3\x2\x2\x2\x4\xDA\x3\x2"+
		"\x2\x2\x6\xE2\x3\x2\x2\x2\b\xE8\x3\x2\x2\x2\n\xEA\x3\x2\x2\x2\f\x109\x3"+
		"\x2\x2\x2\xE\x11B\x3\x2\x2\x2\x10\x131\x3\x2\x2\x2\x12\x139\x3\x2\x2\x2"+
		"\x14\x13D\x3\x2\x2\x2\x16\x14B\x3\x2\x2\x2\x18\x14D\x3\x2\x2\x2\x1A\x14F"+
		"\x3\x2\x2\x2\x1C\x151\x3\x2\x2\x2\x1E\x153\x3\x2\x2\x2 \x155\x3\x2\x2"+
		"\x2\"\x15D\x3\x2\x2\x2$\x15F\x3\x2\x2\x2&\x161\x3\x2\x2\x2(\x163\x3\x2"+
		"\x2\x2*\x16D\x3\x2\x2\x2,\x16F\x3\x2\x2\x2.\x171\x3\x2\x2\x2\x30\x173"+
		"\x3\x2\x2\x2\x32\x177\x3\x2\x2\x2\x34\x179\x3\x2\x2\x2\x36\x17B\x3\x2"+
		"\x2\x2\x38\x17D\x3\x2\x2\x2:\x186\x3\x2\x2\x2<\x193\x3\x2\x2\x2>\x195"+
		"\x3\x2\x2\x2@\x198\x3\x2\x2\x2\x42\x19B\x3\x2\x2\x2\x44\x1A1\x3\x2\x2"+
		"\x2\x46\x1A4\x3\x2\x2\x2H\x1A7\x3\x2\x2\x2J\x1AA\x3\x2\x2\x2L\x1AD\x3"+
		"\x2\x2\x2N\x1B0\x3\x2\x2\x2P\x1B3\x3\x2\x2\x2R\x1BC\x3\x2\x2\x2T\x1C5"+
		"\x3\x2\x2\x2V\x1C8\x3\x2\x2\x2X\x1CB\x3\x2\x2\x2Z\x1CE\x3\x2\x2\x2\\\x1D1"+
		"\x3\x2\x2\x2^\x1D7\x3\x2\x2\x2`\x1D9\x3\x2\x2\x2\x62\x1DF\x3\x2\x2\x2"+
		"\x64\x1E4\x3\x2\x2\x2\x66\x1E9\x3\x2\x2\x2h\x1EC\x3\x2\x2\x2j\x1F0\x3"+
		"\x2\x2\x2l\x1F9\x3\x2\x2\x2n\x1FD\x3\x2\x2\x2p\x200\x3\x2\x2\x2r\x202"+
		"\x3\x2\x2\x2t\x205\x3\x2\x2\x2v\x20F\x3\x2\x2\x2x\x219\x3\x2\x2\x2z\x226"+
		"\x3\x2\x2\x2|\x22B\x3\x2\x2\x2~\x22D\x3\x2\x2\x2\x80\x2FA\x3\x2\x2\x2"+
		"\x82\x2FC\x3\x2\x2\x2\x84\x313\x3\x2\x2\x2\x86\x315\x3\x2\x2\x2\x88\x317"+
		"\x3\x2\x2\x2\x8A\x319\x3\x2\x2\x2\x8C\x31B\x3\x2\x2\x2\x8E\x31D\x3\x2"+
		"\x2\x2\x90\x31F\x3\x2\x2\x2\x92\x321\x3\x2\x2\x2\x94\x323\x3\x2\x2\x2"+
		"\x96\x327\x3\x2\x2\x2\x98\x32B\x3\x2\x2\x2\x9A\x32F\x3\x2\x2\x2\x9C\x337"+
		"\x3\x2\x2\x2\x9E\x34F\x3\x2\x2\x2\xA0\x386\x3\x2\x2\x2\xA2\x3DF\x3\x2"+
		"\x2\x2\xA4\x3EB\x3\x2\x2\x2\xA6\x3EE\x3\x2\x2\x2\xA8\x3F2\x3\x2\x2\x2"+
		"\xAA\x3FC\x3\x2\x2\x2\xAC\x402\x3\x2\x2\x2\xAE\x404\x3\x2\x2\x2\xB0\xCC"+
		"\a\x2\x2\x3\xB1\xB3\a\x6\x2\x2\xB2\xB1\x3\x2\x2\x2\xB3\xB6\x3\x2\x2\x2"+
		"\xB4\xB2\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB7\x3\x2\x2\x2\xB6\xB4\x3"+
		"\x2\x2\x2\xB7\xC0\x5\x4\x3\x2\xB8\xBA\a\x6\x2\x2\xB9\xB8\x3\x2\x2\x2\xBA"+
		"\xBB\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBD\x3\x2"+
		"\x2\x2\xBD\xBF\x5\x4\x3\x2\xBE\xB9\x3\x2\x2\x2\xBF\xC2\x3\x2\x2\x2\xC0"+
		"\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC6\x3\x2\x2\x2\xC2\xC0\x3\x2"+
		"\x2\x2\xC3\xC5\a\x6\x2\x2\xC4\xC3\x3\x2\x2\x2\xC5\xC8\x3\x2\x2\x2\xC6"+
		"\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xC9\x3\x2\x2\x2\xC8\xC6\x3\x2"+
		"\x2\x2\xC9\xCA\a\x2\x2\x3\xCA\xCC\x3\x2\x2\x2\xCB\xB0\x3\x2\x2\x2\xCB"+
		"\xB4\x3\x2\x2\x2\xCC\x3\x3\x2\x2\x2\xCD\xCF\x5\b\x5\x2\xCE\xCD\x3\x2\x2"+
		"\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD1\x3\x2\x2\x2\xD0\xD2\x5\x6\x4\x2\xD1\xD0"+
		"\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD4\x3\x2\x2\x2\xD3\xD5\x5\n\x6\x2"+
		"\xD4\xD3\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xDB\x3\x2\x2\x2\xD6\xD8\x5"+
		"\xE\b\x2\xD7\xD9\x5\n\x6\x2\xD8\xD7\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9"+
		"\xDB\x3\x2\x2\x2\xDA\xCE\x3\x2\x2\x2\xDA\xD6\x3\x2\x2\x2\xDB\x5\x3\x2"+
		"\x2\x2\xDC\xE3\x5\f\a\x2\xDD\xE3\x5|?\x2\xDE\xE3\x5\xA8U\x2\xDF\xE3\x5"+
		":\x1E\x2\xE0\xE3\x5\x10\t\x2\xE1\xE3\x5> \x2\xE2\xDC\x3\x2\x2\x2\xE2\xDD"+
		"\x3\x2\x2\x2\xE2\xDE\x3\x2\x2\x2\xE2\xDF\x3\x2\x2\x2\xE2\xE0\x3\x2\x2"+
		"\x2\xE2\xE1\x3\x2\x2\x2\xE3\a\x3\x2\x2\x2\xE4\xE5\a\xFE\x2\x2\xE5\xE9"+
		"\a\a\x2\x2\xE6\xE7\a\xFE\x2\x2\xE7\xE9\x6\x5\x2\x2\xE8\xE4\x3\x2\x2\x2"+
		"\xE8\xE6\x3\x2\x2\x2\xE9\t\x3\x2\x2\x2\xEA\xEB\a\x5\x2\x2\xEB\v\x3\x2"+
		"\x2\x2\xEC\x10A\x5@!\x2\xED\x10A\x5\x42\"\x2\xEE\x10A\x5\x44#\x2\xEF\x10A"+
		"\x5\x46$\x2\xF0\x10A\x5H%\x2\xF1\x10A\x5J&\x2\xF2\x10A\x5L\'\x2\xF3\x10A"+
		"\x5N(\x2\xF4\x10A\x5P)\x2\xF5\x10A\x5R*\x2\xF6\x10A\x5V,\x2\xF7\x10A\x5"+
		"T+\x2\xF8\x10A\x5X-\x2\xF9\x10A\x5Z.\x2\xFA\x10A\x5\\/\x2\xFB\x10A\x5"+
		"^\x30\x2\xFC\x10A\x5`\x31\x2\xFD\x10A\x5\x62\x32\x2\xFE\x10A\x5\x64\x33"+
		"\x2\xFF\x10A\x5\x66\x34\x2\x100\x10A\x5h\x35\x2\x101\x10A\x5j\x36\x2\x102"+
		"\x10A\x5l\x37\x2\x103\x10A\x5n\x38\x2\x104\x10A\x5p\x39\x2\x105\x10A\x5"+
		"r:\x2\x106\x10A\x5t;\x2\x107\x10A\x5v<\x2\x108\x10A\x5x=\x2\x109\xEC\x3"+
		"\x2\x2\x2\x109\xED\x3\x2\x2\x2\x109\xEE\x3\x2\x2\x2\x109\xEF\x3\x2\x2"+
		"\x2\x109\xF0\x3\x2\x2\x2\x109\xF1\x3\x2\x2\x2\x109\xF2\x3\x2\x2\x2\x109"+
		"\xF3\x3\x2\x2\x2\x109\xF4\x3\x2\x2\x2\x109\xF5\x3\x2\x2\x2\x109\xF6\x3"+
		"\x2\x2\x2\x109\xF7\x3\x2\x2\x2\x109\xF8\x3\x2\x2\x2\x109\xF9\x3\x2\x2"+
		"\x2\x109\xFA\x3\x2\x2\x2\x109\xFB\x3\x2\x2\x2\x109\xFC\x3\x2\x2\x2\x109"+
		"\xFD\x3\x2\x2\x2\x109\xFE\x3\x2\x2\x2\x109\xFF\x3\x2\x2\x2\x109\x100\x3"+
		"\x2\x2\x2\x109\x101\x3\x2\x2\x2\x109\x102\x3\x2\x2\x2\x109\x103\x3\x2"+
		"\x2\x2\x109\x104\x3\x2\x2\x2\x109\x105\x3\x2\x2\x2\x109\x106\x3\x2\x2"+
		"\x2\x109\x107\x3\x2\x2\x2\x109\x108\x3\x2\x2\x2\x10A\r\x3\x2\x2\x2\x10B"+
		"\x10C\t\x2\x2\x2\x10C\x11C\a\xFE\x2\x2\x10D\x11C\a\x9E\x2\x2\x10E\x11C"+
		"\a\x9F\x2\x2\x10F\x110\a\xA3\x2\x2\x110\x11C\x5\x9EP\x2\x111\x112\a\xA2"+
		"\x2\x2\x112\x11C\t\x3\x2\x2\x113\x114\a\xA6\x2\x2\x114\x119\x5\x9EP\x2"+
		"\x115\x117\a\v\x2\x2\x116\x115\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117"+
		"\x118\x3\x2\x2\x2\x118\x11A\a\xF9\x2\x2\x119\x116\x3\x2\x2\x2\x119\x11A"+
		"\x3\x2\x2\x2\x11A\x11C\x3\x2\x2\x2\x11B\x10B\x3\x2\x2\x2\x11B\x10D\x3"+
		"\x2\x2\x2\x11B\x10E\x3\x2\x2\x2\x11B\x10F\x3\x2\x2\x2\x11B\x111\x3\x2"+
		"\x2\x2\x11B\x113\x3\x2\x2\x2\x11C\xF\x3\x2\x2\x2\x11D\x132\x5\x12\n\x2"+
		"\x11E\x132\x5\x14\v\x2\x11F\x132\x5\x16\f\x2\x120\x132\x5\x1C\xF\x2\x121"+
		"\x132\x5 \x11\x2\x122\x132\x5\x18\r\x2\x123\x132\x5\x1A\xE\x2\x124\x132"+
		"\x5\x1E\x10\x2\x125\x132\x5\"\x12\x2\x126\x132\x5$\x13\x2\x127\x132\x5"+
		"&\x14\x2\x128\x132\x5(\x15\x2\x129\x132\x5*\x16\x2\x12A\x132\x5,\x17\x2"+
		"\x12B\x132\x5.\x18\x2\x12C\x132\x5\x30\x19\x2\x12D\x132\x5\x32\x1A\x2"+
		"\x12E\x132\x5\x34\x1B\x2\x12F\x132\x5\x36\x1C\x2\x130\x132\x5\x38\x1D"+
		"\x2\x131\x11D\x3\x2\x2\x2\x131\x11E\x3\x2\x2\x2\x131\x11F\x3\x2\x2\x2"+
		"\x131\x120\x3\x2\x2\x2\x131\x121\x3\x2\x2\x2\x131\x122\x3\x2\x2\x2\x131"+
		"\x123\x3\x2\x2\x2\x131\x124\x3\x2\x2\x2\x131\x125\x3\x2\x2\x2\x131\x126"+
		"\x3\x2\x2\x2\x131\x127\x3\x2\x2\x2\x131\x128\x3\x2\x2\x2\x131\x129\x3"+
		"\x2\x2\x2\x131\x12A\x3\x2\x2\x2\x131\x12B\x3\x2\x2\x2\x131\x12C\x3\x2"+
		"\x2\x2\x131\x12D\x3\x2\x2\x2\x131\x12E\x3\x2\x2\x2\x131\x12F\x3\x2\x2"+
		"\x2\x131\x130\x3\x2\x2\x2\x132\x11\x3\x2\x2\x2\x133\x13A\a\xC9\x2\x2\x134"+
		"\x13A\a\xCD\x2\x2\x135\x13A\a\xCC\x2\x2\x136\x13A\a\xD2\x2\x2\x137\x138"+
		"\a\xFE\x2\x2\x138\x13A\x6\n\x3\x2\x139\x133\x3\x2\x2\x2\x139\x134\x3\x2"+
		"\x2\x2\x139\x135\x3\x2\x2\x2\x139\x136\x3\x2\x2\x2\x139\x137\x3\x2\x2"+
		"\x2\x13A\x13B\x3\x2\x2\x2\x13B\x13C\x5\x9EP\x2\x13C\x13\x3\x2\x2\x2\x13D"+
		"\x13E\a\xC5\x2\x2\x13E\x147\a\r\x2\x2\x13F\x144\a\xFE\x2\x2\x140\x141"+
		"\a\v\x2\x2\x141\x143\a\xFE\x2\x2\x142\x140\x3\x2\x2\x2\x143\x146\x3\x2"+
		"\x2\x2\x144\x142\x3\x2\x2\x2\x144\x145\x3\x2\x2\x2\x145\x148\x3\x2\x2"+
		"\x2\x146\x144\x3\x2\x2\x2\x147\x13F\x3\x2\x2\x2\x147\x148\x3\x2\x2\x2"+
		"\x148\x149\x3\x2\x2\x2\x149\x14A\a\xE\x2\x2\x14A\x15\x3\x2\x2\x2\x14B"+
		"\x14C\a\xC6\x2\x2\x14C\x17\x3\x2\x2\x2\x14D\x14E\a\xC7\x2\x2\x14E\x19"+
		"\x3\x2\x2\x2\x14F\x150\a\xC8\x2\x2\x150\x1B\x3\x2\x2\x2\x151\x152\a\xCA"+
		"\x2\x2\x152\x1D\x3\x2\x2\x2\x153\x154\a\xCB\x2\x2\x154\x1F\x3\x2\x2\x2"+
		"\x155\x156\a\xCE\x2\x2\x156!\x3\x2\x2\x2\x157\x158\a\xCF\x2\x2\x158\x15E"+
		"\x5\x9EP\x2\x159\x15A\a\xD0\x2\x2\x15A\x15E\x5\xA6T\x2\x15B\x15C\a\xD1"+
		"\x2\x2\x15C\x15E\x5\xA6T\x2\x15D\x157\x3\x2\x2\x2\x15D\x159\x3\x2\x2\x2"+
		"\x15D\x15B\x3\x2\x2\x2\x15E#\x3\x2\x2\x2\x15F\x160\a\xD3\x2\x2\x160%\x3"+
		"\x2\x2\x2\x161\x162\a\xD4\x2\x2\x162\'\x3\x2\x2\x2\x163\x164\a\xD5\x2"+
		"\x2\x164\x165\a\xFE\x2\x2\x165\x166\a\f\x2\x2\x166\x167\x5\x9EP\x2\x167"+
		"\x168\a\xD6\x2\x2\x168\x16B\x5\x9EP\x2\x169\x16A\a\xD7\x2\x2\x16A\x16C"+
		"\x5\x9EP\x2\x16B\x169\x3\x2\x2\x2\x16B\x16C\x3\x2\x2\x2\x16C)\x3\x2\x2"+
		"\x2\x16D\x16E\t\x4\x2\x2\x16E+\x3\x2\x2\x2\x16F\x170\a\xDA\x2\x2\x170"+
		"-\x3\x2\x2\x2\x171\x172\a\xDB\x2\x2\x172/\x3\x2\x2\x2\x173\x175\a\xDC"+
		"\x2\x2\x174\x176\a\xFE\x2\x2\x175\x174\x3\x2\x2\x2\x175\x176\x3\x2\x2"+
		"\x2\x176\x31\x3\x2\x2\x2\x177\x178\a\xDD\x2\x2\x178\x33\x3\x2\x2\x2\x179"+
		"\x17A\a\xDE\x2\x2\x17A\x35\x3\x2\x2\x2\x17B\x17C\a\xDF\x2\x2\x17C\x37"+
		"\x3\x2\x2\x2\x17D\x17E\a\xE0\x2\x2\x17E\x183\a\xFE\x2\x2\x17F\x180\a\v"+
		"\x2\x2\x180\x182\a\xFE\x2\x2\x181\x17F\x3\x2\x2\x2\x182\x185\x3\x2\x2"+
		"\x2\x183\x181\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2\x184\x39\x3\x2\x2\x2\x185"+
		"\x183\x3\x2\x2\x2\x186\x187\a\xFE\x2\x2\x187\x188\a\r\x2\x2\x188\x18D"+
		"\x5<\x1F\x2\x189\x18A\a\v\x2\x2\x18A\x18C\x5<\x1F\x2\x18B\x189\x3\x2\x2"+
		"\x2\x18C\x18F\x3\x2\x2\x2\x18D\x18B\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2"+
		"\x18E\x190\x3\x2\x2\x2\x18F\x18D\x3\x2\x2\x2\x190\x191\a\xE\x2\x2\x191"+
		";\x3\x2\x2\x2\x192\x194\x5\x84\x43\x2\x193\x192\x3\x2\x2\x2\x193\x194"+
		"\x3\x2\x2\x2\x194=\x3\x2\x2\x2\x195\x196\a+\x2\x2\x196\x197\x5z>\x2\x197"+
		"?\x3\x2\x2\x2\x198\x199\a\xA7\x2\x2\x199\x19A\x5\x9EP\x2\x19A\x41\x3\x2"+
		"\x2\x2\x19B\x19C\a\xA8\x2\x2\x19C\x19F\x5\x9EP\x2\x19D\x19E\a\v\x2\x2"+
		"\x19E\x1A0\x5\x9EP\x2\x19F\x19D\x3\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0"+
		"\x43\x3\x2\x2\x2\x1A1\x1A2\a\xA9\x2\x2\x1A2\x1A3\x5\x9EP\x2\x1A3\x45\x3"+
		"\x2\x2\x2\x1A4\x1A5\a\xAA\x2\x2\x1A5\x1A6\x5\x9EP\x2\x1A6G\x3\x2\x2\x2"+
		"\x1A7\x1A8\a\xAB\x2\x2\x1A8\x1A9\x5\x9EP\x2\x1A9I\x3\x2\x2\x2\x1AA\x1AB"+
		"\a\xAE\x2\x2\x1AB\x1AC\x5\x9EP\x2\x1ACK\x3\x2\x2\x2\x1AD\x1AE\a\xAC\x2"+
		"\x2\x1AE\x1AF\x5\x9EP\x2\x1AFM\x3\x2\x2\x2\x1B0\x1B1\t\x5\x2\x2\x1B1\x1B2"+
		"\x5\x9EP\x2\x1B2O\x3\x2\x2\x2\x1B3\x1B4\a\xAF\x2\x2\x1B4\x1B9\x5\x9EP"+
		"\x2\x1B5\x1B6\a\v\x2\x2\x1B6\x1B8\x5\x9EP\x2\x1B7\x1B5\x3\x2\x2\x2\x1B8"+
		"\x1BB\x3\x2\x2\x2\x1B9\x1B7\x3\x2\x2\x2\x1B9\x1BA\x3\x2\x2\x2\x1BAQ\x3"+
		"\x2\x2\x2\x1BB\x1B9\x3\x2\x2\x2\x1BC\x1BD\a\xB0\x2\x2\x1BD\x1C2\x5\x9E"+
		"P\x2\x1BE\x1BF\a\v\x2\x2\x1BF\x1C1\x5\x9EP\x2\x1C0\x1BE\x3\x2\x2\x2\x1C1"+
		"\x1C4\x3\x2\x2\x2\x1C2\x1C0\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3S\x3"+
		"\x2\x2\x2\x1C4\x1C2\x3\x2\x2\x2\x1C5\x1C6\a\xB6\x2\x2\x1C6\x1C7\x5\x9E"+
		"P\x2\x1C7U\x3\x2\x2\x2\x1C8\x1C9\a\xB1\x2\x2\x1C9\x1CA\x5\x9EP\x2\x1CA"+
		"W\x3\x2\x2\x2\x1CB\x1CC\a\xB2\x2\x2\x1CC\x1CD\x5\x9EP\x2\x1CDY\x3\x2\x2"+
		"\x2\x1CE\x1CF\a\xB3\x2\x2\x1CF\x1D0\x5\x9EP\x2\x1D0[\x3\x2\x2\x2\x1D1"+
		"\x1D2\a\xB7\x2\x2\x1D2\x1D5\x5\x9EP\x2\x1D3\x1D4\a\v\x2\x2\x1D4\x1D6\x5"+
		"\x9EP\x2\x1D5\x1D3\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6]\x3\x2\x2\x2"+
		"\x1D7\x1D8\a\xB8\x2\x2\x1D8_\x3\x2\x2\x2\x1D9\x1DA\a\xB9\x2\x2\x1DA\x1DD"+
		"\x5\x9EP\x2\x1DB\x1DC\a\v\x2\x2\x1DC\x1DE\x5\x9EP\x2\x1DD\x1DB\x3\x2\x2"+
		"\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE\x61\x3\x2\x2\x2\x1DF\x1E0\a\xBA\x2\x2\x1E0"+
		"\x1E1\x5\x9EP\x2\x1E1\x1E2\a\v\x2\x2\x1E2\x1E3\x5\x9EP\x2\x1E3\x63\x3"+
		"\x2\x2\x2\x1E4\x1E5\a\xBB\x2\x2\x1E5\x1E6\x5\x9EP\x2\x1E6\x1E7\a\v\x2"+
		"\x2\x1E7\x1E8\x5\x9EP\x2\x1E8\x65\x3\x2\x2\x2\x1E9\x1EA\a\xBC\x2\x2\x1EA"+
		"\x1EB\t\x6\x2\x2\x1EBg\x3\x2\x2\x2\x1EC\x1EE\a\xBD\x2\x2\x1ED\x1EF\x5"+
		"\x9EP\x2\x1EE\x1ED\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EFi\x3\x2\x2\x2"+
		"\x1F0\x1F1\t\a\x2\x2\x1F1\x1F6\x5\x9EP\x2\x1F2\x1F3\a\v\x2\x2\x1F3\x1F5"+
		"\x5\x9EP\x2\x1F4\x1F2\x3\x2\x2\x2\x1F5\x1F8\x3\x2\x2\x2\x1F6\x1F4\x3\x2"+
		"\x2\x2\x1F6\x1F7\x3\x2\x2\x2\x1F7k\x3\x2\x2\x2\x1F8\x1F6\x3\x2\x2\x2\x1F9"+
		"\x1FB\a\xC0\x2\x2\x1FA\x1FC\x5\x9EP\x2\x1FB\x1FA\x3\x2\x2\x2\x1FB\x1FC"+
		"\x3\x2\x2\x2\x1FCm\x3\x2\x2\x2\x1FD\x1FE\a\xB4\x2\x2\x1FE\x1FF\x5\x9E"+
		"P\x2\x1FFo\x3\x2\x2\x2\x200\x201\a\xB5\x2\x2\x201q\x3\x2\x2\x2\x202\x203"+
		"\a\xC1\x2\x2\x203\x204\x5\x9EP\x2\x204s\x3\x2\x2\x2\x205\x206\a\xC2\x2"+
		"\x2\x206\x20D\x5\x9EP\x2\x207\x208\a\v\x2\x2\x208\x20B\x5\x9EP\x2\x209"+
		"\x20A\a\v\x2\x2\x20A\x20C\x5\x9EP\x2\x20B\x209\x3\x2\x2\x2\x20B\x20C\x3"+
		"\x2\x2\x2\x20C\x20E\x3\x2\x2\x2\x20D\x207\x3\x2\x2\x2\x20D\x20E\x3\x2"+
		"\x2\x2\x20Eu\x3\x2\x2\x2\x20F\x210\a\xC3\x2\x2\x210\x217\x5\x9EP\x2\x211"+
		"\x212\a\v\x2\x2\x212\x215\x5\x9EP\x2\x213\x214\a\v\x2\x2\x214\x216\x5"+
		"\x9EP\x2\x215\x213\x3\x2\x2\x2\x215\x216\x3\x2\x2\x2\x216\x218\x3\x2\x2"+
		"\x2\x217\x211\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x218w\x3\x2\x2\x2\x219"+
		"\x21A\a\xC4\x2\x2\x21Ay\x3\x2\x2\x2\x21B\x227\x5P)\x2\x21C\x227\x5R*\x2"+
		"\x21D\x227\x5T+\x2\x21E\x227\x5V,\x2\x21F\x227\x5X-\x2\x220\x227\x5Z."+
		"\x2\x221\x227\x5`\x31\x2\x222\x227\x5\x62\x32\x2\x223\x227\x5\x64\x33"+
		"\x2\x224\x227\x5n\x38\x2\x225\x227\x5p\x39\x2\x226\x21B\x3\x2\x2\x2\x226"+
		"\x21C\x3\x2\x2\x2\x226\x21D\x3\x2\x2\x2\x226\x21E\x3\x2\x2\x2\x226\x21F"+
		"\x3\x2\x2\x2\x226\x220\x3\x2\x2\x2\x226\x221\x3\x2\x2\x2\x226\x222\x3"+
		"\x2\x2\x2\x226\x223\x3\x2\x2\x2\x226\x224\x3\x2\x2\x2\x226\x225\x3\x2"+
		"\x2\x2\x227{\x3\x2\x2\x2\x228\x22C\x5~@\x2\x229\x22C\x5\x80\x41\x2\x22A"+
		"\x22C\x5\x82\x42\x2\x22B\x228\x3\x2\x2\x2\x22B\x229\x3\x2\x2\x2\x22B\x22A"+
		"\x3\x2\x2\x2\x22C}\x3\x2\x2\x2\x22D\x22E\t\b\x2\x2\x22E\x7F\x3\x2\x2\x2"+
		"\x22F\x230\ak\x2\x2\x230\x231\x5\x84\x43\x2\x231\x232\a\v\x2\x2\x232\x233"+
		"\x5\x84\x43\x2\x233\x2FB\x3\x2\x2\x2\x234\x235\al\x2\x2\x235\x2FB\x5\x84"+
		"\x43\x2\x236\x237\am\x2\x2\x237\x2FB\x5\x84\x43\x2\x238\x239\an\x2\x2"+
		"\x239\x23A\x5\x84\x43\x2\x23A\x23B\a\v\x2\x2\x23B\x23C\x5\x84\x43\x2\x23C"+
		"\x2FB\x3\x2\x2\x2\x23D\x23E\ao\x2\x2\x23E\x23F\x5\x84\x43\x2\x23F\x240"+
		"\a\v\x2\x2\x240\x241\x5\x84\x43\x2\x241\x2FB\x3\x2\x2\x2\x242\x243\ap"+
		"\x2\x2\x243\x244\x5\x84\x43\x2\x244\x245\a\v\x2\x2\x245\x246\x5\x84\x43"+
		"\x2\x246\x2FB\x3\x2\x2\x2\x247\x24B\aq\x2\x2\x248\x249\x5\x84\x43\x2\x249"+
		"\x24A\a\v\x2\x2\x24A\x24C\x3\x2\x2\x2\x24B\x248\x3\x2\x2\x2\x24B\x24C"+
		"\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D\x2FB\x5\x84\x43\x2\x24E\x24F\a"+
		"r\x2\x2\x24F\x250\x5\x84\x43\x2\x250\x251\a\v\x2\x2\x251\x252\x5\x84\x43"+
		"\x2\x252\x2FB\x3\x2\x2\x2\x253\x257\as\x2\x2\x254\x255\x5\x84\x43\x2\x255"+
		"\x256\a\v\x2\x2\x256\x258\x3\x2\x2\x2\x257\x254\x3\x2\x2\x2\x257\x258"+
		"\x3\x2\x2\x2\x258\x259\x3\x2\x2\x2\x259\x2FB\x5\x84\x43\x2\x25A\x25E\a"+
		"t\x2\x2\x25B\x25C\x5\x84\x43\x2\x25C\x25D\a\v\x2\x2\x25D\x25F\x3\x2\x2"+
		"\x2\x25E\x25B\x3\x2\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\x260\x3\x2\x2\x2"+
		"\x260\x2FB\x5\x84\x43\x2\x261\x265\au\x2\x2\x262\x263\x5\x84\x43\x2\x263"+
		"\x264\a\v\x2\x2\x264\x266\x3\x2\x2\x2\x265\x262\x3\x2\x2\x2\x265\x266"+
		"\x3\x2\x2\x2\x266\x267\x3\x2\x2\x2\x267\x2FB\x5\x84\x43\x2\x268\x26C\a"+
		"v\x2\x2\x269\x26A\x5\x84\x43\x2\x26A\x26B\a\v\x2\x2\x26B\x26D\x3\x2\x2"+
		"\x2\x26C\x269\x3\x2\x2\x2\x26C\x26D\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2"+
		"\x26E\x2FB\x5\x84\x43\x2\x26F\x270\aw\x2\x2\x270\x2FB\x5\x84\x43\x2\x271"+
		"\x275\ax\x2\x2\x272\x273\x5\x84\x43\x2\x273\x274\a\v\x2\x2\x274\x276\x3"+
		"\x2\x2\x2\x275\x272\x3\x2\x2\x2\x275\x276\x3\x2\x2\x2\x276\x277\x3\x2"+
		"\x2\x2\x277\x2FB\x5\x84\x43\x2\x278\x27C\ay\x2\x2\x279\x27A\x5\x84\x43"+
		"\x2\x27A\x27B\a\v\x2\x2\x27B\x27D\x3\x2\x2\x2\x27C\x279\x3\x2\x2\x2\x27C"+
		"\x27D\x3\x2\x2\x2\x27D\x27E\x3\x2\x2\x2\x27E\x2FB\x5\x84\x43\x2\x27F\x283"+
		"\az\x2\x2\x280\x281\x5\x84\x43\x2\x281\x282\a\v\x2\x2\x282\x284\x3\x2"+
		"\x2\x2\x283\x280\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284\x285\x3\x2\x2"+
		"\x2\x285\x2FB\x5\x84\x43\x2\x286\x288\aR\x2\x2\x287\x289\x5\x84\x43\x2"+
		"\x288\x287\x3\x2\x2\x2\x288\x289\x3\x2\x2\x2\x289\x2FB\x3\x2\x2\x2\x28A"+
		"\x28B\a{\x2\x2\x28B\x2FB\x5\x84\x43\x2\x28C\x28D\a|\x2\x2\x28D\x2FB\x5"+
		"\x84\x43\x2\x28E\x28F\a}\x2\x2\x28F\x2FB\x5\x84\x43\x2\x290\x294\a~\x2"+
		"\x2\x291\x292\x5\x84\x43\x2\x292\x293\a\v\x2\x2\x293\x295\x3\x2\x2\x2"+
		"\x294\x291\x3\x2\x2\x2\x294\x295\x3\x2\x2\x2\x295\x296\x3\x2\x2\x2\x296"+
		"\x2FB\x5\x84\x43\x2\x297\x29B\a\x7F\x2\x2\x298\x299\x5\x84\x43\x2\x299"+
		"\x29A\a\v\x2\x2\x29A\x29C\x3\x2\x2\x2\x29B\x298\x3\x2\x2\x2\x29B\x29C"+
		"\x3\x2\x2\x2\x29C\x29D\x3\x2\x2\x2\x29D\x2FB\x5\x84\x43\x2\x29E\x29F\a"+
		"\x80\x2\x2\x29F\x2FB\x5\x84\x43\x2\x2A0\x2A4\a\x81\x2\x2\x2A1\x2A2\x5"+
		"\x84\x43\x2\x2A2\x2A3\a\v\x2\x2\x2A3\x2A5\x3\x2\x2\x2\x2A4\x2A1\x3\x2"+
		"\x2\x2\x2A4\x2A5\x3\x2\x2\x2\x2A5\x2A6\x3\x2\x2\x2\x2A6\x2FB\x5\x84\x43"+
		"\x2\x2A7\x2AB\a\x82\x2\x2\x2A8\x2A9\x5\x84\x43\x2\x2A9\x2AA\a\v\x2\x2"+
		"\x2AA\x2AC\x3\x2\x2\x2\x2AB\x2A8\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC"+
		"\x2AD\x3\x2\x2\x2\x2AD\x2FB\x5\x84\x43\x2\x2AE\x2B2\a\x83\x2\x2\x2AF\x2B0"+
		"\x5\x84\x43\x2\x2B0\x2B1\a\v\x2\x2\x2B1\x2B3\x3\x2\x2\x2\x2B2\x2AF\x3"+
		"\x2\x2\x2\x2B2\x2B3\x3\x2\x2\x2\x2B3\x2B4\x3\x2\x2\x2\x2B4\x2FB\x5\x84"+
		"\x43\x2\x2B5\x2B9\a\x84\x2\x2\x2B6\x2B7\x5\x84\x43\x2\x2B7\x2B8\a\v\x2"+
		"\x2\x2B8\x2BA\x3\x2\x2\x2\x2B9\x2B6\x3\x2\x2\x2\x2B9\x2BA\x3\x2\x2\x2"+
		"\x2BA\x2BB\x3\x2\x2\x2\x2BB\x2FB\x5\x84\x43\x2\x2BC\x2C0\a\x85\x2\x2\x2BD"+
		"\x2BE\x5\x84\x43\x2\x2BE\x2BF\a\v\x2\x2\x2BF\x2C1\x3\x2\x2\x2\x2C0\x2BD"+
		"\x3\x2\x2\x2\x2C0\x2C1\x3\x2\x2\x2\x2C1\x2C2\x3\x2\x2\x2\x2C2\x2FB\x5"+
		"\x84\x43\x2\x2C3\x2C7\a\x86\x2\x2\x2C4\x2C5\x5\x84\x43\x2\x2C5\x2C6\a"+
		"\v\x2\x2\x2C6\x2C8\x3\x2\x2\x2\x2C7\x2C4\x3\x2\x2\x2\x2C7\x2C8\x3\x2\x2"+
		"\x2\x2C8\x2C9\x3\x2\x2\x2\x2C9\x2FB\x5\x84\x43\x2\x2CA\x2CE\a\x87\x2\x2"+
		"\x2CB\x2CC\x5\x84\x43\x2\x2CC\x2CD\a\v\x2\x2\x2CD\x2CF\x3\x2\x2\x2\x2CE"+
		"\x2CB\x3\x2\x2\x2\x2CE\x2CF\x3\x2\x2\x2\x2CF\x2D0\x3\x2\x2\x2\x2D0\x2FB"+
		"\x5\x84\x43\x2\x2D1\x2D5\a\x88\x2\x2\x2D2\x2D3\x5\x84\x43\x2\x2D3\x2D4"+
		"\a\v\x2\x2\x2D4\x2D6\x3\x2\x2\x2\x2D5\x2D2\x3\x2\x2\x2\x2D5\x2D6\x3\x2"+
		"\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2FB\x5\x84\x43\x2\x2D8\x2D9\a\x89\x2"+
		"\x2\x2D9\x2DA\x5\x84\x43\x2\x2DA\x2DB\a\v\x2\x2\x2DB\x2DC\x5\x84\x43\x2"+
		"\x2DC\x2FB\x3\x2\x2\x2\x2DD\x2DE\a\x8A\x2\x2\x2DE\x2DF\x5\x84\x43\x2\x2DF"+
		"\x2E3\a\v\x2\x2\x2E0\x2E1\x5\x84\x43\x2\x2E1\x2E2\a\v\x2\x2\x2E2\x2E4"+
		"\x3\x2\x2\x2\x2E3\x2E0\x3\x2\x2\x2\x2E3\x2E4\x3\x2\x2\x2\x2E4\x2E5\x3"+
		"\x2\x2\x2\x2E5\x2E6\x5\x84\x43\x2\x2E6\x2FB\x3\x2\x2\x2\x2E7\x2E8\a\x8B"+
		"\x2\x2\x2E8\x2E9\x5\x84\x43\x2\x2E9\x2ED\a\v\x2\x2\x2EA\x2EB\x5\x84\x43"+
		"\x2\x2EB\x2EC\a\v\x2\x2\x2EC\x2EE\x3\x2\x2\x2\x2ED\x2EA\x3\x2\x2\x2\x2ED"+
		"\x2EE\x3\x2\x2\x2\x2EE\x2EF\x3\x2\x2\x2\x2EF\x2F0\x5\x84\x43\x2\x2F0\x2FB"+
		"\x3\x2\x2\x2\x2F1\x2F2\a\x8F\x2\x2\x2F2\x2FB\x5\x84\x43\x2\x2F3\x2F4\a"+
		"\x90\x2\x2\x2F4\x2FB\x5\x84\x43\x2\x2F5\x2F6\a\x91\x2\x2\x2F6\x2F7\x5"+
		"\x84\x43\x2\x2F7\x2F8\a\v\x2\x2\x2F8\x2F9\x5\x84\x43\x2\x2F9\x2FB\x3\x2"+
		"\x2\x2\x2FA\x22F\x3\x2\x2\x2\x2FA\x234\x3\x2\x2\x2\x2FA\x236\x3\x2\x2"+
		"\x2\x2FA\x238\x3\x2\x2\x2\x2FA\x23D\x3\x2\x2\x2\x2FA\x242\x3\x2\x2\x2"+
		"\x2FA\x247\x3\x2\x2\x2\x2FA\x24E\x3\x2\x2\x2\x2FA\x253\x3\x2\x2\x2\x2FA"+
		"\x25A\x3\x2\x2\x2\x2FA\x261\x3\x2\x2\x2\x2FA\x268\x3\x2\x2\x2\x2FA\x26F"+
		"\x3\x2\x2\x2\x2FA\x271\x3\x2\x2\x2\x2FA\x278\x3\x2\x2\x2\x2FA\x27F\x3"+
		"\x2\x2\x2\x2FA\x286\x3\x2\x2\x2\x2FA\x28A\x3\x2\x2\x2\x2FA\x28C\x3\x2"+
		"\x2\x2\x2FA\x28E\x3\x2\x2\x2\x2FA\x290\x3\x2\x2\x2\x2FA\x297\x3\x2\x2"+
		"\x2\x2FA\x29E\x3\x2\x2\x2\x2FA\x2A0\x3\x2\x2\x2\x2FA\x2A7\x3\x2\x2\x2"+
		"\x2FA\x2AE\x3\x2\x2\x2\x2FA\x2B5\x3\x2\x2\x2\x2FA\x2BC\x3\x2\x2\x2\x2FA"+
		"\x2C3\x3\x2\x2\x2\x2FA\x2CA\x3\x2\x2\x2\x2FA\x2D1\x3\x2\x2\x2\x2FA\x2D8"+
		"\x3\x2\x2\x2\x2FA\x2DD\x3\x2\x2\x2\x2FA\x2E7\x3\x2\x2\x2\x2FA\x2F1\x3"+
		"\x2\x2\x2\x2FA\x2F3\x3\x2\x2\x2\x2FA\x2F5\x3\x2\x2\x2\x2FB\x81\x3\x2\x2"+
		"\x2\x2FC\x2FD\t\t\x2\x2\x2FD\x83\x3\x2\x2\x2\x2FE\x314\x5\x86\x44\x2\x2FF"+
		"\x314\x5\x88\x45\x2\x300\x314\x5\x8A\x46\x2\x301\x314\x5\x8CG\x2\x302"+
		"\x314\x5\x8EH\x2\x303\x314\x5\x92J\x2\x304\x314\x5\x94K\x2\x305\x314\x5"+
		"\x96L\x2\x306\x314\x5\x98M\x2\x307\x314\x5\x9AN\x2\x308\x314\x5\x9EP\x2"+
		"\x309\x314\x5\x9CO\x2\x30A\x30B\t\n\x2\x2\x30B\x30E\a\r\x2\x2\x30C\x30F"+
		"\x5\x90I\x2\x30D\x30F\x5\xA8U\x2\x30E\x30C\x3\x2\x2\x2\x30E\x30D\x3\x2"+
		"\x2\x2\x30F\x310\x3\x2\x2\x2\x310\x311\a\xE\x2\x2\x311\x314\x3\x2\x2\x2"+
		"\x312\x314\a\x102\x2\x2\x313\x2FE\x3\x2\x2\x2\x313\x2FF\x3\x2\x2\x2\x313"+
		"\x300\x3\x2\x2\x2\x313\x301\x3\x2\x2\x2\x313\x302\x3\x2\x2\x2\x313\x303"+
		"\x3\x2\x2\x2\x313\x304\x3\x2\x2\x2\x313\x305\x3\x2\x2\x2\x313\x306\x3"+
		"\x2\x2\x2\x313\x307\x3\x2\x2\x2\x313\x308\x3\x2\x2\x2\x313\x309\x3\x2"+
		"\x2\x2\x313\x30A\x3\x2\x2\x2\x313\x312\x3\x2\x2\x2\x314\x85\x3\x2\x2\x2"+
		"\x315\x316\t\v\x2\x2\x316\x87\x3\x2\x2\x2\x317\x318\t\f\x2\x2\x318\x89"+
		"\x3\x2\x2\x2\x319\x31A\t\r\x2\x2\x31A\x8B\x3\x2\x2\x2\x31B\x31C\t\xE\x2"+
		"\x2\x31C\x8D\x3\x2\x2\x2\x31D\x31E\t\xF\x2\x2\x31E\x8F\x3\x2\x2\x2\x31F"+
		"\x320\t\x10\x2\x2\x320\x91\x3\x2\x2\x2\x321\x322\t\x11\x2\x2\x322\x93"+
		"\x3\x2\x2\x2\x323\x324\a\r\x2\x2\x324\x325\x5\x8CG\x2\x325\x326\a\xE\x2"+
		"\x2\x326\x95\x3\x2\x2\x2\x327\x328\a\r\x2\x2\x328\x329\a.\x2\x2\x329\x32A"+
		"\a\xE\x2\x2\x32A\x97\x3\x2\x2\x2\x32B\x32C\a\r\x2\x2\x32C\x32D\x5\x9E"+
		"P\x2\x32D\x32E\a\xE\x2\x2\x32E\x99\x3\x2\x2\x2\x32F\x330\a\r\x2\x2\x330"+
		"\x333\x5\x8EH\x2\x331\x332\t\x12\x2\x2\x332\x334\x5\x9EP\x2\x333\x331"+
		"\x3\x2\x2\x2\x333\x334\x3\x2\x2\x2\x334\x335\x3\x2\x2\x2\x335\x336\a\xE"+
		"\x2\x2\x336\x9B\x3\x2\x2\x2\x337\x338\t\x13\x2\x2\x338\x9D\x3\x2\x2\x2"+
		"\x339\x33A\bP\x1\x2\x33A\x350\x5\xA2R\x2\x33B\x350\x5\xA0Q\x2\x33C\x350"+
		"\x5\xA8U\x2\x33D\x33E\a\x12\x2\x2\x33E\x350\x5\x9EP\x14\x33F\x340\a\x13"+
		"\x2\x2\x340\x350\x5\x9EP\x13\x341\x342\a&\x2\x2\x342\x350\x5\x9EP\x12"+
		"\x343\x344\a)\x2\x2\x344\x350\x5\x9EP\x11\x345\x346\a\xF\x2\x2\x346\x347"+
		"\x5\x9EP\x2\x347\x348\a\x10\x2\x2\x348\x350\x3\x2\x2\x2\x349\x34A\a\r"+
		"\x2\x2\x34A\x34B\x5\x9EP\x2\x34B\x34C\a\xE\x2\x2\x34C\x350\x3\x2\x2\x2"+
		"\x34D\x350\x5\xA4S\x2\x34E\x350\x5\xA6T\x2\x34F\x339\x3\x2\x2\x2\x34F"+
		"\x33B\x3\x2\x2\x2\x34F\x33C\x3\x2\x2\x2\x34F\x33D\x3\x2\x2\x2\x34F\x33F"+
		"\x3\x2\x2\x2\x34F\x341\x3\x2\x2\x2\x34F\x343\x3\x2\x2\x2\x34F\x345\x3"+
		"\x2\x2\x2\x34F\x349\x3\x2\x2\x2\x34F\x34D\x3\x2\x2\x2\x34F\x34E\x3\x2"+
		"\x2\x2\x350\x374\x3\x2\x2\x2\x351\x352\f\f\x2\x2\x352\x353\t\x14\x2\x2"+
		"\x353\x373\x5\x9EP\r\x354\x355\f\v\x2\x2\x355\x356\t\x15\x2\x2\x356\x373"+
		"\x5\x9EP\f\x357\x358\f\n\x2\x2\x358\x359\t\x12\x2\x2\x359\x373\x5\x9E"+
		"P\v\x35A\x35B\f\t\x2\x2\x35B\x35C\t\x16\x2\x2\x35C\x373\x5\x9EP\n\x35D"+
		"\x35E\f\b\x2\x2\x35E\x35F\t\x17\x2\x2\x35F\x373\x5\x9EP\t\x360\x361\f"+
		"\a\x2\x2\x361\x362\t\x18\x2\x2\x362\x373\x5\x9EP\b\x363\x364\f\x6\x2\x2"+
		"\x364\x365\a\x16\x2\x2\x365\x373\x5\x9EP\a\x366\x367\f\x5\x2\x2\x367\x368"+
		"\a\x15\x2\x2\x368\x373\x5\x9EP\x6\x369\x36A\f\x4\x2\x2\x36A\x36B\a\x14"+
		"\x2\x2\x36B\x373\x5\x9EP\x5\x36C\x36D\f\x3\x2\x2\x36D\x36E\a\x11\x2\x2"+
		"\x36E\x36F\x5\x9EP\x2\x36F\x370\a\a\x2\x2\x370\x371\x5\x9EP\x4\x371\x373"+
		"\x3\x2\x2\x2\x372\x351\x3\x2\x2\x2\x372\x354\x3\x2\x2\x2\x372\x357\x3"+
		"\x2\x2\x2\x372\x35A\x3\x2\x2\x2\x372\x35D\x3\x2\x2\x2\x372\x360\x3\x2"+
		"\x2\x2\x372\x363\x3\x2\x2\x2\x372\x366\x3\x2\x2\x2\x372\x369\x3\x2\x2"+
		"\x2\x372\x36C\x3\x2\x2\x2\x373\x376\x3\x2\x2\x2\x374\x372\x3\x2\x2\x2"+
		"\x374\x375\x3\x2\x2\x2\x375\x9F\x3\x2\x2\x2\x376\x374\x3\x2\x2\x2\x377"+
		"\x378\a\xFE\x2\x2\x378\x379\a\r\x2\x2\x379\x387\a\xE\x2\x2\x37A\x37B\a"+
		"\xFE\x2\x2\x37B\x37C\a\r\x2\x2\x37C\x381\x5\x9EP\x2\x37D\x37E\a\v\x2\x2"+
		"\x37E\x380\x5\x9EP\x2\x37F\x37D\x3\x2\x2\x2\x380\x383\x3\x2\x2\x2\x381"+
		"\x37F\x3\x2\x2\x2\x381\x382\x3\x2\x2\x2\x382\x384\x3\x2\x2\x2\x383\x381"+
		"\x3\x2\x2\x2\x384\x385\a\xE\x2\x2\x385\x387\x3\x2\x2\x2\x386\x377\x3\x2"+
		"\x2\x2\x386\x37A\x3\x2\x2\x2\x387\xA1\x3\x2\x2\x2\x388\x389\t\x19\x2\x2"+
		"\x389\x38D\a\r\x2\x2\x38A\x38E\x5\xAEX\x2\x38B\x38E\x5\xACW\x2\x38C\x38E"+
		"\x5\xA8U\x2\x38D\x38A\x3\x2\x2\x2\x38D\x38B\x3\x2\x2\x2\x38D\x38C\x3\x2"+
		"\x2\x2\x38E\x38F\x3\x2\x2\x2\x38F\x390\a\xE\x2\x2\x390\x3E0\x3\x2\x2\x2"+
		"\x391\x392\a\xE5\x2\x2\x392\x394\a\r\x2\x2\x393\x395\x5\x84\x43\x2\x394"+
		"\x393\x3\x2\x2\x2\x394\x395\x3\x2\x2\x2\x395\x396\x3\x2\x2\x2\x396\x3E0"+
		"\a\xE\x2\x2\x397\x398\a\xE6\x2\x2\x398\x39A\a\r\x2\x2\x399\x39B\x5\x84"+
		"\x43\x2\x39A\x399\x3\x2\x2\x2\x39A\x39B\x3\x2\x2\x2\x39B\x39C\x3\x2\x2"+
		"\x2\x39C\x3E0\a\xE\x2\x2\x39D\x39E\a\xE7\x2\x2\x39E\x3A0\a\r\x2\x2\x39F"+
		"\x3A1\x5\x84\x43\x2\x3A0\x39F\x3\x2\x2\x2\x3A0\x3A1\x3\x2\x2\x2\x3A1\x3A2"+
		"\x3\x2\x2\x2\x3A2\x3E0\a\xE\x2\x2\x3A3\x3A4\a\xE8\x2\x2\x3A4\x3A6\a\r"+
		"\x2\x2\x3A5\x3A7\x5\x84\x43\x2\x3A6\x3A5\x3\x2\x2\x2\x3A6\x3A7\x3\x2\x2"+
		"\x2\x3A7\x3A8\x3\x2\x2\x2\x3A8\x3E0\a\xE\x2\x2\x3A9\x3AA\a\xE9\x2\x2\x3AA"+
		"\x3AC\a\r\x2\x2\x3AB\x3AD\x5\x84\x43\x2\x3AC\x3AB\x3\x2\x2\x2\x3AC\x3AD"+
		"\x3\x2\x2\x2\x3AD\x3AE\x3\x2\x2\x2\x3AE\x3E0\a\xE\x2\x2\x3AF\x3B0\a\xEA"+
		"\x2\x2\x3B0\x3B2\a\r\x2\x2\x3B1\x3B3\x5\x84\x43\x2\x3B2\x3B1\x3\x2\x2"+
		"\x2\x3B2\x3B3\x3\x2\x2\x2\x3B3\x3B4\x3\x2\x2\x2\x3B4\x3E0\a\xE\x2\x2\x3B5"+
		"\x3B6\a\xEB\x2\x2\x3B6\x3B8\a\r\x2\x2\x3B7\x3B9\x5\x84\x43\x2\x3B8\x3B7"+
		"\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3E0\a\xE"+
		"\x2\x2\x3BB\x3BC\a\xEC\x2\x2\x3BC\x3BE\a\r\x2\x2\x3BD\x3BF\x5\x84\x43"+
		"\x2\x3BE\x3BD\x3\x2\x2\x2\x3BE\x3BF\x3\x2\x2\x2\x3BF\x3C0\x3\x2\x2\x2"+
		"\x3C0\x3E0\a\xE\x2\x2\x3C1\x3C2\a\xED\x2\x2\x3C2\x3C4\a\r\x2\x2\x3C3\x3C5"+
		"\x5\x84\x43\x2\x3C4\x3C3\x3\x2\x2\x2\x3C4\x3C5\x3\x2\x2\x2\x3C5\x3C6\x3"+
		"\x2\x2\x2\x3C6\x3E0\a\xE\x2\x2\x3C7\x3C8\a\xEE\x2\x2\x3C8\x3CA\a\r\x2"+
		"\x2\x3C9\x3CB\x5\x84\x43\x2\x3CA\x3C9\x3\x2\x2\x2\x3CA\x3CB\x3\x2\x2\x2"+
		"\x3CB\x3CC\x3\x2\x2\x2\x3CC\x3E0\a\xE\x2\x2\x3CD\x3CE\a\xEF\x2\x2\x3CE"+
		"\x3D0\a\r\x2\x2\x3CF\x3D1\x5\x84\x43\x2\x3D0\x3CF\x3\x2\x2\x2\x3D0\x3D1"+
		"\x3\x2\x2\x2\x3D1\x3D2\x3\x2\x2\x2\x3D2\x3E0\a\xE\x2\x2\x3D3\x3D4\a\xF0"+
		"\x2\x2\x3D4\x3D6\a\r\x2\x2\x3D5\x3D7\x5\x84\x43\x2\x3D6\x3D5\x3\x2\x2"+
		"\x2\x3D6\x3D7\x3\x2\x2\x2\x3D7\x3D8\x3\x2\x2\x2\x3D8\x3E0\a\xE\x2\x2\x3D9"+
		"\x3DA\a\xF1\x2\x2\x3DA\x3DC\a\r\x2\x2\x3DB\x3DD\x5\x84\x43\x2\x3DC\x3DB"+
		"\x3\x2\x2\x2\x3DC\x3DD\x3\x2\x2\x2\x3DD\x3DE\x3\x2\x2\x2\x3DE\x3E0\a\xE"+
		"\x2\x2\x3DF\x388\x3\x2\x2\x2\x3DF\x391\x3\x2\x2\x2\x3DF\x397\x3\x2\x2"+
		"\x2\x3DF\x39D\x3\x2\x2\x2\x3DF\x3A3\x3\x2\x2\x2\x3DF\x3A9\x3\x2\x2\x2"+
		"\x3DF\x3AF\x3\x2\x2\x2\x3DF\x3B5\x3\x2\x2\x2\x3DF\x3BB\x3\x2\x2\x2\x3DF"+
		"\x3C1\x3\x2\x2\x2\x3DF\x3C7\x3\x2\x2\x2\x3DF\x3CD\x3\x2\x2\x2\x3DF\x3D3"+
		"\x3\x2\x2\x2\x3DF\x3D9\x3\x2\x2\x2\x3E0\xA3\x3\x2\x2\x2\x3E1\x3EC\a\xF2"+
		"\x2\x2\x3E2\x3EC\a\xF5\x2\x2\x3E3\x3EC\a\xF4\x2\x2\x3E4\x3EC\a\xF8\x2"+
		"\x2\x3E5\x3EC\a\xF3\x2\x2\x3E6\x3EC\a\xF7\x2\x2\x3E7\x3EC\a\xFB\x2\x2"+
		"\x3E8\x3EC\a\xF9\x2\x2\x3E9\x3EC\t\x1A\x2\x2\x3EA\x3EC\a\x101\x2\x2\x3EB"+
		"\x3E1\x3\x2\x2\x2\x3EB\x3E2\x3\x2\x2\x2\x3EB\x3E3\x3\x2\x2\x2\x3EB\x3E4"+
		"\x3\x2\x2\x2\x3EB\x3E5\x3\x2\x2\x2\x3EB\x3E6\x3\x2\x2\x2\x3EB\x3E7\x3"+
		"\x2\x2\x2\x3EB\x3E8\x3\x2\x2\x2\x3EB\x3E9\x3\x2\x2\x2\x3EB\x3EA\x3\x2"+
		"\x2\x2\x3EC\xA5\x3\x2\x2\x2\x3ED\x3EF\a\b\x2\x2\x3EE\x3ED\x3\x2\x2\x2"+
		"\x3EE\x3EF\x3\x2\x2\x2\x3EF\x3F0\x3\x2\x2\x2\x3F0\x3F1\a\xFE\x2\x2\x3F1"+
		"\xA7\x3\x2\x2\x2\x3F2\x3F3\a\'\x2\x2\x3F3\x3F4\a\xFE\x2\x2\x3F4\x3F5\a"+
		"(\x2\x2\x3F5\xA9\x3\x2\x2\x2\x3F6\x3FD\x5\x86\x44\x2\x3F7\x3FD\x5\x88"+
		"\x45\x2\x3F8\x3FD\x5\x8A\x46\x2\x3F9\x3FD\x5\x8CG\x2\x3FA\x3FD\x5\x8E"+
		"H\x2\x3FB\x3FD\x5\x92J\x2\x3FC\x3F6\x3\x2\x2\x2\x3FC\x3F7\x3\x2\x2\x2"+
		"\x3FC\x3F8\x3\x2\x2\x2\x3FC\x3F9\x3\x2\x2\x2\x3FC\x3FA\x3\x2\x2\x2\x3FC"+
		"\x3FB\x3\x2\x2\x2\x3FD\xAB\x3\x2\x2\x2\x3FE\x403\x5\xAAV\x2\x3FF\x403"+
		"\x5\x94K\x2\x400\x403\x5\x96L\x2\x401\x403\x5\x9CO\x2\x402\x3FE\x3\x2"+
		"\x2\x2\x402\x3FF\x3\x2\x2\x2\x402\x400\x3\x2\x2\x2\x402\x401\x3\x2\x2"+
		"\x2\x403\xAD\x3\x2\x2\x2\x404\x405\t\x1B\x2\x2\x405\xAF\x3\x2\x2\x2[\xB4"+
		"\xBB\xC0\xC6\xCB\xCE\xD1\xD4\xD8\xDA\xE2\xE8\x109\x116\x119\x11B\x131"+
		"\x139\x144\x147\x15D\x16B\x175\x183\x18D\x193\x19F\x1B9\x1C2\x1D5\x1DD"+
		"\x1EE\x1F6\x1FB\x20B\x20D\x215\x217\x226\x22B\x24B\x257\x25E\x265\x26C"+
		"\x275\x27C\x283\x288\x294\x29B\x2A4\x2AB\x2B2\x2B9\x2C0\x2C7\x2CE\x2D5"+
		"\x2E3\x2ED\x2FA\x30E\x313\x333\x34F\x372\x374\x381\x386\x38D\x394\x39A"+
		"\x3A0\x3A6\x3AC\x3B2\x3B8\x3BE\x3C4\x3CA\x3D0\x3D6\x3DC\x3DF\x3EB\x3EE"+
		"\x3FC\x402";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Spect.Net.Assembler.Generated
