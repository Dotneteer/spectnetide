//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dotne\source\repos\spectnetide\Assembler\AntlrZ80TestParserGenerator\AntlrZ80TestParserGenerator\Z80Test.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Spect.Net.TestParser.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class Z80TestParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, COMMENT=104, WHITESPACES=105, TEST=106, CATEGORY=107, 
		PARAMS=108, END=109, DATA=110, MACHINE=111, SOURCE=112, SYMBOLS=113, WITH=114, 
		TIMEOUT=115, NONMI=116, CASE=117, ARRANGE=118, ACT=119, ASSERT=120, START=121, 
		STOP=122, HALT=123, BYTE=124, WORD=125, TEXT=126, INCLUDE=127, DECNUM=128, 
		HEXNUM=129, BINNUM=130, CHAR=131, STRING=132, IDENTIFIER=133, IDSTART=134, 
		IDCONT=135;
	public const int
		RULE_compileUnit = 0, RULE_testLanguageBlock = 1, RULE_includeDirective = 2, 
		RULE_testBlock = 3, RULE_testTitle = 4, RULE_testCategory = 5, RULE_machineContext = 6, 
		RULE_sourceContext = 7, RULE_testOptions = 8, RULE_testOption = 9, RULE_testParams = 10, 
		RULE_testCases = 11, RULE_arrange = 12, RULE_assignment = 13, RULE_regAssignment = 14, 
		RULE_flagStatus = 15, RULE_memAssignment = 16, RULE_memSpec = 17, RULE_act = 18, 
		RULE_assert = 19, RULE_dataBlock = 20, RULE_valueDef = 21, RULE_memPattern = 22, 
		RULE_byteSet = 23, RULE_wordSet = 24, RULE_text = 25, RULE_reg8 = 26, 
		RULE_reg8Idx = 27, RULE_reg8Spec = 28, RULE_reg16 = 29, RULE_reg16Idx = 30, 
		RULE_reg16Spec = 31, RULE_flag = 32, RULE_expr = 33, RULE_orExpr = 34, 
		RULE_xorExpr = 35, RULE_andExpr = 36, RULE_equExpr = 37, RULE_relExpr = 38, 
		RULE_shiftExpr = 39, RULE_addExpr = 40, RULE_multExpr = 41, RULE_unaryExpr = 42, 
		RULE_literalExpr = 43, RULE_symbolExpr = 44, RULE_registerSpec = 45, RULE_addrSpec = 46, 
		RULE_reachSpec = 47;
	public static readonly string[] ruleNames = {
		"compileUnit", "testLanguageBlock", "includeDirective", "testBlock", "testTitle", 
		"testCategory", "machineContext", "sourceContext", "testOptions", "testOption", 
		"testParams", "testCases", "arrange", "assignment", "regAssignment", "flagStatus", 
		"memAssignment", "memSpec", "act", "assert", "dataBlock", "valueDef", 
		"memPattern", "byteSet", "wordSet", "text", "reg8", "reg8Idx", "reg8Spec", 
		"reg16", "reg16Idx", "reg16Spec", "flag", "expr", "orExpr", "xorExpr", 
		"andExpr", "equExpr", "relExpr", "shiftExpr", "addExpr", "multExpr", "unaryExpr", 
		"literalExpr", "symbolExpr", "registerSpec", "addrSpec", "reachSpec"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "':'", "'!'", "'['", "']'", "'a'", "'A'", "'b'", "'B'", "'c'", 
		"'C'", "'d'", "'D'", "'e'", "'E'", "'h'", "'H'", "'l'", "'L'", "'xl'", 
		"'XL'", "'xh'", "'XH'", "'yl'", "'YL'", "'yh'", "'YH'", "'ixl'", "'IXL'", 
		"'IXl'", "'ixh'", "'IXH'", "'IXh'", "'iyl'", "'IYL'", "'IYl'", "'iyh'", 
		"'IYH'", "'IYh'", "'i'", "'I'", "'r'", "'R'", "'bc'", "'BC'", "'de'", 
		"'DE'", "'hl'", "'HL'", "'sp'", "'SP'", "'ix'", "'IX'", "'iy'", "'IY'", 
		"'af'", "'AF'", "'af''", "'AF''", "'bc''", "'BC''", "'de''", "'DE''", 
		"'hl''", "'HL''", "'@z'", "'@Z'", "'@c'", "'@C'", "'@p'", "'@P'", "'@s'", 
		"'@S'", "'@n'", "'@N'", "'@h'", "'@H'", "'@3'", "'@5'", "'?'", "'|'", 
		"'^'", "'&'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'('", "')'", "'.'", "'..'", 
		"'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "COMMENT", "WHITESPACES", 
		"TEST", "CATEGORY", "PARAMS", "END", "DATA", "MACHINE", "SOURCE", "SYMBOLS", 
		"WITH", "TIMEOUT", "NONMI", "CASE", "ARRANGE", "ACT", "ASSERT", "START", 
		"STOP", "HALT", "BYTE", "WORD", "TEXT", "INCLUDE", "DECNUM", "HEXNUM", 
		"BINNUM", "CHAR", "STRING", "IDENTIFIER", "IDSTART", "IDCONT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Z80Test.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Z80TestParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Z80TestParser.Eof, 0); }
		public TestLanguageBlockContext[] testLanguageBlock() {
			return GetRuleContexts<TestLanguageBlockContext>();
		}
		public TestLanguageBlockContext testLanguageBlock(int i) {
			return GetRuleContext<TestLanguageBlockContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (TEST - 106)) | (1L << (DATA - 106)) | (1L << (INCLUDE - 106)))) != 0)) {
				{
				{
				State = 96; testLanguageBlock();
				}
				}
				State = 101;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 102; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestLanguageBlockContext : ParserRuleContext {
		public TestBlockContext testBlock() {
			return GetRuleContext<TestBlockContext>(0);
		}
		public DataBlockContext dataBlock() {
			return GetRuleContext<DataBlockContext>(0);
		}
		public IncludeDirectiveContext includeDirective() {
			return GetRuleContext<IncludeDirectiveContext>(0);
		}
		public TestLanguageBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testLanguageBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterTestLanguageBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitTestLanguageBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestLanguageBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestLanguageBlockContext testLanguageBlock() {
		TestLanguageBlockContext _localctx = new TestLanguageBlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_testLanguageBlock);
		try {
			State = 107;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TEST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; testBlock();
				}
				break;
			case DATA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105; dataBlock();
				}
				break;
			case INCLUDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106; includeDirective();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeDirectiveContext : ParserRuleContext {
		public ITerminalNode INCLUDE() { return GetToken(Z80TestParser.INCLUDE, 0); }
		public ITerminalNode STRING() { return GetToken(Z80TestParser.STRING, 0); }
		public IncludeDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterIncludeDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitIncludeDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeDirectiveContext includeDirective() {
		IncludeDirectiveContext _localctx = new IncludeDirectiveContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_includeDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(INCLUDE);
			State = 110; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestBlockContext : ParserRuleContext {
		public TestTitleContext testTitle() {
			return GetRuleContext<TestTitleContext>(0);
		}
		public SourceContextContext sourceContext() {
			return GetRuleContext<SourceContextContext>(0);
		}
		public ActContext act() {
			return GetRuleContext<ActContext>(0);
		}
		public ITerminalNode END() { return GetToken(Z80TestParser.END, 0); }
		public TestCategoryContext testCategory() {
			return GetRuleContext<TestCategoryContext>(0);
		}
		public MachineContextContext machineContext() {
			return GetRuleContext<MachineContextContext>(0);
		}
		public TestOptionsContext testOptions() {
			return GetRuleContext<TestOptionsContext>(0);
		}
		public TestParamsContext testParams() {
			return GetRuleContext<TestParamsContext>(0);
		}
		public TestCasesContext[] testCases() {
			return GetRuleContexts<TestCasesContext>();
		}
		public TestCasesContext testCases(int i) {
			return GetRuleContext<TestCasesContext>(i);
		}
		public ArrangeContext arrange() {
			return GetRuleContext<ArrangeContext>(0);
		}
		public AssertContext assert() {
			return GetRuleContext<AssertContext>(0);
		}
		public TestBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterTestBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitTestBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestBlockContext testBlock() {
		TestBlockContext _localctx = new TestBlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_testBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; testTitle();
			State = 114;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CATEGORY) {
				{
				State = 113; testCategory();
				}
			}

			State = 117;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MACHINE) {
				{
				State = 116; machineContext();
				}
			}

			State = 119; sourceContext();
			State = 121;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 120; testOptions();
				}
			}

			State = 124;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PARAMS) {
				{
				State = 123; testParams();
				}
			}

			State = 129;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 126; testCases();
				}
				}
				State = 131;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 133;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRANGE) {
				{
				State = 132; arrange();
				}
			}

			State = 135; act();
			State = 137;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSERT) {
				{
				State = 136; assert();
				}
			}

			State = 139; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestTitleContext : ParserRuleContext {
		public ITerminalNode TEST() { return GetToken(Z80TestParser.TEST, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80TestParser.IDENTIFIER, 0); }
		public TestTitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testTitle; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterTestTitle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitTestTitle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestTitleContext testTitle() {
		TestTitleContext _localctx = new TestTitleContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_testTitle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(TEST);
			State = 142; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestCategoryContext : ParserRuleContext {
		public ITerminalNode CATEGORY() { return GetToken(Z80TestParser.CATEGORY, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80TestParser.IDENTIFIER, 0); }
		public TestCategoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testCategory; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterTestCategory(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitTestCategory(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestCategory(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestCategoryContext testCategory() {
		TestCategoryContext _localctx = new TestCategoryContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_testCategory);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(CATEGORY);
			State = 145; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MachineContextContext : ParserRuleContext {
		public ITerminalNode MACHINE() { return GetToken(Z80TestParser.MACHINE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80TestParser.IDENTIFIER, 0); }
		public MachineContextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_machineContext; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterMachineContext(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitMachineContext(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMachineContext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MachineContextContext machineContext() {
		MachineContextContext _localctx = new MachineContextContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_machineContext);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(MACHINE);
			State = 148; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContextContext : ParserRuleContext {
		public ITerminalNode SOURCE() { return GetToken(Z80TestParser.SOURCE, 0); }
		public ITerminalNode STRING() { return GetToken(Z80TestParser.STRING, 0); }
		public ITerminalNode SYMBOLS() { return GetToken(Z80TestParser.SYMBOLS, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(Z80TestParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Z80TestParser.IDENTIFIER, i);
		}
		public SourceContextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceContext; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterSourceContext(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitSourceContext(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceContext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceContextContext sourceContext() {
		SourceContextContext _localctx = new SourceContextContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_sourceContext);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(SOURCE);
			State = 151; Match(STRING);
			State = 158;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SYMBOLS) {
				{
				State = 152; Match(SYMBOLS);
				State = 154;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 153; Match(IDENTIFIER);
					}
					}
					State = 156;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==IDENTIFIER );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestOptionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(Z80TestParser.WITH, 0); }
		public TestOptionContext[] testOption() {
			return GetRuleContexts<TestOptionContext>();
		}
		public TestOptionContext testOption(int i) {
			return GetRuleContext<TestOptionContext>(i);
		}
		public TestOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterTestOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitTestOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestOptionsContext testOptions() {
		TestOptionsContext _localctx = new TestOptionsContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_testOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(WITH);
			State = 162;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 161; testOption();
				}
				}
				State = 164;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==TIMEOUT || _la==NONMI );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestOptionContext : ParserRuleContext {
		public ITerminalNode TIMEOUT() { return GetToken(Z80TestParser.TIMEOUT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode NONMI() { return GetToken(Z80TestParser.NONMI, 0); }
		public TestOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterTestOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitTestOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestOptionContext testOption() {
		TestOptionContext _localctx = new TestOptionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_testOption);
		try {
			State = 169;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TIMEOUT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166; Match(TIMEOUT);
				State = 167; expr();
				}
				break;
			case NONMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168; Match(NONMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestParamsContext : ParserRuleContext {
		public ITerminalNode PARAMS() { return GetToken(Z80TestParser.PARAMS, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(Z80TestParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Z80TestParser.IDENTIFIER, i);
		}
		public TestParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testParams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterTestParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitTestParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestParamsContext testParams() {
		TestParamsContext _localctx = new TestParamsContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_testParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(PARAMS);
			State = 172; Match(IDENTIFIER);
			State = 177;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__0) {
				{
				{
				State = 173; Match(T__0);
				State = 174; Match(IDENTIFIER);
				}
				}
				State = 179;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestCasesContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(Z80TestParser.CASE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public TestCasesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testCases; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterTestCases(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitTestCases(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestCases(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestCasesContext testCases() {
		TestCasesContext _localctx = new TestCasesContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_testCases);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(CASE);
			State = 181; expr();
			State = 186;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__0) {
				{
				{
				State = 182; Match(T__0);
				State = 183; expr();
				}
				}
				State = 188;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrangeContext : ParserRuleContext {
		public ITerminalNode ARRANGE() { return GetToken(Z80TestParser.ARRANGE, 0); }
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public ArrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterArrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitArrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrangeContext arrange() {
		ArrangeContext _localctx = new ArrangeContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_arrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(ARRANGE);
			State = 190; assignment();
			State = 195;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__0) {
				{
				{
				State = 191; Match(T__0);
				State = 192; assignment();
				}
				}
				State = 197;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public RegAssignmentContext regAssignment() {
			return GetRuleContext<RegAssignmentContext>(0);
		}
		public FlagStatusContext flagStatus() {
			return GetRuleContext<FlagStatusContext>(0);
		}
		public MemAssignmentContext memAssignment() {
			return GetRuleContext<MemAssignmentContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_assignment);
		try {
			State = 201;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__99:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198; regAssignment();
				}
				break;
			case T__2:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; flagStatus();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 200; memAssignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegAssignmentContext : ParserRuleContext {
		public RegisterSpecContext registerSpec() {
			return GetRuleContext<RegisterSpecContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RegAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterRegAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitRegAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegAssignmentContext regAssignment() {
		RegAssignmentContext _localctx = new RegAssignmentContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_regAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; registerSpec();
			State = 204; Match(T__1);
			State = 205; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlagStatusContext : ParserRuleContext {
		public FlagContext flag() {
			return GetRuleContext<FlagContext>(0);
		}
		public FlagStatusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flagStatus; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterFlagStatus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitFlagStatus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlagStatus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlagStatusContext flagStatus() {
		FlagStatusContext _localctx = new FlagStatusContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_flagStatus);
		try {
			State = 210;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207; flag();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208; Match(T__2);
				State = 209; flag();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemAssignmentContext : ParserRuleContext {
		public MemSpecContext memSpec() {
			return GetRuleContext<MemSpecContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MemAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterMemAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitMemAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemAssignmentContext memAssignment() {
		MemAssignmentContext _localctx = new MemAssignmentContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_memAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; memSpec();
			State = 213; Match(T__1);
			State = 214; expr();
			State = 217;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				State = 215; Match(T__0);
				State = 216; expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemSpecContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public MemSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterMemSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitMemSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemSpecContext memSpec() {
		MemSpecContext _localctx = new MemSpecContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_memSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(T__3);
			State = 220; expr();
			State = 221; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActContext : ParserRuleContext {
		public ITerminalNode ACT() { return GetToken(Z80TestParser.ACT, 0); }
		public ITerminalNode START() { return GetToken(Z80TestParser.START, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode STOP() { return GetToken(Z80TestParser.STOP, 0); }
		public ITerminalNode HALT() { return GetToken(Z80TestParser.HALT, 0); }
		public ActContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_act; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterAct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitAct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActContext act() {
		ActContext _localctx = new ActContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_act);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(ACT);
			State = 224; Match(START);
			State = 225; expr();
			State = 229;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case STOP:
				{
				State = 226; Match(STOP);
				State = 227; expr();
				}
				break;
			case HALT:
				{
				State = 228; Match(HALT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertContext : ParserRuleContext {
		public ITerminalNode ASSERT() { return GetToken(Z80TestParser.ASSERT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AssertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assert; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterAssert(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitAssert(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertContext assert() {
		AssertContext _localctx = new AssertContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_assert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(ASSERT);
			State = 232; expr();
			State = 235;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 233; Match(T__0);
				State = 234; expr();
				}
				}
				State = 237;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataBlockContext : ParserRuleContext {
		public ITerminalNode DATA() { return GetToken(Z80TestParser.DATA, 0); }
		public ITerminalNode END() { return GetToken(Z80TestParser.END, 0); }
		public ValueDefContext[] valueDef() {
			return GetRuleContexts<ValueDefContext>();
		}
		public ValueDefContext valueDef(int i) {
			return GetRuleContext<ValueDefContext>(i);
		}
		public MemPatternContext[] memPattern() {
			return GetRuleContexts<MemPatternContext>();
		}
		public MemPatternContext memPattern(int i) {
			return GetRuleContext<MemPatternContext>(i);
		}
		public DataBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterDataBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitDataBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataBlockContext dataBlock() {
		DataBlockContext _localctx = new DataBlockContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_dataBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(DATA);
			State = 244;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IDENTIFIER) {
				{
				State = 242;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
				case 1:
					{
					State = 240; valueDef();
					}
					break;

				case 2:
					{
					State = 241; memPattern();
					}
					break;
				}
				}
				State = 246;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 247; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueDefContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80TestParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ValueDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterValueDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitValueDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueDefContext valueDef() {
		ValueDefContext _localctx = new ValueDefContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_valueDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(IDENTIFIER);
			State = 250; Match(T__1);
			State = 251; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemPatternContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80TestParser.IDENTIFIER, 0); }
		public ByteSetContext[] byteSet() {
			return GetRuleContexts<ByteSetContext>();
		}
		public ByteSetContext byteSet(int i) {
			return GetRuleContext<ByteSetContext>(i);
		}
		public WordSetContext[] wordSet() {
			return GetRuleContexts<WordSetContext>();
		}
		public WordSetContext wordSet(int i) {
			return GetRuleContext<WordSetContext>(i);
		}
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public MemPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterMemPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitMemPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemPatternContext memPattern() {
		MemPatternContext _localctx = new MemPatternContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_memPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(IDENTIFIER);
			State = 257;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 257;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case BYTE:
					{
					State = 254; byteSet();
					}
					break;
				case WORD:
					{
					State = 255; wordSet();
					}
					break;
				case TEXT:
					{
					State = 256; text();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 259;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (BYTE - 124)) | (1L << (WORD - 124)) | (1L << (TEXT - 124)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ByteSetContext : ParserRuleContext {
		public ITerminalNode BYTE() { return GetToken(Z80TestParser.BYTE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ByteSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byteSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterByteSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitByteSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByteSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ByteSetContext byteSet() {
		ByteSetContext _localctx = new ByteSetContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_byteSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(BYTE);
			State = 262; expr();
			{
			State = 263; Match(T__0);
			State = 264; expr();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordSetContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(Z80TestParser.WORD, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WordSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wordSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterWordSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitWordSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordSetContext wordSet() {
		WordSetContext _localctx = new WordSetContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_wordSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(WORD);
			State = 267; expr();
			{
			State = 268; Match(T__0);
			State = 269; expr();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(Z80TestParser.TEXT, 0); }
		public ITerminalNode STRING() { return GetToken(Z80TestParser.STRING, 0); }
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(TEXT);
			State = 272; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8Context : ParserRuleContext {
		public Reg8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterReg8(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitReg8(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8Context reg8() {
		Reg8Context _localctx = new Reg8Context(_ctx, State);
		EnterRule(_localctx, 52, RULE_reg8);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8IdxContext : ParserRuleContext {
		public Reg8IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterReg8Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitReg8Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8IdxContext reg8Idx() {
		Reg8IdxContext _localctx = new Reg8IdxContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_reg8Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8SpecContext : ParserRuleContext {
		public Reg8SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterReg8Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitReg8Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8SpecContext reg8Spec() {
		Reg8SpecContext _localctx = new Reg8SpecContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_reg8Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16Context : ParserRuleContext {
		public Reg16Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterReg16(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitReg16(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16Context reg16() {
		Reg16Context _localctx = new Reg16Context(_ctx, State);
		EnterRule(_localctx, 58, RULE_reg16);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16IdxContext : ParserRuleContext {
		public Reg16IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterReg16Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitReg16Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16IdxContext reg16Idx() {
		Reg16IdxContext _localctx = new Reg16IdxContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_reg16Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16SpecContext : ParserRuleContext {
		public Reg16SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterReg16Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitReg16Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16SpecContext reg16Spec() {
		Reg16SpecContext _localctx = new Reg16SpecContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_reg16Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			_la = _input.La(1);
			if ( !(((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (T__55 - 56)) | (1L << (T__56 - 56)) | (1L << (T__57 - 56)) | (1L << (T__58 - 56)) | (1L << (T__59 - 56)) | (1L << (T__60 - 56)) | (1L << (T__61 - 56)) | (1L << (T__62 - 56)) | (1L << (T__63 - 56)) | (1L << (T__64 - 56)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlagContext : ParserRuleContext {
		public FlagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterFlag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitFlag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlagContext flag() {
		FlagContext _localctx = new FlagContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_flag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			_la = _input.La(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (T__65 - 66)) | (1L << (T__66 - 66)) | (1L << (T__67 - 66)) | (1L << (T__68 - 66)) | (1L << (T__69 - 66)) | (1L << (T__70 - 66)) | (1L << (T__71 - 66)) | (1L << (T__72 - 66)) | (1L << (T__73 - 66)) | (1L << (T__74 - 66)) | (1L << (T__75 - 66)) | (1L << (T__76 - 66)) | (1L << (T__77 - 66)) | (1L << (T__78 - 66)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; orExpr();
			State = 294;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__79) {
				{
				State = 289; Match(T__79);
				State = 290; expr();
				State = 291; Match(T__1);
				State = 292; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		public XorExprContext[] xorExpr() {
			return GetRuleContexts<XorExprContext>();
		}
		public XorExprContext xorExpr(int i) {
			return GetRuleContext<XorExprContext>(i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_orExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; xorExpr();
			State = 301;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__80) {
				{
				{
				State = 297; Match(T__80);
				State = 298; xorExpr();
				}
				}
				State = 303;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorExprContext : ParserRuleContext {
		public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		public XorExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterXorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitXorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorExprContext xorExpr() {
		XorExprContext _localctx = new XorExprContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_xorExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; andExpr();
			State = 309;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__81) {
				{
				{
				State = 305; Match(T__81);
				State = 306; andExpr();
				}
				}
				State = 311;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		public EquExprContext[] equExpr() {
			return GetRuleContexts<EquExprContext>();
		}
		public EquExprContext equExpr(int i) {
			return GetRuleContext<EquExprContext>(i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; equExpr();
			State = 317;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__82) {
				{
				{
				State = 313; Match(T__82);
				State = 314; equExpr();
				}
				}
				State = 319;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquExprContext : ParserRuleContext {
		public RelExprContext[] relExpr() {
			return GetRuleContexts<RelExprContext>();
		}
		public RelExprContext relExpr(int i) {
			return GetRuleContext<RelExprContext>(i);
		}
		public EquExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterEquExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitEquExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquExprContext equExpr() {
		EquExprContext _localctx = new EquExprContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_equExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320; relExpr();
			State = 325;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__83 || _la==T__84) {
				{
				{
				State = 321;
				_la = _input.La(1);
				if ( !(_la==T__83 || _la==T__84) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 322; relExpr();
				}
				}
				State = 327;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		public ShiftExprContext[] shiftExpr() {
			return GetRuleContexts<ShiftExprContext>();
		}
		public ShiftExprContext shiftExpr(int i) {
			return GetRuleContext<ShiftExprContext>(i);
		}
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; shiftExpr();
			State = 333;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (T__85 - 86)) | (1L << (T__86 - 86)) | (1L << (T__87 - 86)) | (1L << (T__88 - 86)))) != 0)) {
				{
				{
				State = 329;
				_la = _input.La(1);
				if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (T__85 - 86)) | (1L << (T__86 - 86)) | (1L << (T__87 - 86)) | (1L << (T__88 - 86)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 330; shiftExpr();
				}
				}
				State = 335;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ShiftExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterShiftExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitShiftExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExprContext shiftExpr() {
		ShiftExprContext _localctx = new ShiftExprContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_shiftExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; addExpr();
			State = 341;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__89 || _la==T__90) {
				{
				{
				State = 337;
				_la = _input.La(1);
				if ( !(_la==T__89 || _la==T__90) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 338; addExpr();
				}
				}
				State = 343;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MultExprContext[] multExpr() {
			return GetRuleContexts<MultExprContext>();
		}
		public MultExprContext multExpr(int i) {
			return GetRuleContext<MultExprContext>(i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_addExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; multExpr();
			State = 349;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__91 || _la==T__92) {
				{
				{
				State = 345;
				_la = _input.La(1);
				if ( !(_la==T__91 || _la==T__92) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 346; multExpr();
				}
				}
				State = 351;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExprContext : ParserRuleContext {
		public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		public MultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExprContext multExpr() {
		MultExprContext _localctx = new MultExprContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_multExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; unaryExpr();
			State = 357;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (T__93 - 94)) | (1L << (T__94 - 94)) | (1L << (T__95 - 94)))) != 0)) {
				{
				{
				State = 353;
				_la = _input.La(1);
				if ( !(((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (T__93 - 94)) | (1L << (T__94 - 94)) | (1L << (T__95 - 94)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 354; unaryExpr();
				}
				}
				State = 359;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		public SymbolExprContext symbolExpr() {
			return GetRuleContext<SymbolExprContext>(0);
		}
		public RegisterSpecContext registerSpec() {
			return GetRuleContext<RegisterSpecContext>(0);
		}
		public FlagContext flag() {
			return GetRuleContext<FlagContext>(0);
		}
		public AddrSpecContext addrSpec() {
			return GetRuleContext<AddrSpecContext>(0);
		}
		public ReachSpecContext reachSpec() {
			return GetRuleContext<ReachSpecContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_unaryExpr);
		try {
			State = 378;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 360; Match(T__91);
				State = 361; unaryExpr();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362; Match(T__92);
				State = 363; unaryExpr();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 364; Match(T__96);
				State = 365; unaryExpr();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 366; Match(T__2);
				State = 367; unaryExpr();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 368; Match(T__97);
				State = 369; expr();
				State = 370; Match(T__98);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 372; literalExpr();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 373; symbolExpr();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 374; registerSpec();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 375; flag();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 376; addrSpec();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 377; reachSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExprContext : ParserRuleContext {
		public ITerminalNode DECNUM() { return GetToken(Z80TestParser.DECNUM, 0); }
		public ITerminalNode HEXNUM() { return GetToken(Z80TestParser.HEXNUM, 0); }
		public ITerminalNode CHAR() { return GetToken(Z80TestParser.CHAR, 0); }
		public ITerminalNode BINNUM() { return GetToken(Z80TestParser.BINNUM, 0); }
		public LiteralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExprContext literalExpr() {
		LiteralExprContext _localctx = new LiteralExprContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_literalExpr);
		try {
			State = 385;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DECNUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380; Match(DECNUM);
				}
				break;
			case HEXNUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381; Match(HEXNUM);
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 382; Match(CHAR);
				}
				break;
			case BINNUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 383; Match(BINNUM);
				}
				break;
			case T__0:
			case T__1:
			case T__4:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__95:
			case T__98:
			case T__100:
			case T__102:
			case PARAMS:
			case END:
			case TIMEOUT:
			case NONMI:
			case CASE:
			case ARRANGE:
			case ACT:
			case ASSERT:
			case STOP:
			case HALT:
			case BYTE:
			case WORD:
			case TEXT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolExprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80TestParser.IDENTIFIER, 0); }
		public SymbolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterSymbolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitSymbolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolExprContext symbolExpr() {
		SymbolExprContext _localctx = new SymbolExprContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_symbolExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegisterSpecContext : ParserRuleContext {
		public Reg8Context reg8() {
			return GetRuleContext<Reg8Context>(0);
		}
		public Reg8IdxContext reg8Idx() {
			return GetRuleContext<Reg8IdxContext>(0);
		}
		public Reg8SpecContext reg8Spec() {
			return GetRuleContext<Reg8SpecContext>(0);
		}
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public Reg16SpecContext reg16Spec() {
			return GetRuleContext<Reg16SpecContext>(0);
		}
		public RegisterSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_registerSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterRegisterSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitRegisterSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegisterSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegisterSpecContext registerSpec() {
		RegisterSpecContext _localctx = new RegisterSpecContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_registerSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(T__99);
			State = 396;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
				{
				State = 390; reg8();
				}
				break;
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
				{
				State = 391; reg8Idx();
				}
				break;
			case T__39:
			case T__40:
			case T__41:
			case T__42:
				{
				State = 392; reg8Spec();
				}
				break;
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
				{
				State = 393; reg16();
				}
				break;
			case T__51:
			case T__52:
			case T__53:
			case T__54:
				{
				State = 394; reg16Idx();
				}
				break;
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
				{
				State = 395; reg16Spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddrSpecContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddrSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addrSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterAddrSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitAddrSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddrSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddrSpecContext addrSpec() {
		AddrSpecContext _localctx = new AddrSpecContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_addrSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(T__3);
			State = 399; expr();
			{
			State = 400; Match(T__100);
			State = 401; expr();
			}
			State = 403; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReachSpecContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ReachSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reachSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.EnterReachSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80TestListener typedListener = listener as IZ80TestListener;
			if (typedListener != null) typedListener.ExitReachSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80TestVisitor<TResult> typedVisitor = visitor as IZ80TestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReachSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReachSpecContext reachSpec() {
		ReachSpecContext _localctx = new ReachSpecContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_reachSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405; Match(T__101);
			State = 406; expr();
			{
			State = 407; Match(T__100);
			State = 408; expr();
			}
			State = 410; Match(T__102);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x89\x19F\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x3\x2\a"+
		"\x2\x64\n\x2\f\x2\xE\x2g\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3n\n\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x5\x5u\n\x5\x3\x5\x5\x5x\n\x5\x3\x5\x3"+
		"\x5\x5\x5|\n\x5\x3\x5\x5\x5\x7F\n\x5\x3\x5\a\x5\x82\n\x5\f\x5\xE\x5\x85"+
		"\v\x5\x3\x5\x5\x5\x88\n\x5\x3\x5\x3\x5\x5\x5\x8C\n\x5\x3\x5\x3\x5\x3\x6"+
		"\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x6\t\x9D"+
		"\n\t\r\t\xE\t\x9E\x5\t\xA1\n\t\x3\n\x3\n\x6\n\xA5\n\n\r\n\xE\n\xA6\x3"+
		"\v\x3\v\x3\v\x5\v\xAC\n\v\x3\f\x3\f\x3\f\x3\f\a\f\xB2\n\f\f\f\xE\f\xB5"+
		"\v\f\x3\r\x3\r\x3\r\x3\r\a\r\xBB\n\r\f\r\xE\r\xBE\v\r\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\a\xE\xC4\n\xE\f\xE\xE\xE\xC7\v\xE\x3\xF\x3\xF\x3\xF\x5\xF\xCC\n"+
		"\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x5\x11\xD5\n\x11"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xDC\n\x12\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\xE8\n\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x6\x15\xEE\n\x15\r\x15\xE\x15\xEF\x3\x16"+
		"\x3\x16\x3\x16\a\x16\xF5\n\x16\f\x16\xE\x16\xF8\v\x16\x3\x16\x3\x16\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x6\x18\x104\n\x18"+
		"\r\x18\xE\x18\x105\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3"+
		"\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x5#\x129\n#\x3$\x3$\x3$\a$\x12E\n$\f$\xE$\x131\v$\x3%\x3%\x3%\a"+
		"%\x136\n%\f%\xE%\x139\v%\x3&\x3&\x3&\a&\x13E\n&\f&\xE&\x141\v&\x3\'\x3"+
		"\'\x3\'\a\'\x146\n\'\f\'\xE\'\x149\v\'\x3(\x3(\x3(\a(\x14E\n(\f(\xE(\x151"+
		"\v(\x3)\x3)\x3)\a)\x156\n)\f)\xE)\x159\v)\x3*\x3*\x3*\a*\x15E\n*\f*\xE"+
		"*\x161\v*\x3+\x3+\x3+\a+\x166\n+\f+\xE+\x169\v+\x3,\x3,\x3,\x3,\x3,\x3"+
		",\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x17D\n,\x3-\x3-"+
		"\x3-\x3-\x3-\x5-\x184\n-\x3.\x3.\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x18F"+
		"\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3"+
		"\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x2\x2\x2\x32\x2\x2\x4\x2\x6\x2"+
		"\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2"+
		"\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38"+
		"\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V"+
		"\x2X\x2Z\x2\\\x2^\x2`\x2\x2\xE\x3\x2\b\x15\x3\x2\x16)\x3\x2*-\x3\x2.\x35"+
		"\x3\x2\x36\x39\x3\x2:\x43\x3\x2\x44Q\x3\x2VW\x3\x2X[\x3\x2\\]\x3\x2^_"+
		"\x3\x2`\x62\x1A6\x2\x65\x3\x2\x2\x2\x4m\x3\x2\x2\x2\x6o\x3\x2\x2\x2\b"+
		"r\x3\x2\x2\x2\n\x8F\x3\x2\x2\x2\f\x92\x3\x2\x2\x2\xE\x95\x3\x2\x2\x2\x10"+
		"\x98\x3\x2\x2\x2\x12\xA2\x3\x2\x2\x2\x14\xAB\x3\x2\x2\x2\x16\xAD\x3\x2"+
		"\x2\x2\x18\xB6\x3\x2\x2\x2\x1A\xBF\x3\x2\x2\x2\x1C\xCB\x3\x2\x2\x2\x1E"+
		"\xCD\x3\x2\x2\x2 \xD4\x3\x2\x2\x2\"\xD6\x3\x2\x2\x2$\xDD\x3\x2\x2\x2&"+
		"\xE1\x3\x2\x2\x2(\xE9\x3\x2\x2\x2*\xF1\x3\x2\x2\x2,\xFB\x3\x2\x2\x2.\xFF"+
		"\x3\x2\x2\x2\x30\x107\x3\x2\x2\x2\x32\x10C\x3\x2\x2\x2\x34\x111\x3\x2"+
		"\x2\x2\x36\x114\x3\x2\x2\x2\x38\x116\x3\x2\x2\x2:\x118\x3\x2\x2\x2<\x11A"+
		"\x3\x2\x2\x2>\x11C\x3\x2\x2\x2@\x11E\x3\x2\x2\x2\x42\x120\x3\x2\x2\x2"+
		"\x44\x122\x3\x2\x2\x2\x46\x12A\x3\x2\x2\x2H\x132\x3\x2\x2\x2J\x13A\x3"+
		"\x2\x2\x2L\x142\x3\x2\x2\x2N\x14A\x3\x2\x2\x2P\x152\x3\x2\x2\x2R\x15A"+
		"\x3\x2\x2\x2T\x162\x3\x2\x2\x2V\x17C\x3\x2\x2\x2X\x183\x3\x2\x2\x2Z\x185"+
		"\x3\x2\x2\x2\\\x187\x3\x2\x2\x2^\x190\x3\x2\x2\x2`\x197\x3\x2\x2\x2\x62"+
		"\x64\x5\x4\x3\x2\x63\x62\x3\x2\x2\x2\x64g\x3\x2\x2\x2\x65\x63\x3\x2\x2"+
		"\x2\x65\x66\x3\x2\x2\x2\x66h\x3\x2\x2\x2g\x65\x3\x2\x2\x2hi\a\x2\x2\x3"+
		"i\x3\x3\x2\x2\x2jn\x5\b\x5\x2kn\x5*\x16\x2ln\x5\x6\x4\x2mj\x3\x2\x2\x2"+
		"mk\x3\x2\x2\x2ml\x3\x2\x2\x2n\x5\x3\x2\x2\x2op\a\x81\x2\x2pq\a\x86\x2"+
		"\x2q\a\x3\x2\x2\x2rt\x5\n\x6\x2su\x5\f\a\x2ts\x3\x2\x2\x2tu\x3\x2\x2\x2"+
		"uw\x3\x2\x2\x2vx\x5\xE\b\x2wv\x3\x2\x2\x2wx\x3\x2\x2\x2xy\x3\x2\x2\x2"+
		"y{\x5\x10\t\x2z|\x5\x12\n\x2{z\x3\x2\x2\x2{|\x3\x2\x2\x2|~\x3\x2\x2\x2"+
		"}\x7F\x5\x16\f\x2~}\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x83\x3\x2\x2\x2\x80"+
		"\x82\x5\x18\r\x2\x81\x80\x3\x2\x2\x2\x82\x85\x3\x2\x2\x2\x83\x81\x3\x2"+
		"\x2\x2\x83\x84\x3\x2\x2\x2\x84\x87\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x86"+
		"\x88\x5\x1A\xE\x2\x87\x86\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x89\x3\x2"+
		"\x2\x2\x89\x8B\x5&\x14\x2\x8A\x8C\x5(\x15\x2\x8B\x8A\x3\x2\x2\x2\x8B\x8C"+
		"\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8E\ao\x2\x2\x8E\t\x3\x2\x2\x2\x8F"+
		"\x90\al\x2\x2\x90\x91\a\x87\x2\x2\x91\v\x3\x2\x2\x2\x92\x93\am\x2\x2\x93"+
		"\x94\a\x87\x2\x2\x94\r\x3\x2\x2\x2\x95\x96\aq\x2\x2\x96\x97\a\x87\x2\x2"+
		"\x97\xF\x3\x2\x2\x2\x98\x99\ar\x2\x2\x99\xA0\a\x86\x2\x2\x9A\x9C\as\x2"+
		"\x2\x9B\x9D\a\x87\x2\x2\x9C\x9B\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\x9C"+
		"\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA1\x3\x2\x2\x2\xA0\x9A\x3\x2\x2"+
		"\x2\xA0\xA1\x3\x2\x2\x2\xA1\x11\x3\x2\x2\x2\xA2\xA4\at\x2\x2\xA3\xA5\x5"+
		"\x14\v\x2\xA4\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2"+
		"\xA6\xA7\x3\x2\x2\x2\xA7\x13\x3\x2\x2\x2\xA8\xA9\au\x2\x2\xA9\xAC\x5\x44"+
		"#\x2\xAA\xAC\av\x2\x2\xAB\xA8\x3\x2\x2\x2\xAB\xAA\x3\x2\x2\x2\xAC\x15"+
		"\x3\x2\x2\x2\xAD\xAE\an\x2\x2\xAE\xB3\a\x87\x2\x2\xAF\xB0\a\x3\x2\x2\xB0"+
		"\xB2\a\x87\x2\x2\xB1\xAF\x3\x2\x2\x2\xB2\xB5\x3\x2\x2\x2\xB3\xB1\x3\x2"+
		"\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\x17\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB6"+
		"\xB7\aw\x2\x2\xB7\xBC\x5\x44#\x2\xB8\xB9\a\x3\x2\x2\xB9\xBB\x5\x44#\x2"+
		"\xBA\xB8\x3\x2\x2\x2\xBB\xBE\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBD\x3"+
		"\x2\x2\x2\xBD\x19\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBF\xC0\ax\x2\x2\xC0"+
		"\xC5\x5\x1C\xF\x2\xC1\xC2\a\x3\x2\x2\xC2\xC4\x5\x1C\xF\x2\xC3\xC1\x3\x2"+
		"\x2\x2\xC4\xC7\x3\x2\x2\x2\xC5\xC3\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6"+
		"\x1B\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xCC\x5\x1E\x10\x2\xC9\xCC\x5"+
		" \x11\x2\xCA\xCC\x5\"\x12\x2\xCB\xC8\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCB"+
		"\xCA\x3\x2\x2\x2\xCC\x1D\x3\x2\x2\x2\xCD\xCE\x5\\/\x2\xCE\xCF\a\x4\x2"+
		"\x2\xCF\xD0\x5\x44#\x2\xD0\x1F\x3\x2\x2\x2\xD1\xD5\x5\x42\"\x2\xD2\xD3"+
		"\a\x5\x2\x2\xD3\xD5\x5\x42\"\x2\xD4\xD1\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2"+
		"\xD5!\x3\x2\x2\x2\xD6\xD7\x5$\x13\x2\xD7\xD8\a\x4\x2\x2\xD8\xDB\x5\x44"+
		"#\x2\xD9\xDA\a\x3\x2\x2\xDA\xDC\x5\x44#\x2\xDB\xD9\x3\x2\x2\x2\xDB\xDC"+
		"\x3\x2\x2\x2\xDC#\x3\x2\x2\x2\xDD\xDE\a\x6\x2\x2\xDE\xDF\x5\x44#\x2\xDF"+
		"\xE0\a\a\x2\x2\xE0%\x3\x2\x2\x2\xE1\xE2\ay\x2\x2\xE2\xE3\a{\x2\x2\xE3"+
		"\xE7\x5\x44#\x2\xE4\xE5\a|\x2\x2\xE5\xE8\x5\x44#\x2\xE6\xE8\a}\x2\x2\xE7"+
		"\xE4\x3\x2\x2\x2\xE7\xE6\x3\x2\x2\x2\xE8\'\x3\x2\x2\x2\xE9\xEA\az\x2\x2"+
		"\xEA\xED\x5\x44#\x2\xEB\xEC\a\x3\x2\x2\xEC\xEE\x5\x44#\x2\xED\xEB\x3\x2"+
		"\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0"+
		")\x3\x2\x2\x2\xF1\xF6\ap\x2\x2\xF2\xF5\x5,\x17\x2\xF3\xF5\x5.\x18\x2\xF4"+
		"\xF2\x3\x2\x2\x2\xF4\xF3\x3\x2\x2\x2\xF5\xF8\x3\x2\x2\x2\xF6\xF4\x3\x2"+
		"\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF9\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF9"+
		"\xFA\ao\x2\x2\xFA+\x3\x2\x2\x2\xFB\xFC\a\x87\x2\x2\xFC\xFD\a\x4\x2\x2"+
		"\xFD\xFE\x5\x44#\x2\xFE-\x3\x2\x2\x2\xFF\x103\a\x87\x2\x2\x100\x104\x5"+
		"\x30\x19\x2\x101\x104\x5\x32\x1A\x2\x102\x104\x5\x34\x1B\x2\x103\x100"+
		"\x3\x2\x2\x2\x103\x101\x3\x2\x2\x2\x103\x102\x3\x2\x2\x2\x104\x105\x3"+
		"\x2\x2\x2\x105\x103\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2\x106/\x3\x2\x2\x2"+
		"\x107\x108\a~\x2\x2\x108\x109\x5\x44#\x2\x109\x10A\a\x3\x2\x2\x10A\x10B"+
		"\x5\x44#\x2\x10B\x31\x3\x2\x2\x2\x10C\x10D\a\x7F\x2\x2\x10D\x10E\x5\x44"+
		"#\x2\x10E\x10F\a\x3\x2\x2\x10F\x110\x5\x44#\x2\x110\x33\x3\x2\x2\x2\x111"+
		"\x112\a\x80\x2\x2\x112\x113\a\x86\x2\x2\x113\x35\x3\x2\x2\x2\x114\x115"+
		"\t\x2\x2\x2\x115\x37\x3\x2\x2\x2\x116\x117\t\x3\x2\x2\x117\x39\x3\x2\x2"+
		"\x2\x118\x119\t\x4\x2\x2\x119;\x3\x2\x2\x2\x11A\x11B\t\x5\x2\x2\x11B="+
		"\x3\x2\x2\x2\x11C\x11D\t\x6\x2\x2\x11D?\x3\x2\x2\x2\x11E\x11F\t\a\x2\x2"+
		"\x11F\x41\x3\x2\x2\x2\x120\x121\t\b\x2\x2\x121\x43\x3\x2\x2\x2\x122\x128"+
		"\x5\x46$\x2\x123\x124\aR\x2\x2\x124\x125\x5\x44#\x2\x125\x126\a\x4\x2"+
		"\x2\x126\x127\x5\x44#\x2\x127\x129\x3\x2\x2\x2\x128\x123\x3\x2\x2\x2\x128"+
		"\x129\x3\x2\x2\x2\x129\x45\x3\x2\x2\x2\x12A\x12F\x5H%\x2\x12B\x12C\aS"+
		"\x2\x2\x12C\x12E\x5H%\x2\x12D\x12B\x3\x2\x2\x2\x12E\x131\x3\x2\x2\x2\x12F"+
		"\x12D\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130G\x3\x2\x2\x2\x131\x12F\x3"+
		"\x2\x2\x2\x132\x137\x5J&\x2\x133\x134\aT\x2\x2\x134\x136\x5J&\x2\x135"+
		"\x133\x3\x2\x2\x2\x136\x139\x3\x2\x2\x2\x137\x135\x3\x2\x2\x2\x137\x138"+
		"\x3\x2\x2\x2\x138I\x3\x2\x2\x2\x139\x137\x3\x2\x2\x2\x13A\x13F\x5L\'\x2"+
		"\x13B\x13C\aU\x2\x2\x13C\x13E\x5L\'\x2\x13D\x13B\x3\x2\x2\x2\x13E\x141"+
		"\x3\x2\x2\x2\x13F\x13D\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2\x140K\x3\x2\x2"+
		"\x2\x141\x13F\x3\x2\x2\x2\x142\x147\x5N(\x2\x143\x144\t\t\x2\x2\x144\x146"+
		"\x5N(\x2\x145\x143\x3\x2\x2\x2\x146\x149\x3\x2\x2\x2\x147\x145\x3\x2\x2"+
		"\x2\x147\x148\x3\x2\x2\x2\x148M\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x14A"+
		"\x14F\x5P)\x2\x14B\x14C\t\n\x2\x2\x14C\x14E\x5P)\x2\x14D\x14B\x3\x2\x2"+
		"\x2\x14E\x151\x3\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2"+
		"\x150O\x3\x2\x2\x2\x151\x14F\x3\x2\x2\x2\x152\x157\x5R*\x2\x153\x154\t"+
		"\v\x2\x2\x154\x156\x5R*\x2\x155\x153\x3\x2\x2\x2\x156\x159\x3\x2\x2\x2"+
		"\x157\x155\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158Q\x3\x2\x2\x2\x159\x157"+
		"\x3\x2\x2\x2\x15A\x15F\x5T+\x2\x15B\x15C\t\f\x2\x2\x15C\x15E\x5T+\x2\x15D"+
		"\x15B\x3\x2\x2\x2\x15E\x161\x3\x2\x2\x2\x15F\x15D\x3\x2\x2\x2\x15F\x160"+
		"\x3\x2\x2\x2\x160S\x3\x2\x2\x2\x161\x15F\x3\x2\x2\x2\x162\x167\x5V,\x2"+
		"\x163\x164\t\r\x2\x2\x164\x166\x5V,\x2\x165\x163\x3\x2\x2\x2\x166\x169"+
		"\x3\x2\x2\x2\x167\x165\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2\x168U\x3\x2\x2"+
		"\x2\x169\x167\x3\x2\x2\x2\x16A\x16B\a^\x2\x2\x16B\x17D\x5V,\x2\x16C\x16D"+
		"\a_\x2\x2\x16D\x17D\x5V,\x2\x16E\x16F\a\x63\x2\x2\x16F\x17D\x5V,\x2\x170"+
		"\x171\a\x5\x2\x2\x171\x17D\x5V,\x2\x172\x173\a\x64\x2\x2\x173\x174\x5"+
		"\x44#\x2\x174\x175\a\x65\x2\x2\x175\x17D\x3\x2\x2\x2\x176\x17D\x5X-\x2"+
		"\x177\x17D\x5Z.\x2\x178\x17D\x5\\/\x2\x179\x17D\x5\x42\"\x2\x17A\x17D"+
		"\x5^\x30\x2\x17B\x17D\x5`\x31\x2\x17C\x16A\x3\x2\x2\x2\x17C\x16C\x3\x2"+
		"\x2\x2\x17C\x16E\x3\x2\x2\x2\x17C\x170\x3\x2\x2\x2\x17C\x172\x3\x2\x2"+
		"\x2\x17C\x176\x3\x2\x2\x2\x17C\x177\x3\x2\x2\x2\x17C\x178\x3\x2\x2\x2"+
		"\x17C\x179\x3\x2\x2\x2\x17C\x17A\x3\x2\x2\x2\x17C\x17B\x3\x2\x2\x2\x17D"+
		"W\x3\x2\x2\x2\x17E\x184\a\x82\x2\x2\x17F\x184\a\x83\x2\x2\x180\x184\a"+
		"\x85\x2\x2\x181\x184\a\x84\x2\x2\x182\x184\x3\x2\x2\x2\x183\x17E\x3\x2"+
		"\x2\x2\x183\x17F\x3\x2\x2\x2\x183\x180\x3\x2\x2\x2\x183\x181\x3\x2\x2"+
		"\x2\x183\x182\x3\x2\x2\x2\x184Y\x3\x2\x2\x2\x185\x186\a\x87\x2\x2\x186"+
		"[\x3\x2\x2\x2\x187\x18E\a\x66\x2\x2\x188\x18F\x5\x36\x1C\x2\x189\x18F"+
		"\x5\x38\x1D\x2\x18A\x18F\x5:\x1E\x2\x18B\x18F\x5<\x1F\x2\x18C\x18F\x5"+
		"> \x2\x18D\x18F\x5@!\x2\x18E\x188\x3\x2\x2\x2\x18E\x189\x3\x2\x2\x2\x18E"+
		"\x18A\x3\x2\x2\x2\x18E\x18B\x3\x2\x2\x2\x18E\x18C\x3\x2\x2\x2\x18E\x18D"+
		"\x3\x2\x2\x2\x18F]\x3\x2\x2\x2\x190\x191\a\x6\x2\x2\x191\x192\x5\x44#"+
		"\x2\x192\x193\ag\x2\x2\x193\x194\x5\x44#\x2\x194\x195\x3\x2\x2\x2\x195"+
		"\x196\a\a\x2\x2\x196_\x3\x2\x2\x2\x197\x198\ah\x2\x2\x198\x199\x5\x44"+
		"#\x2\x199\x19A\ag\x2\x2\x19A\x19B\x5\x44#\x2\x19B\x19C\x3\x2\x2\x2\x19C"+
		"\x19D\ai\x2\x2\x19D\x61\x3\x2\x2\x2\'\x65mtw{~\x83\x87\x8B\x9E\xA0\xA6"+
		"\xAB\xB3\xBC\xC5\xCB\xD4\xDB\xE7\xEF\xF4\xF6\x103\x105\x128\x12F\x137"+
		"\x13F\x147\x14F\x157\x15F\x167\x17C\x183\x18E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Spect.Net.TestParser.Generated
