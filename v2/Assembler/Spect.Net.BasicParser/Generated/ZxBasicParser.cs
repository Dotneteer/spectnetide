//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dotne\source\repos\spectnetide\v2\Assembler\AntlrZxBasicParserGenerator\AntlrZxBasicParserGenerator\ZxBasic.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Spect.Net.BasicParser.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class ZxBasicParser : Parser {
	public const int
		WS=1, NEWLINE=2, COLON=3, UNDERSCORE=4, SINGLE_QUOTE=5, SLASH=6, DOLLAR=7, 
		DCOLON=8, SCOLON=9, COMSEP=10, COMMA=11, ASSIGN=12, LPAR=13, RPAR=14, 
		LSBRAC=15, RSBRAC=16, QMARK=17, PLUS=18, MINUS=19, VBAR=20, UPARR=21, 
		AMP=22, EQOP=23, CIEQOP=24, NEQOP=25, CINEQOP=26, LTOP=27, LTEOP=28, GTOP=29, 
		GTEOP=30, LSHOP=31, RSHOP=32, MULOP=33, DIVOP=34, MODOP=35, MINOP=36, 
		MAXOP=37, TILDE=38, LDBRAC=39, RDBRAC=40, EXCLM=41, DOT=42, GOESTO=43, 
		ZXB_NOTEQ=44, ZXB_BLOCK_COMMENT=45, ZXB_LINE_COMMENT=46, ZXB_ABS=47, ZXB_ACS=48, 
		ZXB_AND=49, ZXB_ALIGN=50, ZXB_ASC=51, ZXB_ASM=52, ZXB_ASN=53, ZXB_AT=54, 
		ZXB_ATN=55, ZXB_ATTR=56, ZXB_BAND=57, ZXB_BNOT=58, ZXB_BOR=59, ZXB_BXOR=60, 
		ZXB_BEEP=61, ZXB_BOLD=62, ZXB_BORDER=63, ZXB_BRIGHT=64, ZXB_BYREF=65, 
		ZXB_BYVAL=66, ZXB_CAST=67, ZXB_CHR=68, ZXB_CIRCLE=69, ZXB_CLS=70, ZXB_CODE=71, 
		ZXB_CONST=72, ZXB_CONTINUE=73, ZXB_COS=74, ZXB_CSRLIN=75, ZXB_DECLARE=76, 
		ZXB_DIM=77, ZXB_DO=78, ZXB_DATA=79, ZXB_DRAW=80, ZXB_ELSE=81, ZXB_ELSEIF=82, 
		ZXB_END=83, ZXB_EXIT=84, ZXB_EXP=85, ZXB_FASTCALL=86, ZXB_FLASH=87, ZXB_FOR=88, 
		ZXB_FUNCTION=89, ZXB_GETKEY=90, ZXB_GETKEYSCANCODE=91, ZXB_GO=92, ZXB_GOTO=93, 
		ZXB_GOSUB=94, ZXB_HEX=95, ZXB_HEX16=96, ZXB_IF=97, ZXB_IN=98, ZXB_INK=99, 
		ZXB_INKEY=100, ZXB_INPUT=101, ZXB_INT=102, ZXB_INVERSE=103, ZXB_ITALIC=104, 
		ZXB_LBOUND=105, ZXB_LCASE=106, ZXB_LET=107, ZXB_LEN=108, ZXB_LN=109, ZXB_LOAD=110, 
		ZXB_LOOP=111, ZXB_MOD=112, ZXB_MULTIKEYS=113, ZXB_NEXT=114, ZXB_NOT=115, 
		ZXB_OR=116, ZXB_OVER=117, ZXB_OUT=118, ZXB_PAPER=119, ZXB_PAUSE=120, ZXB_PEEK=121, 
		ZXB_PI=122, ZXB_PLOT=123, ZXB_POINT=124, ZXB_POKE=125, ZXB_POS=126, ZXB_PRINT=127, 
		ZXB_PRINT42=128, ZXB_PRINTAT42=129, ZXB_PRINT64=130, ZXB_PRINTAT64=131, 
		ZXB_RANDOMIZE=132, ZXB_READ=133, ZXB_REM=134, ZXB_RESTORE=135, ZXB_RETURN=136, 
		ZXB_RND=137, ZXB_SAVE=138, ZXB_SCREEN=139, ZXB_SGN=140, ZXB_SHL=141, ZXB_SHR=142, 
		ZXB_SIN=143, ZXB_SQR=144, ZXB_STDCALL=145, ZXB_STEP=146, ZXB_STOP=147, 
		ZXB_STR=148, ZXB_SUB=149, ZXB_TAN=150, ZXB_THEN=151, ZXB_TO=152, ZXB_UBOUND=153, 
		ZXB_UCASE=154, ZXB_UNTIL=155, ZXB_VAL=156, ZXB_VERIFY=157, ZXB_WEND=158, 
		ZXB_WHILE=159, ZXB_XOR=160, DECNUM=161, REALNUM=162, ZXB_HEXNUM=163, ZXB_BINNUM=164, 
		ZXB_IDENTIFIER=165, ZXB_IDSTART=166, ZXB_IDCONT=167, ZXB_STRING=168, ZXB_LINE_END=169, 
		HEXNUM=170, BINNUM=171, OCTNUM=172, CURADDR=173, CHAR=174, STRING=175, 
		FSTRING=176, BOOLLIT=177, TRUE=178, FALSE=179, IDENTIFIER=180, IDSTART=181, 
		IDCONT=182, CURCNT=183, NONEARG=184, ErrorCharacter=185;
	public const int
		RULE_compileUnit = 0, RULE_zxb_label = 1, RULE_zxb_line = 2, RULE_zxb_line_item = 3, 
		RULE_zxb_asm_section = 4, RULE_zxb_asm_start = 5, RULE_zxb_asm_end = 6, 
		RULE_zxb_keyword = 7, RULE_zxb_function = 8, RULE_zxb_operator = 9, RULE_zxb_special = 10, 
		RULE_zxb_number = 11, RULE_zxb_identifier = 12, RULE_zxb_string = 13, 
		RULE_zxb_comment = 14, RULE_zxb_block_comment = 15, RULE_zxb_line_comment = 16, 
		RULE_asm_section = 17, RULE_asmline = 18;
	public static readonly string[] ruleNames = {
		"compileUnit", "zxb_label", "zxb_line", "zxb_line_item", "zxb_asm_section", 
		"zxb_asm_start", "zxb_asm_end", "zxb_keyword", "zxb_function", "zxb_operator", 
		"zxb_special", "zxb_number", "zxb_identifier", "zxb_string", "zxb_comment", 
		"zxb_block_comment", "zxb_line_comment", "asm_section", "asmline"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "':'", "'_'", "'''", null, null, "'::'", "';'", "'//'", 
		"','", "'='", "'('", "')'", "'['", "']'", "'?'", "'+'", "'-'", "'|'", 
		"'^'", "'&'", "'=='", "'==='", "'!='", "'!=='", "'<'", "'<='", "'>'", 
		"'>='", "'<<'", "'>>'", "'*'", null, "'%'", "'<?'", "'>?'", "'~'", "'{{'", 
		"'}}'", "'!'", "'.'", "'->'", "'<>'", null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'$<none>$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "NEWLINE", "COLON", "UNDERSCORE", "SINGLE_QUOTE", "SLASH", 
		"DOLLAR", "DCOLON", "SCOLON", "COMSEP", "COMMA", "ASSIGN", "LPAR", "RPAR", 
		"LSBRAC", "RSBRAC", "QMARK", "PLUS", "MINUS", "VBAR", "UPARR", "AMP", 
		"EQOP", "CIEQOP", "NEQOP", "CINEQOP", "LTOP", "LTEOP", "GTOP", "GTEOP", 
		"LSHOP", "RSHOP", "MULOP", "DIVOP", "MODOP", "MINOP", "MAXOP", "TILDE", 
		"LDBRAC", "RDBRAC", "EXCLM", "DOT", "GOESTO", "ZXB_NOTEQ", "ZXB_BLOCK_COMMENT", 
		"ZXB_LINE_COMMENT", "ZXB_ABS", "ZXB_ACS", "ZXB_AND", "ZXB_ALIGN", "ZXB_ASC", 
		"ZXB_ASM", "ZXB_ASN", "ZXB_AT", "ZXB_ATN", "ZXB_ATTR", "ZXB_BAND", "ZXB_BNOT", 
		"ZXB_BOR", "ZXB_BXOR", "ZXB_BEEP", "ZXB_BOLD", "ZXB_BORDER", "ZXB_BRIGHT", 
		"ZXB_BYREF", "ZXB_BYVAL", "ZXB_CAST", "ZXB_CHR", "ZXB_CIRCLE", "ZXB_CLS", 
		"ZXB_CODE", "ZXB_CONST", "ZXB_CONTINUE", "ZXB_COS", "ZXB_CSRLIN", "ZXB_DECLARE", 
		"ZXB_DIM", "ZXB_DO", "ZXB_DATA", "ZXB_DRAW", "ZXB_ELSE", "ZXB_ELSEIF", 
		"ZXB_END", "ZXB_EXIT", "ZXB_EXP", "ZXB_FASTCALL", "ZXB_FLASH", "ZXB_FOR", 
		"ZXB_FUNCTION", "ZXB_GETKEY", "ZXB_GETKEYSCANCODE", "ZXB_GO", "ZXB_GOTO", 
		"ZXB_GOSUB", "ZXB_HEX", "ZXB_HEX16", "ZXB_IF", "ZXB_IN", "ZXB_INK", "ZXB_INKEY", 
		"ZXB_INPUT", "ZXB_INT", "ZXB_INVERSE", "ZXB_ITALIC", "ZXB_LBOUND", "ZXB_LCASE", 
		"ZXB_LET", "ZXB_LEN", "ZXB_LN", "ZXB_LOAD", "ZXB_LOOP", "ZXB_MOD", "ZXB_MULTIKEYS", 
		"ZXB_NEXT", "ZXB_NOT", "ZXB_OR", "ZXB_OVER", "ZXB_OUT", "ZXB_PAPER", "ZXB_PAUSE", 
		"ZXB_PEEK", "ZXB_PI", "ZXB_PLOT", "ZXB_POINT", "ZXB_POKE", "ZXB_POS", 
		"ZXB_PRINT", "ZXB_PRINT42", "ZXB_PRINTAT42", "ZXB_PRINT64", "ZXB_PRINTAT64", 
		"ZXB_RANDOMIZE", "ZXB_READ", "ZXB_REM", "ZXB_RESTORE", "ZXB_RETURN", "ZXB_RND", 
		"ZXB_SAVE", "ZXB_SCREEN", "ZXB_SGN", "ZXB_SHL", "ZXB_SHR", "ZXB_SIN", 
		"ZXB_SQR", "ZXB_STDCALL", "ZXB_STEP", "ZXB_STOP", "ZXB_STR", "ZXB_SUB", 
		"ZXB_TAN", "ZXB_THEN", "ZXB_TO", "ZXB_UBOUND", "ZXB_UCASE", "ZXB_UNTIL", 
		"ZXB_VAL", "ZXB_VERIFY", "ZXB_WEND", "ZXB_WHILE", "ZXB_XOR", "DECNUM", 
		"REALNUM", "ZXB_HEXNUM", "ZXB_BINNUM", "ZXB_IDENTIFIER", "ZXB_IDSTART", 
		"ZXB_IDCONT", "ZXB_STRING", "ZXB_LINE_END", "HEXNUM", "BINNUM", "OCTNUM", 
		"CURADDR", "CHAR", "STRING", "FSTRING", "BOOLLIT", "TRUE", "FALSE", "IDENTIFIER", 
		"IDSTART", "IDCONT", "CURCNT", "NONEARG", "ErrorCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ZxBasic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ZxBasicParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(ZxBasicParser.Eof, 0); }
		public Zxb_lineContext[] zxb_line() {
			return GetRuleContexts<Zxb_lineContext>();
		}
		public Zxb_lineContext zxb_line(int i) {
			return GetRuleContext<Zxb_lineContext>(i);
		}
		public Zxb_asm_sectionContext[] zxb_asm_section() {
			return GetRuleContexts<Zxb_asm_sectionContext>();
		}
		public Zxb_asm_sectionContext zxb_asm_section(int i) {
			return GetRuleContext<Zxb_asm_sectionContext>(i);
		}
		public Zxb_labelContext[] zxb_label() {
			return GetRuleContexts<Zxb_labelContext>();
		}
		public Zxb_labelContext zxb_label(int i) {
			return GetRuleContext<Zxb_labelContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << PLUS) | (1L << MINUS) | (1L << UPARR) | (1L << AMP) | (1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP) | (1L << LSHOP) | (1L << RSHOP) | (1L << MULOP) | (1L << DIVOP) | (1L << ZXB_NOTEQ) | (1L << ZXB_BLOCK_COMMENT) | (1L << ZXB_LINE_COMMENT) | (1L << ZXB_ABS) | (1L << ZXB_ACS) | (1L << ZXB_AND) | (1L << ZXB_ALIGN) | (1L << ZXB_ASC) | (1L << ZXB_ASM) | (1L << ZXB_ASN) | (1L << ZXB_AT) | (1L << ZXB_ATN) | (1L << ZXB_ATTR) | (1L << ZXB_BAND) | (1L << ZXB_BNOT) | (1L << ZXB_BOR) | (1L << ZXB_BXOR) | (1L << ZXB_BEEP) | (1L << ZXB_BOLD) | (1L << ZXB_BORDER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ZXB_BRIGHT - 64)) | (1L << (ZXB_BYREF - 64)) | (1L << (ZXB_BYVAL - 64)) | (1L << (ZXB_CAST - 64)) | (1L << (ZXB_CHR - 64)) | (1L << (ZXB_CIRCLE - 64)) | (1L << (ZXB_CLS - 64)) | (1L << (ZXB_CODE - 64)) | (1L << (ZXB_CONST - 64)) | (1L << (ZXB_CONTINUE - 64)) | (1L << (ZXB_COS - 64)) | (1L << (ZXB_CSRLIN - 64)) | (1L << (ZXB_DECLARE - 64)) | (1L << (ZXB_DIM - 64)) | (1L << (ZXB_DO - 64)) | (1L << (ZXB_DATA - 64)) | (1L << (ZXB_DRAW - 64)) | (1L << (ZXB_ELSE - 64)) | (1L << (ZXB_ELSEIF - 64)) | (1L << (ZXB_END - 64)) | (1L << (ZXB_EXIT - 64)) | (1L << (ZXB_EXP - 64)) | (1L << (ZXB_FASTCALL - 64)) | (1L << (ZXB_FLASH - 64)) | (1L << (ZXB_FOR - 64)) | (1L << (ZXB_FUNCTION - 64)) | (1L << (ZXB_GETKEY - 64)) | (1L << (ZXB_GETKEYSCANCODE - 64)) | (1L << (ZXB_GOTO - 64)) | (1L << (ZXB_GOSUB - 64)) | (1L << (ZXB_HEX - 64)) | (1L << (ZXB_HEX16 - 64)) | (1L << (ZXB_IF - 64)) | (1L << (ZXB_IN - 64)) | (1L << (ZXB_INK - 64)) | (1L << (ZXB_INKEY - 64)) | (1L << (ZXB_INPUT - 64)) | (1L << (ZXB_INT - 64)) | (1L << (ZXB_INVERSE - 64)) | (1L << (ZXB_ITALIC - 64)) | (1L << (ZXB_LBOUND - 64)) | (1L << (ZXB_LCASE - 64)) | (1L << (ZXB_LET - 64)) | (1L << (ZXB_LEN - 64)) | (1L << (ZXB_LN - 64)) | (1L << (ZXB_LOAD - 64)) | (1L << (ZXB_LOOP - 64)) | (1L << (ZXB_MOD - 64)) | (1L << (ZXB_MULTIKEYS - 64)) | (1L << (ZXB_NEXT - 64)) | (1L << (ZXB_NOT - 64)) | (1L << (ZXB_OR - 64)) | (1L << (ZXB_OVER - 64)) | (1L << (ZXB_OUT - 64)) | (1L << (ZXB_PAPER - 64)) | (1L << (ZXB_PAUSE - 64)) | (1L << (ZXB_PEEK - 64)) | (1L << (ZXB_PI - 64)) | (1L << (ZXB_PLOT - 64)) | (1L << (ZXB_POINT - 64)) | (1L << (ZXB_POKE - 64)) | (1L << (ZXB_POS - 64)) | (1L << (ZXB_PRINT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ZXB_PRINT42 - 128)) | (1L << (ZXB_PRINTAT42 - 128)) | (1L << (ZXB_PRINT64 - 128)) | (1L << (ZXB_PRINTAT64 - 128)) | (1L << (ZXB_RANDOMIZE - 128)) | (1L << (ZXB_READ - 128)) | (1L << (ZXB_REM - 128)) | (1L << (ZXB_RESTORE - 128)) | (1L << (ZXB_RETURN - 128)) | (1L << (ZXB_RND - 128)) | (1L << (ZXB_SAVE - 128)) | (1L << (ZXB_SCREEN - 128)) | (1L << (ZXB_SGN - 128)) | (1L << (ZXB_SHL - 128)) | (1L << (ZXB_SHR - 128)) | (1L << (ZXB_SIN - 128)) | (1L << (ZXB_SQR - 128)) | (1L << (ZXB_STDCALL - 128)) | (1L << (ZXB_STEP - 128)) | (1L << (ZXB_STOP - 128)) | (1L << (ZXB_STR - 128)) | (1L << (ZXB_SUB - 128)) | (1L << (ZXB_TAN - 128)) | (1L << (ZXB_THEN - 128)) | (1L << (ZXB_TO - 128)) | (1L << (ZXB_UBOUND - 128)) | (1L << (ZXB_UCASE - 128)) | (1L << (ZXB_UNTIL - 128)) | (1L << (ZXB_VAL - 128)) | (1L << (ZXB_VERIFY - 128)) | (1L << (ZXB_WEND - 128)) | (1L << (ZXB_WHILE - 128)) | (1L << (ZXB_XOR - 128)) | (1L << (DECNUM - 128)) | (1L << (REALNUM - 128)) | (1L << (ZXB_HEXNUM - 128)) | (1L << (ZXB_BINNUM - 128)) | (1L << (ZXB_IDENTIFIER - 128)) | (1L << (ZXB_STRING - 128)) | (1L << (ZXB_LINE_END - 128)) | (1L << (ErrorCharacter - 128)))) != 0)) {
				{
				State = 43;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 39;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
					case 1:
						{
						State = 38; zxb_label();
						}
						break;
					}
					State = 41; zxb_line();
					}
					break;

				case 2:
					{
					State = 42; zxb_asm_section();
					}
					break;
				}
				}
				State = 47;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 48; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_labelContext : ParserRuleContext {
		public ITerminalNode DECNUM() { return GetToken(ZxBasicParser.DECNUM, 0); }
		public ITerminalNode ZXB_IDENTIFIER() { return GetToken(ZxBasicParser.ZXB_IDENTIFIER, 0); }
		public ITerminalNode COLON() { return GetToken(ZxBasicParser.COLON, 0); }
		public Zxb_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_label(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_label(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_label(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_labelContext zxb_label() {
		Zxb_labelContext _localctx = new Zxb_labelContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_zxb_label);
		try {
			State = 53;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DECNUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; Match(DECNUM);
				}
				break;
			case ZXB_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; Match(ZXB_IDENTIFIER);
				State = 52; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_lineContext : ParserRuleContext {
		public ITerminalNode ZXB_LINE_END() { return GetToken(ZxBasicParser.ZXB_LINE_END, 0); }
		public Zxb_line_itemContext[] zxb_line_item() {
			return GetRuleContexts<Zxb_line_itemContext>();
		}
		public Zxb_line_itemContext zxb_line_item(int i) {
			return GetRuleContext<Zxb_line_itemContext>(i);
		}
		public Zxb_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_line(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_line(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_lineContext zxb_line() {
		Zxb_lineContext _localctx = new Zxb_lineContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_zxb_line);
		int _la;
		try {
			int _alt;
			State = 67;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << PLUS) | (1L << MINUS) | (1L << UPARR) | (1L << AMP) | (1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP) | (1L << LSHOP) | (1L << RSHOP) | (1L << MULOP) | (1L << DIVOP) | (1L << ZXB_NOTEQ) | (1L << ZXB_BLOCK_COMMENT) | (1L << ZXB_LINE_COMMENT) | (1L << ZXB_ABS) | (1L << ZXB_ACS) | (1L << ZXB_AND) | (1L << ZXB_ALIGN) | (1L << ZXB_ASC) | (1L << ZXB_ASM) | (1L << ZXB_ASN) | (1L << ZXB_AT) | (1L << ZXB_ATN) | (1L << ZXB_ATTR) | (1L << ZXB_BAND) | (1L << ZXB_BNOT) | (1L << ZXB_BOR) | (1L << ZXB_BXOR) | (1L << ZXB_BEEP) | (1L << ZXB_BOLD) | (1L << ZXB_BORDER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ZXB_BRIGHT - 64)) | (1L << (ZXB_BYREF - 64)) | (1L << (ZXB_BYVAL - 64)) | (1L << (ZXB_CAST - 64)) | (1L << (ZXB_CHR - 64)) | (1L << (ZXB_CIRCLE - 64)) | (1L << (ZXB_CLS - 64)) | (1L << (ZXB_CODE - 64)) | (1L << (ZXB_CONST - 64)) | (1L << (ZXB_CONTINUE - 64)) | (1L << (ZXB_COS - 64)) | (1L << (ZXB_CSRLIN - 64)) | (1L << (ZXB_DECLARE - 64)) | (1L << (ZXB_DIM - 64)) | (1L << (ZXB_DO - 64)) | (1L << (ZXB_DATA - 64)) | (1L << (ZXB_DRAW - 64)) | (1L << (ZXB_ELSE - 64)) | (1L << (ZXB_ELSEIF - 64)) | (1L << (ZXB_END - 64)) | (1L << (ZXB_EXIT - 64)) | (1L << (ZXB_EXP - 64)) | (1L << (ZXB_FASTCALL - 64)) | (1L << (ZXB_FLASH - 64)) | (1L << (ZXB_FOR - 64)) | (1L << (ZXB_FUNCTION - 64)) | (1L << (ZXB_GETKEY - 64)) | (1L << (ZXB_GETKEYSCANCODE - 64)) | (1L << (ZXB_GOTO - 64)) | (1L << (ZXB_GOSUB - 64)) | (1L << (ZXB_HEX - 64)) | (1L << (ZXB_HEX16 - 64)) | (1L << (ZXB_IF - 64)) | (1L << (ZXB_IN - 64)) | (1L << (ZXB_INK - 64)) | (1L << (ZXB_INKEY - 64)) | (1L << (ZXB_INPUT - 64)) | (1L << (ZXB_INT - 64)) | (1L << (ZXB_INVERSE - 64)) | (1L << (ZXB_ITALIC - 64)) | (1L << (ZXB_LBOUND - 64)) | (1L << (ZXB_LCASE - 64)) | (1L << (ZXB_LET - 64)) | (1L << (ZXB_LEN - 64)) | (1L << (ZXB_LN - 64)) | (1L << (ZXB_LOAD - 64)) | (1L << (ZXB_LOOP - 64)) | (1L << (ZXB_MOD - 64)) | (1L << (ZXB_MULTIKEYS - 64)) | (1L << (ZXB_NEXT - 64)) | (1L << (ZXB_NOT - 64)) | (1L << (ZXB_OR - 64)) | (1L << (ZXB_OVER - 64)) | (1L << (ZXB_OUT - 64)) | (1L << (ZXB_PAPER - 64)) | (1L << (ZXB_PAUSE - 64)) | (1L << (ZXB_PEEK - 64)) | (1L << (ZXB_PI - 64)) | (1L << (ZXB_PLOT - 64)) | (1L << (ZXB_POINT - 64)) | (1L << (ZXB_POKE - 64)) | (1L << (ZXB_POS - 64)) | (1L << (ZXB_PRINT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ZXB_PRINT42 - 128)) | (1L << (ZXB_PRINTAT42 - 128)) | (1L << (ZXB_PRINT64 - 128)) | (1L << (ZXB_PRINTAT64 - 128)) | (1L << (ZXB_RANDOMIZE - 128)) | (1L << (ZXB_READ - 128)) | (1L << (ZXB_REM - 128)) | (1L << (ZXB_RESTORE - 128)) | (1L << (ZXB_RETURN - 128)) | (1L << (ZXB_RND - 128)) | (1L << (ZXB_SAVE - 128)) | (1L << (ZXB_SCREEN - 128)) | (1L << (ZXB_SGN - 128)) | (1L << (ZXB_SHL - 128)) | (1L << (ZXB_SHR - 128)) | (1L << (ZXB_SIN - 128)) | (1L << (ZXB_SQR - 128)) | (1L << (ZXB_STDCALL - 128)) | (1L << (ZXB_STEP - 128)) | (1L << (ZXB_STOP - 128)) | (1L << (ZXB_STR - 128)) | (1L << (ZXB_SUB - 128)) | (1L << (ZXB_TAN - 128)) | (1L << (ZXB_THEN - 128)) | (1L << (ZXB_TO - 128)) | (1L << (ZXB_UBOUND - 128)) | (1L << (ZXB_UCASE - 128)) | (1L << (ZXB_UNTIL - 128)) | (1L << (ZXB_VAL - 128)) | (1L << (ZXB_VERIFY - 128)) | (1L << (ZXB_WEND - 128)) | (1L << (ZXB_WHILE - 128)) | (1L << (ZXB_XOR - 128)) | (1L << (DECNUM - 128)) | (1L << (REALNUM - 128)) | (1L << (ZXB_HEXNUM - 128)) | (1L << (ZXB_BINNUM - 128)) | (1L << (ZXB_IDENTIFIER - 128)) | (1L << (ZXB_STRING - 128)) | (1L << (ErrorCharacter - 128)))) != 0)) {
					{
					{
					State = 55; zxb_line_item();
					}
					}
					State = 60;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 61; Match(ZXB_LINE_END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 62; zxb_line_item();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 65;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_line_itemContext : ParserRuleContext {
		public Zxb_keywordContext zxb_keyword() {
			return GetRuleContext<Zxb_keywordContext>(0);
		}
		public Zxb_functionContext zxb_function() {
			return GetRuleContext<Zxb_functionContext>(0);
		}
		public Zxb_operatorContext zxb_operator() {
			return GetRuleContext<Zxb_operatorContext>(0);
		}
		public Zxb_specialContext zxb_special() {
			return GetRuleContext<Zxb_specialContext>(0);
		}
		public Zxb_numberContext zxb_number() {
			return GetRuleContext<Zxb_numberContext>(0);
		}
		public Zxb_identifierContext zxb_identifier() {
			return GetRuleContext<Zxb_identifierContext>(0);
		}
		public Zxb_stringContext zxb_string() {
			return GetRuleContext<Zxb_stringContext>(0);
		}
		public Zxb_commentContext zxb_comment() {
			return GetRuleContext<Zxb_commentContext>(0);
		}
		public ITerminalNode ErrorCharacter() { return GetToken(ZxBasicParser.ErrorCharacter, 0); }
		public Zxb_line_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_line_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_line_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_line_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_line_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_line_itemContext zxb_line_item() {
		Zxb_line_itemContext _localctx = new Zxb_line_itemContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_zxb_line_item);
		try {
			State = 78;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ZXB_AT:
			case ZXB_BEEP:
			case ZXB_BOLD:
			case ZXB_BORDER:
			case ZXB_BRIGHT:
			case ZXB_BYREF:
			case ZXB_BYVAL:
			case ZXB_CIRCLE:
			case ZXB_CLS:
			case ZXB_CONST:
			case ZXB_CONTINUE:
			case ZXB_DECLARE:
			case ZXB_DIM:
			case ZXB_DO:
			case ZXB_DATA:
			case ZXB_DRAW:
			case ZXB_ELSE:
			case ZXB_ELSEIF:
			case ZXB_END:
			case ZXB_EXIT:
			case ZXB_FASTCALL:
			case ZXB_FLASH:
			case ZXB_FOR:
			case ZXB_FUNCTION:
			case ZXB_GOTO:
			case ZXB_GOSUB:
			case ZXB_IF:
			case ZXB_INK:
			case ZXB_INVERSE:
			case ZXB_ITALIC:
			case ZXB_LET:
			case ZXB_LOAD:
			case ZXB_LOOP:
			case ZXB_NEXT:
			case ZXB_OVER:
			case ZXB_OUT:
			case ZXB_PAPER:
			case ZXB_PAUSE:
			case ZXB_PI:
			case ZXB_PLOT:
			case ZXB_POKE:
			case ZXB_PRINT:
			case ZXB_RANDOMIZE:
			case ZXB_READ:
			case ZXB_REM:
			case ZXB_RESTORE:
			case ZXB_RETURN:
			case ZXB_SAVE:
			case ZXB_STDCALL:
			case ZXB_STEP:
			case ZXB_STOP:
			case ZXB_SUB:
			case ZXB_THEN:
			case ZXB_TO:
			case ZXB_UNTIL:
			case ZXB_VERIFY:
			case ZXB_WEND:
			case ZXB_WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; zxb_keyword();
				}
				break;
			case ZXB_ABS:
			case ZXB_ACS:
			case ZXB_ASC:
			case ZXB_ASN:
			case ZXB_ATN:
			case ZXB_ATTR:
			case ZXB_CAST:
			case ZXB_CHR:
			case ZXB_CODE:
			case ZXB_COS:
			case ZXB_CSRLIN:
			case ZXB_EXP:
			case ZXB_GETKEY:
			case ZXB_GETKEYSCANCODE:
			case ZXB_HEX:
			case ZXB_HEX16:
			case ZXB_IN:
			case ZXB_INKEY:
			case ZXB_INPUT:
			case ZXB_INT:
			case ZXB_LBOUND:
			case ZXB_LCASE:
			case ZXB_LEN:
			case ZXB_LN:
			case ZXB_MULTIKEYS:
			case ZXB_PEEK:
			case ZXB_POINT:
			case ZXB_POS:
			case ZXB_PRINT42:
			case ZXB_PRINTAT42:
			case ZXB_PRINT64:
			case ZXB_PRINTAT64:
			case ZXB_RND:
			case ZXB_SCREEN:
			case ZXB_SGN:
			case ZXB_STR:
			case ZXB_TAN:
			case ZXB_UBOUND:
			case ZXB_UCASE:
			case ZXB_VAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; zxb_function();
				}
				break;
			case ASSIGN:
			case PLUS:
			case MINUS:
			case UPARR:
			case AMP:
			case LTOP:
			case LTEOP:
			case GTOP:
			case GTEOP:
			case LSHOP:
			case RSHOP:
			case MULOP:
			case DIVOP:
			case ZXB_NOTEQ:
			case ZXB_AND:
			case ZXB_BAND:
			case ZXB_BNOT:
			case ZXB_BOR:
			case ZXB_BXOR:
			case ZXB_MOD:
			case ZXB_NOT:
			case ZXB_OR:
			case ZXB_SHL:
			case ZXB_SHR:
			case ZXB_SIN:
			case ZXB_SQR:
			case ZXB_XOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 71; zxb_operator();
				}
				break;
			case ZXB_ALIGN:
			case ZXB_ASM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 72; zxb_special();
				}
				break;
			case DECNUM:
			case REALNUM:
			case ZXB_HEXNUM:
			case ZXB_BINNUM:
				EnterOuterAlt(_localctx, 5);
				{
				State = 73; zxb_number();
				}
				break;
			case ZXB_IDENTIFIER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 74; zxb_identifier();
				}
				break;
			case ZXB_STRING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 75; zxb_string();
				}
				break;
			case ZXB_BLOCK_COMMENT:
			case ZXB_LINE_COMMENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 76; zxb_comment();
				}
				break;
			case ErrorCharacter:
				EnterOuterAlt(_localctx, 9);
				{
				State = 77; Match(ErrorCharacter);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_asm_sectionContext : ParserRuleContext {
		public Zxb_asm_startContext zxb_asm_start() {
			return GetRuleContext<Zxb_asm_startContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(ZxBasicParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(ZxBasicParser.NEWLINE, i);
		}
		public Asm_sectionContext asm_section() {
			return GetRuleContext<Asm_sectionContext>(0);
		}
		public Zxb_asm_endContext zxb_asm_end() {
			return GetRuleContext<Zxb_asm_endContext>(0);
		}
		public Zxb_asm_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_asm_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_asm_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_asm_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_asm_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_asm_sectionContext zxb_asm_section() {
		Zxb_asm_sectionContext _localctx = new Zxb_asm_sectionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_zxb_asm_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; zxb_asm_start();
			State = 81; Match(NEWLINE);
			State = 82; asm_section();
			State = 84;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 83; Match(NEWLINE);
				}
				}
				State = 86;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 88; zxb_asm_end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_asm_startContext : ParserRuleContext {
		public ITerminalNode ZXB_ASM() { return GetToken(ZxBasicParser.ZXB_ASM, 0); }
		public Zxb_asm_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_asm_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_asm_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_asm_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_asm_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_asm_startContext zxb_asm_start() {
		Zxb_asm_startContext _localctx = new Zxb_asm_startContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_zxb_asm_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(ZXB_ASM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_asm_endContext : ParserRuleContext {
		public ITerminalNode ZXB_ASM() { return GetToken(ZxBasicParser.ZXB_ASM, 0); }
		public ITerminalNode ZXB_END() { return GetToken(ZxBasicParser.ZXB_END, 0); }
		public Zxb_asm_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_asm_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_asm_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_asm_end(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_asm_end(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_asm_endContext zxb_asm_end() {
		Zxb_asm_endContext _localctx = new Zxb_asm_endContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_zxb_asm_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(ZXB_ASM);
			State = 93; Match(ZXB_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_keywordContext : ParserRuleContext {
		public ITerminalNode ZXB_AT() { return GetToken(ZxBasicParser.ZXB_AT, 0); }
		public ITerminalNode ZXB_BEEP() { return GetToken(ZxBasicParser.ZXB_BEEP, 0); }
		public ITerminalNode ZXB_BOLD() { return GetToken(ZxBasicParser.ZXB_BOLD, 0); }
		public ITerminalNode ZXB_BORDER() { return GetToken(ZxBasicParser.ZXB_BORDER, 0); }
		public ITerminalNode ZXB_BRIGHT() { return GetToken(ZxBasicParser.ZXB_BRIGHT, 0); }
		public ITerminalNode ZXB_BYREF() { return GetToken(ZxBasicParser.ZXB_BYREF, 0); }
		public ITerminalNode ZXB_BYVAL() { return GetToken(ZxBasicParser.ZXB_BYVAL, 0); }
		public ITerminalNode ZXB_CIRCLE() { return GetToken(ZxBasicParser.ZXB_CIRCLE, 0); }
		public ITerminalNode ZXB_CLS() { return GetToken(ZxBasicParser.ZXB_CLS, 0); }
		public ITerminalNode ZXB_CONST() { return GetToken(ZxBasicParser.ZXB_CONST, 0); }
		public ITerminalNode ZXB_CONTINUE() { return GetToken(ZxBasicParser.ZXB_CONTINUE, 0); }
		public ITerminalNode ZXB_DECLARE() { return GetToken(ZxBasicParser.ZXB_DECLARE, 0); }
		public ITerminalNode ZXB_DIM() { return GetToken(ZxBasicParser.ZXB_DIM, 0); }
		public ITerminalNode ZXB_DO() { return GetToken(ZxBasicParser.ZXB_DO, 0); }
		public ITerminalNode ZXB_DATA() { return GetToken(ZxBasicParser.ZXB_DATA, 0); }
		public ITerminalNode ZXB_DRAW() { return GetToken(ZxBasicParser.ZXB_DRAW, 0); }
		public ITerminalNode ZXB_ELSE() { return GetToken(ZxBasicParser.ZXB_ELSE, 0); }
		public ITerminalNode ZXB_ELSEIF() { return GetToken(ZxBasicParser.ZXB_ELSEIF, 0); }
		public ITerminalNode ZXB_END() { return GetToken(ZxBasicParser.ZXB_END, 0); }
		public ITerminalNode ZXB_EXIT() { return GetToken(ZxBasicParser.ZXB_EXIT, 0); }
		public ITerminalNode ZXB_FASTCALL() { return GetToken(ZxBasicParser.ZXB_FASTCALL, 0); }
		public ITerminalNode ZXB_FLASH() { return GetToken(ZxBasicParser.ZXB_FLASH, 0); }
		public ITerminalNode ZXB_FOR() { return GetToken(ZxBasicParser.ZXB_FOR, 0); }
		public ITerminalNode ZXB_FUNCTION() { return GetToken(ZxBasicParser.ZXB_FUNCTION, 0); }
		public ITerminalNode ZXB_GOTO() { return GetToken(ZxBasicParser.ZXB_GOTO, 0); }
		public ITerminalNode ZXB_GOSUB() { return GetToken(ZxBasicParser.ZXB_GOSUB, 0); }
		public ITerminalNode ZXB_IF() { return GetToken(ZxBasicParser.ZXB_IF, 0); }
		public ITerminalNode ZXB_INK() { return GetToken(ZxBasicParser.ZXB_INK, 0); }
		public ITerminalNode ZXB_INVERSE() { return GetToken(ZxBasicParser.ZXB_INVERSE, 0); }
		public ITerminalNode ZXB_ITALIC() { return GetToken(ZxBasicParser.ZXB_ITALIC, 0); }
		public ITerminalNode ZXB_LET() { return GetToken(ZxBasicParser.ZXB_LET, 0); }
		public ITerminalNode ZXB_LOAD() { return GetToken(ZxBasicParser.ZXB_LOAD, 0); }
		public ITerminalNode ZXB_LOOP() { return GetToken(ZxBasicParser.ZXB_LOOP, 0); }
		public ITerminalNode ZXB_NEXT() { return GetToken(ZxBasicParser.ZXB_NEXT, 0); }
		public ITerminalNode ZXB_OVER() { return GetToken(ZxBasicParser.ZXB_OVER, 0); }
		public ITerminalNode ZXB_OUT() { return GetToken(ZxBasicParser.ZXB_OUT, 0); }
		public ITerminalNode ZXB_PAPER() { return GetToken(ZxBasicParser.ZXB_PAPER, 0); }
		public ITerminalNode ZXB_PAUSE() { return GetToken(ZxBasicParser.ZXB_PAUSE, 0); }
		public ITerminalNode ZXB_PI() { return GetToken(ZxBasicParser.ZXB_PI, 0); }
		public ITerminalNode ZXB_PLOT() { return GetToken(ZxBasicParser.ZXB_PLOT, 0); }
		public ITerminalNode ZXB_POKE() { return GetToken(ZxBasicParser.ZXB_POKE, 0); }
		public ITerminalNode ZXB_PRINT() { return GetToken(ZxBasicParser.ZXB_PRINT, 0); }
		public ITerminalNode ZXB_RANDOMIZE() { return GetToken(ZxBasicParser.ZXB_RANDOMIZE, 0); }
		public ITerminalNode ZXB_READ() { return GetToken(ZxBasicParser.ZXB_READ, 0); }
		public ITerminalNode ZXB_REM() { return GetToken(ZxBasicParser.ZXB_REM, 0); }
		public ITerminalNode ZXB_RESTORE() { return GetToken(ZxBasicParser.ZXB_RESTORE, 0); }
		public ITerminalNode ZXB_RETURN() { return GetToken(ZxBasicParser.ZXB_RETURN, 0); }
		public ITerminalNode ZXB_SAVE() { return GetToken(ZxBasicParser.ZXB_SAVE, 0); }
		public ITerminalNode ZXB_STDCALL() { return GetToken(ZxBasicParser.ZXB_STDCALL, 0); }
		public ITerminalNode ZXB_STEP() { return GetToken(ZxBasicParser.ZXB_STEP, 0); }
		public ITerminalNode ZXB_STOP() { return GetToken(ZxBasicParser.ZXB_STOP, 0); }
		public ITerminalNode ZXB_SUB() { return GetToken(ZxBasicParser.ZXB_SUB, 0); }
		public ITerminalNode ZXB_THEN() { return GetToken(ZxBasicParser.ZXB_THEN, 0); }
		public ITerminalNode ZXB_TO() { return GetToken(ZxBasicParser.ZXB_TO, 0); }
		public ITerminalNode ZXB_UNTIL() { return GetToken(ZxBasicParser.ZXB_UNTIL, 0); }
		public ITerminalNode ZXB_VERIFY() { return GetToken(ZxBasicParser.ZXB_VERIFY, 0); }
		public ITerminalNode ZXB_WEND() { return GetToken(ZxBasicParser.ZXB_WEND, 0); }
		public ITerminalNode ZXB_WHILE() { return GetToken(ZxBasicParser.ZXB_WHILE, 0); }
		public Zxb_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_keywordContext zxb_keyword() {
		Zxb_keywordContext _localctx = new Zxb_keywordContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_zxb_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			_la = _input.La(1);
			if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (ZXB_AT - 54)) | (1L << (ZXB_BEEP - 54)) | (1L << (ZXB_BOLD - 54)) | (1L << (ZXB_BORDER - 54)) | (1L << (ZXB_BRIGHT - 54)) | (1L << (ZXB_BYREF - 54)) | (1L << (ZXB_BYVAL - 54)) | (1L << (ZXB_CIRCLE - 54)) | (1L << (ZXB_CLS - 54)) | (1L << (ZXB_CONST - 54)) | (1L << (ZXB_CONTINUE - 54)) | (1L << (ZXB_DECLARE - 54)) | (1L << (ZXB_DIM - 54)) | (1L << (ZXB_DO - 54)) | (1L << (ZXB_DATA - 54)) | (1L << (ZXB_DRAW - 54)) | (1L << (ZXB_ELSE - 54)) | (1L << (ZXB_ELSEIF - 54)) | (1L << (ZXB_END - 54)) | (1L << (ZXB_EXIT - 54)) | (1L << (ZXB_FASTCALL - 54)) | (1L << (ZXB_FLASH - 54)) | (1L << (ZXB_FOR - 54)) | (1L << (ZXB_FUNCTION - 54)) | (1L << (ZXB_GOTO - 54)) | (1L << (ZXB_GOSUB - 54)) | (1L << (ZXB_IF - 54)) | (1L << (ZXB_INK - 54)) | (1L << (ZXB_INVERSE - 54)) | (1L << (ZXB_ITALIC - 54)) | (1L << (ZXB_LET - 54)) | (1L << (ZXB_LOAD - 54)) | (1L << (ZXB_LOOP - 54)) | (1L << (ZXB_NEXT - 54)) | (1L << (ZXB_OVER - 54)))) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (ZXB_OUT - 118)) | (1L << (ZXB_PAPER - 118)) | (1L << (ZXB_PAUSE - 118)) | (1L << (ZXB_PI - 118)) | (1L << (ZXB_PLOT - 118)) | (1L << (ZXB_POKE - 118)) | (1L << (ZXB_PRINT - 118)) | (1L << (ZXB_RANDOMIZE - 118)) | (1L << (ZXB_READ - 118)) | (1L << (ZXB_REM - 118)) | (1L << (ZXB_RESTORE - 118)) | (1L << (ZXB_RETURN - 118)) | (1L << (ZXB_SAVE - 118)) | (1L << (ZXB_STDCALL - 118)) | (1L << (ZXB_STEP - 118)) | (1L << (ZXB_STOP - 118)) | (1L << (ZXB_SUB - 118)) | (1L << (ZXB_THEN - 118)) | (1L << (ZXB_TO - 118)) | (1L << (ZXB_UNTIL - 118)) | (1L << (ZXB_VERIFY - 118)) | (1L << (ZXB_WEND - 118)) | (1L << (ZXB_WHILE - 118)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_functionContext : ParserRuleContext {
		public ITerminalNode ZXB_ABS() { return GetToken(ZxBasicParser.ZXB_ABS, 0); }
		public ITerminalNode ZXB_ACS() { return GetToken(ZxBasicParser.ZXB_ACS, 0); }
		public ITerminalNode ZXB_ASC() { return GetToken(ZxBasicParser.ZXB_ASC, 0); }
		public ITerminalNode ZXB_ASN() { return GetToken(ZxBasicParser.ZXB_ASN, 0); }
		public ITerminalNode ZXB_ATN() { return GetToken(ZxBasicParser.ZXB_ATN, 0); }
		public ITerminalNode ZXB_ATTR() { return GetToken(ZxBasicParser.ZXB_ATTR, 0); }
		public ITerminalNode ZXB_CAST() { return GetToken(ZxBasicParser.ZXB_CAST, 0); }
		public ITerminalNode ZXB_CHR() { return GetToken(ZxBasicParser.ZXB_CHR, 0); }
		public ITerminalNode ZXB_CODE() { return GetToken(ZxBasicParser.ZXB_CODE, 0); }
		public ITerminalNode ZXB_COS() { return GetToken(ZxBasicParser.ZXB_COS, 0); }
		public ITerminalNode ZXB_CSRLIN() { return GetToken(ZxBasicParser.ZXB_CSRLIN, 0); }
		public ITerminalNode ZXB_EXP() { return GetToken(ZxBasicParser.ZXB_EXP, 0); }
		public ITerminalNode ZXB_GETKEY() { return GetToken(ZxBasicParser.ZXB_GETKEY, 0); }
		public ITerminalNode ZXB_GETKEYSCANCODE() { return GetToken(ZxBasicParser.ZXB_GETKEYSCANCODE, 0); }
		public ITerminalNode ZXB_HEX() { return GetToken(ZxBasicParser.ZXB_HEX, 0); }
		public ITerminalNode ZXB_HEX16() { return GetToken(ZxBasicParser.ZXB_HEX16, 0); }
		public ITerminalNode ZXB_IN() { return GetToken(ZxBasicParser.ZXB_IN, 0); }
		public ITerminalNode ZXB_INKEY() { return GetToken(ZxBasicParser.ZXB_INKEY, 0); }
		public ITerminalNode ZXB_INPUT() { return GetToken(ZxBasicParser.ZXB_INPUT, 0); }
		public ITerminalNode ZXB_INT() { return GetToken(ZxBasicParser.ZXB_INT, 0); }
		public ITerminalNode ZXB_LBOUND() { return GetToken(ZxBasicParser.ZXB_LBOUND, 0); }
		public ITerminalNode ZXB_LCASE() { return GetToken(ZxBasicParser.ZXB_LCASE, 0); }
		public ITerminalNode ZXB_LEN() { return GetToken(ZxBasicParser.ZXB_LEN, 0); }
		public ITerminalNode ZXB_LN() { return GetToken(ZxBasicParser.ZXB_LN, 0); }
		public ITerminalNode ZXB_MULTIKEYS() { return GetToken(ZxBasicParser.ZXB_MULTIKEYS, 0); }
		public ITerminalNode ZXB_PEEK() { return GetToken(ZxBasicParser.ZXB_PEEK, 0); }
		public ITerminalNode ZXB_POINT() { return GetToken(ZxBasicParser.ZXB_POINT, 0); }
		public ITerminalNode ZXB_POS() { return GetToken(ZxBasicParser.ZXB_POS, 0); }
		public ITerminalNode ZXB_PRINT42() { return GetToken(ZxBasicParser.ZXB_PRINT42, 0); }
		public ITerminalNode ZXB_PRINTAT42() { return GetToken(ZxBasicParser.ZXB_PRINTAT42, 0); }
		public ITerminalNode ZXB_PRINT64() { return GetToken(ZxBasicParser.ZXB_PRINT64, 0); }
		public ITerminalNode ZXB_PRINTAT64() { return GetToken(ZxBasicParser.ZXB_PRINTAT64, 0); }
		public ITerminalNode ZXB_RND() { return GetToken(ZxBasicParser.ZXB_RND, 0); }
		public ITerminalNode ZXB_SCREEN() { return GetToken(ZxBasicParser.ZXB_SCREEN, 0); }
		public ITerminalNode ZXB_SGN() { return GetToken(ZxBasicParser.ZXB_SGN, 0); }
		public ITerminalNode ZXB_STR() { return GetToken(ZxBasicParser.ZXB_STR, 0); }
		public ITerminalNode ZXB_TAN() { return GetToken(ZxBasicParser.ZXB_TAN, 0); }
		public ITerminalNode ZXB_UBOUND() { return GetToken(ZxBasicParser.ZXB_UBOUND, 0); }
		public ITerminalNode ZXB_UCASE() { return GetToken(ZxBasicParser.ZXB_UCASE, 0); }
		public ITerminalNode ZXB_VAL() { return GetToken(ZxBasicParser.ZXB_VAL, 0); }
		public Zxb_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_functionContext zxb_function() {
		Zxb_functionContext _localctx = new Zxb_functionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_zxb_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_la = _input.La(1);
			if ( !(((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & ((1L << (ZXB_ABS - 47)) | (1L << (ZXB_ACS - 47)) | (1L << (ZXB_ASC - 47)) | (1L << (ZXB_ASN - 47)) | (1L << (ZXB_ATN - 47)) | (1L << (ZXB_ATTR - 47)) | (1L << (ZXB_CAST - 47)) | (1L << (ZXB_CHR - 47)) | (1L << (ZXB_CODE - 47)) | (1L << (ZXB_COS - 47)) | (1L << (ZXB_CSRLIN - 47)) | (1L << (ZXB_EXP - 47)) | (1L << (ZXB_GETKEY - 47)) | (1L << (ZXB_GETKEYSCANCODE - 47)) | (1L << (ZXB_HEX - 47)) | (1L << (ZXB_HEX16 - 47)) | (1L << (ZXB_IN - 47)) | (1L << (ZXB_INKEY - 47)) | (1L << (ZXB_INPUT - 47)) | (1L << (ZXB_INT - 47)) | (1L << (ZXB_LBOUND - 47)) | (1L << (ZXB_LCASE - 47)) | (1L << (ZXB_LEN - 47)) | (1L << (ZXB_LN - 47)))) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (ZXB_MULTIKEYS - 113)) | (1L << (ZXB_PEEK - 113)) | (1L << (ZXB_POINT - 113)) | (1L << (ZXB_POS - 113)) | (1L << (ZXB_PRINT42 - 113)) | (1L << (ZXB_PRINTAT42 - 113)) | (1L << (ZXB_PRINT64 - 113)) | (1L << (ZXB_PRINTAT64 - 113)) | (1L << (ZXB_RND - 113)) | (1L << (ZXB_SCREEN - 113)) | (1L << (ZXB_SGN - 113)) | (1L << (ZXB_STR - 113)) | (1L << (ZXB_TAN - 113)) | (1L << (ZXB_UBOUND - 113)) | (1L << (ZXB_UCASE - 113)) | (1L << (ZXB_VAL - 113)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_operatorContext : ParserRuleContext {
		public ITerminalNode ZXB_AND() { return GetToken(ZxBasicParser.ZXB_AND, 0); }
		public ITerminalNode ZXB_BAND() { return GetToken(ZxBasicParser.ZXB_BAND, 0); }
		public ITerminalNode ZXB_BNOT() { return GetToken(ZxBasicParser.ZXB_BNOT, 0); }
		public ITerminalNode ZXB_BOR() { return GetToken(ZxBasicParser.ZXB_BOR, 0); }
		public ITerminalNode ZXB_BXOR() { return GetToken(ZxBasicParser.ZXB_BXOR, 0); }
		public ITerminalNode ZXB_MOD() { return GetToken(ZxBasicParser.ZXB_MOD, 0); }
		public ITerminalNode ZXB_NOT() { return GetToken(ZxBasicParser.ZXB_NOT, 0); }
		public ITerminalNode ZXB_OR() { return GetToken(ZxBasicParser.ZXB_OR, 0); }
		public ITerminalNode ZXB_SHL() { return GetToken(ZxBasicParser.ZXB_SHL, 0); }
		public ITerminalNode ZXB_SHR() { return GetToken(ZxBasicParser.ZXB_SHR, 0); }
		public ITerminalNode ZXB_SIN() { return GetToken(ZxBasicParser.ZXB_SIN, 0); }
		public ITerminalNode ZXB_SQR() { return GetToken(ZxBasicParser.ZXB_SQR, 0); }
		public ITerminalNode ZXB_XOR() { return GetToken(ZxBasicParser.ZXB_XOR, 0); }
		public ITerminalNode ASSIGN() { return GetToken(ZxBasicParser.ASSIGN, 0); }
		public ITerminalNode PLUS() { return GetToken(ZxBasicParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(ZxBasicParser.MINUS, 0); }
		public ITerminalNode UPARR() { return GetToken(ZxBasicParser.UPARR, 0); }
		public ITerminalNode AMP() { return GetToken(ZxBasicParser.AMP, 0); }
		public ITerminalNode ZXB_NOTEQ() { return GetToken(ZxBasicParser.ZXB_NOTEQ, 0); }
		public ITerminalNode LTOP() { return GetToken(ZxBasicParser.LTOP, 0); }
		public ITerminalNode LTEOP() { return GetToken(ZxBasicParser.LTEOP, 0); }
		public ITerminalNode GTOP() { return GetToken(ZxBasicParser.GTOP, 0); }
		public ITerminalNode GTEOP() { return GetToken(ZxBasicParser.GTEOP, 0); }
		public ITerminalNode MULOP() { return GetToken(ZxBasicParser.MULOP, 0); }
		public ITerminalNode DIVOP() { return GetToken(ZxBasicParser.DIVOP, 0); }
		public ITerminalNode LSHOP() { return GetToken(ZxBasicParser.LSHOP, 0); }
		public ITerminalNode RSHOP() { return GetToken(ZxBasicParser.RSHOP, 0); }
		public Zxb_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_operatorContext zxb_operator() {
		Zxb_operatorContext _localctx = new Zxb_operatorContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_zxb_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << PLUS) | (1L << MINUS) | (1L << UPARR) | (1L << AMP) | (1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP) | (1L << LSHOP) | (1L << RSHOP) | (1L << MULOP) | (1L << DIVOP) | (1L << ZXB_NOTEQ) | (1L << ZXB_AND) | (1L << ZXB_BAND) | (1L << ZXB_BNOT) | (1L << ZXB_BOR) | (1L << ZXB_BXOR))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (ZXB_MOD - 112)) | (1L << (ZXB_NOT - 112)) | (1L << (ZXB_OR - 112)) | (1L << (ZXB_SHL - 112)) | (1L << (ZXB_SHR - 112)) | (1L << (ZXB_SIN - 112)) | (1L << (ZXB_SQR - 112)) | (1L << (ZXB_XOR - 112)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_specialContext : ParserRuleContext {
		public ITerminalNode ZXB_ALIGN() { return GetToken(ZxBasicParser.ZXB_ALIGN, 0); }
		public ITerminalNode ZXB_ASM() { return GetToken(ZxBasicParser.ZXB_ASM, 0); }
		public Zxb_specialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_special; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_special(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_special(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_special(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_specialContext zxb_special() {
		Zxb_specialContext _localctx = new Zxb_specialContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_zxb_special);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			_la = _input.La(1);
			if ( !(_la==ZXB_ALIGN || _la==ZXB_ASM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_numberContext : ParserRuleContext {
		public ITerminalNode ZXB_BINNUM() { return GetToken(ZxBasicParser.ZXB_BINNUM, 0); }
		public ITerminalNode DECNUM() { return GetToken(ZxBasicParser.DECNUM, 0); }
		public ITerminalNode ZXB_HEXNUM() { return GetToken(ZxBasicParser.ZXB_HEXNUM, 0); }
		public ITerminalNode REALNUM() { return GetToken(ZxBasicParser.REALNUM, 0); }
		public Zxb_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_numberContext zxb_number() {
		Zxb_numberContext _localctx = new Zxb_numberContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_zxb_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_la = _input.La(1);
			if ( !(((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (DECNUM - 161)) | (1L << (REALNUM - 161)) | (1L << (ZXB_HEXNUM - 161)) | (1L << (ZXB_BINNUM - 161)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_identifierContext : ParserRuleContext {
		public ITerminalNode ZXB_IDENTIFIER() { return GetToken(ZxBasicParser.ZXB_IDENTIFIER, 0); }
		public Zxb_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_identifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_identifierContext zxb_identifier() {
		Zxb_identifierContext _localctx = new Zxb_identifierContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_zxb_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(ZXB_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_stringContext : ParserRuleContext {
		public ITerminalNode ZXB_STRING() { return GetToken(ZxBasicParser.ZXB_STRING, 0); }
		public Zxb_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_stringContext zxb_string() {
		Zxb_stringContext _localctx = new Zxb_stringContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_zxb_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(ZXB_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_commentContext : ParserRuleContext {
		public Zxb_block_commentContext zxb_block_comment() {
			return GetRuleContext<Zxb_block_commentContext>(0);
		}
		public Zxb_line_commentContext zxb_line_comment() {
			return GetRuleContext<Zxb_line_commentContext>(0);
		}
		public Zxb_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_comment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_comment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_comment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_commentContext zxb_comment() {
		Zxb_commentContext _localctx = new Zxb_commentContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_zxb_comment);
		try {
			State = 111;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ZXB_BLOCK_COMMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109; zxb_block_comment();
				}
				break;
			case ZXB_LINE_COMMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110; zxb_line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_block_commentContext : ParserRuleContext {
		public ITerminalNode ZXB_BLOCK_COMMENT() { return GetToken(ZxBasicParser.ZXB_BLOCK_COMMENT, 0); }
		public Zxb_block_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_block_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_block_comment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_block_comment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_block_comment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_block_commentContext zxb_block_comment() {
		Zxb_block_commentContext _localctx = new Zxb_block_commentContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_zxb_block_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(ZXB_BLOCK_COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zxb_line_commentContext : ParserRuleContext {
		public ITerminalNode ZXB_LINE_COMMENT() { return GetToken(ZxBasicParser.ZXB_LINE_COMMENT, 0); }
		public Zxb_line_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zxb_line_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterZxb_line_comment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitZxb_line_comment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZxb_line_comment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zxb_line_commentContext zxb_line_comment() {
		Zxb_line_commentContext _localctx = new Zxb_line_commentContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_zxb_line_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(ZXB_LINE_COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asm_sectionContext : ParserRuleContext {
		public AsmlineContext[] asmline() {
			return GetRuleContexts<AsmlineContext>();
		}
		public AsmlineContext asmline(int i) {
			return GetRuleContext<AsmlineContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(ZxBasicParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(ZxBasicParser.NEWLINE, i);
		}
		public Asm_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asm_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterAsm_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitAsm_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsm_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asm_sectionContext asm_section() {
		Asm_sectionContext _localctx = new Asm_sectionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_asm_section);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 117; Match(NEWLINE);
				}
				}
				State = 122;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 123; asmline();
			State = 132;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 125;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 124; Match(NEWLINE);
						}
						}
						State = 127;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 129; asmline();
					}
					} 
				}
				State = 134;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmlineContext : ParserRuleContext {
		public ITerminalNode[] DECNUM() { return GetTokens(ZxBasicParser.DECNUM); }
		public ITerminalNode DECNUM(int i) {
			return GetToken(ZxBasicParser.DECNUM, i);
		}
		public AsmlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.EnterAsmline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZxBasicListener typedListener = listener as IZxBasicListener;
			if (typedListener != null) typedListener.ExitAsmline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZxBasicVisitor<TResult> typedVisitor = visitor as IZxBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsmline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsmlineContext asmline() {
		AsmlineContext _localctx = new AsmlineContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_asmline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 135; Match(DECNUM);
				}
				}
				State = 138;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==DECNUM );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xBB\x8F\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x5\x2"+
		"*\n\x2\x3\x2\x3\x2\a\x2.\n\x2\f\x2\xE\x2\x31\v\x2\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x3\x5\x3\x38\n\x3\x3\x4\a\x4;\n\x4\f\x4\xE\x4>\v\x4\x3\x4\x3\x4"+
		"\x6\x4\x42\n\x4\r\x4\xE\x4\x43\x5\x4\x46\n\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5Q\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x6"+
		"\x6W\n\x6\r\x6\xE\x6X\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3"+
		"\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3"+
		"\x10\x5\x10r\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\a\x13y\n\x13\f\x13"+
		"\xE\x13|\v\x13\x3\x13\x3\x13\x6\x13\x80\n\x13\r\x13\xE\x13\x81\x3\x13"+
		"\a\x13\x85\n\x13\f\x13\xE\x13\x88\v\x13\x3\x14\x6\x14\x8B\n\x14\r\x14"+
		"\xE\x14\x8C\x3\x14\x2\x2\x2\x15\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2"+
		"\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2"+
		"&\x2\x2\a\x1A\x2\x38\x38?\x44GHJKNVX[_`\x63\x63\x65\x65ijmmpqttwz|}\x7F"+
		"\x7F\x81\x81\x86\x8A\x8C\x8C\x93\x95\x97\x97\x99\x9A\x9D\x9D\x9F\xA1\x1B"+
		"\x2\x31\x32\x35\x35\x37\x37\x39:\x45\x46IILMWW\\]\x61\x62\x64\x64\x66"+
		"hklnoss{{~~\x80\x80\x82\x85\x8B\x8B\x8D\x8E\x96\x96\x98\x98\x9B\x9C\x9E"+
		"\x9E\r\x2\xE\xE\x14\x15\x17\x18\x1D$..\x33\x33;>rruv\x8F\x92\xA2\xA2\x4"+
		"\x2\x34\x34\x36\x36\x3\x2\xA3\xA6\x90\x2/\x3\x2\x2\x2\x4\x37\x3\x2\x2"+
		"\x2\x6\x45\x3\x2\x2\x2\bP\x3\x2\x2\x2\nR\x3\x2\x2\x2\f\\\x3\x2\x2\x2\xE"+
		"^\x3\x2\x2\x2\x10\x61\x3\x2\x2\x2\x12\x63\x3\x2\x2\x2\x14\x65\x3\x2\x2"+
		"\x2\x16g\x3\x2\x2\x2\x18i\x3\x2\x2\x2\x1Ak\x3\x2\x2\x2\x1Cm\x3\x2\x2\x2"+
		"\x1Eq\x3\x2\x2\x2 s\x3\x2\x2\x2\"u\x3\x2\x2\x2$z\x3\x2\x2\x2&\x8A\x3\x2"+
		"\x2\x2(*\x5\x4\x3\x2)(\x3\x2\x2\x2)*\x3\x2\x2\x2*+\x3\x2\x2\x2+.\x5\x6"+
		"\x4\x2,.\x5\n\x6\x2-)\x3\x2\x2\x2-,\x3\x2\x2\x2.\x31\x3\x2\x2\x2/-\x3"+
		"\x2\x2\x2/\x30\x3\x2\x2\x2\x30\x32\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x32\x33"+
		"\a\x2\x2\x3\x33\x3\x3\x2\x2\x2\x34\x38\a\xA3\x2\x2\x35\x36\a\xA7\x2\x2"+
		"\x36\x38\a\x5\x2\x2\x37\x34\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x38\x5\x3"+
		"\x2\x2\x2\x39;\x5\b\x5\x2:\x39\x3\x2\x2\x2;>\x3\x2\x2\x2<:\x3\x2\x2\x2"+
		"<=\x3\x2\x2\x2=?\x3\x2\x2\x2><\x3\x2\x2\x2?\x46\a\xAB\x2\x2@\x42\x5\b"+
		"\x5\x2\x41@\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43\x44"+
		"\x3\x2\x2\x2\x44\x46\x3\x2\x2\x2\x45<\x3\x2\x2\x2\x45\x41\x3\x2\x2\x2"+
		"\x46\a\x3\x2\x2\x2GQ\x5\x10\t\x2HQ\x5\x12\n\x2IQ\x5\x14\v\x2JQ\x5\x16"+
		"\f\x2KQ\x5\x18\r\x2LQ\x5\x1A\xE\x2MQ\x5\x1C\xF\x2NQ\x5\x1E\x10\x2OQ\a"+
		"\xBB\x2\x2PG\x3\x2\x2\x2PH\x3\x2\x2\x2PI\x3\x2\x2\x2PJ\x3\x2\x2\x2PK\x3"+
		"\x2\x2\x2PL\x3\x2\x2\x2PM\x3\x2\x2\x2PN\x3\x2\x2\x2PO\x3\x2\x2\x2Q\t\x3"+
		"\x2\x2\x2RS\x5\f\a\x2ST\a\x4\x2\x2TV\x5$\x13\x2UW\a\x4\x2\x2VU\x3\x2\x2"+
		"\x2WX\x3\x2\x2\x2XV\x3\x2\x2\x2XY\x3\x2\x2\x2YZ\x3\x2\x2\x2Z[\x5\xE\b"+
		"\x2[\v\x3\x2\x2\x2\\]\a\x36\x2\x2]\r\x3\x2\x2\x2^_\a\x36\x2\x2_`\aU\x2"+
		"\x2`\xF\x3\x2\x2\x2\x61\x62\t\x2\x2\x2\x62\x11\x3\x2\x2\x2\x63\x64\t\x3"+
		"\x2\x2\x64\x13\x3\x2\x2\x2\x65\x66\t\x4\x2\x2\x66\x15\x3\x2\x2\x2gh\t"+
		"\x5\x2\x2h\x17\x3\x2\x2\x2ij\t\x6\x2\x2j\x19\x3\x2\x2\x2kl\a\xA7\x2\x2"+
		"l\x1B\x3\x2\x2\x2mn\a\xAA\x2\x2n\x1D\x3\x2\x2\x2or\x5 \x11\x2pr\x5\"\x12"+
		"\x2qo\x3\x2\x2\x2qp\x3\x2\x2\x2r\x1F\x3\x2\x2\x2st\a/\x2\x2t!\x3\x2\x2"+
		"\x2uv\a\x30\x2\x2v#\x3\x2\x2\x2wy\a\x4\x2\x2xw\x3\x2\x2\x2y|\x3\x2\x2"+
		"\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{}\x3\x2\x2\x2|z\x3\x2\x2\x2}\x86\x5&\x14"+
		"\x2~\x80\a\x4\x2\x2\x7F~\x3\x2\x2\x2\x80\x81\x3\x2\x2\x2\x81\x7F\x3\x2"+
		"\x2\x2\x81\x82\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\x5&\x14\x2\x84"+
		"\x7F\x3\x2\x2\x2\x85\x88\x3\x2\x2\x2\x86\x84\x3\x2\x2\x2\x86\x87\x3\x2"+
		"\x2\x2\x87%\x3\x2\x2\x2\x88\x86\x3\x2\x2\x2\x89\x8B\a\xA3\x2\x2\x8A\x89"+
		"\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2"+
		"\x2\x8D\'\x3\x2\x2\x2\x10)-/\x37<\x43\x45PXqz\x81\x86\x8C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Spect.Net.BasicParser.Generated
