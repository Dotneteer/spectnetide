<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/spectnetide/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/spectnetide/" rel="alternate" type="text/html" /><updated>2019-11-02T08:03:15+01:00</updated><id>http://localhost:4000/spectnetide/feed.xml</id><title type="html">SpectNet IDE</title><subtitle>Visual Studio 2017/2019 integrated ZX Spectrum IDE for the Community</subtitle><entry><title type="html">Use the Keyboard Tool</title><link href="http://localhost:4000/spectnetide/getting-started/use-keyboard-tool-2" rel="alternate" type="text/html" title="Use the Keyboard Tool" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/use-keyboard-tool</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/use-keyboard-tool-2">&lt;p&gt;SpectNetIDE provides a Keyboard Tool window to help you using the ZX Spectrum Keyboard. Of course, you can use your computer’s keyboard to type, but sometimes the Keyboard Tool makes your work easier.
The IDE allows you to use two keyboard layouts, ZX Spectrum 48K, and ZX Spectrum 128K (+2, +2A, +3), respectively.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/spectrum-48-keyboard.png&quot; alt=&quot;ZX Spectrum 48K keyboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/spectrum-128-keyboard.png&quot; alt=&quot;ZX Spectrum 128K keyboard&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;selecting-the-keyboard-layout&quot;&gt;Selecting the Keyboard Layout&lt;/h2&gt;

&lt;p&gt;By default, SpectNetIDE uses the layout according to your project’s machine type. Nonetheless, you can change these settings in the Tools|Options dialog within the Spect.Net IDE tab. The Keyboard Tool section contains two configuration properties.
The Keyboard layout allows you to select from the Default, Spectrum48, and Spectrum128 values. Depending on your monitor type, the original layout size may not display very well on the screen. With the Keyboard display mode property, you can change the OriginalSize value to Fit. This setting automatically resizes the keyboard as you change the size of the Keyboard tool window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/keyboard-options.png&quot; alt=&quot;ZX Spectrum keyboard options&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;keystrokes&quot;&gt;Keystrokes&lt;/h2&gt;

&lt;p&gt;To press a key in the tool window, move the mouse over the part of a particular key you want to enter and click the mouse. The tool window senses which part of the key you clicked and emulates that keystroke, applying &lt;code class=&quot;highlighter-rouge&quot;&gt;CAPS SHIFT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SYMBOL SHIFT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;EXTENDED MODE&lt;/code&gt;, as required.&lt;/p&gt;

&lt;h3 id=&quot;normal-keystroke&quot;&gt;Normal keystroke&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/normal-keystroke-48.png&quot; alt=&quot;Normal keystroke 48K&quot; /&gt;
&lt;img src=&quot;/spectnetide/assets/images/tutorials/normal-keystroke-128.png&quot; alt=&quot;Normal keystroke 128K&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The left and right mouse buttons emulate different keystroke. The left button enters the key normally, the right button imitates entering the key with &lt;code class=&quot;highlighter-rouge&quot;&gt;CAPS SHIFT&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sym-shift-keystroke&quot;&gt;SYM SHIFT keystroke&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/sym-shift-keystroke-48.png&quot; alt=&quot;SYM SHIFT keystroke 48K&quot; /&gt;
&lt;img src=&quot;/spectnetide/assets/images/tutorials/sym-shift-keystroke-128.png&quot; alt=&quot;SYM SHIFT keystroke 128K&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;extended-mode-keystroke&quot;&gt;EXTENDED MODE keystroke&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/ext-mode-keystroke-48.png&quot; alt=&quot;EXTENDED MODE keystroke 48K&quot; /&gt;
&lt;img src=&quot;/spectnetide/assets/images/tutorials/ext-mode-keystroke-128.png&quot; alt=&quot;EXTENDED MODE keystroke 128K&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;extended-mode--shift-keystroke&quot;&gt;EXTENDED MODE + SHIFT keystroke&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/ext-shift-keystroke-48.png&quot; alt=&quot;EXTENDED MODE shift keystroke 48K&quot; /&gt;
&lt;img src=&quot;/spectnetide/assets/images/tutorials/ext-shift-keystroke-128.png&quot; alt=&quot;EXTENDED MODE shift keystroke 128K&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;colors&quot;&gt;Colors&lt;/h3&gt;

&lt;p&gt;The 0…7 keys have a function to change the color of ink and/or paper. For example, key 5 sets the color to &lt;code class=&quot;highlighter-rouge&quot;&gt;CYAN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/color-keystroke-48.png&quot; alt=&quot;Color keystroke 48K&quot; /&gt;
&lt;img src=&quot;/spectnetide/assets/images/tutorials/color-keystroke-128.png&quot; alt=&quot;Color keystroke 128K&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The left mouse button sets the paper color, while the right mouse button modifies the ink color.&lt;/p&gt;

&lt;h3 id=&quot;graphic-symbols&quot;&gt;Graphic symbols&lt;/h3&gt;

&lt;p&gt;The 1…8 keys allow you to enter graphic symbols. Click the particular symbol to emulate the keystroke – left and right buttons work the same way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/graphic-keystroke-48.png&quot; alt=&quot;Graphic keystroke 48K&quot; /&gt;
&lt;img src=&quot;/spectnetide/assets/images/tutorials/graphic-keystroke-128.png&quot; alt=&quot;Graphic keystroke 128K&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: On specific computers — depending on the amount of free RAM and CPU load — you may experience that entering graphic symbols sometimes fails, or the keyboard does not return the letter mode. In such a situation, click the GRAPHICS function (above key 9) and then to the digit beside the appropriate graphic symbol.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;using-the-physical-and-virtual-keyboards-together&quot;&gt;Using the Physical and Virtual Keyboards Together&lt;/h2&gt;

&lt;p&gt;You can use the physical keyboard to type into the ZX Spectrum emulator only when the emulator tool window has the keyboard focus. When you apply keystrokes in the Keyboard tool, that window receives the focus. So to be able to use the physical keyboard again, click the ZX Spectrum emulator to shift the focus.&lt;/p&gt;</content><author><name></name></author><summary type="html">SpectNetIDE provides a Keyboard Tool window to help you using the ZX Spectrum Keyboard. Of course, you can use your computer’s keyboard to type, but sometimes the Keyboard Tool makes your work easier. The IDE allows you to use two keyboard layouts, ZX Spectrum 48K, and ZX Spectrum 128K (+2, +2A, +3), respectively.</summary></entry><entry><title type="html">The ZX Spectrum Emulator</title><link href="http://localhost:4000/spectnetide/getting-started/zx-spectrum-emulator-window-2" rel="alternate" type="text/html" title="The ZX Spectrum Emulator" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/spectum-emulator-window</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/zx-spectrum-emulator-window-2">&lt;p&gt;&lt;strong&gt;SpectNetIDE&lt;/strong&gt; would not be useful without an emulator to develop programs. The ZX Spectrum Emulator tool window shows the screen of the embedded ZX Spectrum virtual machine that runs in the background.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/run-completed-2.png&quot; alt=&quot;Spectrum Emulator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you see, the toolbar at the top of the window contains buttons to control the virtual machine.&lt;/p&gt;

&lt;h3 id=&quot;start&quot;&gt;Start&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/start-button.png&quot; alt=&quot;Start&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This button turns of the virtual machine if it stopped, or continues running it if the machine is stopped.&lt;/p&gt;

&lt;p&gt;As you see, the toolbar at the top of the window contains buttons to control the virtual machine. You can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + F5&lt;/code&gt; key as a shortcut.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: shortcut keys are available only when the focus is in one of the emulator-related tool windows, including the emulator, ZX Spectrum Memory, Z80 Disassembly, Z80 Registers, and Watch Memory tool windows. You cannot use them while you are in the code editor or in Solution Explorer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;stop&quot;&gt;Stop&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/stop-button.png&quot; alt=&quot;Stop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Immediately turns off the virtual machine (&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + M&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + S&lt;/code&gt;). It is as if you turned the hardware off.&lt;/p&gt;

&lt;h3 id=&quot;pause&quot;&gt;Pause&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/pause-button.png&quot; alt=&quot;Pause&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can pause the running virtual machine at any time. Pausing suspends the execution, and the emulator-related tool windows display the state of the virtual machine, such as the current register values, the memory contents, or the execution point in the Disassembly view.&lt;/p&gt;

&lt;p&gt;When you use step-by-step debugging, the virtual machine pauses every time it reaches a new breakpoint.&lt;/p&gt;

&lt;h3 id=&quot;restart&quot;&gt;Restart&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/restart-button.png&quot; alt=&quot;restart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Restarts the virtual machine, just as if you turned it off and on again.&lt;/p&gt;

&lt;h3 id=&quot;start-debugging&quot;&gt;Start Debugging&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/debug-button.png&quot; alt=&quot;Debug&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can start the virtual machine in debug mode (&lt;code class=&quot;highlighter-rouge&quot;&gt;F5&lt;/code&gt;). In this mode, the virtual machine pauses when it reaches a breakpoint (and the optional breakpoint condition is satisfied). If you run the virtual machine with &lt;strong&gt;Start&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + F5&lt;/code&gt;), it won’t pause at breakpoints.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The caption of the ZX Spectrum Emulator window shows the &lt;strong&gt;(Debugging)&lt;/strong&gt; label when it runs in debug mode.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;step-into&quot;&gt;Step-Into&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/step-into-button.png&quot; alt=&quot;Step-into&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While the machine is paused, the Step-Into function (&lt;code class=&quot;highlighter-rouge&quot;&gt;F11&lt;/code&gt;) executes the next Z80 instruction. If the subsequent operation is a subroutine call (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;CALL&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;RST&lt;/code&gt;), &lt;em&gt;Step-Into&lt;/em&gt; pauses at the first operation of the subroutine. Should the next one be a block instruction (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;LDIR&lt;/code&gt;), &lt;em&gt;Step-Into&lt;/em&gt; breaks after the first loop of the block. Thus, if the block takes ten iterations, you have to &lt;em&gt;Step-Into&lt;/em&gt; ten time to get to the following operation.&lt;/p&gt;

&lt;h3 id=&quot;step-over&quot;&gt;Step-Over&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/step-over-button.png&quot; alt=&quot;Step over&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step-Over&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;F10&lt;/code&gt;) works the same for most instructions as &lt;em&gt;Step-Into&lt;/em&gt;. Nonetheless, if the next operation is a &lt;code class=&quot;highlighter-rouge&quot;&gt;CALL&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;RST&lt;/code&gt;), &lt;em&gt;Step-Over&lt;/em&gt; executes the entire subroutine and pauses at the next instruction following the call. If there’s a block instruction (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;LDIR&lt;/code&gt;), &lt;em&gt;Step-Over&lt;/em&gt; breaks at the next statement, completing the entire block operation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If a subroutine call manipulates the stack and returns to somewhere else, &lt;em&gt;Step-Over&lt;/em&gt; may not pause at the location you expect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;step-out&quot;&gt;Step-Out&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/step-out-button.png&quot; alt=&quot;Sep out&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you are within a subroutine call, &lt;em&gt;Step-Out&lt;/em&gt; continues the execution flow until the current subroutine returns to the caller, and pauses the machine right after returning.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If a subroutine call manipulates the stack and returns to somewhere else, &lt;em&gt;Step-Out&lt;/em&gt; may not pause at the location you expect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;save-virtual-machine-state&quot;&gt;Save Virtual Machine State&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/save-state-button.png&quot; alt=&quot;Save state&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Any time the virtual machine is stopped, you can save its state including the CPU, memory, execution flow, devices, etc. into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.vmstate&lt;/code&gt; file.&lt;/p&gt;

&lt;h3 id=&quot;load-virtual-machine-state&quot;&gt;Load Virtual Machine State&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/load-state-button.png&quot; alt=&quot;Load state&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the virtual machine is paused, you can restore its former state by loading it from a &lt;code class=&quot;highlighter-rouge&quot;&gt;.vmstate&lt;/code&gt; file. Saving and loading the state allows you to suspend debugging between Visual Studio sessions.&lt;/p&gt;

&lt;h3 id=&quot;add-virtual-machine-state-to-the-project&quot;&gt;Add Virtual Machine State to the project&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/add-state-button.png&quot; alt=&quot;Add state&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are analyzing code, it is useful if the virtual machine state files are the part of your project so that you can handle them with the same source control procedures as other project files. You can not only save a &lt;code class=&quot;highlighter-rouge&quot;&gt;.vmstate&lt;/code&gt; file, but also add it to your project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;VmStates&lt;/code&gt; folder.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In other articles, you can find more details about working with &lt;code class=&quot;highlighter-rouge&quot;&gt;.vmstate&lt;/code&gt; files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;show-keyboard&quot;&gt;Show Keyboard&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/keyboard-button.png&quot; alt=&quot;Show keyboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click this button to show the ZX Spectrum keyboard.&lt;/p&gt;

&lt;h3 id=&quot;shadow-screen&quot;&gt;Shadow Screen&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/shadow-screen-button.png&quot; alt=&quot;Shadow Screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This toggle button turns on and off the shadow screen mode. When turned on, pausing your machine does not turn off display rendering, it goes on as if only the Z80 CPU has been paused. In this mode, you can immediately see the modifications in the screen memory and flashing works too.&lt;/p&gt;

&lt;h3 id=&quot;ula-render-point&quot;&gt;ULA Render Point&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/ula-point-button.png&quot; alt=&quot;ULA Point&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This tiggle button turns on and off displaying the ULA render point. If you turn this mode on, in the paused machine state the emulator screen displays the pixel pair being rendered by the ULA.&lt;/p&gt;

&lt;h2 id=&quot;emulator-behavior&quot;&gt;Emulator Behavior&lt;/h2&gt;

&lt;p&gt;As soon as you load a ZX Spectrum project into Visual Studio, the IDE creates a new ZX Spectrum virtual machine according to the type specified when you created the project. This machine does not run; you need to start it explicitly.&lt;/p&gt;

&lt;p&gt;Even if the ZX Spectrum Emulator tool window is closed, the virtual machine still runs in the background once you’ve started it. It halts if you explicitly stop it, close the current solutions, or exit the Visual Studio IDE.&lt;/p&gt;

&lt;p&gt;While the ZX Spectrum Emulator tool window has the focus, the IDE forward the keystrokes to the emulator that senses them as if you pressed a key on the ZX Spectrum hardware.&lt;/p&gt;</content><author><name></name></author><summary type="html">SpectNetIDE would not be useful without an emulator to develop programs. The ZX Spectrum Emulator tool window shows the screen of the embedded ZX Spectrum virtual machine that runs in the background.</summary></entry><entry><title type="html">LOAD a Program</title><link href="http://localhost:4000/spectnetide/getting-started/load-a-program-2" rel="alternate" type="text/html" title="LOAD a Program" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/load-a-program</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/load-a-program-2">&lt;p&gt;You can load a program from the tape into the memory with the &lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD &quot;&quot;&lt;/code&gt; statement. Hey, we do not have a tape, so how does SpectNetIDE know what program to load?&lt;/p&gt;

&lt;p&gt;As a part of your project, you can add tape files with standard &lt;code class=&quot;highlighter-rouge&quot;&gt;.TAP&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.TZX&lt;/code&gt; format. When the IDE creates a new ZX Spectrum project, it adds a sample tape file, &lt;code class=&quot;highlighter-rouge&quot;&gt;Welcome.tzx&lt;/code&gt;; it puts it into the &lt;code class=&quot;highlighter-rouge&quot;&gt;TapeFiles&lt;/code&gt; folder. With the Add Existing Item command of Visual Studio, you can attach more tape files to the project. The virtual machine – that runs the ZX Spectrum Emulator – can work only with a single tape file at a time. To load that one – called the default tape –, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In Solution Explorer, select the tape file you want to attach to the virtual machine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Right-click the &lt;strong&gt;Set as default tape file&lt;/strong&gt; command:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/set-default-tape-file-2.png&quot; alt=&quot;Set default tape&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The IDE marks the default tape file with bold typeface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/default-tape-file-set-2.png&quot; alt=&quot;Default tape file set&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Next time you enter the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD &quot;&quot;&lt;/code&gt;&lt;/strong&gt; statement, the virtual machine will play the newly selected tape file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/pacman-loads-2.png&quot; alt=&quot;Pacman loads&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can change the default tape file between loads while the machine runs – without stopping and restarting it.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">You can load a program from the tape into the memory with the LOAD &quot;&quot; statement. Hey, we do not have a tape, so how does SpectNetIDE know what program to load?</summary></entry><entry><title type="html">Install SpectNetIDE</title><link href="http://localhost:4000/spectnetide/getting-started/install-spectnetide-2" rel="alternate" type="text/html" title="Install SpectNetIDE" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/install-spectnetide</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/install-spectnetide-2">&lt;p&gt;&lt;strong&gt;SpectNetIDE&lt;/strong&gt; is an open source project with MIT license, and it is free to install. The ZX Spectrum IDE is implemented as a Visual Studio 2019 extension (VSIX). Thus, you can run it only on Windows.&lt;/p&gt;

&lt;p&gt;You need Visual Studio installed on your machine. You do not have to pay to get a legal license for VS, SpectNetIDE works with the free Community edition seamlessly. You can download the Visual Studio edition of your choice from its &lt;a href=&quot;https://visualstudio.microsoft.com/downloads/&quot;&gt;home page&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: Right now, there are two versions of &lt;strong&gt;SpectNetIDE&lt;/strong&gt;. The old one (v1.x), runs on Visual Studio 2017 and Visual Studio 2019. The new one (v2.x), can be installed only on Visual Studio 2019.
Though both versions can be installed simultaneously in the IDE, they do not work together, so you need to install only one of them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;removing-spectnetide-v1x&quot;&gt;Removing SpectNetIDE v1.x&lt;/h3&gt;

&lt;p&gt;If you have not installed SpectNetIDE v1.x, jump to the next section; otherwise, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select the &lt;strong&gt;Extensions → Manage Extensions&lt;/strong&gt; menu commands. It displays a dialog to handle your VS extensions. Click the Installed tab, and select SpectNetIde from the list.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/extensions-dialog-in-vs-remove.png&quot; alt=&quot;Extensions and Updates&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;Click Uninstall. Visual Studio marks the extension to remove. Now, close all open Visual Studio 2019 instances to carry on the removing process!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/confirm-vsix-remove.png&quot; alt=&quot;VSIX Remove&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Click Modify, and wait while VSIX Installer completes its operation. Next time you start the VS IDE, SpectNetIDE v1.x will not be on its extension list.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;installing-spectnetide-v2x&quot;&gt;Installing SpectNetIDE v2.x&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start Visual Studio 2019, and in its start page, click Continue without code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the &lt;strong&gt;Extensions → Manage Extensions&lt;/strong&gt; menu command. It displays a dialog to install VS extensions. Click the Online tab and type “SpectNetIDE” in the search box.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The dialog looks up the Visual Studio Marketplace and displays the SpectNetIDE extensions. Select &lt;strong&gt;SpectNetIDE 2.0&lt;/strong&gt; and click Download to start the installation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/extensions-dialog-in-vs-2.png&quot; alt=&quot;Extensions and Updates&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;The IDE prepares the downloaded package for setup. However, it will begin installing it only after you close Visual Studio.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/extension-ready-to-install-2.png&quot; alt=&quot;Ready to Install&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;When you have closed all running instances of Visual Studio, the VSIX installer automatically starts the setup. First, you have to confirm the license terms and click Modify.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/confirm-vsix-install-2.png&quot; alt=&quot;Confirm VSIX Install&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;The VSIX installer sets up the extension—it takes less than a minute—and signs when it completes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/vsix-install-completes-2.png&quot; alt=&quot;VSIX Install Completes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, SpectNetIDE is ready to use. When you start Visual Studio, in the Help|About dialog you can check it’s integrated with VS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/spectnetide-in-about-2.png&quot; alt=&quot;SpectNetIde in About&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get familiar with using the ZX Spectrum IDE, take a look at the other tutorials!&lt;/p&gt;</content><author><name></name></author><summary type="html">SpectNetIDE is an open source project with MIT license, and it is free to install. The ZX Spectrum IDE is implemented as a Visual Studio 2019 extension (VSIX). Thus, you can run it only on Windows.</summary></entry><entry><title type="html">Fast (Instant) LOAD</title><link href="http://localhost:4000/spectnetide/getting-started/fast-load-2" rel="alternate" type="text/html" title="Fast (Instant) LOAD" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/fast-load</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/fast-load-2">&lt;p&gt;I like the retro feeling of the ZX Spectrum border stripes when a program is being loaded. Today’s kids cannot imagine being patient for three to five minutes while a bigger game gets into the memory from the tape.&lt;/p&gt;

&lt;p&gt;Well, while you develop code, you probably do not the same time as you had in your childhood.&lt;/p&gt;

&lt;p&gt;SpectNetIDE provides an option to load programs instantly. Open the &lt;strong&gt;Tools|Options&lt;/strong&gt; dialog in the Visual Studio IDE, and navigate to the &lt;strong&gt;Spect.Net IDE&lt;/strong&gt; tab. Under the &lt;strong&gt;Virtual machine&lt;/strong&gt; section, you find the &lt;strong&gt;Use Fast Load&lt;/strong&gt; configuration option. Set it to &lt;strong&gt;True&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/use-fast-load-2.png&quot; alt=&quot;Use fast load&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Setting this option requires that you restart the ZX Spectrum virtual machine – fortunately not your computer :-).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next time you load a program, it happens instantly.&lt;/p&gt;

&lt;h2 id=&quot;under-the-hood&quot;&gt;Under the Hood&lt;/h2&gt;

&lt;p&gt;SpectNetIDE uses a technique called ROM hooking.&lt;/p&gt;

&lt;p&gt;The virtual machine senses that the execution flow enters into the LOAD routine within the ZX Spectrum ROM (at address &lt;strong&gt;$056C&lt;/strong&gt;), and temporarily suspends the CPU. The virtual machine executes its custom loader subroutine to get the contents of the tape file and injects the code into the memory. Then, it sets the contents of the Z80 CPU’s registers as if the original ROM routine had run successfully, and resumes the CPU as if it just returned from the ROM routine (at address &lt;strong&gt;$05E2&lt;/strong&gt;).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Fast load does not work with programs that dodge the LOAD routine in the ROM, e.g., the ones which use custom loaders. In such cases, turn off fast loading.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">I like the retro feeling of the ZX Spectrum border stripes when a program is being loaded. Today’s kids cannot imagine being patient for three to five minutes while a bigger game gets into the memory from the tape.</summary></entry><entry><title type="html">Export a Z80 Program</title><link href="http://localhost:4000/spectnetide/getting-started/export-a-z80-program-2" rel="alternate" type="text/html" title="Export a Z80 Program" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/export-a-z80-program</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/export-a-z80-program-2">&lt;p&gt;After you created your Z80 Assembler program, you can easily export it into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.TAP&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.TZX&lt;/code&gt; file so that you
could load it into a ZX Spectrum emulator, or into a real hardware, such as a ZX Spectrum Next, or ZX Spectrum
(with the help of TZXDuino or CASDuino hardware).&lt;/p&gt;

&lt;p&gt;To try how easy it is, create a simple Z80 program:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new ZX Spectrum 48 project (see details &lt;a href=&quot;/spectnetide/getting-started/create-zx-spectrum-48k-project-2.html#article&quot;&gt;here&lt;/a&gt;).
The &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CodeFiles &lt;/code&gt;&lt;/strong&gt; project of the folder contains a &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code.z80asm&lt;/code&gt;&lt;/strong&gt; file. Clear the contents of that file, and type this concise program:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;start:
    .org #8000
    ld a,3
    out (#fe),a
    jp #12a2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;In Solution Explorer, right-click the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code.z80asm&lt;/code&gt;&lt;/strong&gt; file, and invoke the &lt;strong&gt;Run Z80 program&lt;/strong&gt; command (or use the &lt;strong&gt;Ctrl+M&lt;/strong&gt;, &lt;strong&gt;Ctrl+R&lt;/strong&gt; double shortcut keys):&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/run-z80-code-command-2.png&quot; alt=&quot;Run Z80 code command&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This command compiles the Z80 assembly code to binary machine code, starts (or restarts) the Spectrum virtual machine,
injects the binary code, and runs it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/z80-code-runs-2-2.png&quot; alt=&quot;Z80 code runs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can easily export the code with these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In Solution Explorer, right-click the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code.z80asm&lt;/code&gt;&lt;/strong&gt; file, and invoke the &lt;strong&gt;Export Z80 program&lt;/strong&gt; command:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/export-z80-code-command-2.png&quot; alt=&quot;Export Z80 code command&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;The IDE pops up the &lt;strong&gt;Export Z80 Program&lt;/strong&gt; dialog:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/export-z80-program-dialog.png&quot; alt=&quot;Export Z80 code command&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can change the attributes of the exported program. The default settings of the dialog will create a loader program that automatically loads and runs the code. Beside the default options, I set the &lt;strong&gt;Add the exported tape file&lt;/strong&gt; to the project checkbox.&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Click Export.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, you can find the exported code file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Temp&lt;/code&gt; folder (&lt;code class=&quot;highlighter-rouge&quot;&gt;Code.tzx&lt;/code&gt;), and also in your project, within the &lt;code class=&quot;highlighter-rouge&quot;&gt;TapeFile&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/exported-code-in-project-2.png&quot; alt=&quot;Exported Z80 code in project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You have many other options to export your code, I will explain them in another tutorial.&lt;/p&gt;</content><author><name></name></author><summary type="html">After you created your Z80 Assembler program, you can easily export it into a .TAP or .TZX file so that you could load it into a ZX Spectrum emulator, or into a real hardware, such as a ZX Spectrum Next, or ZX Spectrum (with the help of TZXDuino or CASDuino hardware).</summary></entry><entry><title type="html">Create a ZX Spectrum 48K Project</title><link href="http://localhost:4000/spectnetide/getting-started/create-zx-spectrum-48k-project-2" rel="alternate" type="text/html" title="Create a ZX Spectrum 48K Project" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/create-a-zx-spectrum-project</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/create-zx-spectrum-48k-project-2">&lt;ol&gt;
  &lt;li&gt;Run the &lt;strong&gt;File → New → Project&lt;/strong&gt; command (Ctrl+Shift+N). In the Create a new project dialog type “ZX Spectrum” in the search box. The dialog displays the ZX Spectrum Code Discovery Project. Select this type, and click Next.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/new-zx-spectrum-project-2.png&quot; alt=&quot;New Zx Spectrum Project&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;Type MyFirstDiscovery in the Project name field, and then click Create.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/specify-project-name.png&quot; alt=&quot;Specify project info&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;The IDE displays a list of available Spectrum models. Select the first Spectrum 48K model
(PAL - Normal Speed) from the list, and click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/select-machine-type-2.png&quot; alt=&quot;Select Spectrum model&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;The IDE creates a new project with a few files and folders:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/solution-structure-2.png&quot; alt=&quot;Solution Explorer with the new project&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;File/Folder&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rom&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The folder that holds Spectrum ROMs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rom/ZxSpectrum.spconfig&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;This file stores the configuration information about the selected ZX Spectrum model&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rom/ZxSpectrum48.rom&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The binary ROM file for the Spectrum 48K model&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rom/ZxSpectrum48.disann&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Disassembly annotations for the Spectrum 48K ROM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TapeFiles&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Stores &lt;em&gt;.tzx&lt;/em&gt;, &lt;em&gt;.tap&lt;/em&gt; (and, in the future, other) tape files&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Z80CodeFiles&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The folder to put your Z80 Assembly code files in&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Z80CodeFiles/Code.z80asm&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;A simple Z80 Assembly code file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Z80UnitTests&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The folder to put your Z80 unit tests files in&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Z80UnitTests/UnitTest.z80test&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;A simple Z80 unit test file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Z80BasicFiles&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The folder to put your ZX BASIC files in&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Z80BasicFiles/UnitTest.z80test&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;A simple ZX BASIC program file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Annotations.disann&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Your custom disassembly annotations are saved into this file&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;As soon as the IDE created the project, you can discover a new submenu, &lt;strong&gt;ZX Spectrum IDE&lt;/strong&gt;, under &lt;strong&gt;Extensions&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/zx-spectrum-menu-2.png&quot; alt=&quot;ZX Spectrum IDE menu&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-the-zx-spectrum-virtual-machine&quot;&gt;Run the ZX Spectrum Virtual Machine&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Run the &lt;strong&gt;ZX Spectrum IDE|ZX Spectrum Emulator&lt;/strong&gt; command. The IDE shows up the emulator tool window.
As the title of the tool window indicates, the virtual machine is not started yet.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/machine-not-started-2.png&quot; alt=&quot;The Emulator Tool Window&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;Click the little &lt;em&gt;Play&lt;/em&gt; icon in the toolbar of the emulator to start the virtual machine.
The ZX Spectrum computer comes to life. As you resize the tool window, the emulator changes its screen size, 
accordingly.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/machine-started-2.png&quot; alt=&quot;Spectrum VM started&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Type the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD &quot;&quot;&lt;/code&gt;&lt;/strong&gt; command into the emulator. Take care that the emulator window is the active one, receiving the
keyboard focus, and press the &lt;strong&gt;J&lt;/strong&gt;, and then twice the &lt;strong&gt;Shift+P&lt;/strong&gt; keys again. With pressing &lt;strong&gt;Enter&lt;/strong&gt;, you can execute &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD &quot;&quot;&lt;/code&gt;&lt;/strong&gt;.
Th virtual machine starts loading the &lt;code class=&quot;highlighter-rouge&quot;&gt;Welcome.tzx&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/machine-loading-2.png&quot; alt=&quot;Loading a Game&quot; /&gt;&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;When the game has been loaded, type the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;&lt;/strong&gt; command into the emulator (while the emulator window is the active one, press the &lt;strong&gt;R&lt;/strong&gt; key),
and then, press &lt;strong&gt;Enter&lt;/strong&gt;. The program starts, and displays its message:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/run-completed-2.png&quot; alt=&quot;Welcome in action&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You have just scratched the surface! There are many other features you can use in the
IDE to discover the structure and internals of ZX Spectrum applications.&lt;/p&gt;</content><author><name></name></author><summary type="html">Run the File → New → Project command (Ctrl+Shift+N). In the Create a new project dialog type “ZX Spectrum” in the search box. The dialog displays the ZX Spectrum Code Discovery Project. Select this type, and click Next.</summary></entry><entry><title type="html">Create a Z80 Program</title><link href="http://localhost:4000/spectnetide/getting-started/create-a-z80-program-2" rel="alternate" type="text/html" title="Create a Z80 Program" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/create-a-z80-program</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/create-a-z80-program-2">&lt;p&gt;In this article, you will learn that SpectNetIde provides you a straightforward way to create and run Z80 assembly programs.&lt;/p&gt;

&lt;p&gt;To create your first Z80 assembly program, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new ZX Spectrum 48 project (see details &lt;a href=&quot;/spectnetide/getting-started/create-zx-spectrum-48k-project-2.html#article&quot;&gt;here&lt;/a&gt;).
The &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CodeFiles &lt;/code&gt;&lt;/strong&gt; project of the folder contains a &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code.z80asm&lt;/code&gt;&lt;/strong&gt; file:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;; Put your Z80 assembly code into code files
Start:
    .model Spectrum48
    .org #8000
    ld a,2;	      ; upper screen
    call #1601    ; open the channel
    ld hl,Message ; HL points the the message string
NextCh:
    ld a,(hl)     ; get next character
    or a
    jp z,#12a9    ; jump back to main cycle when terminated
    rst #10       ; display character
    inc hl        ; next character
    jr NextCh     ; next loop

Message:
    .dm &quot;\a\x0A\x08&quot; ; AT 10, 4
    .dm &quot;\p\x04&quot;     ; INK 4
    .dm &quot;ZX Spectrum IDE&quot;
    .db 0x00         ; terminate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;Insert these code lines right after &lt;code class=&quot;highlighter-rouge&quot;&gt;.org #8000&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	ld a,3        ; purple
	out (#fe),a   ; set the border color
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;In Solution Explorer, right-click the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code.z80asm&lt;/code&gt;&lt;/strong&gt; file, and invoke the &lt;strong&gt;Run Z80 program&lt;/strong&gt; command:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/run-z80-code-command-2.png&quot; alt=&quot;Run Z80 code command&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can use the &lt;strong&gt;Ctrl+M&lt;/strong&gt;, &lt;strong&gt;Ctrl+R&lt;/strong&gt; double shortcut keys to execute the &lt;strong&gt;Run Z80 program&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This command compiles the Z80 assembly code to binary machine code, starts (or restarts) the Spectrum virtual machine,
injects the binary code, and runs it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/z80-code-runs-2.png&quot; alt=&quot;Z80 code runs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You have just created your first Z80 assembly program in SpectNetIde!&lt;/p&gt;

&lt;h2 id=&quot;errors-in-the-code&quot;&gt;Errors in the code&lt;/h2&gt;

&lt;p&gt;If you make an error – either syntax or semantic error – the SpectNetIDE assembler gives an error message. Let’s assume you make an error in the code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;; Code file
start:
    org #8000
    ld a,hl      ; &quot;hl&quot; is a semantic error
    out (#fe),a 
    jp #12a2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Z80 Assembler displays the issue in the Error List:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/compile-error.png&quot; alt=&quot;Compile error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you double click the error line, the IDE navigates you to the error line in the source code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/error-marked-in-source.png&quot; alt=&quot;Error marked in source&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-bit-longer-z80-program&quot;&gt;A Bit Longer Z80 Program&lt;/h2&gt;

&lt;p&gt;If you’re excited, you can try a bit longer Z80 code with border manipulations and delays. When you run it, the code sets the screen colors and uses the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HALT&lt;/code&gt;&lt;/strong&gt; statement to synchronized border drawing. When you start it, it runs until you press &lt;code class=&quot;highlighter-rouge&quot;&gt;SPACE&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/banner-program-runs-2.png&quot; alt=&quot;Z80 baner runs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the entire source code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;; Define symbols
LAST_K:		.equ #5c08
MAIN_EX:	.equ #12a2

Start:
    .org #8000

; Set Banner lines
SetScreen:
    call ClearScreen
    ld a,0b00_010_010
    ld b,0
    call ClearLine
    ld a,0b00_110_110
    ld b,1
    call ClearLine
    ld a,0b00_101_101
    ld b,2
    call ClearLine
    ld a,0b00_100_100
    ld b,3
    call ClearLine

; Set banner border area
Top:
    ld bc,#200
    call LongDelay
    ld a,2
    call SetBorder
    ld a,6
    call SetBorder
    ld a,5
    call SetBorder
    ld a,4
    call SetBorder
    ld a,0
    call SetBorder
    halt        ; Wait for the next interrupt
    ld hl,LAST_K
    ld a, (hl)	; put last keyboard press into A
    cp #20		; was &quot;space&quot; pressed?
    jr nz,Top	; If not, back to the cycle
    ld a,7
    call SetBorder
    jp MAIN_EX

; Sets the entire screen to black
ClearScreen:
    ld bc,24*32-1 ; #of screen attribute bytes
    ld hl,#5800 ; First attr address
    ld de,#5801 ; Next attr address
    ld (hl),0   ; Black on Black
    ldir        ; Set all attribute bytes
    ret

; A = Attr byte to set
; B = Line index
ClearLine:
    push af     ; Save A
    ld a,b      ; Multiply the line count with 32
    sla a
    sla a
    sla a
    sla a
    sla a
    ld hl,#5800 ; Calculate the attribute address
    ld d,0
    ld e,a
    add hl,de
    pop af      ; Restore A
    ld b,#20    ; Set all the 32 attribute bytes
SetAttr:
    ld (hl),a
    inc hl
    djnz SetAttr
    ret

; Sets the border color
SetBorder:
    out (#fe),a
    ld b,#86
Delay:
    djnz Delay
    ret

; Delays code execution
LongDelay:
    dec bc
    ld a,b
    or c
    jr nz,LongDelay
    ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;SpectNetIDE&lt;/strong&gt; makes it extremely simple to reuse the Z80 assembly code, as you
will learn in the next article.&lt;/p&gt;</content><author><name></name></author><summary type="html">In this article, you will learn that SpectNetIde provides you a straightforward way to create and run Z80 assembly programs.</summary></entry><entry><title type="html">Create a BASIC Program</title><link href="http://localhost:4000/spectnetide/getting-started/create-a-basic-program-2" rel="alternate" type="text/html" title="Create a BASIC Program" /><published>2019-10-01T00:00:00+02:00</published><updated>2019-10-01T00:00:00+02:00</updated><id>http://localhost:4000/spectnetide/getting-started/create-a-basic-program</id><content type="html" xml:base="http://localhost:4000/spectnetide/getting-started/create-a-basic-program-2">&lt;p&gt;In a previous tutorial, you could see how easy is to create a new ZX Spectrum program from scratch.&lt;/p&gt;

&lt;p&gt;Here, you will create and run a simple BASIC program. Although you can use the keyboard of the PC to enter a program — provided, the ZX Spectrum Emulator window has the focus — if you’re not familiar with the Spectrum keys and BASIC editor, it may frustrate you while entering the code. To avoid such chaffing, use the ZX Spectrum Keyboard tool window to enter the program.&lt;/p&gt;

&lt;p&gt;First, add this line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10 BORDER 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To enter this BASIC line, press these keys, in this order: “&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;”, “&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;”, “&lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;”, “&lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;”, “&lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt;” (of course, you do not need to click comma between the keys wrapped in double quotes)&lt;/p&gt;

&lt;p&gt;As soon as you’ve added this program line, it appears in the screen listing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/basic-line-1-2.png&quot; alt=&quot;Basic line 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, add these lines to the code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;20 BORDER 5
30 BORDER 6
40 PAUSE 1
50 GOTO 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/basic-line-2-2.png&quot; alt=&quot;Basic line 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Your first BASIC program is ready to run. Invoke the &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; command (press
&lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt;) to start this code. As you can see from the listing, 
it implements an infinite loop while changing the background color:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/basic-program-runs-2.png&quot; alt=&quot;Basic code runs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To stop the program, press the &lt;code class=&quot;highlighter-rouge&quot;&gt;SPACE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SYM SHIFT&lt;/code&gt; keys simultaneously
or click the &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; button in the ZX Spectrum Keyboard window with the right
mouse button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spectnetide/assets/images/tutorials/basic-program-stopped-2.png&quot; alt=&quot;Basic program stopped&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! It is time to move on and create a Z80 assembly program!&lt;/p&gt;</content><author><name></name></author><summary type="html">In a previous tutorial, you could see how easy is to create a new ZX Spectrum program from scratch.</summary></entry><entry><title type="html">Syntax Basics</title><link href="http://localhost:4000/spectnetide/documents/unit-testing-basics" rel="alternate" type="text/html" title="Syntax Basics" /><published>2019-01-05T00:00:00+01:00</published><updated>2019-01-05T00:00:00+01:00</updated><id>http://localhost:4000/spectnetide/documents/unit-testing-basics</id><content type="html" xml:base="http://localhost:4000/spectnetide/documents/unit-testing-basics">&lt;p&gt;&lt;strong&gt;SpectNetIde&lt;/strong&gt; provides a somple programming language to describe Z80-related unit tests. You can add the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;.z80test&lt;/code&gt; files to your project and run the test in the &lt;strong&gt;Unit Test Explorer&lt;/strong&gt; tool window. This document
treats the syntax and semantics of the language.&lt;/p&gt;

&lt;h2 id=&quot;syntax-basics&quot;&gt;Syntax Basics&lt;/h2&gt;

&lt;p&gt;The test language uses a special way of case-sensitivity. You can write the reserved
keywords on lowercase. When you refer to Z80 CPU registers or flags, you can use either with lowercase or
uppercase letters, but you cannot mix these cases. You can mix cases for identifiers, though they are
searched for a case-insensitive manner.&lt;/p&gt;

&lt;h2 id=&quot;test-structure&quot;&gt;Test Structure&lt;/h2&gt;

&lt;p&gt;A ZX Spectrum project may have zero, one, or more test files (files with &lt;code class=&quot;highlighter-rouge&quot;&gt;.z80test&lt;/code&gt; extension). Before 
running them, the engine collects all &lt;code class=&quot;highlighter-rouge&quot;&gt;.z80test&lt;/code&gt; files from the current project, and compiles them all.&lt;/p&gt;

&lt;p&gt;A single test file may contain one or more &lt;em&gt;test set&lt;/em&gt;. A test set is a collection of cohesive tests that 
all use the very same source code, as the basis of testing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;testset Introduction
{
    source &quot;../Z80CodeFiles/CodeSamples.z80asm&quot;;

    // --- Other testset attributes    

    test AddAAndBWorksAsExpected
    {
        // --- Other test attributes

        act call AddAAndB;

        assert
        {
            // --- Here we describe the test assertions
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A &lt;em&gt;test&lt;/em&gt; can have a default &lt;em&gt;act&lt;/em&gt;, such as in the sample above, or may have parameterized test cases:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// --- Wrapping test set omitted
test AddAAndBCallWorksAsExpected2
{
    params parA, parB, Z;
    case 1, 2, 0;
    case 2, 3, 0;
    case -6, 6, 1;

    arrange
    {
        a: parA;
        b: parB;
    }

    act call AddAAndB;

    assert
    {
        a == parA + parB;
        b == parB;
        .z == Z;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This test has three cases, as declared by the lines starting with the &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; keyword.
When running them, the engine substitutes the &lt;code class=&quot;highlighter-rouge&quot;&gt;parA&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;parB&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Z&lt;/code&gt; values with the
values after &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; (fore each &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To summarize:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Concept&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;test file&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;A single container for &lt;em&gt;test sets&lt;/em&gt;. Besides keeping test sets together in a single file, there’s no additional semantics.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;test set&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;A cohesive set of tests. A test set has a single source code file — this contains the code to test — shared between the test within the set.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;test&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;A single test that runs a piece of the source code to test. It may nest test cases.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;test case&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;Parameterized test. It runs the same code (although you can run different code) with the case-related parameters.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;syntax-elements&quot;&gt;Syntax Elements&lt;/h2&gt;

&lt;p&gt;The test language contains several constituting elements that you can use in many 
places within the code, such as comments, expressions, identifiers, and so on. Here 
you can learn about them.&lt;/p&gt;

&lt;h3 id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;p&gt;Comments can be single line or multi-line comments with the same syntax construct as you may 
use them in many curly-brace-languages, such as C++, Java, C#, etc.:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// --- This is a single line comment you can add to the end of the code lines

/* This is a multi-line comment the spans accross multiple lines, 
   including empty ones

*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;literals&quot;&gt;Literals&lt;/h3&gt;

&lt;p&gt;The language syntax provides these types of literals:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Decimal numbers.&lt;/strong&gt; You can use adjacent digits (0..9) to declare a decimal number. Examples:
16, 32768, 2354.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hexadecimal numbers.&lt;/strong&gt; You can use up to 4 hexadecimal digits (0..9, a..f or A..F) to declare
a hexadecimal literal. The compiler looks for one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;0x&lt;/code&gt; prefix, or one of 
the &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt; suffixes to recognize them as hexadecimal. Here are a few samples:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    #12AC
    0x12ac
    12ACh
    12acH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Binary numbers.&lt;/strong&gt; Literal starting with the one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;0b&lt;/code&gt; prefix are taken into 
account as binary literals. You can follow the prefix with up to 16 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; digits. To make
them more readable, you can separate adjacent digits with the underscore (&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;) character. These 
are all valid binary literals:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    %01011111
    0b01011111
    0b_0101_1111
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can use negative number with the minus sign in front of them. Actually, the sign is not
the part of the numeric literal, it is an operator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Characters&lt;/strong&gt;. You can put a character between double quotes (for example: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Q&quot;&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt;. You can put a series of character between double quotes (for example: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Sinclair&quot;&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are a few samples:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;This is a string. The next sample is a single character&quot;
&quot;c&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;character-and-string-escapes&quot;&gt;Character and String Escapes&lt;/h3&gt;

&lt;p&gt;ZX Spectrum has a character set with special control characters such as AT, INK, PAPER, and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SpectNetIde&lt;/strong&gt; allows you to utilize special escape sequences to define ZX Spectrum-specific characters:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Escape&lt;/th&gt;
      &lt;th&gt;Code&lt;/th&gt;
      &lt;th&gt;Character&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\i&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0x10&lt;/td&gt;
      &lt;td&gt;INK&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\p&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0x11&lt;/td&gt;
      &lt;td&gt;PAPER&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\f&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0x12&lt;/td&gt;
      &lt;td&gt;FLASH&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\b&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0x13&lt;/td&gt;
      &lt;td&gt;BRIGHT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\I&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0x14&lt;/td&gt;
      &lt;td&gt;INVERSE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\o&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0x15&lt;/td&gt;
      &lt;td&gt;OVER&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\a&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0x16&lt;/td&gt;
      &lt;td&gt;AT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\t&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0x17&lt;/td&gt;
      &lt;td&gt;TAB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\P&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0x60&lt;/td&gt;
      &lt;td&gt;pound sign&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0x7F&lt;/td&gt;
      &lt;td&gt;copyright sign&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\\&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0x5C&lt;/td&gt;
      &lt;td&gt;backslash&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\'&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0x27&lt;/td&gt;
      &lt;td&gt;single quote&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\&quot;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0x22&lt;/td&gt;
      &lt;td&gt;double quote&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\0&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0x00&lt;/td&gt;
      &lt;td&gt;binary zero&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;Observe, some of these sequences have different values than their corresponding
pairs in other languages, such as C, C++, C#, or Java.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To declare a character by its binary code, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;\xH&lt;/code&gt; or&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;\xHH&lt;/code&gt; sequences (&lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt; is a hexadecimal digit). For example, these
escape sequence pairs are equivalent:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;\i&quot;
&quot;\x10&quot;

&quot;\C by me&quot;
&quot;\x7f \x62y me&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;identifiers&quot;&gt;Identifiers&lt;/h3&gt;

&lt;p&gt;You can use identifiers to refer to labels and other constants. Identifiers must start with 
a letter (a..z or A..Z) or the underscore character (&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;). The subsequent characters 
can be digits (0..9), too. Here are a few samples:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MyCycle
ERR_NO
Cycle_4_Wait  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Theoretically, you can use as long identifiers as you want. I suggest you to make them no longer than
32 characters so that readers may read your code easily.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">SpectNetIde provides a somple programming language to describe Z80-related unit tests. You can add the .z80test files to your project and run the test in the Unit Test Explorer tool window. This document treats the syntax and semantics of the language.</summary></entry></feed>