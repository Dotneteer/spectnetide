//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dotne\source\repos\spectnetide\Assembler\AntlrZ80EvalGenerator\AntlrZ80EvalGenerator\Z80Eval.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrZ80EvalGenerator {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class Z80EvalParser : Parser {
	public const int
		WS=1, COLON=2, SCOLON=3, COMMA=4, ASSIGN=5, LPAR=6, RPAR=7, LSBRAC=8, 
		RSBRAC=9, LCBRAC=10, RCBRAC=11, QMARK=12, PLUS=13, MINUS=14, VBAR=15, 
		UPARR=16, AMP=17, EQOP=18, NEQOP=19, LTOP=20, LTEOP=21, GTOP=22, GTEOP=23, 
		LSHOP=24, RSHOP=25, MULOP=26, DIVOP=27, MODOP=28, TILDE=29, LDBRAC=30, 
		RDBRAC=31, EXCLM=32, A=33, B=34, C=35, D=36, E=37, H=38, L=39, F=40, I=41, 
		R=42, XL=43, XH=44, YL=45, YH=46, BC=47, DE=48, HL=49, SP=50, IX=51, IY=52, 
		AF=53, AF_=54, BC_=55, DE_=56, HL_=57, PC=58, WZ=59, ZF=60, NZF=61, CF=62, 
		NCF=63, POF=64, PEF=65, PF=66, MF=67, HEXNUM=68, BINNUM=69, DECNUM=70, 
		CHAR=71, IDENTIFIER=72, IDSTART=73, IDCONT=74, BYTEF=75, SBYTEF=76, CHARF=77, 
		HEX2F=78, HEX4F=79, HEX8F=80, WORDF=81, SWORDF=82, DWORDF=83, SDWORDF=84, 
		BITV8F=85, BITV16F=86, STR0F=87, STRF=88, ErrorCharacter=89;
	public const int
		RULE_compileUnit = 0, RULE_formatSpec = 1, RULE_expr = 2, RULE_orExpr = 3, 
		RULE_xorExpr = 4, RULE_andExpr = 5, RULE_equExpr = 6, RULE_relExpr = 7, 
		RULE_shiftExpr = 8, RULE_addExpr = 9, RULE_multExpr = 10, RULE_unaryExpr = 11, 
		RULE_literalExpr = 12, RULE_symbolExpr = 13, RULE_z80Spec = 14, RULE_reg8 = 15, 
		RULE_reg16 = 16, RULE_regIndirect = 17, RULE_memIndirect = 18, RULE_wordMemIndirect = 19, 
		RULE_flags = 20;
	public static readonly string[] ruleNames = {
		"compileUnit", "formatSpec", "expr", "orExpr", "xorExpr", "andExpr", "equExpr", 
		"relExpr", "shiftExpr", "addExpr", "multExpr", "unaryExpr", "literalExpr", 
		"symbolExpr", "z80Spec", "reg8", "reg16", "regIndirect", "memIndirect", 
		"wordMemIndirect", "flags"
	};

	private static readonly string[] _LiteralNames = {
		null, "' '", "':'", "';'", "','", "'='", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "'?'", "'+'", "'-'", "'|'", "'^'", "'&'", "'=='", "'!='", "'<'", 
		"'<='", "'>'", "'>='", "'<<'", "'>>'", "'*'", "'/'", "'%'", "'~'", "'{{'", 
		"'}}'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COLON", "SCOLON", "COMMA", "ASSIGN", "LPAR", "RPAR", "LSBRAC", 
		"RSBRAC", "LCBRAC", "RCBRAC", "QMARK", "PLUS", "MINUS", "VBAR", "UPARR", 
		"AMP", "EQOP", "NEQOP", "LTOP", "LTEOP", "GTOP", "GTEOP", "LSHOP", "RSHOP", 
		"MULOP", "DIVOP", "MODOP", "TILDE", "LDBRAC", "RDBRAC", "EXCLM", "A", 
		"B", "C", "D", "E", "H", "L", "F", "I", "R", "XL", "XH", "YL", "YH", "BC", 
		"DE", "HL", "SP", "IX", "IY", "AF", "AF_", "BC_", "DE_", "HL_", "PC", 
		"WZ", "ZF", "NZF", "CF", "NCF", "POF", "PEF", "PF", "MF", "HEXNUM", "BINNUM", 
		"DECNUM", "CHAR", "IDENTIFIER", "IDSTART", "IDCONT", "BYTEF", "SBYTEF", 
		"CHARF", "HEX2F", "HEX4F", "HEX8F", "WORDF", "SWORDF", "DWORDF", "SDWORDF", 
		"BITV8F", "BITV16F", "STR0F", "STRF", "ErrorCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Z80Eval.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Z80EvalParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Z80EvalParser.Eof, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FormatSpecContext formatSpec() {
			return GetRuleContext<FormatSpecContext>(0);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LSBRAC) | (1L << LCBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << EXCLM) | (1L << A) | (1L << B) | (1L << C) | (1L << D) | (1L << E) | (1L << H) | (1L << L) | (1L << F) | (1L << I) | (1L << R) | (1L << XL) | (1L << XH) | (1L << YL) | (1L << YH) | (1L << BC) | (1L << DE) | (1L << HL) | (1L << SP) | (1L << IX) | (1L << IY) | (1L << AF) | (1L << AF_) | (1L << BC_) | (1L << DE_) | (1L << HL_) | (1L << PC) | (1L << WZ) | (1L << ZF) | (1L << NZF) | (1L << CF) | (1L << NCF))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (POF - 64)) | (1L << (PEF - 64)) | (1L << (PF - 64)) | (1L << (MF - 64)) | (1L << (HEXNUM - 64)) | (1L << (BINNUM - 64)) | (1L << (DECNUM - 64)) | (1L << (CHAR - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 42; expr();
				}
			}

			State = 46;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (BYTEF - 75)) | (1L << (SBYTEF - 75)) | (1L << (CHARF - 75)) | (1L << (HEX2F - 75)) | (1L << (HEX4F - 75)) | (1L << (HEX8F - 75)) | (1L << (WORDF - 75)) | (1L << (SWORDF - 75)) | (1L << (DWORDF - 75)) | (1L << (SDWORDF - 75)) | (1L << (BITV8F - 75)) | (1L << (BITV16F - 75)) | (1L << (STR0F - 75)) | (1L << (STRF - 75)))) != 0)) {
				{
				State = 45; formatSpec();
				}
			}

			State = 48; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatSpecContext : ParserRuleContext {
		public ITerminalNode BYTEF() { return GetToken(Z80EvalParser.BYTEF, 0); }
		public ITerminalNode SBYTEF() { return GetToken(Z80EvalParser.SBYTEF, 0); }
		public ITerminalNode CHARF() { return GetToken(Z80EvalParser.CHARF, 0); }
		public ITerminalNode HEX2F() { return GetToken(Z80EvalParser.HEX2F, 0); }
		public ITerminalNode HEX4F() { return GetToken(Z80EvalParser.HEX4F, 0); }
		public ITerminalNode HEX8F() { return GetToken(Z80EvalParser.HEX8F, 0); }
		public ITerminalNode WORDF() { return GetToken(Z80EvalParser.WORDF, 0); }
		public ITerminalNode SWORDF() { return GetToken(Z80EvalParser.SWORDF, 0); }
		public ITerminalNode DWORDF() { return GetToken(Z80EvalParser.DWORDF, 0); }
		public ITerminalNode SDWORDF() { return GetToken(Z80EvalParser.SDWORDF, 0); }
		public ITerminalNode BITV8F() { return GetToken(Z80EvalParser.BITV8F, 0); }
		public ITerminalNode BITV16F() { return GetToken(Z80EvalParser.BITV16F, 0); }
		public ITerminalNode STR0F() { return GetToken(Z80EvalParser.STR0F, 0); }
		public ITerminalNode STRF() { return GetToken(Z80EvalParser.STRF, 0); }
		public FormatSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterFormatSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitFormatSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatSpecContext formatSpec() {
		FormatSpecContext _localctx = new FormatSpecContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_formatSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			_la = _input.La(1);
			if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (BYTEF - 75)) | (1L << (SBYTEF - 75)) | (1L << (CHARF - 75)) | (1L << (HEX2F - 75)) | (1L << (HEX4F - 75)) | (1L << (HEX8F - 75)) | (1L << (WORDF - 75)) | (1L << (SWORDF - 75)) | (1L << (DWORDF - 75)) | (1L << (SDWORDF - 75)) | (1L << (BITV8F - 75)) | (1L << (BITV16F - 75)) | (1L << (STR0F - 75)) | (1L << (STRF - 75)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(Z80EvalParser.QMARK, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(Z80EvalParser.COLON, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; orExpr();
			State = 58;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==QMARK) {
				{
				State = 53; Match(QMARK);
				State = 54; expr();
				State = 55; Match(COLON);
				State = 56; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		public XorExprContext[] xorExpr() {
			return GetRuleContexts<XorExprContext>();
		}
		public XorExprContext xorExpr(int i) {
			return GetRuleContext<XorExprContext>(i);
		}
		public ITerminalNode[] VBAR() { return GetTokens(Z80EvalParser.VBAR); }
		public ITerminalNode VBAR(int i) {
			return GetToken(Z80EvalParser.VBAR, i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_orExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; xorExpr();
			State = 65;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==VBAR) {
				{
				{
				State = 61; Match(VBAR);
				State = 62; xorExpr();
				}
				}
				State = 67;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorExprContext : ParserRuleContext {
		public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		public ITerminalNode[] UPARR() { return GetTokens(Z80EvalParser.UPARR); }
		public ITerminalNode UPARR(int i) {
			return GetToken(Z80EvalParser.UPARR, i);
		}
		public XorExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterXorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitXorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorExprContext xorExpr() {
		XorExprContext _localctx = new XorExprContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_xorExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; andExpr();
			State = 73;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==UPARR) {
				{
				{
				State = 69; Match(UPARR);
				State = 70; andExpr();
				}
				}
				State = 75;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		public EquExprContext[] equExpr() {
			return GetRuleContexts<EquExprContext>();
		}
		public EquExprContext equExpr(int i) {
			return GetRuleContext<EquExprContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(Z80EvalParser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(Z80EvalParser.AMP, i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; equExpr();
			State = 81;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AMP) {
				{
				{
				State = 77; Match(AMP);
				State = 78; equExpr();
				}
				}
				State = 83;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquExprContext : ParserRuleContext {
		public RelExprContext[] relExpr() {
			return GetRuleContexts<RelExprContext>();
		}
		public RelExprContext relExpr(int i) {
			return GetRuleContext<RelExprContext>(i);
		}
		public ITerminalNode[] EQOP() { return GetTokens(Z80EvalParser.EQOP); }
		public ITerminalNode EQOP(int i) {
			return GetToken(Z80EvalParser.EQOP, i);
		}
		public ITerminalNode[] NEQOP() { return GetTokens(Z80EvalParser.NEQOP); }
		public ITerminalNode NEQOP(int i) {
			return GetToken(Z80EvalParser.NEQOP, i);
		}
		public EquExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterEquExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitEquExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquExprContext equExpr() {
		EquExprContext _localctx = new EquExprContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_equExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; relExpr();
			State = 89;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==EQOP || _la==NEQOP) {
				{
				{
				State = 85;
				_la = _input.La(1);
				if ( !(_la==EQOP || _la==NEQOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 86; relExpr();
				}
				}
				State = 91;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		public ShiftExprContext[] shiftExpr() {
			return GetRuleContexts<ShiftExprContext>();
		}
		public ShiftExprContext shiftExpr(int i) {
			return GetRuleContext<ShiftExprContext>(i);
		}
		public ITerminalNode[] LTOP() { return GetTokens(Z80EvalParser.LTOP); }
		public ITerminalNode LTOP(int i) {
			return GetToken(Z80EvalParser.LTOP, i);
		}
		public ITerminalNode[] LTEOP() { return GetTokens(Z80EvalParser.LTEOP); }
		public ITerminalNode LTEOP(int i) {
			return GetToken(Z80EvalParser.LTEOP, i);
		}
		public ITerminalNode[] GTOP() { return GetTokens(Z80EvalParser.GTOP); }
		public ITerminalNode GTOP(int i) {
			return GetToken(Z80EvalParser.GTOP, i);
		}
		public ITerminalNode[] GTEOP() { return GetTokens(Z80EvalParser.GTEOP); }
		public ITerminalNode GTEOP(int i) {
			return GetToken(Z80EvalParser.GTEOP, i);
		}
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; shiftExpr();
			State = 97;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP))) != 0)) {
				{
				{
				State = 93;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 94; shiftExpr();
				}
				}
				State = 99;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ITerminalNode[] LSHOP() { return GetTokens(Z80EvalParser.LSHOP); }
		public ITerminalNode LSHOP(int i) {
			return GetToken(Z80EvalParser.LSHOP, i);
		}
		public ITerminalNode[] RSHOP() { return GetTokens(Z80EvalParser.RSHOP); }
		public ITerminalNode RSHOP(int i) {
			return GetToken(Z80EvalParser.RSHOP, i);
		}
		public ShiftExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterShiftExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitShiftExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExprContext shiftExpr() {
		ShiftExprContext _localctx = new ShiftExprContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_shiftExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; addExpr();
			State = 105;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LSHOP || _la==RSHOP) {
				{
				{
				State = 101;
				_la = _input.La(1);
				if ( !(_la==LSHOP || _la==RSHOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 102; addExpr();
				}
				}
				State = 107;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MultExprContext[] multExpr() {
			return GetRuleContexts<MultExprContext>();
		}
		public MultExprContext multExpr(int i) {
			return GetRuleContext<MultExprContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(Z80EvalParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(Z80EvalParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(Z80EvalParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(Z80EvalParser.MINUS, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_addExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; multExpr();
			State = 113;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 109;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 110; multExpr();
				}
				}
				State = 115;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExprContext : ParserRuleContext {
		public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		public ITerminalNode[] MULOP() { return GetTokens(Z80EvalParser.MULOP); }
		public ITerminalNode MULOP(int i) {
			return GetToken(Z80EvalParser.MULOP, i);
		}
		public ITerminalNode[] DIVOP() { return GetTokens(Z80EvalParser.DIVOP); }
		public ITerminalNode DIVOP(int i) {
			return GetToken(Z80EvalParser.DIVOP, i);
		}
		public ITerminalNode[] MODOP() { return GetTokens(Z80EvalParser.MODOP); }
		public ITerminalNode MODOP(int i) {
			return GetToken(Z80EvalParser.MODOP, i);
		}
		public MultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExprContext multExpr() {
		MultExprContext _localctx = new MultExprContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_multExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; unaryExpr();
			State = 121;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULOP) | (1L << DIVOP) | (1L << MODOP))) != 0)) {
				{
				{
				State = 117;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULOP) | (1L << DIVOP) | (1L << MODOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 118; unaryExpr();
				}
				}
				State = 123;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(Z80EvalParser.PLUS, 0); }
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(Z80EvalParser.MINUS, 0); }
		public ITerminalNode TILDE() { return GetToken(Z80EvalParser.TILDE, 0); }
		public ITerminalNode EXCLM() { return GetToken(Z80EvalParser.EXCLM, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80EvalParser.LPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80EvalParser.RPAR, 0); }
		public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		public SymbolExprContext symbolExpr() {
			return GetRuleContext<SymbolExprContext>(0);
		}
		public Z80SpecContext z80Spec() {
			return GetRuleContext<Z80SpecContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_unaryExpr);
		try {
			State = 139;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; Match(PLUS);
				State = 125; unaryExpr();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126; Match(MINUS);
				State = 127; unaryExpr();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 128; Match(TILDE);
				State = 129; unaryExpr();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 130; Match(EXCLM);
				State = 131; unaryExpr();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 132; Match(LPAR);
				State = 133; expr();
				State = 134; Match(RPAR);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 136; literalExpr();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 137; symbolExpr();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 138; z80Spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExprContext : ParserRuleContext {
		public ITerminalNode HEXNUM() { return GetToken(Z80EvalParser.HEXNUM, 0); }
		public ITerminalNode DECNUM() { return GetToken(Z80EvalParser.DECNUM, 0); }
		public ITerminalNode CHAR() { return GetToken(Z80EvalParser.CHAR, 0); }
		public ITerminalNode BINNUM() { return GetToken(Z80EvalParser.BINNUM, 0); }
		public LiteralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExprContext literalExpr() {
		LiteralExprContext _localctx = new LiteralExprContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_literalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			_la = _input.La(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (HEXNUM - 68)) | (1L << (BINNUM - 68)) | (1L << (DECNUM - 68)) | (1L << (CHAR - 68)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolExprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80EvalParser.IDENTIFIER, 0); }
		public SymbolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterSymbolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitSymbolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolExprContext symbolExpr() {
		SymbolExprContext _localctx = new SymbolExprContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_symbolExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Z80SpecContext : ParserRuleContext {
		public Reg8Context reg8() {
			return GetRuleContext<Reg8Context>(0);
		}
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public RegIndirectContext regIndirect() {
			return GetRuleContext<RegIndirectContext>(0);
		}
		public MemIndirectContext memIndirect() {
			return GetRuleContext<MemIndirectContext>(0);
		}
		public WordMemIndirectContext wordMemIndirect() {
			return GetRuleContext<WordMemIndirectContext>(0);
		}
		public FlagsContext flags() {
			return GetRuleContext<FlagsContext>(0);
		}
		public Z80SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_z80Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterZ80Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitZ80Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZ80Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Z80SpecContext z80Spec() {
		Z80SpecContext _localctx = new Z80SpecContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_z80Spec);
		try {
			State = 151;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case A:
			case B:
			case C:
			case D:
			case E:
			case H:
			case L:
			case F:
			case I:
			case R:
			case XL:
			case XH:
			case YL:
			case YH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; reg8();
				}
				break;
			case BC:
			case DE:
			case HL:
			case SP:
			case IX:
			case IY:
			case AF:
			case AF_:
			case BC_:
			case DE_:
			case HL_:
			case PC:
			case WZ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 146; reg16();
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 147; regIndirect();
				}
				break;
			case LSBRAC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 148; memIndirect();
				}
				break;
			case LCBRAC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 149; wordMemIndirect();
				}
				break;
			case ZF:
			case NZF:
			case CF:
			case NCF:
			case POF:
			case PEF:
			case PF:
			case MF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 150; flags();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8Context : ParserRuleContext {
		public ITerminalNode A() { return GetToken(Z80EvalParser.A, 0); }
		public ITerminalNode B() { return GetToken(Z80EvalParser.B, 0); }
		public ITerminalNode C() { return GetToken(Z80EvalParser.C, 0); }
		public ITerminalNode D() { return GetToken(Z80EvalParser.D, 0); }
		public ITerminalNode E() { return GetToken(Z80EvalParser.E, 0); }
		public ITerminalNode F() { return GetToken(Z80EvalParser.F, 0); }
		public ITerminalNode H() { return GetToken(Z80EvalParser.H, 0); }
		public ITerminalNode L() { return GetToken(Z80EvalParser.L, 0); }
		public ITerminalNode XL() { return GetToken(Z80EvalParser.XL, 0); }
		public ITerminalNode XH() { return GetToken(Z80EvalParser.XH, 0); }
		public ITerminalNode YL() { return GetToken(Z80EvalParser.YL, 0); }
		public ITerminalNode YH() { return GetToken(Z80EvalParser.YH, 0); }
		public ITerminalNode I() { return GetToken(Z80EvalParser.I, 0); }
		public ITerminalNode R() { return GetToken(Z80EvalParser.R, 0); }
		public Reg8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterReg8(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitReg8(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8Context reg8() {
		Reg8Context _localctx = new Reg8Context(_ctx, State);
		EnterRule(_localctx, 30, RULE_reg8);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A) | (1L << B) | (1L << C) | (1L << D) | (1L << E) | (1L << H) | (1L << L) | (1L << F) | (1L << I) | (1L << R) | (1L << XL) | (1L << XH) | (1L << YL) | (1L << YH))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16Context : ParserRuleContext {
		public ITerminalNode AF() { return GetToken(Z80EvalParser.AF, 0); }
		public ITerminalNode BC() { return GetToken(Z80EvalParser.BC, 0); }
		public ITerminalNode DE() { return GetToken(Z80EvalParser.DE, 0); }
		public ITerminalNode HL() { return GetToken(Z80EvalParser.HL, 0); }
		public ITerminalNode AF_() { return GetToken(Z80EvalParser.AF_, 0); }
		public ITerminalNode BC_() { return GetToken(Z80EvalParser.BC_, 0); }
		public ITerminalNode DE_() { return GetToken(Z80EvalParser.DE_, 0); }
		public ITerminalNode HL_() { return GetToken(Z80EvalParser.HL_, 0); }
		public ITerminalNode IX() { return GetToken(Z80EvalParser.IX, 0); }
		public ITerminalNode IY() { return GetToken(Z80EvalParser.IY, 0); }
		public ITerminalNode SP() { return GetToken(Z80EvalParser.SP, 0); }
		public ITerminalNode PC() { return GetToken(Z80EvalParser.PC, 0); }
		public ITerminalNode WZ() { return GetToken(Z80EvalParser.WZ, 0); }
		public Reg16Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterReg16(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitReg16(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16Context reg16() {
		Reg16Context _localctx = new Reg16Context(_ctx, State);
		EnterRule(_localctx, 32, RULE_reg16);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BC) | (1L << DE) | (1L << HL) | (1L << SP) | (1L << IX) | (1L << IY) | (1L << AF) | (1L << AF_) | (1L << BC_) | (1L << DE_) | (1L << HL_) | (1L << PC) | (1L << WZ))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegIndirectContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80EvalParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80EvalParser.RPAR, 0); }
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public RegIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterRegIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitRegIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegIndirectContext regIndirect() {
		RegIndirectContext _localctx = new RegIndirectContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_regIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(LPAR);
			{
			State = 158; reg16();
			}
			State = 159; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemIndirectContext : ParserRuleContext {
		public ITerminalNode LSBRAC() { return GetToken(Z80EvalParser.LSBRAC, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RSBRAC() { return GetToken(Z80EvalParser.RSBRAC, 0); }
		public MemIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterMemIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitMemIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemIndirectContext memIndirect() {
		MemIndirectContext _localctx = new MemIndirectContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_memIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(LSBRAC);
			State = 162; expr();
			State = 163; Match(RSBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordMemIndirectContext : ParserRuleContext {
		public ITerminalNode LCBRAC() { return GetToken(Z80EvalParser.LCBRAC, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RCBRAC() { return GetToken(Z80EvalParser.RCBRAC, 0); }
		public WordMemIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wordMemIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterWordMemIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitWordMemIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordMemIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordMemIndirectContext wordMemIndirect() {
		WordMemIndirectContext _localctx = new WordMemIndirectContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_wordMemIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(LCBRAC);
			State = 166; expr();
			State = 167; Match(RCBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlagsContext : ParserRuleContext {
		public ITerminalNode ZF() { return GetToken(Z80EvalParser.ZF, 0); }
		public ITerminalNode NZF() { return GetToken(Z80EvalParser.NZF, 0); }
		public ITerminalNode CF() { return GetToken(Z80EvalParser.CF, 0); }
		public ITerminalNode NCF() { return GetToken(Z80EvalParser.NCF, 0); }
		public ITerminalNode POF() { return GetToken(Z80EvalParser.POF, 0); }
		public ITerminalNode PEF() { return GetToken(Z80EvalParser.PEF, 0); }
		public ITerminalNode PF() { return GetToken(Z80EvalParser.PF, 0); }
		public ITerminalNode MF() { return GetToken(Z80EvalParser.MF, 0); }
		public FlagsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flags; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterFlags(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitFlags(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlags(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlagsContext flags() {
		FlagsContext _localctx = new FlagsContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_flags);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			_la = _input.La(1);
			if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (ZF - 60)) | (1L << (NZF - 60)) | (1L << (CF - 60)) | (1L << (NCF - 60)) | (1L << (POF - 60)) | (1L << (PEF - 60)) | (1L << (PF - 60)) | (1L << (MF - 60)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3[\xAE\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x3\x2\x5\x2.\n\x2\x3\x2\x5\x2\x31\n\x2\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4=\n\x4\x3\x5\x3\x5\x3"+
		"\x5\a\x5\x42\n\x5\f\x5\xE\x5\x45\v\x5\x3\x6\x3\x6\x3\x6\a\x6J\n\x6\f\x6"+
		"\xE\x6M\v\x6\x3\a\x3\a\x3\a\a\aR\n\a\f\a\xE\aU\v\a\x3\b\x3\b\x3\b\a\b"+
		"Z\n\b\f\b\xE\b]\v\b\x3\t\x3\t\x3\t\a\t\x62\n\t\f\t\xE\t\x65\v\t\x3\n\x3"+
		"\n\x3\n\a\nj\n\n\f\n\xE\nm\v\n\x3\v\x3\v\x3\v\a\vr\n\v\f\v\xE\vu\v\v\x3"+
		"\f\x3\f\x3\f\a\fz\n\f\f\f\xE\f}\v\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x8E\n\r\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x9A\n\x10\x3\x11"+
		"\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x2\x2\x2\x17"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2\x2\f\x3\x2MZ\x3\x2\x14"+
		"\x15\x3\x2\x16\x19\x3\x2\x1A\x1B\x3\x2\xF\x10\x3\x2\x1C\x1E\x3\x2\x46"+
		"I\x3\x2#\x30\x3\x2\x31=\x3\x2>\x45\xAF\x2-\x3\x2\x2\x2\x4\x34\x3\x2\x2"+
		"\x2\x6\x36\x3\x2\x2\x2\b>\x3\x2\x2\x2\n\x46\x3\x2\x2\x2\fN\x3\x2\x2\x2"+
		"\xEV\x3\x2\x2\x2\x10^\x3\x2\x2\x2\x12\x66\x3\x2\x2\x2\x14n\x3\x2\x2\x2"+
		"\x16v\x3\x2\x2\x2\x18\x8D\x3\x2\x2\x2\x1A\x8F\x3\x2\x2\x2\x1C\x91\x3\x2"+
		"\x2\x2\x1E\x99\x3\x2\x2\x2 \x9B\x3\x2\x2\x2\"\x9D\x3\x2\x2\x2$\x9F\x3"+
		"\x2\x2\x2&\xA3\x3\x2\x2\x2(\xA7\x3\x2\x2\x2*\xAB\x3\x2\x2\x2,.\x5\x6\x4"+
		"\x2-,\x3\x2\x2\x2-.\x3\x2\x2\x2.\x30\x3\x2\x2\x2/\x31\x5\x4\x3\x2\x30"+
		"/\x3\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x33\a\x2\x2"+
		"\x3\x33\x3\x3\x2\x2\x2\x34\x35\t\x2\x2\x2\x35\x5\x3\x2\x2\x2\x36<\x5\b"+
		"\x5\x2\x37\x38\a\xE\x2\x2\x38\x39\x5\x6\x4\x2\x39:\a\x4\x2\x2:;\x5\x6"+
		"\x4\x2;=\x3\x2\x2\x2<\x37\x3\x2\x2\x2<=\x3\x2\x2\x2=\a\x3\x2\x2\x2>\x43"+
		"\x5\n\x6\x2?@\a\x11\x2\x2@\x42\x5\n\x6\x2\x41?\x3\x2\x2\x2\x42\x45\x3"+
		"\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\t\x3\x2\x2\x2\x45"+
		"\x43\x3\x2\x2\x2\x46K\x5\f\a\x2GH\a\x12\x2\x2HJ\x5\f\a\x2IG\x3\x2\x2\x2"+
		"JM\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2L\v\x3\x2\x2\x2MK\x3\x2\x2\x2"+
		"NS\x5\xE\b\x2OP\a\x13\x2\x2PR\x5\xE\b\x2QO\x3\x2\x2\x2RU\x3\x2\x2\x2S"+
		"Q\x3\x2\x2\x2ST\x3\x2\x2\x2T\r\x3\x2\x2\x2US\x3\x2\x2\x2V[\x5\x10\t\x2"+
		"WX\t\x3\x2\x2XZ\x5\x10\t\x2YW\x3\x2\x2\x2Z]\x3\x2\x2\x2[Y\x3\x2\x2\x2"+
		"[\\\x3\x2\x2\x2\\\xF\x3\x2\x2\x2][\x3\x2\x2\x2^\x63\x5\x12\n\x2_`\t\x4"+
		"\x2\x2`\x62\x5\x12\n\x2\x61_\x3\x2\x2\x2\x62\x65\x3\x2\x2\x2\x63\x61\x3"+
		"\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x11\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2"+
		"\x66k\x5\x14\v\x2gh\t\x5\x2\x2hj\x5\x14\v\x2ig\x3\x2\x2\x2jm\x3\x2\x2"+
		"\x2ki\x3\x2\x2\x2kl\x3\x2\x2\x2l\x13\x3\x2\x2\x2mk\x3\x2\x2\x2ns\x5\x16"+
		"\f\x2op\t\x6\x2\x2pr\x5\x16\f\x2qo\x3\x2\x2\x2ru\x3\x2\x2\x2sq\x3\x2\x2"+
		"\x2st\x3\x2\x2\x2t\x15\x3\x2\x2\x2us\x3\x2\x2\x2v{\x5\x18\r\x2wx\t\a\x2"+
		"\x2xz\x5\x18\r\x2yw\x3\x2\x2\x2z}\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3\x2\x2"+
		"\x2|\x17\x3\x2\x2\x2}{\x3\x2\x2\x2~\x7F\a\xF\x2\x2\x7F\x8E\x5\x18\r\x2"+
		"\x80\x81\a\x10\x2\x2\x81\x8E\x5\x18\r\x2\x82\x83\a\x1F\x2\x2\x83\x8E\x5"+
		"\x18\r\x2\x84\x85\a\"\x2\x2\x85\x8E\x5\x18\r\x2\x86\x87\a\b\x2\x2\x87"+
		"\x88\x5\x6\x4\x2\x88\x89\a\t\x2\x2\x89\x8E\x3\x2\x2\x2\x8A\x8E\x5\x1A"+
		"\xE\x2\x8B\x8E\x5\x1C\xF\x2\x8C\x8E\x5\x1E\x10\x2\x8D~\x3\x2\x2\x2\x8D"+
		"\x80\x3\x2\x2\x2\x8D\x82\x3\x2\x2\x2\x8D\x84\x3\x2\x2\x2\x8D\x86\x3\x2"+
		"\x2\x2\x8D\x8A\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8C\x3\x2\x2\x2\x8E"+
		"\x19\x3\x2\x2\x2\x8F\x90\t\b\x2\x2\x90\x1B\x3\x2\x2\x2\x91\x92\aJ\x2\x2"+
		"\x92\x1D\x3\x2\x2\x2\x93\x9A\x5 \x11\x2\x94\x9A\x5\"\x12\x2\x95\x9A\x5"+
		"$\x13\x2\x96\x9A\x5&\x14\x2\x97\x9A\x5(\x15\x2\x98\x9A\x5*\x16\x2\x99"+
		"\x93\x3\x2\x2\x2\x99\x94\x3\x2\x2\x2\x99\x95\x3\x2\x2\x2\x99\x96\x3\x2"+
		"\x2\x2\x99\x97\x3\x2\x2\x2\x99\x98\x3\x2\x2\x2\x9A\x1F\x3\x2\x2\x2\x9B"+
		"\x9C\t\t\x2\x2\x9C!\x3\x2\x2\x2\x9D\x9E\t\n\x2\x2\x9E#\x3\x2\x2\x2\x9F"+
		"\xA0\a\b\x2\x2\xA0\xA1\x5\"\x12\x2\xA1\xA2\a\t\x2\x2\xA2%\x3\x2\x2\x2"+
		"\xA3\xA4\a\n\x2\x2\xA4\xA5\x5\x6\x4\x2\xA5\xA6\a\v\x2\x2\xA6\'\x3\x2\x2"+
		"\x2\xA7\xA8\a\f\x2\x2\xA8\xA9\x5\x6\x4\x2\xA9\xAA\a\r\x2\x2\xAA)\x3\x2"+
		"\x2\x2\xAB\xAC\t\v\x2\x2\xAC+\x3\x2\x2\x2\xF-\x30<\x43KS[\x63ks{\x8D\x99";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AntlrZ80EvalGenerator
