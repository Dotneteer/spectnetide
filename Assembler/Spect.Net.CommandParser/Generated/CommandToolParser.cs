//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dotne\source\repos\spectnetide\Assembler\AntlrCommandParserGenerator\AntlrCommandParserGenerator\CommandTool.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Spect.Net.CommandParser.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CommandToolParser : Parser {
	public const int
		WS=1, LESS=2, LESSEQ=3, GREAT=4, GREATEQ=5, EQ=6, MULT=7, HASH=8, ADD=9, 
		DASH=10, COLON=11, B=12, C=13, D=14, EB=15, EW=16, G=17, GS=18, H=19, 
		J=20, L=21, LW=22, M=23, P=24, R=25, RD=26, S=27, SB=28, T=29, TB=30, 
		RB=31, UB=32, XW=33, W=34, RETRIEVE=35, SECTION=36, LITERAL=37, LITCH=38, 
		OTHER=39;
	public const int
		RULE_compileUnit = 0, RULE_toolCommand = 1, RULE_gotoCommand = 2, RULE_romPageCommand = 3, 
		RULE_bankPageCommand = 4, RULE_memModeCommand = 5, RULE_labelCommand = 6, 
		RULE_commentCommand = 7, RULE_prefixCommentCommand = 8, RULE_setBreakpointCommand = 9, 
		RULE_toggleBreakpointCommand = 10, RULE_removeBreakpointCommand = 11, 
		RULE_updateBreakpointCommand = 12, RULE_eraseAllBreakpointsCommand = 13, 
		RULE_retrieveCommand = 14, RULE_literalCommand = 15, RULE_disassemblyTypeCommand = 16, 
		RULE_reDisassemblyCommand = 17, RULE_jumpCommand = 18, RULE_sectionCommand = 19, 
		RULE_addWatchCommand = 20, RULE_removeWatchCommand = 21, RULE_updateWatchCommand = 22, 
		RULE_labelWidthCommand = 23, RULE_exchangeWatchCommand = 24, RULE_eraseAllWatchCommand = 25, 
		RULE_compactCommand = 26;
	public static readonly string[] ruleNames = {
		"compileUnit", "toolCommand", "gotoCommand", "romPageCommand", "bankPageCommand", 
		"memModeCommand", "labelCommand", "commentCommand", "prefixCommentCommand", 
		"setBreakpointCommand", "toggleBreakpointCommand", "removeBreakpointCommand", 
		"updateBreakpointCommand", "eraseAllBreakpointsCommand", "retrieveCommand", 
		"literalCommand", "disassemblyTypeCommand", "reDisassemblyCommand", "jumpCommand", 
		"sectionCommand", "addWatchCommand", "removeWatchCommand", "updateWatchCommand", 
		"labelWidthCommand", "exchangeWatchCommand", "eraseAllWatchCommand", "compactCommand"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'<'", "'<='", "'>'", "'>='", "'='", "'*'", "'#'", "'+'", 
		"'-'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "LESS", "LESSEQ", "GREAT", "GREATEQ", "EQ", "MULT", "HASH", 
		"ADD", "DASH", "COLON", "B", "C", "D", "EB", "EW", "G", "GS", "H", "J", 
		"L", "LW", "M", "P", "R", "RD", "S", "SB", "T", "TB", "RB", "UB", "XW", 
		"W", "RETRIEVE", "SECTION", "LITERAL", "LITCH", "OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CommandTool.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CommandToolParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ToolCommandContext toolCommand() {
			return GetRuleContext<ToolCommandContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CommandToolParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; toolCommand();
			State = 55; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToolCommandContext : ParserRuleContext {
		public GotoCommandContext gotoCommand() {
			return GetRuleContext<GotoCommandContext>(0);
		}
		public RomPageCommandContext romPageCommand() {
			return GetRuleContext<RomPageCommandContext>(0);
		}
		public BankPageCommandContext bankPageCommand() {
			return GetRuleContext<BankPageCommandContext>(0);
		}
		public MemModeCommandContext memModeCommand() {
			return GetRuleContext<MemModeCommandContext>(0);
		}
		public LabelCommandContext labelCommand() {
			return GetRuleContext<LabelCommandContext>(0);
		}
		public CommentCommandContext commentCommand() {
			return GetRuleContext<CommentCommandContext>(0);
		}
		public PrefixCommentCommandContext prefixCommentCommand() {
			return GetRuleContext<PrefixCommentCommandContext>(0);
		}
		public SetBreakpointCommandContext setBreakpointCommand() {
			return GetRuleContext<SetBreakpointCommandContext>(0);
		}
		public ToggleBreakpointCommandContext toggleBreakpointCommand() {
			return GetRuleContext<ToggleBreakpointCommandContext>(0);
		}
		public RemoveBreakpointCommandContext removeBreakpointCommand() {
			return GetRuleContext<RemoveBreakpointCommandContext>(0);
		}
		public UpdateBreakpointCommandContext updateBreakpointCommand() {
			return GetRuleContext<UpdateBreakpointCommandContext>(0);
		}
		public EraseAllBreakpointsCommandContext eraseAllBreakpointsCommand() {
			return GetRuleContext<EraseAllBreakpointsCommandContext>(0);
		}
		public RetrieveCommandContext retrieveCommand() {
			return GetRuleContext<RetrieveCommandContext>(0);
		}
		public LiteralCommandContext literalCommand() {
			return GetRuleContext<LiteralCommandContext>(0);
		}
		public DisassemblyTypeCommandContext disassemblyTypeCommand() {
			return GetRuleContext<DisassemblyTypeCommandContext>(0);
		}
		public ReDisassemblyCommandContext reDisassemblyCommand() {
			return GetRuleContext<ReDisassemblyCommandContext>(0);
		}
		public JumpCommandContext jumpCommand() {
			return GetRuleContext<JumpCommandContext>(0);
		}
		public SectionCommandContext sectionCommand() {
			return GetRuleContext<SectionCommandContext>(0);
		}
		public AddWatchCommandContext addWatchCommand() {
			return GetRuleContext<AddWatchCommandContext>(0);
		}
		public RemoveWatchCommandContext removeWatchCommand() {
			return GetRuleContext<RemoveWatchCommandContext>(0);
		}
		public UpdateWatchCommandContext updateWatchCommand() {
			return GetRuleContext<UpdateWatchCommandContext>(0);
		}
		public LabelWidthCommandContext labelWidthCommand() {
			return GetRuleContext<LabelWidthCommandContext>(0);
		}
		public ExchangeWatchCommandContext exchangeWatchCommand() {
			return GetRuleContext<ExchangeWatchCommandContext>(0);
		}
		public EraseAllWatchCommandContext eraseAllWatchCommand() {
			return GetRuleContext<EraseAllWatchCommandContext>(0);
		}
		public CompactCommandContext compactCommand() {
			return GetRuleContext<CompactCommandContext>(0);
		}
		public ToolCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toolCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterToolCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitToolCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToolCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToolCommandContext toolCommand() {
		ToolCommandContext _localctx = new ToolCommandContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_toolCommand);
		try {
			State = 82;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case G:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; gotoCommand();
				}
				break;
			case R:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; romPageCommand();
				}
				break;
			case B:
				EnterOuterAlt(_localctx, 3);
				{
				State = 59; bankPageCommand();
				}
				break;
			case M:
				EnterOuterAlt(_localctx, 4);
				{
				State = 60; memModeCommand();
				}
				break;
			case L:
				EnterOuterAlt(_localctx, 5);
				{
				State = 61; labelCommand();
				}
				break;
			case C:
				EnterOuterAlt(_localctx, 6);
				{
				State = 62; commentCommand();
				}
				break;
			case P:
				EnterOuterAlt(_localctx, 7);
				{
				State = 63; prefixCommentCommand();
				}
				break;
			case SB:
				EnterOuterAlt(_localctx, 8);
				{
				State = 64; setBreakpointCommand();
				}
				break;
			case TB:
				EnterOuterAlt(_localctx, 9);
				{
				State = 65; toggleBreakpointCommand();
				}
				break;
			case RB:
				EnterOuterAlt(_localctx, 10);
				{
				State = 66; removeBreakpointCommand();
				}
				break;
			case UB:
				EnterOuterAlt(_localctx, 11);
				{
				State = 67; updateBreakpointCommand();
				}
				break;
			case EB:
				EnterOuterAlt(_localctx, 12);
				{
				State = 68; eraseAllBreakpointsCommand();
				}
				break;
			case RETRIEVE:
				EnterOuterAlt(_localctx, 13);
				{
				State = 69; retrieveCommand();
				}
				break;
			case D:
				EnterOuterAlt(_localctx, 14);
				{
				State = 70; literalCommand();
				}
				break;
			case T:
				EnterOuterAlt(_localctx, 15);
				{
				State = 71; disassemblyTypeCommand();
				}
				break;
			case RD:
				EnterOuterAlt(_localctx, 16);
				{
				State = 72; reDisassemblyCommand();
				}
				break;
			case J:
				EnterOuterAlt(_localctx, 17);
				{
				State = 73; jumpCommand();
				}
				break;
			case SECTION:
				EnterOuterAlt(_localctx, 18);
				{
				State = 74; sectionCommand();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 19);
				{
				State = 75; addWatchCommand();
				}
				break;
			case DASH:
				EnterOuterAlt(_localctx, 20);
				{
				State = 76; removeWatchCommand();
				}
				break;
			case MULT:
				EnterOuterAlt(_localctx, 21);
				{
				State = 77; updateWatchCommand();
				}
				break;
			case LW:
				EnterOuterAlt(_localctx, 22);
				{
				State = 78; labelWidthCommand();
				}
				break;
			case XW:
				EnterOuterAlt(_localctx, 23);
				{
				State = 79; exchangeWatchCommand();
				}
				break;
			case EW:
				EnterOuterAlt(_localctx, 24);
				{
				State = 80; eraseAllWatchCommand();
				}
				break;
			case LITERAL:
				EnterOuterAlt(_localctx, 25);
				{
				State = 81; compactCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoCommandContext : ParserRuleContext {
		public ITerminalNode G() { return GetToken(CommandToolParser.G, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public GotoCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterGotoCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitGotoCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoCommandContext gotoCommand() {
		GotoCommandContext _localctx = new GotoCommandContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_gotoCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(G);
			State = 86;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 85; Match(WS);
				}
			}

			State = 88; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RomPageCommandContext : ParserRuleContext {
		public ITerminalNode R() { return GetToken(CommandToolParser.R, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public RomPageCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_romPageCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterRomPageCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitRomPageCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRomPageCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RomPageCommandContext romPageCommand() {
		RomPageCommandContext _localctx = new RomPageCommandContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_romPageCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(R);
			State = 92;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 91; Match(WS);
				}
			}

			State = 94; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BankPageCommandContext : ParserRuleContext {
		public ITerminalNode B() { return GetToken(CommandToolParser.B, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public BankPageCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bankPageCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterBankPageCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitBankPageCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBankPageCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BankPageCommandContext bankPageCommand() {
		BankPageCommandContext _localctx = new BankPageCommandContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_bankPageCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(B);
			State = 98;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 97; Match(WS);
				}
			}

			State = 100; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemModeCommandContext : ParserRuleContext {
		public ITerminalNode M() { return GetToken(CommandToolParser.M, 0); }
		public MemModeCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memModeCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterMemModeCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitMemModeCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemModeCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemModeCommandContext memModeCommand() {
		MemModeCommandContext _localctx = new MemModeCommandContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_memModeCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(M);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelCommandContext : ParserRuleContext {
		public ITerminalNode L() { return GetToken(CommandToolParser.L, 0); }
		public ITerminalNode[] LITERAL() { return GetTokens(CommandToolParser.LITERAL); }
		public ITerminalNode LITERAL(int i) {
			return GetToken(CommandToolParser.LITERAL, i);
		}
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public LabelCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterLabelCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitLabelCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelCommandContext labelCommand() {
		LabelCommandContext _localctx = new LabelCommandContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_labelCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(L);
			State = 106;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 105; Match(WS);
				}
			}

			State = 108; Match(LITERAL);
			State = 111;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 109; Match(WS);
				State = 110; Match(LITERAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentCommandContext : ParserRuleContext {
		public ITerminalNode C() { return GetToken(CommandToolParser.C, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public CommentCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterCommentCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitCommentCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentCommandContext commentCommand() {
		CommentCommandContext _localctx = new CommentCommandContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_commentCommand);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(C);
			State = 115;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 114; Match(WS);
				}
			}

			State = 117; Match(LITERAL);
			State = 119;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 118; Match(WS);
				}
				break;
			}
			State = 124;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 121;
					MatchWildcard();
					}
					} 
				}
				State = 126;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixCommentCommandContext : ParserRuleContext {
		public ITerminalNode P() { return GetToken(CommandToolParser.P, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public PrefixCommentCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixCommentCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterPrefixCommentCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitPrefixCommentCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixCommentCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixCommentCommandContext prefixCommentCommand() {
		PrefixCommentCommandContext _localctx = new PrefixCommentCommandContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_prefixCommentCommand);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(P);
			State = 129;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 128; Match(WS);
				}
			}

			State = 131; Match(LITERAL);
			State = 133;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 132; Match(WS);
				}
				break;
			}
			State = 138;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 135;
					MatchWildcard();
					}
					} 
				}
				State = 140;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetBreakpointCommandContext : ParserRuleContext {
		public ITerminalNode SB() { return GetToken(CommandToolParser.SB, 0); }
		public ITerminalNode[] LITERAL() { return GetTokens(CommandToolParser.LITERAL); }
		public ITerminalNode LITERAL(int i) {
			return GetToken(CommandToolParser.LITERAL, i);
		}
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public ITerminalNode H() { return GetToken(CommandToolParser.H, 0); }
		public ITerminalNode C() { return GetToken(CommandToolParser.C, 0); }
		public ITerminalNode LESS() { return GetToken(CommandToolParser.LESS, 0); }
		public ITerminalNode LESSEQ() { return GetToken(CommandToolParser.LESSEQ, 0); }
		public ITerminalNode GREAT() { return GetToken(CommandToolParser.GREAT, 0); }
		public ITerminalNode GREATEQ() { return GetToken(CommandToolParser.GREATEQ, 0); }
		public ITerminalNode EQ() { return GetToken(CommandToolParser.EQ, 0); }
		public ITerminalNode MULT() { return GetToken(CommandToolParser.MULT, 0); }
		public SetBreakpointCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setBreakpointCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterSetBreakpointCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitSetBreakpointCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetBreakpointCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetBreakpointCommandContext setBreakpointCommand() {
		SetBreakpointCommandContext _localctx = new SetBreakpointCommandContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_setBreakpointCommand);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(SB);
			State = 143;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 142; Match(WS);
				}
			}

			State = 145; Match(LITERAL);
			State = 156;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 146; Match(WS);
				State = 147; Match(H);
				State = 149;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 148; Match(WS);
					}
				}

				State = 151;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS) | (1L << LESSEQ) | (1L << GREAT) | (1L << GREATEQ) | (1L << EQ) | (1L << MULT))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 153;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 152; Match(WS);
					}
				}

				State = 155; Match(LITERAL);
				}
				break;
			}
			State = 167;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 158; Match(WS);
				State = 159; Match(C);
				State = 160; Match(WS);
				State = 164;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 161;
						MatchWildcard();
						}
						} 
					}
					State = 166;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToggleBreakpointCommandContext : ParserRuleContext {
		public ITerminalNode TB() { return GetToken(CommandToolParser.TB, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public ToggleBreakpointCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toggleBreakpointCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterToggleBreakpointCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitToggleBreakpointCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToggleBreakpointCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToggleBreakpointCommandContext toggleBreakpointCommand() {
		ToggleBreakpointCommandContext _localctx = new ToggleBreakpointCommandContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_toggleBreakpointCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(TB);
			State = 171;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 170; Match(WS);
				}
			}

			State = 173; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveBreakpointCommandContext : ParserRuleContext {
		public ITerminalNode RB() { return GetToken(CommandToolParser.RB, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public RemoveBreakpointCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeBreakpointCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterRemoveBreakpointCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitRemoveBreakpointCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveBreakpointCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveBreakpointCommandContext removeBreakpointCommand() {
		RemoveBreakpointCommandContext _localctx = new RemoveBreakpointCommandContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_removeBreakpointCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(RB);
			State = 177;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 176; Match(WS);
				}
			}

			State = 179; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBreakpointCommandContext : ParserRuleContext {
		public ITerminalNode UB() { return GetToken(CommandToolParser.UB, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public UpdateBreakpointCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBreakpointCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterUpdateBreakpointCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitUpdateBreakpointCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBreakpointCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBreakpointCommandContext updateBreakpointCommand() {
		UpdateBreakpointCommandContext _localctx = new UpdateBreakpointCommandContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_updateBreakpointCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(UB);
			State = 183;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 182; Match(WS);
				}
			}

			State = 185; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseAllBreakpointsCommandContext : ParserRuleContext {
		public ITerminalNode EB() { return GetToken(CommandToolParser.EB, 0); }
		public EraseAllBreakpointsCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseAllBreakpointsCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterEraseAllBreakpointsCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitEraseAllBreakpointsCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseAllBreakpointsCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseAllBreakpointsCommandContext eraseAllBreakpointsCommand() {
		EraseAllBreakpointsCommandContext _localctx = new EraseAllBreakpointsCommandContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_eraseAllBreakpointsCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(EB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetrieveCommandContext : ParserRuleContext {
		public ITerminalNode RETRIEVE() { return GetToken(CommandToolParser.RETRIEVE, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public RetrieveCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retrieveCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterRetrieveCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitRetrieveCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetrieveCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetrieveCommandContext retrieveCommand() {
		RetrieveCommandContext _localctx = new RetrieveCommandContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_retrieveCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(RETRIEVE);
			State = 191;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 190; Match(WS);
				}
			}

			State = 193; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralCommandContext : ParserRuleContext {
		public ITerminalNode D() { return GetToken(CommandToolParser.D, 0); }
		public ITerminalNode[] LITERAL() { return GetTokens(CommandToolParser.LITERAL); }
		public ITerminalNode LITERAL(int i) {
			return GetToken(CommandToolParser.LITERAL, i);
		}
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public ITerminalNode HASH() { return GetToken(CommandToolParser.HASH, 0); }
		public LiteralCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterLiteralCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitLiteralCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralCommandContext literalCommand() {
		LiteralCommandContext _localctx = new LiteralCommandContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_literalCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(D);
			State = 197;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 196; Match(WS);
				}
			}

			State = 199; Match(LITERAL);
			State = 202;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 200; Match(WS);
				State = 201;
				_la = _input.La(1);
				if ( !(_la==HASH || _la==LITERAL) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisassemblyTypeCommandContext : ParserRuleContext {
		public ITerminalNode T() { return GetToken(CommandToolParser.T, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public DisassemblyTypeCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disassemblyTypeCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterDisassemblyTypeCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitDisassemblyTypeCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisassemblyTypeCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisassemblyTypeCommandContext disassemblyTypeCommand() {
		DisassemblyTypeCommandContext _localctx = new DisassemblyTypeCommandContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_disassemblyTypeCommand);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(T);
			State = 206;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 205; Match(WS);
				}
				break;
			}
			State = 211;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 208;
					MatchWildcard();
					}
					} 
				}
				State = 213;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReDisassemblyCommandContext : ParserRuleContext {
		public ITerminalNode RD() { return GetToken(CommandToolParser.RD, 0); }
		public ReDisassemblyCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reDisassemblyCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterReDisassemblyCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitReDisassemblyCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReDisassemblyCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReDisassemblyCommandContext reDisassemblyCommand() {
		ReDisassemblyCommandContext _localctx = new ReDisassemblyCommandContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_reDisassemblyCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(RD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpCommandContext : ParserRuleContext {
		public ITerminalNode J() { return GetToken(CommandToolParser.J, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public JumpCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterJumpCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitJumpCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpCommandContext jumpCommand() {
		JumpCommandContext _localctx = new JumpCommandContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_jumpCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(J);
			State = 218;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 217; Match(WS);
				}
			}

			State = 220; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionCommandContext : ParserRuleContext {
		public ITerminalNode SECTION() { return GetToken(CommandToolParser.SECTION, 0); }
		public ITerminalNode[] LITERAL() { return GetTokens(CommandToolParser.LITERAL); }
		public ITerminalNode LITERAL(int i) {
			return GetToken(CommandToolParser.LITERAL, i);
		}
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public SectionCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sectionCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterSectionCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitSectionCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSectionCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionCommandContext sectionCommand() {
		SectionCommandContext _localctx = new SectionCommandContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_sectionCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(SECTION);
			State = 224;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 223; Match(WS);
				}
			}

			State = 226; Match(LITERAL);
			State = 227; Match(WS);
			State = 228; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddWatchCommandContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(CommandToolParser.ADD, 0); }
		public AddWatchCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addWatchCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterAddWatchCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitAddWatchCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddWatchCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddWatchCommandContext addWatchCommand() {
		AddWatchCommandContext _localctx = new AddWatchCommandContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_addWatchCommand);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(ADD);
			State = 234;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 231;
					MatchWildcard();
					}
					} 
				}
				State = 236;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveWatchCommandContext : ParserRuleContext {
		public ITerminalNode DASH() { return GetToken(CommandToolParser.DASH, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public RemoveWatchCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeWatchCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterRemoveWatchCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitRemoveWatchCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveWatchCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveWatchCommandContext removeWatchCommand() {
		RemoveWatchCommandContext _localctx = new RemoveWatchCommandContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_removeWatchCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(DASH);
			State = 239;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 238; Match(WS);
				}
			}

			State = 241; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateWatchCommandContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(CommandToolParser.MULT, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public UpdateWatchCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateWatchCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterUpdateWatchCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitUpdateWatchCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateWatchCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateWatchCommandContext updateWatchCommand() {
		UpdateWatchCommandContext _localctx = new UpdateWatchCommandContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_updateWatchCommand);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(MULT);
			State = 245;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 244; Match(WS);
				}
			}

			State = 247; Match(LITERAL);
			State = 251;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 248;
					MatchWildcard();
					}
					} 
				}
				State = 253;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelWidthCommandContext : ParserRuleContext {
		public ITerminalNode LW() { return GetToken(CommandToolParser.LW, 0); }
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public ITerminalNode WS() { return GetToken(CommandToolParser.WS, 0); }
		public LabelWidthCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelWidthCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterLabelWidthCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitLabelWidthCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelWidthCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelWidthCommandContext labelWidthCommand() {
		LabelWidthCommandContext _localctx = new LabelWidthCommandContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_labelWidthCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(LW);
			State = 256;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 255; Match(WS);
				}
			}

			State = 258; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExchangeWatchCommandContext : ParserRuleContext {
		public ITerminalNode XW() { return GetToken(CommandToolParser.XW, 0); }
		public ITerminalNode[] LITERAL() { return GetTokens(CommandToolParser.LITERAL); }
		public ITerminalNode LITERAL(int i) {
			return GetToken(CommandToolParser.LITERAL, i);
		}
		public ITerminalNode[] WS() { return GetTokens(CommandToolParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CommandToolParser.WS, i);
		}
		public ExchangeWatchCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exchangeWatchCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterExchangeWatchCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitExchangeWatchCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExchangeWatchCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExchangeWatchCommandContext exchangeWatchCommand() {
		ExchangeWatchCommandContext _localctx = new ExchangeWatchCommandContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_exchangeWatchCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; Match(XW);
			State = 262;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 261; Match(WS);
				}
			}

			State = 264; Match(LITERAL);
			State = 265; Match(WS);
			State = 266; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseAllWatchCommandContext : ParserRuleContext {
		public ITerminalNode EW() { return GetToken(CommandToolParser.EW, 0); }
		public EraseAllWatchCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseAllWatchCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterEraseAllWatchCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitEraseAllWatchCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseAllWatchCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseAllWatchCommandContext eraseAllWatchCommand() {
		EraseAllWatchCommandContext _localctx = new EraseAllWatchCommandContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_eraseAllWatchCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(EW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompactCommandContext : ParserRuleContext {
		public ITerminalNode LITERAL() { return GetToken(CommandToolParser.LITERAL, 0); }
		public CompactCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compactCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.EnterCompactCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommandToolListener typedListener = listener as ICommandToolListener;
			if (typedListener != null) typedListener.ExitCompactCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommandToolVisitor<TResult> typedVisitor = visitor as ICommandToolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompactCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompactCommandContext compactCommand() {
		CompactCommandContext _localctx = new CompactCommandContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_compactCommand);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; Match(LITERAL);
			State = 274;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 271;
					MatchWildcard();
					}
					} 
				}
				State = 276;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3)\x118\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3U\n\x3\x3\x4\x3"+
		"\x4\x5\x4Y\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x5\x5_\n\x5\x3\x5\x3\x5\x3\x6"+
		"\x3\x6\x5\x6\x65\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x5\bm\n\b\x3\b\x3"+
		"\b\x3\b\x5\br\n\b\x3\t\x3\t\x5\tv\n\t\x3\t\x3\t\x5\tz\n\t\x3\t\a\t}\n"+
		"\t\f\t\xE\t\x80\v\t\x3\n\x3\n\x5\n\x84\n\n\x3\n\x3\n\x5\n\x88\n\n\x3\n"+
		"\a\n\x8B\n\n\f\n\xE\n\x8E\v\n\x3\v\x3\v\x5\v\x92\n\v\x3\v\x3\v\x3\v\x3"+
		"\v\x5\v\x98\n\v\x3\v\x3\v\x5\v\x9C\n\v\x3\v\x5\v\x9F\n\v\x3\v\x3\v\x3"+
		"\v\x3\v\a\v\xA5\n\v\f\v\xE\v\xA8\v\v\x5\v\xAA\n\v\x3\f\x3\f\x5\f\xAE\n"+
		"\f\x3\f\x3\f\x3\r\x3\r\x5\r\xB4\n\r\x3\r\x3\r\x3\xE\x3\xE\x5\xE\xBA\n"+
		"\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x5\x10\xC2\n\x10\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x5\x11\xC8\n\x11\x3\x11\x3\x11\x3\x11\x5\x11\xCD\n\x11"+
		"\x3\x12\x3\x12\x5\x12\xD1\n\x12\x3\x12\a\x12\xD4\n\x12\f\x12\xE\x12\xD7"+
		"\v\x12\x3\x13\x3\x13\x3\x14\x3\x14\x5\x14\xDD\n\x14\x3\x14\x3\x14\x3\x15"+
		"\x3\x15\x5\x15\xE3\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\a\x16"+
		"\xEB\n\x16\f\x16\xE\x16\xEE\v\x16\x3\x17\x3\x17\x5\x17\xF2\n\x17\x3\x17"+
		"\x3\x17\x3\x18\x3\x18\x5\x18\xF8\n\x18\x3\x18\x3\x18\a\x18\xFC\n\x18\f"+
		"\x18\xE\x18\xFF\v\x18\x3\x19\x3\x19\x5\x19\x103\n\x19\x3\x19\x3\x19\x3"+
		"\x1A\x3\x1A\x5\x1A\x109\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B"+
		"\x3\x1C\x3\x1C\a\x1C\x113\n\x1C\f\x1C\xE\x1C\x116\v\x1C\x3\x1C\t~\x8C"+
		"\xA6\xD5\xEC\xFD\x114\x2\x2\x1D\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2"+
		"\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2"+
		"&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x2\x4\x3\x2\x4\t\x4\x2"+
		"\n\n\'\'\x136\x2\x38\x3\x2\x2\x2\x4T\x3\x2\x2\x2\x6V\x3\x2\x2\x2\b\\\x3"+
		"\x2\x2\x2\n\x62\x3\x2\x2\x2\fh\x3\x2\x2\x2\xEj\x3\x2\x2\x2\x10s\x3\x2"+
		"\x2\x2\x12\x81\x3\x2\x2\x2\x14\x8F\x3\x2\x2\x2\x16\xAB\x3\x2\x2\x2\x18"+
		"\xB1\x3\x2\x2\x2\x1A\xB7\x3\x2\x2\x2\x1C\xBD\x3\x2\x2\x2\x1E\xBF\x3\x2"+
		"\x2\x2 \xC5\x3\x2\x2\x2\"\xCE\x3\x2\x2\x2$\xD8\x3\x2\x2\x2&\xDA\x3\x2"+
		"\x2\x2(\xE0\x3\x2\x2\x2*\xE8\x3\x2\x2\x2,\xEF\x3\x2\x2\x2.\xF5\x3\x2\x2"+
		"\x2\x30\x100\x3\x2\x2\x2\x32\x106\x3\x2\x2\x2\x34\x10E\x3\x2\x2\x2\x36"+
		"\x110\x3\x2\x2\x2\x38\x39\x5\x4\x3\x2\x39:\a\x2\x2\x3:\x3\x3\x2\x2\x2"+
		";U\x5\x6\x4\x2<U\x5\b\x5\x2=U\x5\n\x6\x2>U\x5\f\a\x2?U\x5\xE\b\x2@U\x5"+
		"\x10\t\x2\x41U\x5\x12\n\x2\x42U\x5\x14\v\x2\x43U\x5\x16\f\x2\x44U\x5\x18"+
		"\r\x2\x45U\x5\x1A\xE\x2\x46U\x5\x1C\xF\x2GU\x5\x1E\x10\x2HU\x5 \x11\x2"+
		"IU\x5\"\x12\x2JU\x5$\x13\x2KU\x5&\x14\x2LU\x5(\x15\x2MU\x5*\x16\x2NU\x5"+
		",\x17\x2OU\x5.\x18\x2PU\x5\x30\x19\x2QU\x5\x32\x1A\x2RU\x5\x34\x1B\x2"+
		"SU\x5\x36\x1C\x2T;\x3\x2\x2\x2T<\x3\x2\x2\x2T=\x3\x2\x2\x2T>\x3\x2\x2"+
		"\x2T?\x3\x2\x2\x2T@\x3\x2\x2\x2T\x41\x3\x2\x2\x2T\x42\x3\x2\x2\x2T\x43"+
		"\x3\x2\x2\x2T\x44\x3\x2\x2\x2T\x45\x3\x2\x2\x2T\x46\x3\x2\x2\x2TG\x3\x2"+
		"\x2\x2TH\x3\x2\x2\x2TI\x3\x2\x2\x2TJ\x3\x2\x2\x2TK\x3\x2\x2\x2TL\x3\x2"+
		"\x2\x2TM\x3\x2\x2\x2TN\x3\x2\x2\x2TO\x3\x2\x2\x2TP\x3\x2\x2\x2TQ\x3\x2"+
		"\x2\x2TR\x3\x2\x2\x2TS\x3\x2\x2\x2U\x5\x3\x2\x2\x2VX\a\x13\x2\x2WY\a\x3"+
		"\x2\x2XW\x3\x2\x2\x2XY\x3\x2\x2\x2YZ\x3\x2\x2\x2Z[\a\'\x2\x2[\a\x3\x2"+
		"\x2\x2\\^\a\x1B\x2\x2]_\a\x3\x2\x2^]\x3\x2\x2\x2^_\x3\x2\x2\x2_`\x3\x2"+
		"\x2\x2`\x61\a\'\x2\x2\x61\t\x3\x2\x2\x2\x62\x64\a\xE\x2\x2\x63\x65\a\x3"+
		"\x2\x2\x64\x63\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66"+
		"g\a\'\x2\x2g\v\x3\x2\x2\x2hi\a\x19\x2\x2i\r\x3\x2\x2\x2jl\a\x17\x2\x2"+
		"km\a\x3\x2\x2lk\x3\x2\x2\x2lm\x3\x2\x2\x2mn\x3\x2\x2\x2nq\a\'\x2\x2op"+
		"\a\x3\x2\x2pr\a\'\x2\x2qo\x3\x2\x2\x2qr\x3\x2\x2\x2r\xF\x3\x2\x2\x2su"+
		"\a\xF\x2\x2tv\a\x3\x2\x2ut\x3\x2\x2\x2uv\x3\x2\x2\x2vw\x3\x2\x2\x2wy\a"+
		"\'\x2\x2xz\a\x3\x2\x2yx\x3\x2\x2\x2yz\x3\x2\x2\x2z~\x3\x2\x2\x2{}\v\x2"+
		"\x2\x2|{\x3\x2\x2\x2}\x80\x3\x2\x2\x2~\x7F\x3\x2\x2\x2~|\x3\x2\x2\x2\x7F"+
		"\x11\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x81\x83\a\x1A\x2\x2\x82\x84\a\x3\x2"+
		"\x2\x83\x82\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x87"+
		"\a\'\x2\x2\x86\x88\a\x3\x2\x2\x87\x86\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2"+
		"\x88\x8C\x3\x2\x2\x2\x89\x8B\v\x2\x2\x2\x8A\x89\x3\x2\x2\x2\x8B\x8E\x3"+
		"\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8D\x13\x3\x2\x2\x2"+
		"\x8E\x8C\x3\x2\x2\x2\x8F\x91\a\x1E\x2\x2\x90\x92\a\x3\x2\x2\x91\x90\x3"+
		"\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x9E\a\'\x2\x2\x94"+
		"\x95\a\x3\x2\x2\x95\x97\a\x15\x2\x2\x96\x98\a\x3\x2\x2\x97\x96\x3\x2\x2"+
		"\x2\x97\x98\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9B\t\x2\x2\x2\x9A\x9C"+
		"\a\x3\x2\x2\x9B\x9A\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2"+
		"\x9D\x9F\a\'\x2\x2\x9E\x94\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA9\x3"+
		"\x2\x2\x2\xA0\xA1\a\x3\x2\x2\xA1\xA2\a\xF\x2\x2\xA2\xA6\a\x3\x2\x2\xA3"+
		"\xA5\v\x2\x2\x2\xA4\xA3\x3\x2\x2\x2\xA5\xA8\x3\x2\x2\x2\xA6\xA7\x3\x2"+
		"\x2\x2\xA6\xA4\x3\x2\x2\x2\xA7\xAA\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA9"+
		"\xA0\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\x15\x3\x2\x2\x2\xAB\xAD\a \x2"+
		"\x2\xAC\xAE\a\x3\x2\x2\xAD\xAC\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xAF"+
		"\x3\x2\x2\x2\xAF\xB0\a\'\x2\x2\xB0\x17\x3\x2\x2\x2\xB1\xB3\a!\x2\x2\xB2"+
		"\xB4\a\x3\x2\x2\xB3\xB2\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB5\x3\x2"+
		"\x2\x2\xB5\xB6\a\'\x2\x2\xB6\x19\x3\x2\x2\x2\xB7\xB9\a\"\x2\x2\xB8\xBA"+
		"\a\x3\x2\x2\xB9\xB8\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2"+
		"\xBB\xBC\a\'\x2\x2\xBC\x1B\x3\x2\x2\x2\xBD\xBE\a\x11\x2\x2\xBE\x1D\x3"+
		"\x2\x2\x2\xBF\xC1\a%\x2\x2\xC0\xC2\a\x3\x2\x2\xC1\xC0\x3\x2\x2\x2\xC1"+
		"\xC2\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC4\a\'\x2\x2\xC4\x1F\x3\x2\x2"+
		"\x2\xC5\xC7\a\x10\x2\x2\xC6\xC8\a\x3\x2\x2\xC7\xC6\x3\x2\x2\x2\xC7\xC8"+
		"\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCC\a\'\x2\x2\xCA\xCB\a\x3\x2\x2"+
		"\xCB\xCD\t\x3\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD!\x3\x2"+
		"\x2\x2\xCE\xD0\a\x1F\x2\x2\xCF\xD1\a\x3\x2\x2\xD0\xCF\x3\x2\x2\x2\xD0"+
		"\xD1\x3\x2\x2\x2\xD1\xD5\x3\x2\x2\x2\xD2\xD4\v\x2\x2\x2\xD3\xD2\x3\x2"+
		"\x2\x2\xD4\xD7\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6"+
		"#\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD8\xD9\a\x1C\x2\x2\xD9%\x3\x2\x2\x2"+
		"\xDA\xDC\a\x16\x2\x2\xDB\xDD\a\x3\x2\x2\xDC\xDB\x3\x2\x2\x2\xDC\xDD\x3"+
		"\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xDF\a\'\x2\x2\xDF\'\x3\x2\x2\x2\xE0"+
		"\xE2\a&\x2\x2\xE1\xE3\a\x3\x2\x2\xE2\xE1\x3\x2\x2\x2\xE2\xE3\x3\x2\x2"+
		"\x2\xE3\xE4\x3\x2\x2\x2\xE4\xE5\a\'\x2\x2\xE5\xE6\a\x3\x2\x2\xE6\xE7\a"+
		"\'\x2\x2\xE7)\x3\x2\x2\x2\xE8\xEC\a\v\x2\x2\xE9\xEB\v\x2\x2\x2\xEA\xE9"+
		"\x3\x2\x2\x2\xEB\xEE\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xEC\xEA\x3\x2\x2"+
		"\x2\xED+\x3\x2\x2\x2\xEE\xEC\x3\x2\x2\x2\xEF\xF1\a\f\x2\x2\xF0\xF2\a\x3"+
		"\x2\x2\xF1\xF0\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3"+
		"\xF4\a\'\x2\x2\xF4-\x3\x2\x2\x2\xF5\xF7\a\t\x2\x2\xF6\xF8\a\x3\x2\x2\xF7"+
		"\xF6\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9\xFD\a\'\x2"+
		"\x2\xFA\xFC\v\x2\x2\x2\xFB\xFA\x3\x2\x2\x2\xFC\xFF\x3\x2\x2\x2\xFD\xFE"+
		"\x3\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFE/\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2"+
		"\x100\x102\a\x18\x2\x2\x101\x103\a\x3\x2\x2\x102\x101\x3\x2\x2\x2\x102"+
		"\x103\x3\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104\x105\a\'\x2\x2\x105\x31\x3"+
		"\x2\x2\x2\x106\x108\a#\x2\x2\x107\x109\a\x3\x2\x2\x108\x107\x3\x2\x2\x2"+
		"\x108\x109\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x10B\a\'\x2\x2\x10B"+
		"\x10C\a\x3\x2\x2\x10C\x10D\a\'\x2\x2\x10D\x33\x3\x2\x2\x2\x10E\x10F\a"+
		"\x12\x2\x2\x10F\x35\x3\x2\x2\x2\x110\x114\a\'\x2\x2\x111\x113\v\x2\x2"+
		"\x2\x112\x111\x3\x2\x2\x2\x113\x116\x3\x2\x2\x2\x114\x115\x3\x2\x2\x2"+
		"\x114\x112\x3\x2\x2\x2\x115\x37\x3\x2\x2\x2\x116\x114\x3\x2\x2\x2%TX^"+
		"\x64lquy~\x83\x87\x8C\x91\x97\x9B\x9E\xA6\xA9\xAD\xB3\xB9\xC1\xC7\xCC"+
		"\xD0\xD5\xDC\xE2\xEC\xF1\xF7\xFD\x102\x108\x114";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Spect.Net.CommandParser.Generated
