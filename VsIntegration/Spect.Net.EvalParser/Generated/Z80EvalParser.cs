//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dotne\source\repos\spectnetide\Assembler\AntlrZ80EvalGenerator\AntlrZ80EvalGenerator\Z80Eval.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Spect.Net.EvalParser.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class Z80EvalParser : Parser {
	public const int
		WS=1, COLON=2, SCOLON=3, COMMA=4, ASSIGN=5, LPAR=6, RPAR=7, LSBRAC=8, 
		RSBRAC=9, QMARK=10, PLUS=11, MINUS=12, VBAR=13, UPARR=14, AMP=15, EQOP=16, 
		NEQOP=17, LTOP=18, LTEOP=19, GTOP=20, GTEOP=21, LSHOP=22, RSHOP=23, MULOP=24, 
		DIVOP=25, MODOP=26, TILDE=27, LDBRAC=28, RDBRAC=29, EXCLM=30, A=31, B=32, 
		C=33, D=34, E=35, H=36, L=37, F=38, I=39, R=40, XL=41, XH=42, YL=43, YH=44, 
		BC=45, DE=46, HL=47, SP=48, IX=49, IY=50, AF=51, AF_=52, BC_=53, DE_=54, 
		HL_=55, PC=56, WZ=57, ZF=58, NZF=59, CF=60, NCF=61, POF=62, PEF=63, PF=64, 
		MF=65, HF=66, NHF=67, NF=68, NNF=69, R3F=70, NR3F=71, R5F=72, NR5F=73, 
		HEXNUM=74, BINNUM=75, DECNUM=76, CHAR=77, IDENTIFIER=78, IDSTART=79, IDCONT=80, 
		BOOLF=81, BYTEF=82, SBYTEF=83, CHARF=84, HEX4F=85, HEX8F=86, WORDF=87, 
		SWORDF=88, DWORDF=89, SDWORDF=90, BITV8F=91, BITV16F=92, BITV32F=93, ErrorCharacter=94;
	public const int
		RULE_compileUnit = 0, RULE_formatSpec = 1, RULE_expr = 2, RULE_orExpr = 3, 
		RULE_xorExpr = 4, RULE_andExpr = 5, RULE_equExpr = 6, RULE_relExpr = 7, 
		RULE_shiftExpr = 8, RULE_addExpr = 9, RULE_multExpr = 10, RULE_unaryExpr = 11, 
		RULE_literalExpr = 12, RULE_symbolExpr = 13, RULE_z80Spec = 14, RULE_reg8 = 15, 
		RULE_reg16 = 16, RULE_memIndirect = 17, RULE_flags = 18;
	public static readonly string[] ruleNames = {
		"compileUnit", "formatSpec", "expr", "orExpr", "xorExpr", "andExpr", "equExpr", 
		"relExpr", "shiftExpr", "addExpr", "multExpr", "unaryExpr", "literalExpr", 
		"symbolExpr", "z80Spec", "reg8", "reg16", "memIndirect", "flags"
	};

	private static readonly string[] _LiteralNames = {
		null, "' '", "':'", "';'", "','", "'='", "'('", "')'", "'['", "']'", "'?'", 
		"'+'", "'-'", "'|'", "'^'", "'&'", "'=='", "'!='", "'<'", "'<='", "'>'", 
		"'>='", "'<<'", "'>>'", "'*'", "'/'", "'%'", "'~'", "'{{'", "'}}'", "'!'", 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "'`3'", null, "'`5'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COLON", "SCOLON", "COMMA", "ASSIGN", "LPAR", "RPAR", "LSBRAC", 
		"RSBRAC", "QMARK", "PLUS", "MINUS", "VBAR", "UPARR", "AMP", "EQOP", "NEQOP", 
		"LTOP", "LTEOP", "GTOP", "GTEOP", "LSHOP", "RSHOP", "MULOP", "DIVOP", 
		"MODOP", "TILDE", "LDBRAC", "RDBRAC", "EXCLM", "A", "B", "C", "D", "E", 
		"H", "L", "F", "I", "R", "XL", "XH", "YL", "YH", "BC", "DE", "HL", "SP", 
		"IX", "IY", "AF", "AF_", "BC_", "DE_", "HL_", "PC", "WZ", "ZF", "NZF", 
		"CF", "NCF", "POF", "PEF", "PF", "MF", "HF", "NHF", "NF", "NNF", "R3F", 
		"NR3F", "R5F", "NR5F", "HEXNUM", "BINNUM", "DECNUM", "CHAR", "IDENTIFIER", 
		"IDSTART", "IDCONT", "BOOLF", "BYTEF", "SBYTEF", "CHARF", "HEX4F", "HEX8F", 
		"WORDF", "SWORDF", "DWORDF", "SDWORDF", "BITV8F", "BITV16F", "BITV32F", 
		"ErrorCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Z80Eval.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Z80EvalParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(Z80EvalParser.Eof, 0); }
		public FormatSpecContext formatSpec() {
			return GetRuleContext<FormatSpecContext>(0);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; expr();
			State = 40;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (BOOLF - 81)) | (1L << (BYTEF - 81)) | (1L << (SBYTEF - 81)) | (1L << (CHARF - 81)) | (1L << (HEX4F - 81)) | (1L << (HEX8F - 81)) | (1L << (WORDF - 81)) | (1L << (SWORDF - 81)) | (1L << (DWORDF - 81)) | (1L << (SDWORDF - 81)) | (1L << (BITV8F - 81)) | (1L << (BITV16F - 81)) | (1L << (BITV32F - 81)))) != 0)) {
				{
				State = 39; formatSpec();
				}
			}

			State = 42; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatSpecContext : ParserRuleContext {
		public ITerminalNode BYTEF() { return GetToken(Z80EvalParser.BYTEF, 0); }
		public ITerminalNode BOOLF() { return GetToken(Z80EvalParser.BOOLF, 0); }
		public ITerminalNode SBYTEF() { return GetToken(Z80EvalParser.SBYTEF, 0); }
		public ITerminalNode CHARF() { return GetToken(Z80EvalParser.CHARF, 0); }
		public ITerminalNode HEX4F() { return GetToken(Z80EvalParser.HEX4F, 0); }
		public ITerminalNode HEX8F() { return GetToken(Z80EvalParser.HEX8F, 0); }
		public ITerminalNode WORDF() { return GetToken(Z80EvalParser.WORDF, 0); }
		public ITerminalNode SWORDF() { return GetToken(Z80EvalParser.SWORDF, 0); }
		public ITerminalNode DWORDF() { return GetToken(Z80EvalParser.DWORDF, 0); }
		public ITerminalNode SDWORDF() { return GetToken(Z80EvalParser.SDWORDF, 0); }
		public ITerminalNode BITV8F() { return GetToken(Z80EvalParser.BITV8F, 0); }
		public ITerminalNode BITV16F() { return GetToken(Z80EvalParser.BITV16F, 0); }
		public ITerminalNode BITV32F() { return GetToken(Z80EvalParser.BITV32F, 0); }
		public FormatSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterFormatSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitFormatSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatSpecContext formatSpec() {
		FormatSpecContext _localctx = new FormatSpecContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_formatSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			_la = _input.La(1);
			if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (BOOLF - 81)) | (1L << (BYTEF - 81)) | (1L << (SBYTEF - 81)) | (1L << (CHARF - 81)) | (1L << (HEX4F - 81)) | (1L << (HEX8F - 81)) | (1L << (WORDF - 81)) | (1L << (SWORDF - 81)) | (1L << (DWORDF - 81)) | (1L << (SDWORDF - 81)) | (1L << (BITV8F - 81)) | (1L << (BITV16F - 81)) | (1L << (BITV32F - 81)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(Z80EvalParser.QMARK, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(Z80EvalParser.COLON, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; orExpr();
			State = 52;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==QMARK) {
				{
				State = 47; Match(QMARK);
				State = 48; expr();
				State = 49; Match(COLON);
				State = 50; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		public XorExprContext[] xorExpr() {
			return GetRuleContexts<XorExprContext>();
		}
		public XorExprContext xorExpr(int i) {
			return GetRuleContext<XorExprContext>(i);
		}
		public ITerminalNode[] VBAR() { return GetTokens(Z80EvalParser.VBAR); }
		public ITerminalNode VBAR(int i) {
			return GetToken(Z80EvalParser.VBAR, i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_orExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; xorExpr();
			State = 59;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==VBAR) {
				{
				{
				State = 55; Match(VBAR);
				State = 56; xorExpr();
				}
				}
				State = 61;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorExprContext : ParserRuleContext {
		public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		public ITerminalNode[] UPARR() { return GetTokens(Z80EvalParser.UPARR); }
		public ITerminalNode UPARR(int i) {
			return GetToken(Z80EvalParser.UPARR, i);
		}
		public XorExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterXorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitXorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorExprContext xorExpr() {
		XorExprContext _localctx = new XorExprContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_xorExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; andExpr();
			State = 67;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==UPARR) {
				{
				{
				State = 63; Match(UPARR);
				State = 64; andExpr();
				}
				}
				State = 69;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		public EquExprContext[] equExpr() {
			return GetRuleContexts<EquExprContext>();
		}
		public EquExprContext equExpr(int i) {
			return GetRuleContext<EquExprContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(Z80EvalParser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(Z80EvalParser.AMP, i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; equExpr();
			State = 75;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AMP) {
				{
				{
				State = 71; Match(AMP);
				State = 72; equExpr();
				}
				}
				State = 77;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquExprContext : ParserRuleContext {
		public RelExprContext[] relExpr() {
			return GetRuleContexts<RelExprContext>();
		}
		public RelExprContext relExpr(int i) {
			return GetRuleContext<RelExprContext>(i);
		}
		public ITerminalNode[] EQOP() { return GetTokens(Z80EvalParser.EQOP); }
		public ITerminalNode EQOP(int i) {
			return GetToken(Z80EvalParser.EQOP, i);
		}
		public ITerminalNode[] NEQOP() { return GetTokens(Z80EvalParser.NEQOP); }
		public ITerminalNode NEQOP(int i) {
			return GetToken(Z80EvalParser.NEQOP, i);
		}
		public EquExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterEquExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitEquExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquExprContext equExpr() {
		EquExprContext _localctx = new EquExprContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_equExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; relExpr();
			State = 83;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==EQOP || _la==NEQOP) {
				{
				{
				State = 79;
				_la = _input.La(1);
				if ( !(_la==EQOP || _la==NEQOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 80; relExpr();
				}
				}
				State = 85;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		public ShiftExprContext[] shiftExpr() {
			return GetRuleContexts<ShiftExprContext>();
		}
		public ShiftExprContext shiftExpr(int i) {
			return GetRuleContext<ShiftExprContext>(i);
		}
		public ITerminalNode[] LTOP() { return GetTokens(Z80EvalParser.LTOP); }
		public ITerminalNode LTOP(int i) {
			return GetToken(Z80EvalParser.LTOP, i);
		}
		public ITerminalNode[] LTEOP() { return GetTokens(Z80EvalParser.LTEOP); }
		public ITerminalNode LTEOP(int i) {
			return GetToken(Z80EvalParser.LTEOP, i);
		}
		public ITerminalNode[] GTOP() { return GetTokens(Z80EvalParser.GTOP); }
		public ITerminalNode GTOP(int i) {
			return GetToken(Z80EvalParser.GTOP, i);
		}
		public ITerminalNode[] GTEOP() { return GetTokens(Z80EvalParser.GTEOP); }
		public ITerminalNode GTEOP(int i) {
			return GetToken(Z80EvalParser.GTEOP, i);
		}
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; shiftExpr();
			State = 91;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP))) != 0)) {
				{
				{
				State = 87;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 88; shiftExpr();
				}
				}
				State = 93;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ITerminalNode[] LSHOP() { return GetTokens(Z80EvalParser.LSHOP); }
		public ITerminalNode LSHOP(int i) {
			return GetToken(Z80EvalParser.LSHOP, i);
		}
		public ITerminalNode[] RSHOP() { return GetTokens(Z80EvalParser.RSHOP); }
		public ITerminalNode RSHOP(int i) {
			return GetToken(Z80EvalParser.RSHOP, i);
		}
		public ShiftExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterShiftExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitShiftExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExprContext shiftExpr() {
		ShiftExprContext _localctx = new ShiftExprContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_shiftExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; addExpr();
			State = 99;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LSHOP || _la==RSHOP) {
				{
				{
				State = 95;
				_la = _input.La(1);
				if ( !(_la==LSHOP || _la==RSHOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 96; addExpr();
				}
				}
				State = 101;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MultExprContext[] multExpr() {
			return GetRuleContexts<MultExprContext>();
		}
		public MultExprContext multExpr(int i) {
			return GetRuleContext<MultExprContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(Z80EvalParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(Z80EvalParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(Z80EvalParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(Z80EvalParser.MINUS, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_addExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; multExpr();
			State = 107;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 103;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 104; multExpr();
				}
				}
				State = 109;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExprContext : ParserRuleContext {
		public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		public ITerminalNode[] MULOP() { return GetTokens(Z80EvalParser.MULOP); }
		public ITerminalNode MULOP(int i) {
			return GetToken(Z80EvalParser.MULOP, i);
		}
		public ITerminalNode[] DIVOP() { return GetTokens(Z80EvalParser.DIVOP); }
		public ITerminalNode DIVOP(int i) {
			return GetToken(Z80EvalParser.DIVOP, i);
		}
		public ITerminalNode[] MODOP() { return GetTokens(Z80EvalParser.MODOP); }
		public ITerminalNode MODOP(int i) {
			return GetToken(Z80EvalParser.MODOP, i);
		}
		public MultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExprContext multExpr() {
		MultExprContext _localctx = new MultExprContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_multExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; unaryExpr();
			State = 115;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULOP) | (1L << DIVOP) | (1L << MODOP))) != 0)) {
				{
				{
				State = 111;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULOP) | (1L << DIVOP) | (1L << MODOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 112; unaryExpr();
				}
				}
				State = 117;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(Z80EvalParser.PLUS, 0); }
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(Z80EvalParser.MINUS, 0); }
		public ITerminalNode TILDE() { return GetToken(Z80EvalParser.TILDE, 0); }
		public ITerminalNode EXCLM() { return GetToken(Z80EvalParser.EXCLM, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80EvalParser.LPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80EvalParser.RPAR, 0); }
		public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		public SymbolExprContext symbolExpr() {
			return GetRuleContext<SymbolExprContext>(0);
		}
		public Z80SpecContext z80Spec() {
			return GetRuleContext<Z80SpecContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_unaryExpr);
		try {
			State = 133;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PLUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; Match(PLUS);
				State = 119; unaryExpr();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120; Match(MINUS);
				State = 121; unaryExpr();
				}
				break;
			case TILDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 122; Match(TILDE);
				State = 123; unaryExpr();
				}
				break;
			case EXCLM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124; Match(EXCLM);
				State = 125; unaryExpr();
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 126; Match(LPAR);
				State = 127; expr();
				State = 128; Match(RPAR);
				}
				break;
			case HEXNUM:
			case BINNUM:
			case DECNUM:
			case CHAR:
				EnterOuterAlt(_localctx, 6);
				{
				State = 130; literalExpr();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 7);
				{
				State = 131; symbolExpr();
				}
				break;
			case LSBRAC:
			case A:
			case B:
			case C:
			case D:
			case E:
			case H:
			case L:
			case F:
			case I:
			case R:
			case XL:
			case XH:
			case YL:
			case YH:
			case BC:
			case DE:
			case HL:
			case SP:
			case IX:
			case IY:
			case AF:
			case AF_:
			case BC_:
			case DE_:
			case HL_:
			case PC:
			case WZ:
			case ZF:
			case NZF:
			case CF:
			case NCF:
			case POF:
			case PEF:
			case PF:
			case MF:
			case HF:
			case NHF:
			case NF:
			case NNF:
			case R3F:
			case NR3F:
			case R5F:
			case NR5F:
				EnterOuterAlt(_localctx, 8);
				{
				State = 132; z80Spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExprContext : ParserRuleContext {
		public ITerminalNode HEXNUM() { return GetToken(Z80EvalParser.HEXNUM, 0); }
		public ITerminalNode DECNUM() { return GetToken(Z80EvalParser.DECNUM, 0); }
		public ITerminalNode CHAR() { return GetToken(Z80EvalParser.CHAR, 0); }
		public ITerminalNode BINNUM() { return GetToken(Z80EvalParser.BINNUM, 0); }
		public LiteralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExprContext literalExpr() {
		LiteralExprContext _localctx = new LiteralExprContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_literalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			_la = _input.La(1);
			if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (HEXNUM - 74)) | (1L << (BINNUM - 74)) | (1L << (DECNUM - 74)) | (1L << (CHAR - 74)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolExprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80EvalParser.IDENTIFIER, 0); }
		public SymbolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterSymbolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitSymbolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolExprContext symbolExpr() {
		SymbolExprContext _localctx = new SymbolExprContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_symbolExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Z80SpecContext : ParserRuleContext {
		public Reg8Context reg8() {
			return GetRuleContext<Reg8Context>(0);
		}
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public MemIndirectContext memIndirect() {
			return GetRuleContext<MemIndirectContext>(0);
		}
		public FlagsContext flags() {
			return GetRuleContext<FlagsContext>(0);
		}
		public Z80SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_z80Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterZ80Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitZ80Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZ80Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Z80SpecContext z80Spec() {
		Z80SpecContext _localctx = new Z80SpecContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_z80Spec);
		try {
			State = 143;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case A:
			case B:
			case C:
			case D:
			case E:
			case H:
			case L:
			case F:
			case I:
			case R:
			case XL:
			case XH:
			case YL:
			case YH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139; reg8();
				}
				break;
			case BC:
			case DE:
			case HL:
			case SP:
			case IX:
			case IY:
			case AF:
			case AF_:
			case BC_:
			case DE_:
			case HL_:
			case PC:
			case WZ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140; reg16();
				}
				break;
			case LSBRAC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 141; memIndirect();
				}
				break;
			case ZF:
			case NZF:
			case CF:
			case NCF:
			case POF:
			case PEF:
			case PF:
			case MF:
			case HF:
			case NHF:
			case NF:
			case NNF:
			case R3F:
			case NR3F:
			case R5F:
			case NR5F:
				EnterOuterAlt(_localctx, 4);
				{
				State = 142; flags();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8Context : ParserRuleContext {
		public ITerminalNode A() { return GetToken(Z80EvalParser.A, 0); }
		public ITerminalNode B() { return GetToken(Z80EvalParser.B, 0); }
		public ITerminalNode C() { return GetToken(Z80EvalParser.C, 0); }
		public ITerminalNode D() { return GetToken(Z80EvalParser.D, 0); }
		public ITerminalNode E() { return GetToken(Z80EvalParser.E, 0); }
		public ITerminalNode F() { return GetToken(Z80EvalParser.F, 0); }
		public ITerminalNode H() { return GetToken(Z80EvalParser.H, 0); }
		public ITerminalNode L() { return GetToken(Z80EvalParser.L, 0); }
		public ITerminalNode XL() { return GetToken(Z80EvalParser.XL, 0); }
		public ITerminalNode XH() { return GetToken(Z80EvalParser.XH, 0); }
		public ITerminalNode YL() { return GetToken(Z80EvalParser.YL, 0); }
		public ITerminalNode YH() { return GetToken(Z80EvalParser.YH, 0); }
		public ITerminalNode I() { return GetToken(Z80EvalParser.I, 0); }
		public ITerminalNode R() { return GetToken(Z80EvalParser.R, 0); }
		public Reg8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterReg8(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitReg8(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8Context reg8() {
		Reg8Context _localctx = new Reg8Context(_ctx, State);
		EnterRule(_localctx, 30, RULE_reg8);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A) | (1L << B) | (1L << C) | (1L << D) | (1L << E) | (1L << H) | (1L << L) | (1L << F) | (1L << I) | (1L << R) | (1L << XL) | (1L << XH) | (1L << YL) | (1L << YH))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16Context : ParserRuleContext {
		public ITerminalNode AF() { return GetToken(Z80EvalParser.AF, 0); }
		public ITerminalNode BC() { return GetToken(Z80EvalParser.BC, 0); }
		public ITerminalNode DE() { return GetToken(Z80EvalParser.DE, 0); }
		public ITerminalNode HL() { return GetToken(Z80EvalParser.HL, 0); }
		public ITerminalNode AF_() { return GetToken(Z80EvalParser.AF_, 0); }
		public ITerminalNode BC_() { return GetToken(Z80EvalParser.BC_, 0); }
		public ITerminalNode DE_() { return GetToken(Z80EvalParser.DE_, 0); }
		public ITerminalNode HL_() { return GetToken(Z80EvalParser.HL_, 0); }
		public ITerminalNode IX() { return GetToken(Z80EvalParser.IX, 0); }
		public ITerminalNode IY() { return GetToken(Z80EvalParser.IY, 0); }
		public ITerminalNode SP() { return GetToken(Z80EvalParser.SP, 0); }
		public ITerminalNode PC() { return GetToken(Z80EvalParser.PC, 0); }
		public ITerminalNode WZ() { return GetToken(Z80EvalParser.WZ, 0); }
		public Reg16Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterReg16(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitReg16(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16Context reg16() {
		Reg16Context _localctx = new Reg16Context(_ctx, State);
		EnterRule(_localctx, 32, RULE_reg16);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BC) | (1L << DE) | (1L << HL) | (1L << SP) | (1L << IX) | (1L << IY) | (1L << AF) | (1L << AF_) | (1L << BC_) | (1L << DE_) | (1L << HL_) | (1L << PC) | (1L << WZ))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemIndirectContext : ParserRuleContext {
		public ITerminalNode LSBRAC() { return GetToken(Z80EvalParser.LSBRAC, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RSBRAC() { return GetToken(Z80EvalParser.RSBRAC, 0); }
		public ITerminalNode BYTEF() { return GetToken(Z80EvalParser.BYTEF, 0); }
		public ITerminalNode WORDF() { return GetToken(Z80EvalParser.WORDF, 0); }
		public ITerminalNode DWORDF() { return GetToken(Z80EvalParser.DWORDF, 0); }
		public MemIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterMemIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitMemIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemIndirectContext memIndirect() {
		MemIndirectContext _localctx = new MemIndirectContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_memIndirect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(LSBRAC);
			State = 150; expr();
			State = 152;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (BYTEF - 82)) | (1L << (WORDF - 82)) | (1L << (DWORDF - 82)))) != 0)) {
				{
				State = 151;
				_la = _input.La(1);
				if ( !(((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (BYTEF - 82)) | (1L << (WORDF - 82)) | (1L << (DWORDF - 82)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 154; Match(RSBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlagsContext : ParserRuleContext {
		public ITerminalNode ZF() { return GetToken(Z80EvalParser.ZF, 0); }
		public ITerminalNode NZF() { return GetToken(Z80EvalParser.NZF, 0); }
		public ITerminalNode CF() { return GetToken(Z80EvalParser.CF, 0); }
		public ITerminalNode NCF() { return GetToken(Z80EvalParser.NCF, 0); }
		public ITerminalNode POF() { return GetToken(Z80EvalParser.POF, 0); }
		public ITerminalNode PEF() { return GetToken(Z80EvalParser.PEF, 0); }
		public ITerminalNode PF() { return GetToken(Z80EvalParser.PF, 0); }
		public ITerminalNode MF() { return GetToken(Z80EvalParser.MF, 0); }
		public ITerminalNode R3F() { return GetToken(Z80EvalParser.R3F, 0); }
		public ITerminalNode NR3F() { return GetToken(Z80EvalParser.NR3F, 0); }
		public ITerminalNode R5F() { return GetToken(Z80EvalParser.R5F, 0); }
		public ITerminalNode NR5F() { return GetToken(Z80EvalParser.NR5F, 0); }
		public ITerminalNode NF() { return GetToken(Z80EvalParser.NF, 0); }
		public ITerminalNode NNF() { return GetToken(Z80EvalParser.NNF, 0); }
		public ITerminalNode HF() { return GetToken(Z80EvalParser.HF, 0); }
		public ITerminalNode NHF() { return GetToken(Z80EvalParser.NHF, 0); }
		public FlagsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flags; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.EnterFlags(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80EvalListener typedListener = listener as IZ80EvalListener;
			if (typedListener != null) typedListener.ExitFlags(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80EvalVisitor<TResult> typedVisitor = visitor as IZ80EvalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlags(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlagsContext flags() {
		FlagsContext _localctx = new FlagsContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_flags);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			_la = _input.La(1);
			if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (ZF - 58)) | (1L << (NZF - 58)) | (1L << (CF - 58)) | (1L << (NCF - 58)) | (1L << (POF - 58)) | (1L << (PEF - 58)) | (1L << (PF - 58)) | (1L << (MF - 58)) | (1L << (HF - 58)) | (1L << (NHF - 58)) | (1L << (NF - 58)) | (1L << (NNF - 58)) | (1L << (R3F - 58)) | (1L << (NR3F - 58)) | (1L << (R5F - 58)) | (1L << (NR5F - 58)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3`\xA1\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2\x5"+
		"\x2+\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x5\x4\x37\n\x4\x3\x5\x3\x5\x3\x5\a\x5<\n\x5\f\x5\xE\x5?\v\x5\x3\x6\x3"+
		"\x6\x3\x6\a\x6\x44\n\x6\f\x6\xE\x6G\v\x6\x3\a\x3\a\x3\a\a\aL\n\a\f\a\xE"+
		"\aO\v\a\x3\b\x3\b\x3\b\a\bT\n\b\f\b\xE\bW\v\b\x3\t\x3\t\x3\t\a\t\\\n\t"+
		"\f\t\xE\t_\v\t\x3\n\x3\n\x3\n\a\n\x64\n\n\f\n\xE\ng\v\n\x3\v\x3\v\x3\v"+
		"\a\vl\n\v\f\v\xE\vo\v\v\x3\f\x3\f\x3\f\a\ft\n\f\f\f\xE\fw\v\f\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5"+
		"\r\x88\n\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10"+
		"\x92\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x5\x13\x9B"+
		"\n\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x2\x2\x2\x15\x2\x2\x4\x2\x6"+
		"\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C"+
		"\x2\x1E\x2 \x2\"\x2$\x2&\x2\x2\r\x3\x2S_\x3\x2\x12\x13\x3\x2\x14\x17\x3"+
		"\x2\x18\x19\x3\x2\r\xE\x3\x2\x1A\x1C\x3\x2LO\x3\x2!.\x3\x2/;\x5\x2TTY"+
		"Y[[\x3\x2<K\xA2\x2(\x3\x2\x2\x2\x4.\x3\x2\x2\x2\x6\x30\x3\x2\x2\x2\b\x38"+
		"\x3\x2\x2\x2\n@\x3\x2\x2\x2\fH\x3\x2\x2\x2\xEP\x3\x2\x2\x2\x10X\x3\x2"+
		"\x2\x2\x12`\x3\x2\x2\x2\x14h\x3\x2\x2\x2\x16p\x3\x2\x2\x2\x18\x87\x3\x2"+
		"\x2\x2\x1A\x89\x3\x2\x2\x2\x1C\x8B\x3\x2\x2\x2\x1E\x91\x3\x2\x2\x2 \x93"+
		"\x3\x2\x2\x2\"\x95\x3\x2\x2\x2$\x97\x3\x2\x2\x2&\x9E\x3\x2\x2\x2(*\x5"+
		"\x6\x4\x2)+\x5\x4\x3\x2*)\x3\x2\x2\x2*+\x3\x2\x2\x2+,\x3\x2\x2\x2,-\a"+
		"\x2\x2\x3-\x3\x3\x2\x2\x2./\t\x2\x2\x2/\x5\x3\x2\x2\x2\x30\x36\x5\b\x5"+
		"\x2\x31\x32\a\f\x2\x2\x32\x33\x5\x6\x4\x2\x33\x34\a\x4\x2\x2\x34\x35\x5"+
		"\x6\x4\x2\x35\x37\x3\x2\x2\x2\x36\x31\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2"+
		"\x37\a\x3\x2\x2\x2\x38=\x5\n\x6\x2\x39:\a\xF\x2\x2:<\x5\n\x6\x2;\x39\x3"+
		"\x2\x2\x2<?\x3\x2\x2\x2=;\x3\x2\x2\x2=>\x3\x2\x2\x2>\t\x3\x2\x2\x2?=\x3"+
		"\x2\x2\x2@\x45\x5\f\a\x2\x41\x42\a\x10\x2\x2\x42\x44\x5\f\a\x2\x43\x41"+
		"\x3\x2\x2\x2\x44G\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2"+
		"\x46\v\x3\x2\x2\x2G\x45\x3\x2\x2\x2HM\x5\xE\b\x2IJ\a\x11\x2\x2JL\x5\xE"+
		"\b\x2KI\x3\x2\x2\x2LO\x3\x2\x2\x2MK\x3\x2\x2\x2MN\x3\x2\x2\x2N\r\x3\x2"+
		"\x2\x2OM\x3\x2\x2\x2PU\x5\x10\t\x2QR\t\x3\x2\x2RT\x5\x10\t\x2SQ\x3\x2"+
		"\x2\x2TW\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2V\xF\x3\x2\x2\x2WU\x3"+
		"\x2\x2\x2X]\x5\x12\n\x2YZ\t\x4\x2\x2Z\\\x5\x12\n\x2[Y\x3\x2\x2\x2\\_\x3"+
		"\x2\x2\x2][\x3\x2\x2\x2]^\x3\x2\x2\x2^\x11\x3\x2\x2\x2_]\x3\x2\x2\x2`"+
		"\x65\x5\x14\v\x2\x61\x62\t\x5\x2\x2\x62\x64\x5\x14\v\x2\x63\x61\x3\x2"+
		"\x2\x2\x64g\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66\x13"+
		"\x3\x2\x2\x2g\x65\x3\x2\x2\x2hm\x5\x16\f\x2ij\t\x6\x2\x2jl\x5\x16\f\x2"+
		"ki\x3\x2\x2\x2lo\x3\x2\x2\x2mk\x3\x2\x2\x2mn\x3\x2\x2\x2n\x15\x3\x2\x2"+
		"\x2om\x3\x2\x2\x2pu\x5\x18\r\x2qr\t\a\x2\x2rt\x5\x18\r\x2sq\x3\x2\x2\x2"+
		"tw\x3\x2\x2\x2us\x3\x2\x2\x2uv\x3\x2\x2\x2v\x17\x3\x2\x2\x2wu\x3\x2\x2"+
		"\x2xy\a\r\x2\x2y\x88\x5\x18\r\x2z{\a\xE\x2\x2{\x88\x5\x18\r\x2|}\a\x1D"+
		"\x2\x2}\x88\x5\x18\r\x2~\x7F\a \x2\x2\x7F\x88\x5\x18\r\x2\x80\x81\a\b"+
		"\x2\x2\x81\x82\x5\x6\x4\x2\x82\x83\a\t\x2\x2\x83\x88\x3\x2\x2\x2\x84\x88"+
		"\x5\x1A\xE\x2\x85\x88\x5\x1C\xF\x2\x86\x88\x5\x1E\x10\x2\x87x\x3\x2\x2"+
		"\x2\x87z\x3\x2\x2\x2\x87|\x3\x2\x2\x2\x87~\x3\x2\x2\x2\x87\x80\x3\x2\x2"+
		"\x2\x87\x84\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x87\x86\x3\x2\x2\x2\x88\x19"+
		"\x3\x2\x2\x2\x89\x8A\t\b\x2\x2\x8A\x1B\x3\x2\x2\x2\x8B\x8C\aP\x2\x2\x8C"+
		"\x1D\x3\x2\x2\x2\x8D\x92\x5 \x11\x2\x8E\x92\x5\"\x12\x2\x8F\x92\x5$\x13"+
		"\x2\x90\x92\x5&\x14\x2\x91\x8D\x3\x2\x2\x2\x91\x8E\x3\x2\x2\x2\x91\x8F"+
		"\x3\x2\x2\x2\x91\x90\x3\x2\x2\x2\x92\x1F\x3\x2\x2\x2\x93\x94\t\t\x2\x2"+
		"\x94!\x3\x2\x2\x2\x95\x96\t\n\x2\x2\x96#\x3\x2\x2\x2\x97\x98\a\n\x2\x2"+
		"\x98\x9A\x5\x6\x4\x2\x99\x9B\t\v\x2\x2\x9A\x99\x3\x2\x2\x2\x9A\x9B\x3"+
		"\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9D\a\v\x2\x2\x9D%\x3\x2\x2\x2\x9E\x9F"+
		"\t\f\x2\x2\x9F\'\x3\x2\x2\x2\xF*\x36=\x45MU]\x65mu\x87\x91\x9A";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Spect.Net.EvalParser.Generated
