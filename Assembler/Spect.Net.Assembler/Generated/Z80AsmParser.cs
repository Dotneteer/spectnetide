//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\dotne\source\repos\spectnetide\Assembler\AntlrZ80AsmParserGenerator\ParserGenerator\Z80Asm.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Spect.Net.Assembler.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class Z80AsmParser : Parser {
	public const int
		COMMENT=1, WS=2, NEWLINE=3, COLON=4, SCOLON=5, COMMA=6, ASSIGN=7, LPAR=8, 
		RPAR=9, LSBRAC=10, RSBRAC=11, QMARK=12, PLUS=13, MINUS=14, VBAR=15, UPARR=16, 
		AMP=17, EQOP=18, CIEQOP=19, NEQOP=20, CINEQOP=21, LTOP=22, LTEOP=23, GTOP=24, 
		GTEOP=25, LSHOP=26, RSHOP=27, MULOP=28, DIVOP=29, MODOP=30, TILDE=31, 
		LDBRAC=32, RDBRAC=33, EXCLM=34, A=35, B=36, C=37, D=38, E=39, H=40, L=41, 
		I=42, R=43, XL=44, XH=45, YL=46, YH=47, BC=48, DE=49, HL=50, SP=51, IX=52, 
		IY=53, AF=54, AF_=55, Z=56, NZ=57, NC=58, PO=59, PE=60, P=61, M=62, NOP=63, 
		RLCA=64, RRCA=65, RLA=66, RRA=67, DAA=68, CPL=69, SCF=70, CCF=71, HALT=72, 
		RET=73, EXX=74, DI=75, EI=76, NEG=77, RETN=78, RETI=79, RLD=80, RRD=81, 
		LDI=82, CPI=83, INI=84, OUTI=85, LDD=86, CPD=87, IND=88, OUTD=89, LDIR=90, 
		CPIR=91, INIR=92, OTIR=93, LDDR=94, CPDR=95, INDR=96, OTDR=97, LD=98, 
		INC=99, DEC=100, EX=101, ADD=102, ADC=103, SUB=104, SBC=105, AND=106, 
		XOR=107, OR=108, CP=109, DJNZ=110, JR=111, JP=112, CALL=113, RST=114, 
		PUSH=115, POP=116, IN=117, OUT=118, IM=119, RLC=120, RRC=121, RL=122, 
		RR=123, SLA=124, SRA=125, SLL=126, SRL=127, BIT=128, RES=129, SET=130, 
		SWAPNIB=131, MUL=132, POPX=133, MIRROR=134, TEST=135, NEXTREG=136, OUTINB=137, 
		LDIX=138, LDIRX=139, LDDX=140, LDDRX=141, PIXELDN=142, PIXELAD=143, SETAE=144, 
		LDPIRX=145, LDIRSCALE=146, IFDEF=147, IFNDEF=148, ENDIF=149, ELSE=150, 
		DEFINE=151, UNDEF=152, INCLUDE=153, IF=154, IFMOD=155, IFNMOD=156, ORGPRAG=157, 
		ENTPRAG=158, XENTPRAG=159, EQUPRAG=160, VARPRAG=161, DISPRAG=162, DBPRAG=163, 
		DWPRAG=164, DMPRAG=165, SKIPRAG=166, EXTPRAG=167, DSPRAG=168, FBPRAG=169, 
		FWPRAG=170, MODPRAG=171, ALGPRAG=172, TRACE=173, TRACEHEX=174, RNDSEED=175, 
		DGPRAG=176, ERRORPR=177, INCBIN=178, MACRO=179, ENDMACRO=180, LOOP=181, 
		ENDLOOP=182, REPEAT=183, UNTIL=184, WHILE=185, ENDWHILE=186, IFSTMT=187, 
		ELIF=188, ELSESTMT=189, ENDIFSTMT=190, FOR=191, TO=192, STEP=193, FORNEXT=194, 
		NEXT=195, BREAK=196, CONTINUE=197, TEXTOF=198, LTEXTOF=199, HREG=200, 
		LREG=201, DEF=202, HEXNUM=203, BINNUM=204, DECNUM=205, REALNUM=206, CHAR=207, 
		STRING=208, FSTRING=209, BOOLLIT=210, TRUE=211, FALSE=212, IDENTIFIER=213, 
		IDSTART=214, IDCONT=215, CURADDR=216, CURCNT=217, NONEARG=218, ErrorCharacter=219;
	public const int
		RULE_compileUnit = 0, RULE_asmline = 1, RULE_label = 2, RULE_comment = 3, 
		RULE_pragma = 4, RULE_directive = 5, RULE_statement = 6, RULE_macroStatement = 7, 
		RULE_macroEndMarker = 8, RULE_loopStatement = 9, RULE_loopEndMarker = 10, 
		RULE_repeatStatement = 11, RULE_untilStatement = 12, RULE_whileStatement = 13, 
		RULE_whileEndMarker = 14, RULE_ifStatement = 15, RULE_elifStatement = 16, 
		RULE_elseStatement = 17, RULE_endifStatement = 18, RULE_forStatement = 19, 
		RULE_nextStatement = 20, RULE_breakStatement = 21, RULE_continueStatement = 22, 
		RULE_macroInvocation = 23, RULE_macroArgument = 24, RULE_orgPragma = 25, 
		RULE_entPragma = 26, RULE_xentPragma = 27, RULE_dispPragma = 28, RULE_equPragma = 29, 
		RULE_varPragma = 30, RULE_defbPragma = 31, RULE_defwPragma = 32, RULE_defmPragma = 33, 
		RULE_skipPragma = 34, RULE_externPragma = 35, RULE_defsPragma = 36, RULE_fillbPragma = 37, 
		RULE_fillwPragma = 38, RULE_modelPragma = 39, RULE_alignPragma = 40, RULE_tracePragma = 41, 
		RULE_rndSeedPragma = 42, RULE_defgPragma = 43, RULE_errorPragma = 44, 
		RULE_incBinPragma = 45, RULE_operation = 46, RULE_trivialOperation = 47, 
		RULE_compoundOperation = 48, RULE_trivialNextOperation = 49, RULE_operand = 50, 
		RULE_reg8 = 51, RULE_reg8Idx = 52, RULE_reg8Spec = 53, RULE_reg16 = 54, 
		RULE_reg16Idx = 55, RULE_reg16Std = 56, RULE_reg16Spec = 57, RULE_regIndirect = 58, 
		RULE_cPort = 59, RULE_memIndirect = 60, RULE_indexedAddr = 61, RULE_condition = 62, 
		RULE_expr = 63, RULE_orExpr = 64, RULE_xorExpr = 65, RULE_andExpr = 66, 
		RULE_equExpr = 67, RULE_relExpr = 68, RULE_shiftExpr = 69, RULE_addExpr = 70, 
		RULE_multExpr = 71, RULE_unaryExpr = 72, RULE_functionInvocation = 73, 
		RULE_builtinFunctionInvocation = 74, RULE_literalExpr = 75, RULE_symbolExpr = 76, 
		RULE_macroParam = 77, RULE_regs = 78, RULE_regsAndConds = 79, RULE_mnemonic = 80;
	public static readonly string[] ruleNames = {
		"compileUnit", "asmline", "label", "comment", "pragma", "directive", "statement", 
		"macroStatement", "macroEndMarker", "loopStatement", "loopEndMarker", 
		"repeatStatement", "untilStatement", "whileStatement", "whileEndMarker", 
		"ifStatement", "elifStatement", "elseStatement", "endifStatement", "forStatement", 
		"nextStatement", "breakStatement", "continueStatement", "macroInvocation", 
		"macroArgument", "orgPragma", "entPragma", "xentPragma", "dispPragma", 
		"equPragma", "varPragma", "defbPragma", "defwPragma", "defmPragma", "skipPragma", 
		"externPragma", "defsPragma", "fillbPragma", "fillwPragma", "modelPragma", 
		"alignPragma", "tracePragma", "rndSeedPragma", "defgPragma", "errorPragma", 
		"incBinPragma", "operation", "trivialOperation", "compoundOperation", 
		"trivialNextOperation", "operand", "reg8", "reg8Idx", "reg8Spec", "reg16", 
		"reg16Idx", "reg16Std", "reg16Spec", "regIndirect", "cPort", "memIndirect", 
		"indexedAddr", "condition", "expr", "orExpr", "xorExpr", "andExpr", "equExpr", 
		"relExpr", "shiftExpr", "addExpr", "multExpr", "unaryExpr", "functionInvocation", 
		"builtinFunctionInvocation", "literalExpr", "symbolExpr", "macroParam", 
		"regs", "regsAndConds", "mnemonic"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "':'", "';'", "','", "'='", "'('", "')'", "'['", 
		"']'", "'?'", "'+'", "'-'", "'|'", "'^'", "'&'", "'=='", "'==='", "'!='", 
		"'!=='", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", "'*'", "'/'", "'%'", 
		"'~'", "'{{'", "'}}'", "'!'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "'#ifdef'", "'#ifndef'", 
		"'#endif'", "'#else'", "'#define'", "'#undef'", "'#include'", "'#if'", 
		"'#ifmod'", "'#ifnmod'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'$<none>$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "WS", "NEWLINE", "COLON", "SCOLON", "COMMA", "ASSIGN", 
		"LPAR", "RPAR", "LSBRAC", "RSBRAC", "QMARK", "PLUS", "MINUS", "VBAR", 
		"UPARR", "AMP", "EQOP", "CIEQOP", "NEQOP", "CINEQOP", "LTOP", "LTEOP", 
		"GTOP", "GTEOP", "LSHOP", "RSHOP", "MULOP", "DIVOP", "MODOP", "TILDE", 
		"LDBRAC", "RDBRAC", "EXCLM", "A", "B", "C", "D", "E", "H", "L", "I", "R", 
		"XL", "XH", "YL", "YH", "BC", "DE", "HL", "SP", "IX", "IY", "AF", "AF_", 
		"Z", "NZ", "NC", "PO", "PE", "P", "M", "NOP", "RLCA", "RRCA", "RLA", "RRA", 
		"DAA", "CPL", "SCF", "CCF", "HALT", "RET", "EXX", "DI", "EI", "NEG", "RETN", 
		"RETI", "RLD", "RRD", "LDI", "CPI", "INI", "OUTI", "LDD", "CPD", "IND", 
		"OUTD", "LDIR", "CPIR", "INIR", "OTIR", "LDDR", "CPDR", "INDR", "OTDR", 
		"LD", "INC", "DEC", "EX", "ADD", "ADC", "SUB", "SBC", "AND", "XOR", "OR", 
		"CP", "DJNZ", "JR", "JP", "CALL", "RST", "PUSH", "POP", "IN", "OUT", "IM", 
		"RLC", "RRC", "RL", "RR", "SLA", "SRA", "SLL", "SRL", "BIT", "RES", "SET", 
		"SWAPNIB", "MUL", "POPX", "MIRROR", "TEST", "NEXTREG", "OUTINB", "LDIX", 
		"LDIRX", "LDDX", "LDDRX", "PIXELDN", "PIXELAD", "SETAE", "LDPIRX", "LDIRSCALE", 
		"IFDEF", "IFNDEF", "ENDIF", "ELSE", "DEFINE", "UNDEF", "INCLUDE", "IF", 
		"IFMOD", "IFNMOD", "ORGPRAG", "ENTPRAG", "XENTPRAG", "EQUPRAG", "VARPRAG", 
		"DISPRAG", "DBPRAG", "DWPRAG", "DMPRAG", "SKIPRAG", "EXTPRAG", "DSPRAG", 
		"FBPRAG", "FWPRAG", "MODPRAG", "ALGPRAG", "TRACE", "TRACEHEX", "RNDSEED", 
		"DGPRAG", "ERRORPR", "INCBIN", "MACRO", "ENDMACRO", "LOOP", "ENDLOOP", 
		"REPEAT", "UNTIL", "WHILE", "ENDWHILE", "IFSTMT", "ELIF", "ELSESTMT", 
		"ENDIFSTMT", "FOR", "TO", "STEP", "FORNEXT", "NEXT", "BREAK", "CONTINUE", 
		"TEXTOF", "LTEXTOF", "HREG", "LREG", "DEF", "HEXNUM", "BINNUM", "DECNUM", 
		"REALNUM", "CHAR", "STRING", "FSTRING", "BOOLLIT", "TRUE", "FALSE", "IDENTIFIER", 
		"IDSTART", "IDCONT", "CURADDR", "CURCNT", "NONEARG", "ErrorCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Z80Asm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Z80AsmParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Z80AsmParser.Eof, 0); }
		public AsmlineContext[] asmline() {
			return GetRuleContexts<AsmlineContext>();
		}
		public AsmlineContext asmline(int i) {
			return GetRuleContext<AsmlineContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(Z80AsmParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(Z80AsmParser.NEWLINE, i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			int _alt;
			State = 189;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162; Match(Eof);
				}
				break;
			case COMMENT:
			case NEWLINE:
			case ASSIGN:
			case LDBRAC:
			case NOP:
			case RLCA:
			case RRCA:
			case RLA:
			case RRA:
			case DAA:
			case CPL:
			case SCF:
			case CCF:
			case HALT:
			case RET:
			case EXX:
			case DI:
			case EI:
			case NEG:
			case RETN:
			case RETI:
			case RLD:
			case RRD:
			case LDI:
			case CPI:
			case INI:
			case OUTI:
			case LDD:
			case CPD:
			case IND:
			case OUTD:
			case LDIR:
			case CPIR:
			case INIR:
			case OTIR:
			case LDDR:
			case CPDR:
			case INDR:
			case OTDR:
			case LD:
			case INC:
			case DEC:
			case EX:
			case ADD:
			case ADC:
			case SUB:
			case SBC:
			case AND:
			case XOR:
			case OR:
			case CP:
			case DJNZ:
			case JR:
			case JP:
			case CALL:
			case RST:
			case PUSH:
			case POP:
			case IN:
			case OUT:
			case IM:
			case RLC:
			case RRC:
			case RL:
			case RR:
			case SLA:
			case SRA:
			case SLL:
			case SRL:
			case BIT:
			case RES:
			case SET:
			case SWAPNIB:
			case MUL:
			case MIRROR:
			case TEST:
			case NEXTREG:
			case OUTINB:
			case LDIX:
			case LDIRX:
			case LDDX:
			case LDDRX:
			case PIXELDN:
			case PIXELAD:
			case SETAE:
			case LDPIRX:
			case LDIRSCALE:
			case IFDEF:
			case IFNDEF:
			case ENDIF:
			case ELSE:
			case DEFINE:
			case UNDEF:
			case INCLUDE:
			case IF:
			case IFMOD:
			case IFNMOD:
			case ORGPRAG:
			case ENTPRAG:
			case XENTPRAG:
			case EQUPRAG:
			case VARPRAG:
			case DISPRAG:
			case DBPRAG:
			case DWPRAG:
			case DMPRAG:
			case SKIPRAG:
			case EXTPRAG:
			case DSPRAG:
			case FBPRAG:
			case FWPRAG:
			case MODPRAG:
			case ALGPRAG:
			case TRACE:
			case TRACEHEX:
			case RNDSEED:
			case DGPRAG:
			case ERRORPR:
			case INCBIN:
			case MACRO:
			case ENDMACRO:
			case LOOP:
			case ENDLOOP:
			case REPEAT:
			case UNTIL:
			case WHILE:
			case ENDWHILE:
			case IFSTMT:
			case ELIF:
			case ELSESTMT:
			case ENDIFSTMT:
			case FOR:
			case FORNEXT:
			case NEXT:
			case BREAK:
			case CONTINUE:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 163; Match(NEWLINE);
					}
					}
					State = 168;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 169; asmline();
				State = 178;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 171;
						_errHandler.Sync(this);
						_la = _input.La(1);
						do {
							{
							{
							State = 170; Match(NEWLINE);
							}
							}
							State = 173;
							_errHandler.Sync(this);
							_la = _input.La(1);
						} while ( _la==NEWLINE );
						State = 175; asmline();
						}
						} 
					}
					State = 180;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				}
				State = 184;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 181; Match(NEWLINE);
					}
					}
					State = 186;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 187; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmlineContext : ParserRuleContext {
		public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public MacroInvocationContext macroInvocation() {
			return GetRuleContext<MacroInvocationContext>(0);
		}
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public AsmlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAsmline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAsmline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsmline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsmlineContext asmline() {
		AsmlineContext _localctx = new AsmlineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_asmline);
		int _la;
		try {
			State = 213;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 191; label();
					}
					break;
				}
				State = 199;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ASSIGN:
				case ORGPRAG:
				case ENTPRAG:
				case XENTPRAG:
				case EQUPRAG:
				case VARPRAG:
				case DISPRAG:
				case DBPRAG:
				case DWPRAG:
				case DMPRAG:
				case SKIPRAG:
				case EXTPRAG:
				case DSPRAG:
				case FBPRAG:
				case FWPRAG:
				case MODPRAG:
				case ALGPRAG:
				case TRACE:
				case TRACEHEX:
				case RNDSEED:
				case DGPRAG:
				case ERRORPR:
				case INCBIN:
					{
					State = 194; pragma();
					}
					break;
				case NOP:
				case RLCA:
				case RRCA:
				case RLA:
				case RRA:
				case DAA:
				case CPL:
				case SCF:
				case CCF:
				case HALT:
				case RET:
				case EXX:
				case DI:
				case EI:
				case NEG:
				case RETN:
				case RETI:
				case RLD:
				case RRD:
				case LDI:
				case CPI:
				case INI:
				case OUTI:
				case LDD:
				case CPD:
				case IND:
				case OUTD:
				case LDIR:
				case CPIR:
				case INIR:
				case OTIR:
				case LDDR:
				case CPDR:
				case INDR:
				case OTDR:
				case LD:
				case INC:
				case DEC:
				case EX:
				case ADD:
				case ADC:
				case SUB:
				case SBC:
				case AND:
				case XOR:
				case OR:
				case CP:
				case DJNZ:
				case JR:
				case JP:
				case CALL:
				case RST:
				case PUSH:
				case POP:
				case IN:
				case OUT:
				case IM:
				case RLC:
				case RRC:
				case RL:
				case RR:
				case SLA:
				case SRA:
				case SLL:
				case SRL:
				case BIT:
				case RES:
				case SET:
				case SWAPNIB:
				case MUL:
				case MIRROR:
				case TEST:
				case NEXTREG:
				case OUTINB:
				case LDIX:
				case LDIRX:
				case LDDX:
				case LDDRX:
				case PIXELDN:
				case PIXELAD:
				case SETAE:
				case LDPIRX:
				case LDIRSCALE:
					{
					State = 195; operation();
					}
					break;
				case LDBRAC:
					{
					State = 196; macroParam();
					}
					break;
				case MACRO:
				case ENDMACRO:
				case LOOP:
				case ENDLOOP:
				case REPEAT:
				case UNTIL:
				case WHILE:
				case ENDWHILE:
				case IFSTMT:
				case ELIF:
				case ELSESTMT:
				case ENDIFSTMT:
				case FOR:
				case FORNEXT:
				case NEXT:
				case BREAK:
				case CONTINUE:
					{
					State = 197; statement();
					}
					break;
				case IDENTIFIER:
					{
					State = 198; macroInvocation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 202;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 201; comment();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204; directive();
				State = 206;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 205; comment();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 208; comment();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 209; label();
				State = 211;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMENT) {
					{
					State = 210; comment();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode COLON() { return GetToken(Z80AsmParser.COLON, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(IDENTIFIER);
			State = 217;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 216; Match(COLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(Z80AsmParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		public OrgPragmaContext orgPragma() {
			return GetRuleContext<OrgPragmaContext>(0);
		}
		public EntPragmaContext entPragma() {
			return GetRuleContext<EntPragmaContext>(0);
		}
		public XentPragmaContext xentPragma() {
			return GetRuleContext<XentPragmaContext>(0);
		}
		public DispPragmaContext dispPragma() {
			return GetRuleContext<DispPragmaContext>(0);
		}
		public EquPragmaContext equPragma() {
			return GetRuleContext<EquPragmaContext>(0);
		}
		public VarPragmaContext varPragma() {
			return GetRuleContext<VarPragmaContext>(0);
		}
		public DefbPragmaContext defbPragma() {
			return GetRuleContext<DefbPragmaContext>(0);
		}
		public DefwPragmaContext defwPragma() {
			return GetRuleContext<DefwPragmaContext>(0);
		}
		public DefmPragmaContext defmPragma() {
			return GetRuleContext<DefmPragmaContext>(0);
		}
		public SkipPragmaContext skipPragma() {
			return GetRuleContext<SkipPragmaContext>(0);
		}
		public ExternPragmaContext externPragma() {
			return GetRuleContext<ExternPragmaContext>(0);
		}
		public DefsPragmaContext defsPragma() {
			return GetRuleContext<DefsPragmaContext>(0);
		}
		public FillbPragmaContext fillbPragma() {
			return GetRuleContext<FillbPragmaContext>(0);
		}
		public FillwPragmaContext fillwPragma() {
			return GetRuleContext<FillwPragmaContext>(0);
		}
		public ModelPragmaContext modelPragma() {
			return GetRuleContext<ModelPragmaContext>(0);
		}
		public AlignPragmaContext alignPragma() {
			return GetRuleContext<AlignPragmaContext>(0);
		}
		public TracePragmaContext tracePragma() {
			return GetRuleContext<TracePragmaContext>(0);
		}
		public RndSeedPragmaContext rndSeedPragma() {
			return GetRuleContext<RndSeedPragmaContext>(0);
		}
		public DefgPragmaContext defgPragma() {
			return GetRuleContext<DefgPragmaContext>(0);
		}
		public ErrorPragmaContext errorPragma() {
			return GetRuleContext<ErrorPragmaContext>(0);
		}
		public IncBinPragmaContext incBinPragma() {
			return GetRuleContext<IncBinPragmaContext>(0);
		}
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_pragma);
		try {
			State = 242;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ORGPRAG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 221; orgPragma();
				}
				break;
			case ENTPRAG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222; entPragma();
				}
				break;
			case XENTPRAG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 223; xentPragma();
				}
				break;
			case DISPRAG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 224; dispPragma();
				}
				break;
			case EQUPRAG:
				EnterOuterAlt(_localctx, 5);
				{
				State = 225; equPragma();
				}
				break;
			case ASSIGN:
			case VARPRAG:
				EnterOuterAlt(_localctx, 6);
				{
				State = 226; varPragma();
				}
				break;
			case DBPRAG:
				EnterOuterAlt(_localctx, 7);
				{
				State = 227; defbPragma();
				}
				break;
			case DWPRAG:
				EnterOuterAlt(_localctx, 8);
				{
				State = 228; defwPragma();
				}
				break;
			case DMPRAG:
				EnterOuterAlt(_localctx, 9);
				{
				State = 229; defmPragma();
				}
				break;
			case SKIPRAG:
				EnterOuterAlt(_localctx, 10);
				{
				State = 230; skipPragma();
				}
				break;
			case EXTPRAG:
				EnterOuterAlt(_localctx, 11);
				{
				State = 231; externPragma();
				}
				break;
			case DSPRAG:
				EnterOuterAlt(_localctx, 12);
				{
				State = 232; defsPragma();
				}
				break;
			case FBPRAG:
				EnterOuterAlt(_localctx, 13);
				{
				State = 233; fillbPragma();
				}
				break;
			case FWPRAG:
				EnterOuterAlt(_localctx, 14);
				{
				State = 234; fillwPragma();
				}
				break;
			case MODPRAG:
				EnterOuterAlt(_localctx, 15);
				{
				State = 235; modelPragma();
				}
				break;
			case ALGPRAG:
				EnterOuterAlt(_localctx, 16);
				{
				State = 236; alignPragma();
				}
				break;
			case TRACE:
			case TRACEHEX:
				EnterOuterAlt(_localctx, 17);
				{
				State = 237; tracePragma();
				}
				break;
			case RNDSEED:
				EnterOuterAlt(_localctx, 18);
				{
				State = 238; rndSeedPragma();
				}
				break;
			case DGPRAG:
				EnterOuterAlt(_localctx, 19);
				{
				State = 239; defgPragma();
				}
				break;
			case ERRORPR:
				EnterOuterAlt(_localctx, 20);
				{
				State = 240; errorPragma();
				}
				break;
			case INCBIN:
				EnterOuterAlt(_localctx, 21);
				{
				State = 241; incBinPragma();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode IFDEF() { return GetToken(Z80AsmParser.IFDEF, 0); }
		public ITerminalNode IFNDEF() { return GetToken(Z80AsmParser.IFNDEF, 0); }
		public ITerminalNode DEFINE() { return GetToken(Z80AsmParser.DEFINE, 0); }
		public ITerminalNode UNDEF() { return GetToken(Z80AsmParser.UNDEF, 0); }
		public ITerminalNode IFMOD() { return GetToken(Z80AsmParser.IFMOD, 0); }
		public ITerminalNode IFNMOD() { return GetToken(Z80AsmParser.IFNMOD, 0); }
		public ITerminalNode ENDIF() { return GetToken(Z80AsmParser.ENDIF, 0); }
		public ITerminalNode ELSE() { return GetToken(Z80AsmParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(Z80AsmParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode INCLUDE() { return GetToken(Z80AsmParser.INCLUDE, 0); }
		public ITerminalNode STRING() { return GetToken(Z80AsmParser.STRING, 0); }
		public ITerminalNode FSTRING() { return GetToken(Z80AsmParser.FSTRING, 0); }
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_directive);
		int _la;
		try {
			State = 252;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IFDEF:
			case IFNDEF:
			case DEFINE:
			case UNDEF:
			case IFMOD:
			case IFNMOD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 244;
				_la = _input.La(1);
				if ( !(((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (IFDEF - 147)) | (1L << (IFNDEF - 147)) | (1L << (DEFINE - 147)) | (1L << (UNDEF - 147)) | (1L << (IFMOD - 147)) | (1L << (IFNMOD - 147)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 245; Match(IDENTIFIER);
				}
				break;
			case ENDIF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 246; Match(ENDIF);
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 247; Match(ELSE);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 248; Match(IF);
				State = 249; expr();
				}
				break;
			case INCLUDE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 250; Match(INCLUDE);
				State = 251;
				_la = _input.La(1);
				if ( !(_la==STRING || _la==FSTRING) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public MacroStatementContext macroStatement() {
			return GetRuleContext<MacroStatementContext>(0);
		}
		public MacroEndMarkerContext macroEndMarker() {
			return GetRuleContext<MacroEndMarkerContext>(0);
		}
		public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		public LoopEndMarkerContext loopEndMarker() {
			return GetRuleContext<LoopEndMarkerContext>(0);
		}
		public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		public UntilStatementContext untilStatement() {
			return GetRuleContext<UntilStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public WhileEndMarkerContext whileEndMarker() {
			return GetRuleContext<WhileEndMarkerContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElifStatementContext elifStatement() {
			return GetRuleContext<ElifStatementContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public EndifStatementContext endifStatement() {
			return GetRuleContext<EndifStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public NextStatementContext nextStatement() {
			return GetRuleContext<NextStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 270;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case MACRO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254; macroStatement();
				}
				break;
			case ENDMACRO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255; macroEndMarker();
				}
				break;
			case LOOP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 256; loopStatement();
				}
				break;
			case ENDLOOP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 257; loopEndMarker();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 258; repeatStatement();
				}
				break;
			case UNTIL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 259; untilStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 260; whileStatement();
				}
				break;
			case ENDWHILE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 261; whileEndMarker();
				}
				break;
			case IFSTMT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 262; ifStatement();
				}
				break;
			case ELIF:
				EnterOuterAlt(_localctx, 10);
				{
				State = 263; elifStatement();
				}
				break;
			case ELSESTMT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 264; elseStatement();
				}
				break;
			case ENDIFSTMT:
				EnterOuterAlt(_localctx, 12);
				{
				State = 265; endifStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 13);
				{
				State = 266; forStatement();
				}
				break;
			case FORNEXT:
			case NEXT:
				EnterOuterAlt(_localctx, 14);
				{
				State = 267; nextStatement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 15);
				{
				State = 268; breakStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 269; continueStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroStatementContext : ParserRuleContext {
		public ITerminalNode MACRO() { return GetToken(Z80AsmParser.MACRO, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(Z80AsmParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Z80AsmParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public MacroStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroStatementContext macroStatement() {
		MacroStatementContext _localctx = new MacroStatementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_macroStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(MACRO);
			State = 273; Match(LPAR);
			State = 282;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 274; Match(IDENTIFIER);
				State = 279;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 275; Match(COMMA);
					State = 276; Match(IDENTIFIER);
					}
					}
					State = 281;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 284; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDMACRO() { return GetToken(Z80AsmParser.ENDMACRO, 0); }
		public MacroEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroEndMarkerContext macroEndMarker() {
		MacroEndMarkerContext _localctx = new MacroEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_macroEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; Match(ENDMACRO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		public ITerminalNode LOOP() { return GetToken(Z80AsmParser.LOOP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(LOOP);
			State = 289; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDLOOP() { return GetToken(Z80AsmParser.ENDLOOP, 0); }
		public LoopEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLoopEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLoopEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopEndMarkerContext loopEndMarker() {
		LoopEndMarkerContext _localctx = new LoopEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_loopEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; Match(ENDLOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		public ITerminalNode REPEAT() { return GetToken(Z80AsmParser.REPEAT, 0); }
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(REPEAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilStatementContext : ParserRuleContext {
		public ITerminalNode UNTIL() { return GetToken(Z80AsmParser.UNTIL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UntilStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterUntilStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitUntilStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilStatementContext untilStatement() {
		UntilStatementContext _localctx = new UntilStatementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_untilStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(UNTIL);
			State = 296; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(Z80AsmParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(WHILE);
			State = 299; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileEndMarkerContext : ParserRuleContext {
		public ITerminalNode ENDWHILE() { return GetToken(Z80AsmParser.ENDWHILE, 0); }
		public WhileEndMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileEndMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterWhileEndMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitWhileEndMarker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileEndMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileEndMarkerContext whileEndMarker() {
		WhileEndMarkerContext _localctx = new WhileEndMarkerContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_whileEndMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(ENDWHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode IFSTMT() { return GetToken(Z80AsmParser.IFSTMT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(IFSTMT);
			State = 304; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifStatementContext : ParserRuleContext {
		public ITerminalNode ELIF() { return GetToken(Z80AsmParser.ELIF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ElifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterElifStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitElifStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifStatementContext elifStatement() {
		ElifStatementContext _localctx = new ElifStatementContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_elifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(ELIF);
			State = 307; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ITerminalNode ELSESTMT() { return GetToken(Z80AsmParser.ELSESTMT, 0); }
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(ELSESTMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndifStatementContext : ParserRuleContext {
		public ITerminalNode ENDIFSTMT() { return GetToken(Z80AsmParser.ENDIFSTMT, 0); }
		public EndifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEndifStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEndifStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndifStatementContext endifStatement() {
		EndifStatementContext _localctx = new EndifStatementContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_endifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(ENDIFSTMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(Z80AsmParser.FOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(Z80AsmParser.ASSIGN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TO() { return GetToken(Z80AsmParser.TO, 0); }
		public ITerminalNode STEP() { return GetToken(Z80AsmParser.STEP, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; Match(FOR);
			State = 314; Match(IDENTIFIER);
			State = 315; Match(ASSIGN);
			State = 316; expr();
			State = 317; Match(TO);
			State = 318; expr();
			State = 321;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 319; Match(STEP);
				State = 320; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextStatementContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(Z80AsmParser.NEXT, 0); }
		public ITerminalNode FORNEXT() { return GetToken(Z80AsmParser.FORNEXT, 0); }
		public NextStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterNextStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitNextStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextStatementContext nextStatement() {
		NextStatementContext _localctx = new NextStatementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_nextStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			_la = _input.La(1);
			if ( !(_la==FORNEXT || _la==NEXT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(Z80AsmParser.BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(Z80AsmParser.CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroInvocationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public MacroArgumentContext[] macroArgument() {
			return GetRuleContexts<MacroArgumentContext>();
		}
		public MacroArgumentContext macroArgument(int i) {
			return GetRuleContext<MacroArgumentContext>(i);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public MacroInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroInvocationContext macroInvocation() {
		MacroInvocationContext _localctx = new MacroInvocationContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_macroInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; Match(IDENTIFIER);
			State = 330; Match(LPAR);
			State = 331; macroArgument();
			State = 336;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 332; Match(COMMA);
				State = 333; macroArgument();
				}
				}
				State = 338;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 339; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroArgumentContext : ParserRuleContext {
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public MacroArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroArgumentContext macroArgument() {
		MacroArgumentContext _localctx = new MacroArgumentContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_macroArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LSBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << LDBRAC) | (1L << EXCLM) | (1L << A) | (1L << B) | (1L << C) | (1L << D) | (1L << E) | (1L << H) | (1L << L) | (1L << I) | (1L << R) | (1L << XL) | (1L << XH) | (1L << YL) | (1L << YH) | (1L << BC) | (1L << DE) | (1L << HL) | (1L << SP) | (1L << IX) | (1L << IY) | (1L << AF) | (1L << AF_) | (1L << Z) | (1L << NZ) | (1L << NC) | (1L << PO) | (1L << PE) | (1L << P) | (1L << M))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (TEXTOF - 198)) | (1L << (LTEXTOF - 198)) | (1L << (HREG - 198)) | (1L << (LREG - 198)) | (1L << (DEF - 198)) | (1L << (HEXNUM - 198)) | (1L << (BINNUM - 198)) | (1L << (DECNUM - 198)) | (1L << (REALNUM - 198)) | (1L << (CHAR - 198)) | (1L << (STRING - 198)) | (1L << (BOOLLIT - 198)) | (1L << (IDENTIFIER - 198)) | (1L << (CURADDR - 198)) | (1L << (CURCNT - 198)) | (1L << (NONEARG - 198)))) != 0)) {
				{
				State = 341; operand();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrgPragmaContext : ParserRuleContext {
		public ITerminalNode ORGPRAG() { return GetToken(Z80AsmParser.ORGPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OrgPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orgPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOrgPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOrgPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrgPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrgPragmaContext orgPragma() {
		OrgPragmaContext _localctx = new OrgPragmaContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_orgPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(ORGPRAG);
			State = 345; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntPragmaContext : ParserRuleContext {
		public ITerminalNode ENTPRAG() { return GetToken(Z80AsmParser.ENTPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EntPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEntPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEntPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntPragmaContext entPragma() {
		EntPragmaContext _localctx = new EntPragmaContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_entPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(ENTPRAG);
			State = 348; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XentPragmaContext : ParserRuleContext {
		public ITerminalNode XENTPRAG() { return GetToken(Z80AsmParser.XENTPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public XentPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xentPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterXentPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitXentPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXentPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XentPragmaContext xentPragma() {
		XentPragmaContext _localctx = new XentPragmaContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_xentPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(XENTPRAG);
			State = 351; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DispPragmaContext : ParserRuleContext {
		public ITerminalNode DISPRAG() { return GetToken(Z80AsmParser.DISPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DispPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDispPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDispPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDispPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DispPragmaContext dispPragma() {
		DispPragmaContext _localctx = new DispPragmaContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_dispPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(DISPRAG);
			State = 354; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquPragmaContext : ParserRuleContext {
		public ITerminalNode EQUPRAG() { return GetToken(Z80AsmParser.EQUPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EquPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEquPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEquPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquPragmaContext equPragma() {
		EquPragmaContext _localctx = new EquPragmaContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_equPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(EQUPRAG);
			State = 357; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarPragmaContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode VARPRAG() { return GetToken(Z80AsmParser.VARPRAG, 0); }
		public ITerminalNode ASSIGN() { return GetToken(Z80AsmParser.ASSIGN, 0); }
		public VarPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterVarPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitVarPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarPragmaContext varPragma() {
		VarPragmaContext _localctx = new VarPragmaContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_varPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			_la = _input.La(1);
			if ( !(_la==ASSIGN || _la==VARPRAG) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 360; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefbPragmaContext : ParserRuleContext {
		public ITerminalNode DBPRAG() { return GetToken(Z80AsmParser.DBPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public DefbPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defbPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefbPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefbPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefbPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefbPragmaContext defbPragma() {
		DefbPragmaContext _localctx = new DefbPragmaContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_defbPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(DBPRAG);
			State = 363; expr();
			State = 368;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 364; Match(COMMA);
				State = 365; expr();
				}
				}
				State = 370;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefwPragmaContext : ParserRuleContext {
		public ITerminalNode DWPRAG() { return GetToken(Z80AsmParser.DWPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public DefwPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defwPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefwPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefwPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefwPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefwPragmaContext defwPragma() {
		DefwPragmaContext _localctx = new DefwPragmaContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_defwPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(DWPRAG);
			State = 372; expr();
			State = 377;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 373; Match(COMMA);
				State = 374; expr();
				}
				}
				State = 379;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefmPragmaContext : ParserRuleContext {
		public ITerminalNode DMPRAG() { return GetToken(Z80AsmParser.DMPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefmPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defmPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefmPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefmPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefmPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefmPragmaContext defmPragma() {
		DefmPragmaContext _localctx = new DefmPragmaContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_defmPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(DMPRAG);
			State = 381; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipPragmaContext : ParserRuleContext {
		public ITerminalNode SKIPRAG() { return GetToken(Z80AsmParser.SKIPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public SkipPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skipPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterSkipPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitSkipPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipPragmaContext skipPragma() {
		SkipPragmaContext _localctx = new SkipPragmaContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_skipPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(SKIPRAG);
			State = 384; expr();
			State = 387;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 385; Match(COMMA);
				State = 386; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternPragmaContext : ParserRuleContext {
		public ITerminalNode EXTPRAG() { return GetToken(Z80AsmParser.EXTPRAG, 0); }
		public ExternPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterExternPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitExternPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternPragmaContext externPragma() {
		ExternPragmaContext _localctx = new ExternPragmaContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_externPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(EXTPRAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefsPragmaContext : ParserRuleContext {
		public ITerminalNode DSPRAG() { return GetToken(Z80AsmParser.DSPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefsPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defsPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefsPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefsPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefsPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefsPragmaContext defsPragma() {
		DefsPragmaContext _localctx = new DefsPragmaContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_defsPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; Match(DSPRAG);
			State = 392; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillbPragmaContext : ParserRuleContext {
		public ITerminalNode FBPRAG() { return GetToken(Z80AsmParser.FBPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public FillbPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillbPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFillbPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFillbPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillbPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillbPragmaContext fillbPragma() {
		FillbPragmaContext _localctx = new FillbPragmaContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_fillbPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; Match(FBPRAG);
			State = 395; expr();
			State = 396; Match(COMMA);
			State = 397; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillwPragmaContext : ParserRuleContext {
		public ITerminalNode FWPRAG() { return GetToken(Z80AsmParser.FWPRAG, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Z80AsmParser.COMMA, 0); }
		public FillwPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillwPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFillwPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFillwPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillwPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillwPragmaContext fillwPragma() {
		FillwPragmaContext _localctx = new FillwPragmaContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_fillwPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; Match(FWPRAG);
			State = 400; expr();
			State = 401; Match(COMMA);
			State = 402; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelPragmaContext : ParserRuleContext {
		public ITerminalNode MODPRAG() { return GetToken(Z80AsmParser.MODPRAG, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode NEXT() { return GetToken(Z80AsmParser.NEXT, 0); }
		public ModelPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterModelPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitModelPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelPragmaContext modelPragma() {
		ModelPragmaContext _localctx = new ModelPragmaContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_modelPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; Match(MODPRAG);
			State = 405;
			_la = _input.La(1);
			if ( !(_la==NEXT || _la==IDENTIFIER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignPragmaContext : ParserRuleContext {
		public ITerminalNode ALGPRAG() { return GetToken(Z80AsmParser.ALGPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AlignPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAlignPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAlignPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlignPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlignPragmaContext alignPragma() {
		AlignPragmaContext _localctx = new AlignPragmaContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_alignPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(ALGPRAG);
			State = 409;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LSBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << LDBRAC) | (1L << EXCLM))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (TEXTOF - 198)) | (1L << (LTEXTOF - 198)) | (1L << (DEF - 198)) | (1L << (HEXNUM - 198)) | (1L << (BINNUM - 198)) | (1L << (DECNUM - 198)) | (1L << (REALNUM - 198)) | (1L << (CHAR - 198)) | (1L << (STRING - 198)) | (1L << (BOOLLIT - 198)) | (1L << (IDENTIFIER - 198)) | (1L << (CURADDR - 198)) | (1L << (CURCNT - 198)))) != 0)) {
				{
				State = 408; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TracePragmaContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TRACE() { return GetToken(Z80AsmParser.TRACE, 0); }
		public ITerminalNode TRACEHEX() { return GetToken(Z80AsmParser.TRACEHEX, 0); }
		public TracePragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tracePragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTracePragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTracePragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTracePragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TracePragmaContext tracePragma() {
		TracePragmaContext _localctx = new TracePragmaContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_tracePragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			_la = _input.La(1);
			if ( !(_la==TRACE || _la==TRACEHEX) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 412; expr();
			State = 417;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 413; Match(COMMA);
				State = 414; expr();
				}
				}
				State = 419;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RndSeedPragmaContext : ParserRuleContext {
		public ITerminalNode RNDSEED() { return GetToken(Z80AsmParser.RNDSEED, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RndSeedPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rndSeedPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRndSeedPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRndSeedPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRndSeedPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RndSeedPragmaContext rndSeedPragma() {
		RndSeedPragmaContext _localctx = new RndSeedPragmaContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_rndSeedPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; Match(RNDSEED);
			State = 422;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LSBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << LDBRAC) | (1L << EXCLM))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (TEXTOF - 198)) | (1L << (LTEXTOF - 198)) | (1L << (DEF - 198)) | (1L << (HEXNUM - 198)) | (1L << (BINNUM - 198)) | (1L << (DECNUM - 198)) | (1L << (REALNUM - 198)) | (1L << (CHAR - 198)) | (1L << (STRING - 198)) | (1L << (BOOLLIT - 198)) | (1L << (IDENTIFIER - 198)) | (1L << (CURADDR - 198)) | (1L << (CURCNT - 198)))) != 0)) {
				{
				State = 421; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefgPragmaContext : ParserRuleContext {
		public ITerminalNode DGPRAG() { return GetToken(Z80AsmParser.DGPRAG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefgPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defgPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterDefgPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitDefgPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefgPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefgPragmaContext defgPragma() {
		DefgPragmaContext _localctx = new DefgPragmaContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_defgPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(DGPRAG);
			State = 425; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorPragmaContext : ParserRuleContext {
		public ITerminalNode ERRORPR() { return GetToken(Z80AsmParser.ERRORPR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ErrorPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterErrorPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitErrorPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorPragmaContext errorPragma() {
		ErrorPragmaContext _localctx = new ErrorPragmaContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_errorPragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(ERRORPR);
			State = 428; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncBinPragmaContext : ParserRuleContext {
		public ITerminalNode INCBIN() { return GetToken(Z80AsmParser.INCBIN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IncBinPragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incBinPragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIncBinPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIncBinPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncBinPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncBinPragmaContext incBinPragma() {
		IncBinPragmaContext _localctx = new IncBinPragmaContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_incBinPragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(INCBIN);
			State = 431; expr();
			State = 438;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 432; Match(COMMA);
				State = 433; expr();
				State = 436;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 434; Match(COMMA);
					State = 435; expr();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public TrivialOperationContext trivialOperation() {
			return GetRuleContext<TrivialOperationContext>(0);
		}
		public CompoundOperationContext compoundOperation() {
			return GetRuleContext<CompoundOperationContext>(0);
		}
		public TrivialNextOperationContext trivialNextOperation() {
			return GetRuleContext<TrivialNextOperationContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_operation);
		try {
			State = 443;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NOP:
			case RLCA:
			case RRCA:
			case RLA:
			case RRA:
			case DAA:
			case CPL:
			case SCF:
			case CCF:
			case HALT:
			case EXX:
			case DI:
			case EI:
			case NEG:
			case RETN:
			case RETI:
			case RLD:
			case RRD:
			case LDI:
			case CPI:
			case INI:
			case OUTI:
			case LDD:
			case CPD:
			case IND:
			case OUTD:
			case LDIR:
			case CPIR:
			case INIR:
			case OTIR:
			case LDDR:
			case CPDR:
			case INDR:
			case OTDR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 440; trivialOperation();
				}
				break;
			case RET:
			case LD:
			case INC:
			case DEC:
			case EX:
			case ADD:
			case ADC:
			case SUB:
			case SBC:
			case AND:
			case XOR:
			case OR:
			case CP:
			case DJNZ:
			case JR:
			case JP:
			case CALL:
			case RST:
			case PUSH:
			case POP:
			case IN:
			case OUT:
			case IM:
			case RLC:
			case RRC:
			case RL:
			case RR:
			case SLA:
			case SRA:
			case SLL:
			case SRL:
			case BIT:
			case RES:
			case SET:
			case MIRROR:
			case TEST:
			case NEXTREG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 441; compoundOperation();
				}
				break;
			case SWAPNIB:
			case MUL:
			case OUTINB:
			case LDIX:
			case LDIRX:
			case LDDX:
			case LDDRX:
			case PIXELDN:
			case PIXELAD:
			case SETAE:
			case LDPIRX:
			case LDIRSCALE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 442; trivialNextOperation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrivialOperationContext : ParserRuleContext {
		public ITerminalNode NOP() { return GetToken(Z80AsmParser.NOP, 0); }
		public ITerminalNode RLCA() { return GetToken(Z80AsmParser.RLCA, 0); }
		public ITerminalNode RRCA() { return GetToken(Z80AsmParser.RRCA, 0); }
		public ITerminalNode RLA() { return GetToken(Z80AsmParser.RLA, 0); }
		public ITerminalNode RRA() { return GetToken(Z80AsmParser.RRA, 0); }
		public ITerminalNode DAA() { return GetToken(Z80AsmParser.DAA, 0); }
		public ITerminalNode CPL() { return GetToken(Z80AsmParser.CPL, 0); }
		public ITerminalNode SCF() { return GetToken(Z80AsmParser.SCF, 0); }
		public ITerminalNode CCF() { return GetToken(Z80AsmParser.CCF, 0); }
		public ITerminalNode HALT() { return GetToken(Z80AsmParser.HALT, 0); }
		public ITerminalNode EXX() { return GetToken(Z80AsmParser.EXX, 0); }
		public ITerminalNode DI() { return GetToken(Z80AsmParser.DI, 0); }
		public ITerminalNode EI() { return GetToken(Z80AsmParser.EI, 0); }
		public ITerminalNode NEG() { return GetToken(Z80AsmParser.NEG, 0); }
		public ITerminalNode RETN() { return GetToken(Z80AsmParser.RETN, 0); }
		public ITerminalNode RETI() { return GetToken(Z80AsmParser.RETI, 0); }
		public ITerminalNode RLD() { return GetToken(Z80AsmParser.RLD, 0); }
		public ITerminalNode RRD() { return GetToken(Z80AsmParser.RRD, 0); }
		public ITerminalNode LDI() { return GetToken(Z80AsmParser.LDI, 0); }
		public ITerminalNode CPI() { return GetToken(Z80AsmParser.CPI, 0); }
		public ITerminalNode INI() { return GetToken(Z80AsmParser.INI, 0); }
		public ITerminalNode OUTI() { return GetToken(Z80AsmParser.OUTI, 0); }
		public ITerminalNode LDD() { return GetToken(Z80AsmParser.LDD, 0); }
		public ITerminalNode CPD() { return GetToken(Z80AsmParser.CPD, 0); }
		public ITerminalNode IND() { return GetToken(Z80AsmParser.IND, 0); }
		public ITerminalNode OUTD() { return GetToken(Z80AsmParser.OUTD, 0); }
		public ITerminalNode LDIR() { return GetToken(Z80AsmParser.LDIR, 0); }
		public ITerminalNode CPIR() { return GetToken(Z80AsmParser.CPIR, 0); }
		public ITerminalNode INIR() { return GetToken(Z80AsmParser.INIR, 0); }
		public ITerminalNode OTIR() { return GetToken(Z80AsmParser.OTIR, 0); }
		public ITerminalNode LDDR() { return GetToken(Z80AsmParser.LDDR, 0); }
		public ITerminalNode CPDR() { return GetToken(Z80AsmParser.CPDR, 0); }
		public ITerminalNode INDR() { return GetToken(Z80AsmParser.INDR, 0); }
		public ITerminalNode OTDR() { return GetToken(Z80AsmParser.OTDR, 0); }
		public TrivialOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trivialOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTrivialOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTrivialOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrivialOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrivialOperationContext trivialOperation() {
		TrivialOperationContext _localctx = new TrivialOperationContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_trivialOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			_la = _input.La(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (NOP - 63)) | (1L << (RLCA - 63)) | (1L << (RRCA - 63)) | (1L << (RLA - 63)) | (1L << (RRA - 63)) | (1L << (DAA - 63)) | (1L << (CPL - 63)) | (1L << (SCF - 63)) | (1L << (CCF - 63)) | (1L << (HALT - 63)) | (1L << (EXX - 63)) | (1L << (DI - 63)) | (1L << (EI - 63)) | (1L << (NEG - 63)) | (1L << (RETN - 63)) | (1L << (RETI - 63)) | (1L << (RLD - 63)) | (1L << (RRD - 63)) | (1L << (LDI - 63)) | (1L << (CPI - 63)) | (1L << (INI - 63)) | (1L << (OUTI - 63)) | (1L << (LDD - 63)) | (1L << (CPD - 63)) | (1L << (IND - 63)) | (1L << (OUTD - 63)) | (1L << (LDIR - 63)) | (1L << (CPIR - 63)) | (1L << (INIR - 63)) | (1L << (OTIR - 63)) | (1L << (LDDR - 63)) | (1L << (CPDR - 63)) | (1L << (INDR - 63)) | (1L << (OTDR - 63)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundOperationContext : ParserRuleContext {
		public ITerminalNode LD() { return GetToken(Z80AsmParser.LD, 0); }
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public ITerminalNode INC() { return GetToken(Z80AsmParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(Z80AsmParser.DEC, 0); }
		public ITerminalNode EX() { return GetToken(Z80AsmParser.EX, 0); }
		public ITerminalNode ADD() { return GetToken(Z80AsmParser.ADD, 0); }
		public ITerminalNode ADC() { return GetToken(Z80AsmParser.ADC, 0); }
		public ITerminalNode SUB() { return GetToken(Z80AsmParser.SUB, 0); }
		public ITerminalNode SBC() { return GetToken(Z80AsmParser.SBC, 0); }
		public ITerminalNode AND() { return GetToken(Z80AsmParser.AND, 0); }
		public ITerminalNode XOR() { return GetToken(Z80AsmParser.XOR, 0); }
		public ITerminalNode OR() { return GetToken(Z80AsmParser.OR, 0); }
		public ITerminalNode CP() { return GetToken(Z80AsmParser.CP, 0); }
		public ITerminalNode DJNZ() { return GetToken(Z80AsmParser.DJNZ, 0); }
		public ITerminalNode JR() { return GetToken(Z80AsmParser.JR, 0); }
		public ITerminalNode JP() { return GetToken(Z80AsmParser.JP, 0); }
		public ITerminalNode CALL() { return GetToken(Z80AsmParser.CALL, 0); }
		public ITerminalNode RET() { return GetToken(Z80AsmParser.RET, 0); }
		public ITerminalNode RST() { return GetToken(Z80AsmParser.RST, 0); }
		public ITerminalNode PUSH() { return GetToken(Z80AsmParser.PUSH, 0); }
		public ITerminalNode POP() { return GetToken(Z80AsmParser.POP, 0); }
		public ITerminalNode IN() { return GetToken(Z80AsmParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(Z80AsmParser.OUT, 0); }
		public ITerminalNode IM() { return GetToken(Z80AsmParser.IM, 0); }
		public ITerminalNode RLC() { return GetToken(Z80AsmParser.RLC, 0); }
		public ITerminalNode RRC() { return GetToken(Z80AsmParser.RRC, 0); }
		public ITerminalNode RL() { return GetToken(Z80AsmParser.RL, 0); }
		public ITerminalNode RR() { return GetToken(Z80AsmParser.RR, 0); }
		public ITerminalNode SLA() { return GetToken(Z80AsmParser.SLA, 0); }
		public ITerminalNode SRA() { return GetToken(Z80AsmParser.SRA, 0); }
		public ITerminalNode SLL() { return GetToken(Z80AsmParser.SLL, 0); }
		public ITerminalNode SRL() { return GetToken(Z80AsmParser.SRL, 0); }
		public ITerminalNode BIT() { return GetToken(Z80AsmParser.BIT, 0); }
		public ITerminalNode RES() { return GetToken(Z80AsmParser.RES, 0); }
		public ITerminalNode SET() { return GetToken(Z80AsmParser.SET, 0); }
		public ITerminalNode MIRROR() { return GetToken(Z80AsmParser.MIRROR, 0); }
		public ITerminalNode TEST() { return GetToken(Z80AsmParser.TEST, 0); }
		public ITerminalNode NEXTREG() { return GetToken(Z80AsmParser.NEXTREG, 0); }
		public CompoundOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCompoundOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCompoundOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundOperationContext compoundOperation() {
		CompoundOperationContext _localctx = new CompoundOperationContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_compoundOperation);
		int _la;
		try {
			State = 650;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447; Match(LD);
				State = 448; operand();
				State = 449; Match(COMMA);
				State = 450; operand();
				}
				break;
			case INC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 452; Match(INC);
				State = 453; operand();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 454; Match(DEC);
				State = 455; operand();
				}
				break;
			case EX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 456; Match(EX);
				State = 457; operand();
				State = 458; Match(COMMA);
				State = 459; operand();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 461; Match(ADD);
				State = 462; operand();
				State = 463; Match(COMMA);
				State = 464; operand();
				}
				break;
			case ADC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 466; Match(ADC);
				State = 467; operand();
				State = 468; Match(COMMA);
				State = 469; operand();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 7);
				{
				State = 471; Match(SUB);
				State = 475;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					State = 472; operand();
					State = 473; Match(COMMA);
					}
					break;
				}
				State = 477; operand();
				}
				break;
			case SBC:
				EnterOuterAlt(_localctx, 8);
				{
				State = 478; Match(SBC);
				State = 479; operand();
				State = 480; Match(COMMA);
				State = 481; operand();
				}
				break;
			case AND:
				EnterOuterAlt(_localctx, 9);
				{
				State = 483; Match(AND);
				State = 487;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
				case 1:
					{
					State = 484; operand();
					State = 485; Match(COMMA);
					}
					break;
				}
				State = 489; operand();
				}
				break;
			case XOR:
				EnterOuterAlt(_localctx, 10);
				{
				State = 490; Match(XOR);
				State = 494;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
				case 1:
					{
					State = 491; operand();
					State = 492; Match(COMMA);
					}
					break;
				}
				State = 496; operand();
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 11);
				{
				State = 497; Match(OR);
				State = 501;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
				case 1:
					{
					State = 498; operand();
					State = 499; Match(COMMA);
					}
					break;
				}
				State = 503; operand();
				}
				break;
			case CP:
				EnterOuterAlt(_localctx, 12);
				{
				State = 504; Match(CP);
				State = 508;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
				case 1:
					{
					State = 505; operand();
					State = 506; Match(COMMA);
					}
					break;
				}
				State = 510; operand();
				}
				break;
			case DJNZ:
				EnterOuterAlt(_localctx, 13);
				{
				State = 511; Match(DJNZ);
				State = 512; operand();
				}
				break;
			case JR:
				EnterOuterAlt(_localctx, 14);
				{
				State = 513; Match(JR);
				State = 517;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
				case 1:
					{
					State = 514; operand();
					State = 515; Match(COMMA);
					}
					break;
				}
				State = 519; operand();
				}
				break;
			case JP:
				EnterOuterAlt(_localctx, 15);
				{
				State = 520; Match(JP);
				State = 524;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					State = 521; operand();
					State = 522; Match(COMMA);
					}
					break;
				}
				State = 526; operand();
				}
				break;
			case CALL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 527; Match(CALL);
				State = 531;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					State = 528; operand();
					State = 529; Match(COMMA);
					}
					break;
				}
				State = 533; operand();
				}
				break;
			case RET:
				EnterOuterAlt(_localctx, 17);
				{
				State = 534; Match(RET);
				State = 536;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LSBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << LDBRAC) | (1L << EXCLM) | (1L << A) | (1L << B) | (1L << C) | (1L << D) | (1L << E) | (1L << H) | (1L << L) | (1L << I) | (1L << R) | (1L << XL) | (1L << XH) | (1L << YL) | (1L << YH) | (1L << BC) | (1L << DE) | (1L << HL) | (1L << SP) | (1L << IX) | (1L << IY) | (1L << AF) | (1L << AF_) | (1L << Z) | (1L << NZ) | (1L << NC) | (1L << PO) | (1L << PE) | (1L << P) | (1L << M))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (TEXTOF - 198)) | (1L << (LTEXTOF - 198)) | (1L << (HREG - 198)) | (1L << (LREG - 198)) | (1L << (DEF - 198)) | (1L << (HEXNUM - 198)) | (1L << (BINNUM - 198)) | (1L << (DECNUM - 198)) | (1L << (REALNUM - 198)) | (1L << (CHAR - 198)) | (1L << (STRING - 198)) | (1L << (BOOLLIT - 198)) | (1L << (IDENTIFIER - 198)) | (1L << (CURADDR - 198)) | (1L << (CURCNT - 198)) | (1L << (NONEARG - 198)))) != 0)) {
					{
					State = 535; operand();
					}
				}

				}
				break;
			case RST:
				EnterOuterAlt(_localctx, 18);
				{
				State = 538; Match(RST);
				State = 539; operand();
				}
				break;
			case PUSH:
				EnterOuterAlt(_localctx, 19);
				{
				State = 540; Match(PUSH);
				State = 541; operand();
				}
				break;
			case POP:
				EnterOuterAlt(_localctx, 20);
				{
				State = 542; Match(POP);
				State = 543; operand();
				}
				break;
			case IN:
				EnterOuterAlt(_localctx, 21);
				{
				State = 544; Match(IN);
				State = 548;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					State = 545; operand();
					State = 546; Match(COMMA);
					}
					break;
				}
				State = 550; operand();
				}
				break;
			case OUT:
				EnterOuterAlt(_localctx, 22);
				{
				State = 551; Match(OUT);
				State = 555;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					State = 552; operand();
					State = 553; Match(COMMA);
					}
					break;
				}
				State = 557; operand();
				}
				break;
			case IM:
				EnterOuterAlt(_localctx, 23);
				{
				State = 558; Match(IM);
				State = 559; operand();
				}
				break;
			case RLC:
				EnterOuterAlt(_localctx, 24);
				{
				State = 560; Match(RLC);
				State = 564;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					State = 561; operand();
					State = 562; Match(COMMA);
					}
					break;
				}
				State = 566; operand();
				}
				break;
			case RRC:
				EnterOuterAlt(_localctx, 25);
				{
				State = 567; Match(RRC);
				State = 571;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					State = 568; operand();
					State = 569; Match(COMMA);
					}
					break;
				}
				State = 573; operand();
				}
				break;
			case RL:
				EnterOuterAlt(_localctx, 26);
				{
				State = 574; Match(RL);
				State = 578;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					State = 575; operand();
					State = 576; Match(COMMA);
					}
					break;
				}
				State = 580; operand();
				}
				break;
			case RR:
				EnterOuterAlt(_localctx, 27);
				{
				State = 581; Match(RR);
				State = 585;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					State = 582; operand();
					State = 583; Match(COMMA);
					}
					break;
				}
				State = 587; operand();
				}
				break;
			case SLA:
				EnterOuterAlt(_localctx, 28);
				{
				State = 588; Match(SLA);
				State = 592;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					State = 589; operand();
					State = 590; Match(COMMA);
					}
					break;
				}
				State = 594; operand();
				}
				break;
			case SRA:
				EnterOuterAlt(_localctx, 29);
				{
				State = 595; Match(SRA);
				State = 599;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					State = 596; operand();
					State = 597; Match(COMMA);
					}
					break;
				}
				State = 601; operand();
				}
				break;
			case SLL:
				EnterOuterAlt(_localctx, 30);
				{
				State = 602; Match(SLL);
				State = 606;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					State = 603; operand();
					State = 604; Match(COMMA);
					}
					break;
				}
				State = 608; operand();
				}
				break;
			case SRL:
				EnterOuterAlt(_localctx, 31);
				{
				State = 609; Match(SRL);
				State = 613;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					State = 610; operand();
					State = 611; Match(COMMA);
					}
					break;
				}
				State = 615; operand();
				}
				break;
			case BIT:
				EnterOuterAlt(_localctx, 32);
				{
				State = 616; Match(BIT);
				State = 617; operand();
				State = 618; Match(COMMA);
				State = 619; operand();
				}
				break;
			case RES:
				EnterOuterAlt(_localctx, 33);
				{
				State = 621; Match(RES);
				State = 622; operand();
				State = 623; Match(COMMA);
				State = 627;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					State = 624; operand();
					State = 625; Match(COMMA);
					}
					break;
				}
				State = 629; operand();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 34);
				{
				State = 631; Match(SET);
				State = 632; operand();
				State = 633; Match(COMMA);
				State = 637;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					State = 634; operand();
					State = 635; Match(COMMA);
					}
					break;
				}
				State = 639; operand();
				}
				break;
			case MIRROR:
				EnterOuterAlt(_localctx, 35);
				{
				State = 641; Match(MIRROR);
				State = 642; operand();
				}
				break;
			case TEST:
				EnterOuterAlt(_localctx, 36);
				{
				State = 643; Match(TEST);
				State = 644; operand();
				}
				break;
			case NEXTREG:
				EnterOuterAlt(_localctx, 37);
				{
				State = 645; Match(NEXTREG);
				State = 646; operand();
				State = 647; Match(COMMA);
				State = 648; operand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrivialNextOperationContext : ParserRuleContext {
		public ITerminalNode SWAPNIB() { return GetToken(Z80AsmParser.SWAPNIB, 0); }
		public ITerminalNode MUL() { return GetToken(Z80AsmParser.MUL, 0); }
		public ITerminalNode OUTINB() { return GetToken(Z80AsmParser.OUTINB, 0); }
		public ITerminalNode LDIX() { return GetToken(Z80AsmParser.LDIX, 0); }
		public ITerminalNode LDIRX() { return GetToken(Z80AsmParser.LDIRX, 0); }
		public ITerminalNode LDDX() { return GetToken(Z80AsmParser.LDDX, 0); }
		public ITerminalNode LDDRX() { return GetToken(Z80AsmParser.LDDRX, 0); }
		public ITerminalNode PIXELDN() { return GetToken(Z80AsmParser.PIXELDN, 0); }
		public ITerminalNode PIXELAD() { return GetToken(Z80AsmParser.PIXELAD, 0); }
		public ITerminalNode SETAE() { return GetToken(Z80AsmParser.SETAE, 0); }
		public ITerminalNode LDPIRX() { return GetToken(Z80AsmParser.LDPIRX, 0); }
		public ITerminalNode LDIRSCALE() { return GetToken(Z80AsmParser.LDIRSCALE, 0); }
		public TrivialNextOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trivialNextOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterTrivialNextOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitTrivialNextOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrivialNextOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrivialNextOperationContext trivialNextOperation() {
		TrivialNextOperationContext _localctx = new TrivialNextOperationContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_trivialNextOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			_la = _input.La(1);
			if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (SWAPNIB - 131)) | (1L << (MUL - 131)) | (1L << (OUTINB - 131)) | (1L << (LDIX - 131)) | (1L << (LDIRX - 131)) | (1L << (LDDX - 131)) | (1L << (LDDRX - 131)) | (1L << (PIXELDN - 131)) | (1L << (PIXELAD - 131)) | (1L << (SETAE - 131)) | (1L << (LDPIRX - 131)) | (1L << (LDIRSCALE - 131)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public Reg8Context reg8() {
			return GetRuleContext<Reg8Context>(0);
		}
		public Reg8IdxContext reg8Idx() {
			return GetRuleContext<Reg8IdxContext>(0);
		}
		public Reg8SpecContext reg8Spec() {
			return GetRuleContext<Reg8SpecContext>(0);
		}
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public Reg16SpecContext reg16Spec() {
			return GetRuleContext<Reg16SpecContext>(0);
		}
		public RegIndirectContext regIndirect() {
			return GetRuleContext<RegIndirectContext>(0);
		}
		public CPortContext cPort() {
			return GetRuleContext<CPortContext>(0);
		}
		public MemIndirectContext memIndirect() {
			return GetRuleContext<MemIndirectContext>(0);
		}
		public IndexedAddrContext indexedAddr() {
			return GetRuleContext<IndexedAddrContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode HREG() { return GetToken(Z80AsmParser.HREG, 0); }
		public ITerminalNode LREG() { return GetToken(Z80AsmParser.LREG, 0); }
		public Reg16StdContext reg16Std() {
			return GetRuleContext<Reg16StdContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public ITerminalNode NONEARG() { return GetToken(Z80AsmParser.NONEARG, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_operand);
		int _la;
		try {
			State = 675;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 654; reg8();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 655; reg8Idx();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 656; reg8Spec();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 657; reg16();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 658; reg16Idx();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 659; reg16Spec();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 660; regIndirect();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 661; cPort();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 662; memIndirect();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 663; indexedAddr();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 664; expr();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 665; condition();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 666;
				_la = _input.La(1);
				if ( !(_la==HREG || _la==LREG) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 667; Match(LPAR);
				State = 670;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case BC:
				case DE:
				case HL:
				case IX:
				case IY:
					{
					State = 668; reg16Std();
					}
					break;
				case LDBRAC:
					{
					State = 669; macroParam();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 672; Match(RPAR);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 674; Match(NONEARG);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8Context : ParserRuleContext {
		public ITerminalNode A() { return GetToken(Z80AsmParser.A, 0); }
		public ITerminalNode B() { return GetToken(Z80AsmParser.B, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode D() { return GetToken(Z80AsmParser.D, 0); }
		public ITerminalNode E() { return GetToken(Z80AsmParser.E, 0); }
		public ITerminalNode H() { return GetToken(Z80AsmParser.H, 0); }
		public ITerminalNode L() { return GetToken(Z80AsmParser.L, 0); }
		public Reg8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8Context reg8() {
		Reg8Context _localctx = new Reg8Context(_ctx, State);
		EnterRule(_localctx, 102, RULE_reg8);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A) | (1L << B) | (1L << C) | (1L << D) | (1L << E) | (1L << H) | (1L << L))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8IdxContext : ParserRuleContext {
		public ITerminalNode XL() { return GetToken(Z80AsmParser.XL, 0); }
		public ITerminalNode XH() { return GetToken(Z80AsmParser.XH, 0); }
		public ITerminalNode YL() { return GetToken(Z80AsmParser.YL, 0); }
		public ITerminalNode YH() { return GetToken(Z80AsmParser.YH, 0); }
		public Reg8IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8IdxContext reg8Idx() {
		Reg8IdxContext _localctx = new Reg8IdxContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_reg8Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << XL) | (1L << XH) | (1L << YL) | (1L << YH))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg8SpecContext : ParserRuleContext {
		public ITerminalNode I() { return GetToken(Z80AsmParser.I, 0); }
		public ITerminalNode R() { return GetToken(Z80AsmParser.R, 0); }
		public Reg8SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg8Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg8Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg8Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg8Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg8SpecContext reg8Spec() {
		Reg8SpecContext _localctx = new Reg8SpecContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_reg8Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			_la = _input.La(1);
			if ( !(_la==I || _la==R) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16Context : ParserRuleContext {
		public ITerminalNode BC() { return GetToken(Z80AsmParser.BC, 0); }
		public ITerminalNode DE() { return GetToken(Z80AsmParser.DE, 0); }
		public ITerminalNode HL() { return GetToken(Z80AsmParser.HL, 0); }
		public ITerminalNode SP() { return GetToken(Z80AsmParser.SP, 0); }
		public Reg16Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16Context reg16() {
		Reg16Context _localctx = new Reg16Context(_ctx, State);
		EnterRule(_localctx, 108, RULE_reg16);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BC) | (1L << DE) | (1L << HL) | (1L << SP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16IdxContext : ParserRuleContext {
		public ITerminalNode IX() { return GetToken(Z80AsmParser.IX, 0); }
		public ITerminalNode IY() { return GetToken(Z80AsmParser.IY, 0); }
		public Reg16IdxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Idx; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Idx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Idx(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Idx(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16IdxContext reg16Idx() {
		Reg16IdxContext _localctx = new Reg16IdxContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_reg16Idx);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			_la = _input.La(1);
			if ( !(_la==IX || _la==IY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16StdContext : ParserRuleContext {
		public ITerminalNode BC() { return GetToken(Z80AsmParser.BC, 0); }
		public ITerminalNode DE() { return GetToken(Z80AsmParser.DE, 0); }
		public ITerminalNode HL() { return GetToken(Z80AsmParser.HL, 0); }
		public ITerminalNode IX() { return GetToken(Z80AsmParser.IX, 0); }
		public ITerminalNode IY() { return GetToken(Z80AsmParser.IY, 0); }
		public Reg16StdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Std; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Std(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Std(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Std(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16StdContext reg16Std() {
		Reg16StdContext _localctx = new Reg16StdContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_reg16Std);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BC) | (1L << DE) | (1L << HL) | (1L << IX) | (1L << IY))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reg16SpecContext : ParserRuleContext {
		public ITerminalNode AF() { return GetToken(Z80AsmParser.AF, 0); }
		public ITerminalNode AF_() { return GetToken(Z80AsmParser.AF_, 0); }
		public Reg16SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg16Spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterReg16Spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitReg16Spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg16Spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reg16SpecContext reg16Spec() {
		Reg16SpecContext _localctx = new Reg16SpecContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_reg16Spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			_la = _input.La(1);
			if ( !(_la==AF || _la==AF_) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegIndirectContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public RegIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRegIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRegIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegIndirectContext regIndirect() {
		RegIndirectContext _localctx = new RegIndirectContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_regIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691; Match(LPAR);
			{
			State = 692; reg16();
			}
			State = 693; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CPortContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public CPortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cPort; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCPort(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCPort(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCPort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CPortContext cPort() {
		CPortContext _localctx = new CPortContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_cPort);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695; Match(LPAR);
			State = 696; Match(C);
			State = 697; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemIndirectContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public MemIndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memIndirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMemIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMemIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemIndirectContext memIndirect() {
		MemIndirectContext _localctx = new MemIndirectContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_memIndirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699; Match(LPAR);
			State = 700; expr();
			State = 701; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexedAddrContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(Z80AsmParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(Z80AsmParser.MINUS, 0); }
		public IndexedAddrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexedAddr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterIndexedAddr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitIndexedAddr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexedAddr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexedAddrContext indexedAddr() {
		IndexedAddrContext _localctx = new IndexedAddrContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_indexedAddr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703; Match(LPAR);
			State = 704; reg16Idx();
			State = 707;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 705;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 706; expr();
				}
			}

			State = 709; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ITerminalNode Z() { return GetToken(Z80AsmParser.Z, 0); }
		public ITerminalNode NZ() { return GetToken(Z80AsmParser.NZ, 0); }
		public ITerminalNode C() { return GetToken(Z80AsmParser.C, 0); }
		public ITerminalNode NC() { return GetToken(Z80AsmParser.NC, 0); }
		public ITerminalNode PO() { return GetToken(Z80AsmParser.PO, 0); }
		public ITerminalNode PE() { return GetToken(Z80AsmParser.PE, 0); }
		public ITerminalNode P() { return GetToken(Z80AsmParser.P, 0); }
		public ITerminalNode M() { return GetToken(Z80AsmParser.M, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 711;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << C) | (1L << Z) | (1L << NZ) | (1L << NC) | (1L << PO) | (1L << PE) | (1L << P) | (1L << M))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(Z80AsmParser.QMARK, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(Z80AsmParser.COLON, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713; orExpr();
			State = 719;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==QMARK) {
				{
				State = 714; Match(QMARK);
				State = 715; expr();
				State = 716; Match(COLON);
				State = 717; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		public XorExprContext[] xorExpr() {
			return GetRuleContexts<XorExprContext>();
		}
		public XorExprContext xorExpr(int i) {
			return GetRuleContext<XorExprContext>(i);
		}
		public ITerminalNode[] VBAR() { return GetTokens(Z80AsmParser.VBAR); }
		public ITerminalNode VBAR(int i) {
			return GetToken(Z80AsmParser.VBAR, i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_orExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721; xorExpr();
			State = 726;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==VBAR) {
				{
				{
				State = 722; Match(VBAR);
				State = 723; xorExpr();
				}
				}
				State = 728;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorExprContext : ParserRuleContext {
		public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		public ITerminalNode[] UPARR() { return GetTokens(Z80AsmParser.UPARR); }
		public ITerminalNode UPARR(int i) {
			return GetToken(Z80AsmParser.UPARR, i);
		}
		public XorExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterXorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitXorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorExprContext xorExpr() {
		XorExprContext _localctx = new XorExprContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_xorExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; andExpr();
			State = 734;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==UPARR) {
				{
				{
				State = 730; Match(UPARR);
				State = 731; andExpr();
				}
				}
				State = 736;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		public EquExprContext[] equExpr() {
			return GetRuleContexts<EquExprContext>();
		}
		public EquExprContext equExpr(int i) {
			return GetRuleContext<EquExprContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(Z80AsmParser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(Z80AsmParser.AMP, i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737; equExpr();
			State = 742;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AMP) {
				{
				{
				State = 738; Match(AMP);
				State = 739; equExpr();
				}
				}
				State = 744;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquExprContext : ParserRuleContext {
		public RelExprContext[] relExpr() {
			return GetRuleContexts<RelExprContext>();
		}
		public RelExprContext relExpr(int i) {
			return GetRuleContext<RelExprContext>(i);
		}
		public ITerminalNode[] EQOP() { return GetTokens(Z80AsmParser.EQOP); }
		public ITerminalNode EQOP(int i) {
			return GetToken(Z80AsmParser.EQOP, i);
		}
		public ITerminalNode[] NEQOP() { return GetTokens(Z80AsmParser.NEQOP); }
		public ITerminalNode NEQOP(int i) {
			return GetToken(Z80AsmParser.NEQOP, i);
		}
		public ITerminalNode[] CIEQOP() { return GetTokens(Z80AsmParser.CIEQOP); }
		public ITerminalNode CIEQOP(int i) {
			return GetToken(Z80AsmParser.CIEQOP, i);
		}
		public ITerminalNode[] CINEQOP() { return GetTokens(Z80AsmParser.CINEQOP); }
		public ITerminalNode CINEQOP(int i) {
			return GetToken(Z80AsmParser.CINEQOP, i);
		}
		public EquExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterEquExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitEquExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquExprContext equExpr() {
		EquExprContext _localctx = new EquExprContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_equExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745; relExpr();
			State = 750;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQOP) | (1L << CIEQOP) | (1L << NEQOP) | (1L << CINEQOP))) != 0)) {
				{
				{
				State = 746;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQOP) | (1L << CIEQOP) | (1L << NEQOP) | (1L << CINEQOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 747; relExpr();
				}
				}
				State = 752;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		public ShiftExprContext[] shiftExpr() {
			return GetRuleContexts<ShiftExprContext>();
		}
		public ShiftExprContext shiftExpr(int i) {
			return GetRuleContext<ShiftExprContext>(i);
		}
		public ITerminalNode[] LTOP() { return GetTokens(Z80AsmParser.LTOP); }
		public ITerminalNode LTOP(int i) {
			return GetToken(Z80AsmParser.LTOP, i);
		}
		public ITerminalNode[] LTEOP() { return GetTokens(Z80AsmParser.LTEOP); }
		public ITerminalNode LTEOP(int i) {
			return GetToken(Z80AsmParser.LTEOP, i);
		}
		public ITerminalNode[] GTOP() { return GetTokens(Z80AsmParser.GTOP); }
		public ITerminalNode GTOP(int i) {
			return GetToken(Z80AsmParser.GTOP, i);
		}
		public ITerminalNode[] GTEOP() { return GetTokens(Z80AsmParser.GTEOP); }
		public ITerminalNode GTEOP(int i) {
			return GetToken(Z80AsmParser.GTEOP, i);
		}
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753; shiftExpr();
			State = 758;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP))) != 0)) {
				{
				{
				State = 754;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTOP) | (1L << LTEOP) | (1L << GTOP) | (1L << GTEOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 755; shiftExpr();
				}
				}
				State = 760;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ITerminalNode[] LSHOP() { return GetTokens(Z80AsmParser.LSHOP); }
		public ITerminalNode LSHOP(int i) {
			return GetToken(Z80AsmParser.LSHOP, i);
		}
		public ITerminalNode[] RSHOP() { return GetTokens(Z80AsmParser.RSHOP); }
		public ITerminalNode RSHOP(int i) {
			return GetToken(Z80AsmParser.RSHOP, i);
		}
		public ShiftExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterShiftExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitShiftExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExprContext shiftExpr() {
		ShiftExprContext _localctx = new ShiftExprContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_shiftExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761; addExpr();
			State = 766;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LSHOP || _la==RSHOP) {
				{
				{
				State = 762;
				_la = _input.La(1);
				if ( !(_la==LSHOP || _la==RSHOP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 763; addExpr();
				}
				}
				State = 768;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MultExprContext[] multExpr() {
			return GetRuleContexts<MultExprContext>();
		}
		public MultExprContext multExpr(int i) {
			return GetRuleContext<MultExprContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(Z80AsmParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(Z80AsmParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(Z80AsmParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(Z80AsmParser.MINUS, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_addExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769; multExpr();
			State = 774;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 770;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 771; multExpr();
				}
				}
				State = 776;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExprContext : ParserRuleContext {
		public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		public ITerminalNode[] MULOP() { return GetTokens(Z80AsmParser.MULOP); }
		public ITerminalNode MULOP(int i) {
			return GetToken(Z80AsmParser.MULOP, i);
		}
		public ITerminalNode[] DIVOP() { return GetTokens(Z80AsmParser.DIVOP); }
		public ITerminalNode DIVOP(int i) {
			return GetToken(Z80AsmParser.DIVOP, i);
		}
		public ITerminalNode[] MODOP() { return GetTokens(Z80AsmParser.MODOP); }
		public ITerminalNode MODOP(int i) {
			return GetToken(Z80AsmParser.MODOP, i);
		}
		public MultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExprContext multExpr() {
		MultExprContext _localctx = new MultExprContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_multExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 777; unaryExpr();
			State = 782;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULOP) | (1L << DIVOP) | (1L << MODOP))) != 0)) {
				{
				{
				State = 778;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULOP) | (1L << DIVOP) | (1L << MODOP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 779; unaryExpr();
				}
				}
				State = 784;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public BuiltinFunctionInvocationContext builtinFunctionInvocation() {
			return GetRuleContext<BuiltinFunctionInvocationContext>(0);
		}
		public FunctionInvocationContext functionInvocation() {
			return GetRuleContext<FunctionInvocationContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(Z80AsmParser.PLUS, 0); }
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(Z80AsmParser.MINUS, 0); }
		public ITerminalNode TILDE() { return GetToken(Z80AsmParser.TILDE, 0); }
		public ITerminalNode EXCLM() { return GetToken(Z80AsmParser.EXCLM, 0); }
		public ITerminalNode LSBRAC() { return GetToken(Z80AsmParser.LSBRAC, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RSBRAC() { return GetToken(Z80AsmParser.RSBRAC, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		public SymbolExprContext symbolExpr() {
			return GetRuleContext<SymbolExprContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_unaryExpr);
		try {
			State = 806;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 785; builtinFunctionInvocation();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 786; functionInvocation();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 787; macroParam();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 788; Match(PLUS);
				State = 789; unaryExpr();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 790; Match(MINUS);
				State = 791; unaryExpr();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 792; Match(TILDE);
				State = 793; unaryExpr();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 794; Match(EXCLM);
				State = 795; unaryExpr();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 796; Match(LSBRAC);
				State = 797; expr();
				State = 798; Match(RSBRAC);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 800; Match(LPAR);
				State = 801; expr();
				State = 802; Match(RPAR);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 804; literalExpr();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 805; symbolExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionInvocationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Z80AsmParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Z80AsmParser.COMMA, i);
		}
		public FunctionInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterFunctionInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitFunctionInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionInvocationContext functionInvocation() {
		FunctionInvocationContext _localctx = new FunctionInvocationContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_functionInvocation);
		int _la;
		try {
			State = 823;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 808; Match(IDENTIFIER);
				State = 809; Match(LPAR);
				State = 810; Match(RPAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 811; Match(IDENTIFIER);
				State = 812; Match(LPAR);
				State = 813; expr();
				State = 818;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 814; Match(COMMA);
					State = 815; expr();
					}
					}
					State = 820;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 821; Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinFunctionInvocationContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(Z80AsmParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(Z80AsmParser.RPAR, 0); }
		public ITerminalNode TEXTOF() { return GetToken(Z80AsmParser.TEXTOF, 0); }
		public ITerminalNode LTEXTOF() { return GetToken(Z80AsmParser.LTEXTOF, 0); }
		public MnemonicContext mnemonic() {
			return GetRuleContext<MnemonicContext>(0);
		}
		public RegsAndCondsContext regsAndConds() {
			return GetRuleContext<RegsAndCondsContext>(0);
		}
		public MacroParamContext macroParam() {
			return GetRuleContext<MacroParamContext>(0);
		}
		public ITerminalNode DEF() { return GetToken(Z80AsmParser.DEF, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public BuiltinFunctionInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinFunctionInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterBuiltinFunctionInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitBuiltinFunctionInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltinFunctionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltinFunctionInvocationContext builtinFunctionInvocation() {
		BuiltinFunctionInvocationContext _localctx = new BuiltinFunctionInvocationContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_builtinFunctionInvocation);
		int _la;
		try {
			State = 840;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TEXTOF:
			case LTEXTOF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 825;
				_la = _input.La(1);
				if ( !(_la==TEXTOF || _la==LTEXTOF) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 826; Match(LPAR);
				State = 830;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case NOP:
				case RLCA:
				case RRCA:
				case RLA:
				case RRA:
				case DAA:
				case CPL:
				case SCF:
				case CCF:
				case HALT:
				case RET:
				case EXX:
				case DI:
				case EI:
				case NEG:
				case RETN:
				case RETI:
				case RLD:
				case RRD:
				case LDI:
				case CPI:
				case INI:
				case OUTI:
				case LDD:
				case CPD:
				case IND:
				case OUTD:
				case LDIR:
				case CPIR:
				case INIR:
				case OTIR:
				case LDDR:
				case CPDR:
				case INDR:
				case OTDR:
				case LD:
				case INC:
				case DEC:
				case EX:
				case ADD:
				case ADC:
				case SUB:
				case SBC:
				case AND:
				case XOR:
				case OR:
				case CP:
				case DJNZ:
				case JR:
				case JP:
				case CALL:
				case RST:
				case PUSH:
				case POP:
				case IN:
				case OUT:
				case IM:
				case RLC:
				case RRC:
				case RL:
				case RR:
				case SLA:
				case SRA:
				case SLL:
				case SRL:
				case BIT:
				case RES:
				case SET:
				case SWAPNIB:
				case MUL:
				case POPX:
				case MIRROR:
				case TEST:
				case NEXTREG:
				case OUTINB:
				case LDIX:
				case LDIRX:
				case LDDX:
				case LDDRX:
				case PIXELDN:
				case PIXELAD:
				case SETAE:
				case LDPIRX:
					{
					State = 827; mnemonic();
					}
					break;
				case LPAR:
				case A:
				case B:
				case C:
				case D:
				case E:
				case H:
				case L:
				case I:
				case R:
				case XL:
				case XH:
				case YL:
				case YH:
				case BC:
				case DE:
				case HL:
				case SP:
				case IX:
				case IY:
				case AF:
				case AF_:
				case Z:
				case NZ:
				case NC:
				case PO:
				case PE:
				case P:
				case M:
					{
					State = 828; regsAndConds();
					}
					break;
				case LDBRAC:
					{
					State = 829; macroParam();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 832; Match(RPAR);
				}
				break;
			case DEF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 834; Match(DEF);
				State = 835; Match(LPAR);
				State = 837;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << LSBRAC) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << LDBRAC) | (1L << EXCLM) | (1L << A) | (1L << B) | (1L << C) | (1L << D) | (1L << E) | (1L << H) | (1L << L) | (1L << I) | (1L << R) | (1L << XL) | (1L << XH) | (1L << YL) | (1L << YH) | (1L << BC) | (1L << DE) | (1L << HL) | (1L << SP) | (1L << IX) | (1L << IY) | (1L << AF) | (1L << AF_) | (1L << Z) | (1L << NZ) | (1L << NC) | (1L << PO) | (1L << PE) | (1L << P) | (1L << M))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (TEXTOF - 198)) | (1L << (LTEXTOF - 198)) | (1L << (HREG - 198)) | (1L << (LREG - 198)) | (1L << (DEF - 198)) | (1L << (HEXNUM - 198)) | (1L << (BINNUM - 198)) | (1L << (DECNUM - 198)) | (1L << (REALNUM - 198)) | (1L << (CHAR - 198)) | (1L << (STRING - 198)) | (1L << (BOOLLIT - 198)) | (1L << (IDENTIFIER - 198)) | (1L << (CURADDR - 198)) | (1L << (CURCNT - 198)) | (1L << (NONEARG - 198)))) != 0)) {
					{
					State = 836; operand();
					}
				}

				State = 839; Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExprContext : ParserRuleContext {
		public ITerminalNode HEXNUM() { return GetToken(Z80AsmParser.HEXNUM, 0); }
		public ITerminalNode DECNUM() { return GetToken(Z80AsmParser.DECNUM, 0); }
		public ITerminalNode CHAR() { return GetToken(Z80AsmParser.CHAR, 0); }
		public ITerminalNode BINNUM() { return GetToken(Z80AsmParser.BINNUM, 0); }
		public ITerminalNode REALNUM() { return GetToken(Z80AsmParser.REALNUM, 0); }
		public ITerminalNode BOOLLIT() { return GetToken(Z80AsmParser.BOOLLIT, 0); }
		public ITerminalNode STRING() { return GetToken(Z80AsmParser.STRING, 0); }
		public ITerminalNode CURADDR() { return GetToken(Z80AsmParser.CURADDR, 0); }
		public ITerminalNode CURCNT() { return GetToken(Z80AsmParser.CURCNT, 0); }
		public LiteralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExprContext literalExpr() {
		LiteralExprContext _localctx = new LiteralExprContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_literalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			_la = _input.La(1);
			if ( !(((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & ((1L << (HEXNUM - 203)) | (1L << (BINNUM - 203)) | (1L << (DECNUM - 203)) | (1L << (REALNUM - 203)) | (1L << (CHAR - 203)) | (1L << (STRING - 203)) | (1L << (BOOLLIT - 203)) | (1L << (CURADDR - 203)) | (1L << (CURCNT - 203)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolExprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public SymbolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterSymbolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitSymbolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolExprContext symbolExpr() {
		SymbolExprContext _localctx = new SymbolExprContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_symbolExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroParamContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(Z80AsmParser.IDENTIFIER, 0); }
		public MacroParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMacroParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMacroParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroParamContext macroParam() {
		MacroParamContext _localctx = new MacroParamContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_macroParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846; Match(LDBRAC);
			State = 847; Match(IDENTIFIER);
			State = 848; Match(RDBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegsContext : ParserRuleContext {
		public Reg8Context reg8() {
			return GetRuleContext<Reg8Context>(0);
		}
		public Reg8IdxContext reg8Idx() {
			return GetRuleContext<Reg8IdxContext>(0);
		}
		public Reg8SpecContext reg8Spec() {
			return GetRuleContext<Reg8SpecContext>(0);
		}
		public Reg16Context reg16() {
			return GetRuleContext<Reg16Context>(0);
		}
		public Reg16IdxContext reg16Idx() {
			return GetRuleContext<Reg16IdxContext>(0);
		}
		public Reg16SpecContext reg16Spec() {
			return GetRuleContext<Reg16SpecContext>(0);
		}
		public RegsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRegs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRegs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegsContext regs() {
		RegsContext _localctx = new RegsContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_regs);
		try {
			State = 856;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case A:
			case B:
			case C:
			case D:
			case E:
			case H:
			case L:
				EnterOuterAlt(_localctx, 1);
				{
				State = 850; reg8();
				}
				break;
			case XL:
			case XH:
			case YL:
			case YH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 851; reg8Idx();
				}
				break;
			case I:
			case R:
				EnterOuterAlt(_localctx, 3);
				{
				State = 852; reg8Spec();
				}
				break;
			case BC:
			case DE:
			case HL:
			case SP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 853; reg16();
				}
				break;
			case IX:
			case IY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 854; reg16Idx();
				}
				break;
			case AF:
			case AF_:
				EnterOuterAlt(_localctx, 6);
				{
				State = 855; reg16Spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegsAndCondsContext : ParserRuleContext {
		public RegsContext regs() {
			return GetRuleContext<RegsContext>(0);
		}
		public RegIndirectContext regIndirect() {
			return GetRuleContext<RegIndirectContext>(0);
		}
		public CPortContext cPort() {
			return GetRuleContext<CPortContext>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public RegsAndCondsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regsAndConds; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterRegsAndConds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitRegsAndConds(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegsAndConds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegsAndCondsContext regsAndConds() {
		RegsAndCondsContext _localctx = new RegsAndCondsContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_regsAndConds);
		try {
			State = 862;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 858; regs();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 859; regIndirect();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 860; cPort();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 861; condition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MnemonicContext : ParserRuleContext {
		public ITerminalNode NOP() { return GetToken(Z80AsmParser.NOP, 0); }
		public ITerminalNode RLCA() { return GetToken(Z80AsmParser.RLCA, 0); }
		public ITerminalNode RRCA() { return GetToken(Z80AsmParser.RRCA, 0); }
		public ITerminalNode RLA() { return GetToken(Z80AsmParser.RLA, 0); }
		public ITerminalNode RRA() { return GetToken(Z80AsmParser.RRA, 0); }
		public ITerminalNode DAA() { return GetToken(Z80AsmParser.DAA, 0); }
		public ITerminalNode CPL() { return GetToken(Z80AsmParser.CPL, 0); }
		public ITerminalNode SCF() { return GetToken(Z80AsmParser.SCF, 0); }
		public ITerminalNode CCF() { return GetToken(Z80AsmParser.CCF, 0); }
		public ITerminalNode HALT() { return GetToken(Z80AsmParser.HALT, 0); }
		public ITerminalNode RET() { return GetToken(Z80AsmParser.RET, 0); }
		public ITerminalNode EXX() { return GetToken(Z80AsmParser.EXX, 0); }
		public ITerminalNode DI() { return GetToken(Z80AsmParser.DI, 0); }
		public ITerminalNode EI() { return GetToken(Z80AsmParser.EI, 0); }
		public ITerminalNode NEG() { return GetToken(Z80AsmParser.NEG, 0); }
		public ITerminalNode RETN() { return GetToken(Z80AsmParser.RETN, 0); }
		public ITerminalNode RETI() { return GetToken(Z80AsmParser.RETI, 0); }
		public ITerminalNode RLD() { return GetToken(Z80AsmParser.RLD, 0); }
		public ITerminalNode RRD() { return GetToken(Z80AsmParser.RRD, 0); }
		public ITerminalNode LDI() { return GetToken(Z80AsmParser.LDI, 0); }
		public ITerminalNode CPI() { return GetToken(Z80AsmParser.CPI, 0); }
		public ITerminalNode INI() { return GetToken(Z80AsmParser.INI, 0); }
		public ITerminalNode OUTI() { return GetToken(Z80AsmParser.OUTI, 0); }
		public ITerminalNode LDD() { return GetToken(Z80AsmParser.LDD, 0); }
		public ITerminalNode CPD() { return GetToken(Z80AsmParser.CPD, 0); }
		public ITerminalNode IND() { return GetToken(Z80AsmParser.IND, 0); }
		public ITerminalNode OUTD() { return GetToken(Z80AsmParser.OUTD, 0); }
		public ITerminalNode LDIR() { return GetToken(Z80AsmParser.LDIR, 0); }
		public ITerminalNode CPIR() { return GetToken(Z80AsmParser.CPIR, 0); }
		public ITerminalNode INIR() { return GetToken(Z80AsmParser.INIR, 0); }
		public ITerminalNode OTIR() { return GetToken(Z80AsmParser.OTIR, 0); }
		public ITerminalNode LDDR() { return GetToken(Z80AsmParser.LDDR, 0); }
		public ITerminalNode CPDR() { return GetToken(Z80AsmParser.CPDR, 0); }
		public ITerminalNode INDR() { return GetToken(Z80AsmParser.INDR, 0); }
		public ITerminalNode OTDR() { return GetToken(Z80AsmParser.OTDR, 0); }
		public ITerminalNode LD() { return GetToken(Z80AsmParser.LD, 0); }
		public ITerminalNode INC() { return GetToken(Z80AsmParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(Z80AsmParser.DEC, 0); }
		public ITerminalNode EX() { return GetToken(Z80AsmParser.EX, 0); }
		public ITerminalNode ADD() { return GetToken(Z80AsmParser.ADD, 0); }
		public ITerminalNode ADC() { return GetToken(Z80AsmParser.ADC, 0); }
		public ITerminalNode SUB() { return GetToken(Z80AsmParser.SUB, 0); }
		public ITerminalNode SBC() { return GetToken(Z80AsmParser.SBC, 0); }
		public ITerminalNode AND() { return GetToken(Z80AsmParser.AND, 0); }
		public ITerminalNode XOR() { return GetToken(Z80AsmParser.XOR, 0); }
		public ITerminalNode OR() { return GetToken(Z80AsmParser.OR, 0); }
		public ITerminalNode CP() { return GetToken(Z80AsmParser.CP, 0); }
		public ITerminalNode DJNZ() { return GetToken(Z80AsmParser.DJNZ, 0); }
		public ITerminalNode JR() { return GetToken(Z80AsmParser.JR, 0); }
		public ITerminalNode JP() { return GetToken(Z80AsmParser.JP, 0); }
		public ITerminalNode CALL() { return GetToken(Z80AsmParser.CALL, 0); }
		public ITerminalNode RST() { return GetToken(Z80AsmParser.RST, 0); }
		public ITerminalNode PUSH() { return GetToken(Z80AsmParser.PUSH, 0); }
		public ITerminalNode POP() { return GetToken(Z80AsmParser.POP, 0); }
		public ITerminalNode IN() { return GetToken(Z80AsmParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(Z80AsmParser.OUT, 0); }
		public ITerminalNode IM() { return GetToken(Z80AsmParser.IM, 0); }
		public ITerminalNode RLC() { return GetToken(Z80AsmParser.RLC, 0); }
		public ITerminalNode RRC() { return GetToken(Z80AsmParser.RRC, 0); }
		public ITerminalNode RL() { return GetToken(Z80AsmParser.RL, 0); }
		public ITerminalNode RR() { return GetToken(Z80AsmParser.RR, 0); }
		public ITerminalNode SLA() { return GetToken(Z80AsmParser.SLA, 0); }
		public ITerminalNode SRA() { return GetToken(Z80AsmParser.SRA, 0); }
		public ITerminalNode SLL() { return GetToken(Z80AsmParser.SLL, 0); }
		public ITerminalNode SRL() { return GetToken(Z80AsmParser.SRL, 0); }
		public ITerminalNode BIT() { return GetToken(Z80AsmParser.BIT, 0); }
		public ITerminalNode RES() { return GetToken(Z80AsmParser.RES, 0); }
		public ITerminalNode SET() { return GetToken(Z80AsmParser.SET, 0); }
		public ITerminalNode SWAPNIB() { return GetToken(Z80AsmParser.SWAPNIB, 0); }
		public ITerminalNode MUL() { return GetToken(Z80AsmParser.MUL, 0); }
		public ITerminalNode POPX() { return GetToken(Z80AsmParser.POPX, 0); }
		public ITerminalNode MIRROR() { return GetToken(Z80AsmParser.MIRROR, 0); }
		public ITerminalNode TEST() { return GetToken(Z80AsmParser.TEST, 0); }
		public ITerminalNode NEXTREG() { return GetToken(Z80AsmParser.NEXTREG, 0); }
		public ITerminalNode OUTINB() { return GetToken(Z80AsmParser.OUTINB, 0); }
		public ITerminalNode LDIX() { return GetToken(Z80AsmParser.LDIX, 0); }
		public ITerminalNode LDIRX() { return GetToken(Z80AsmParser.LDIRX, 0); }
		public ITerminalNode LDDX() { return GetToken(Z80AsmParser.LDDX, 0); }
		public ITerminalNode LDDRX() { return GetToken(Z80AsmParser.LDDRX, 0); }
		public ITerminalNode PIXELDN() { return GetToken(Z80AsmParser.PIXELDN, 0); }
		public ITerminalNode PIXELAD() { return GetToken(Z80AsmParser.PIXELAD, 0); }
		public ITerminalNode SETAE() { return GetToken(Z80AsmParser.SETAE, 0); }
		public ITerminalNode LDPIRX() { return GetToken(Z80AsmParser.LDPIRX, 0); }
		public MnemonicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mnemonic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.EnterMnemonic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZ80AsmListener typedListener = listener as IZ80AsmListener;
			if (typedListener != null) typedListener.ExitMnemonic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZ80AsmVisitor<TResult> typedVisitor = visitor as IZ80AsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMnemonic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MnemonicContext mnemonic() {
		MnemonicContext _localctx = new MnemonicContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_mnemonic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864;
			_la = _input.La(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (NOP - 63)) | (1L << (RLCA - 63)) | (1L << (RRCA - 63)) | (1L << (RLA - 63)) | (1L << (RRA - 63)) | (1L << (DAA - 63)) | (1L << (CPL - 63)) | (1L << (SCF - 63)) | (1L << (CCF - 63)) | (1L << (HALT - 63)) | (1L << (RET - 63)) | (1L << (EXX - 63)) | (1L << (DI - 63)) | (1L << (EI - 63)) | (1L << (NEG - 63)) | (1L << (RETN - 63)) | (1L << (RETI - 63)) | (1L << (RLD - 63)) | (1L << (RRD - 63)) | (1L << (LDI - 63)) | (1L << (CPI - 63)) | (1L << (INI - 63)) | (1L << (OUTI - 63)) | (1L << (LDD - 63)) | (1L << (CPD - 63)) | (1L << (IND - 63)) | (1L << (OUTD - 63)) | (1L << (LDIR - 63)) | (1L << (CPIR - 63)) | (1L << (INIR - 63)) | (1L << (OTIR - 63)) | (1L << (LDDR - 63)) | (1L << (CPDR - 63)) | (1L << (INDR - 63)) | (1L << (OTDR - 63)) | (1L << (LD - 63)) | (1L << (INC - 63)) | (1L << (DEC - 63)) | (1L << (EX - 63)) | (1L << (ADD - 63)) | (1L << (ADC - 63)) | (1L << (SUB - 63)) | (1L << (SBC - 63)) | (1L << (AND - 63)) | (1L << (XOR - 63)) | (1L << (OR - 63)) | (1L << (CP - 63)) | (1L << (DJNZ - 63)) | (1L << (JR - 63)) | (1L << (JP - 63)) | (1L << (CALL - 63)) | (1L << (RST - 63)) | (1L << (PUSH - 63)) | (1L << (POP - 63)) | (1L << (IN - 63)) | (1L << (OUT - 63)) | (1L << (IM - 63)) | (1L << (RLC - 63)) | (1L << (RRC - 63)) | (1L << (RL - 63)) | (1L << (RR - 63)) | (1L << (SLA - 63)) | (1L << (SRA - 63)) | (1L << (SLL - 63)))) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (SRL - 127)) | (1L << (BIT - 127)) | (1L << (RES - 127)) | (1L << (SET - 127)) | (1L << (SWAPNIB - 127)) | (1L << (MUL - 127)) | (1L << (POPX - 127)) | (1L << (MIRROR - 127)) | (1L << (TEST - 127)) | (1L << (NEXTREG - 127)) | (1L << (OUTINB - 127)) | (1L << (LDIX - 127)) | (1L << (LDIRX - 127)) | (1L << (LDDX - 127)) | (1L << (LDDRX - 127)) | (1L << (PIXELDN - 127)) | (1L << (PIXELAD - 127)) | (1L << (SETAE - 127)) | (1L << (LDPIRX - 127)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xDD\x365\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x3\x2\x3\x2\a\x2\xA7\n\x2\f\x2\xE\x2\xAA"+
		"\v\x2\x3\x2\x3\x2\x6\x2\xAE\n\x2\r\x2\xE\x2\xAF\x3\x2\a\x2\xB3\n\x2\f"+
		"\x2\xE\x2\xB6\v\x2\x3\x2\a\x2\xB9\n\x2\f\x2\xE\x2\xBC\v\x2\x3\x2\x3\x2"+
		"\x5\x2\xC0\n\x2\x3\x3\x5\x3\xC3\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5"+
		"\x3\xCA\n\x3\x3\x3\x5\x3\xCD\n\x3\x3\x3\x3\x3\x5\x3\xD1\n\x3\x3\x3\x3"+
		"\x3\x3\x3\x5\x3\xD6\n\x3\x5\x3\xD8\n\x3\x3\x4\x3\x4\x5\x4\xDC\n\x4\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5"+
		"\x6\xF5\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\xFF\n\a\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x5\b\x111\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\a\t\x118\n\t\f\t\xE\t\x11B"+
		"\v\t\x5\t\x11D\n\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3"+
		"\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3"+
		"\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x144\n\x15\x3\x16\x3\x16"+
		"\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19"+
		"\x151\n\x19\f\x19\xE\x19\x154\v\x19\x3\x19\x3\x19\x3\x1A\x5\x1A\x159\n"+
		"\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!\x3!\x3!\x3!\a"+
		"!\x171\n!\f!\xE!\x174\v!\x3\"\x3\"\x3\"\x3\"\a\"\x17A\n\"\f\"\xE\"\x17D"+
		"\v\"\x3#\x3#\x3#\x3$\x3$\x3$\x3$\x5$\x186\n$\x3%\x3%\x3&\x3&\x3&\x3\'"+
		"\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3*\x3*\x5*\x19C"+
		"\n*\x3+\x3+\x3+\x3+\a+\x1A2\n+\f+\xE+\x1A5\v+\x3,\x3,\x5,\x1A9\n,\x3-"+
		"\x3-\x3-\x3.\x3.\x3.\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x1B7\n/\x5/\x1B9\n/\x3"+
		"\x30\x3\x30\x3\x30\x5\x30\x1BE\n\x30\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x1DE\n\x32\x3\x32\x3\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x1EA\n\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x1F1\n\x32\x3\x32\x3\x32\x3"+
		"\x32\x3\x32\x3\x32\x5\x32\x1F8\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x5\x32\x1FF\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5"+
		"\x32\x208\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x20F\n\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x216\n\x32\x3\x32\x3\x32\x3\x32"+
		"\x5\x32\x21B\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3"+
		"\x32\x3\x32\x3\x32\x5\x32\x227\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x5\x32\x22E\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5"+
		"\x32\x237\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x23E\n\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x245\n\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x5\x32\x24C\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5"+
		"\x32\x253\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x25A\n\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x261\n\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x5\x32\x268\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x276\n\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x280\n\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3"+
		"\x32\x5\x32\x28D\n\x32\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34"+
		"\x3\x34\x5\x34\x2A1\n\x34\x3\x34\x3\x34\x3\x34\x5\x34\x2A6\n\x34\x3\x35"+
		"\x3\x35\x3\x36\x3\x36\x3\x37\x3\x37\x3\x38\x3\x38\x3\x39\x3\x39\x3:\x3"+
		":\x3;\x3;\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>\x3?\x3?\x3?"+
		"\x3?\x5?\x2C6\n?\x3?\x3?\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x5\x41\x2D2\n\x41\x3\x42\x3\x42\x3\x42\a\x42\x2D7\n\x42\f\x42\xE"+
		"\x42\x2DA\v\x42\x3\x43\x3\x43\x3\x43\a\x43\x2DF\n\x43\f\x43\xE\x43\x2E2"+
		"\v\x43\x3\x44\x3\x44\x3\x44\a\x44\x2E7\n\x44\f\x44\xE\x44\x2EA\v\x44\x3"+
		"\x45\x3\x45\x3\x45\a\x45\x2EF\n\x45\f\x45\xE\x45\x2F2\v\x45\x3\x46\x3"+
		"\x46\x3\x46\a\x46\x2F7\n\x46\f\x46\xE\x46\x2FA\v\x46\x3G\x3G\x3G\aG\x2FF"+
		"\nG\fG\xEG\x302\vG\x3H\x3H\x3H\aH\x307\nH\fH\xEH\x30A\vH\x3I\x3I\x3I\a"+
		"I\x30F\nI\fI\xEI\x312\vI\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3"+
		"J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x5J\x329\nJ\x3K\x3K\x3K\x3K\x3K"+
		"\x3K\x3K\x3K\aK\x333\nK\fK\xEK\x336\vK\x3K\x3K\x5K\x33A\nK\x3L\x3L\x3"+
		"L\x3L\x3L\x5L\x341\nL\x3L\x3L\x3L\x3L\x3L\x5L\x348\nL\x3L\x5L\x34B\nL"+
		"\x3M\x3M\x3N\x3N\x3O\x3O\x3O\x3O\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x35B\nP\x3"+
		"Q\x3Q\x3Q\x3Q\x5Q\x361\nQ\x3R\x3R\x3R\x2\x2\x2S\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2"+
		"X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2"+
		"v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2"+
		"\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2"+
		"\xA2\x2\x2\x1B\x5\x2\x95\x96\x99\x9A\x9D\x9E\x3\x2\xD2\xD3\x3\x2\xC4\xC5"+
		"\x4\x2\t\t\xA3\xA3\x4\x2\xC5\xC5\xD7\xD7\x3\x2\xAF\xB0\x4\x2\x41JL\x63"+
		"\x4\x2\x85\x86\x8B\x94\x3\x2\xCA\xCB\x3\x2%+\x3\x2.\x31\x3\x2,-\x3\x2"+
		"\x32\x35\x3\x2\x36\x37\x4\x2\x32\x34\x36\x37\x3\x2\x38\x39\x3\x2\xF\x10"+
		"\x4\x2\'\':@\x3\x2\x14\x17\x3\x2\x18\x1B\x3\x2\x1C\x1D\x3\x2\x1E \x3\x2"+
		"\xC8\xC9\x5\x2\xCD\xD2\xD4\xD4\xDA\xDB\x3\x2\x41\x93\x3C3\x2\xBF\x3\x2"+
		"\x2\x2\x4\xD7\x3\x2\x2\x2\x6\xD9\x3\x2\x2\x2\b\xDD\x3\x2\x2\x2\n\xF4\x3"+
		"\x2\x2\x2\f\xFE\x3\x2\x2\x2\xE\x110\x3\x2\x2\x2\x10\x112\x3\x2\x2\x2\x12"+
		"\x120\x3\x2\x2\x2\x14\x122\x3\x2\x2\x2\x16\x125\x3\x2\x2\x2\x18\x127\x3"+
		"\x2\x2\x2\x1A\x129\x3\x2\x2\x2\x1C\x12C\x3\x2\x2\x2\x1E\x12F\x3\x2\x2"+
		"\x2 \x131\x3\x2\x2\x2\"\x134\x3\x2\x2\x2$\x137\x3\x2\x2\x2&\x139\x3\x2"+
		"\x2\x2(\x13B\x3\x2\x2\x2*\x145\x3\x2\x2\x2,\x147\x3\x2\x2\x2.\x149\x3"+
		"\x2\x2\x2\x30\x14B\x3\x2\x2\x2\x32\x158\x3\x2\x2\x2\x34\x15A\x3\x2\x2"+
		"\x2\x36\x15D\x3\x2\x2\x2\x38\x160\x3\x2\x2\x2:\x163\x3\x2\x2\x2<\x166"+
		"\x3\x2\x2\x2>\x169\x3\x2\x2\x2@\x16C\x3\x2\x2\x2\x42\x175\x3\x2\x2\x2"+
		"\x44\x17E\x3\x2\x2\x2\x46\x181\x3\x2\x2\x2H\x187\x3\x2\x2\x2J\x189\x3"+
		"\x2\x2\x2L\x18C\x3\x2\x2\x2N\x191\x3\x2\x2\x2P\x196\x3\x2\x2\x2R\x199"+
		"\x3\x2\x2\x2T\x19D\x3\x2\x2\x2V\x1A6\x3\x2\x2\x2X\x1AA\x3\x2\x2\x2Z\x1AD"+
		"\x3\x2\x2\x2\\\x1B0\x3\x2\x2\x2^\x1BD\x3\x2\x2\x2`\x1BF\x3\x2\x2\x2\x62"+
		"\x28C\x3\x2\x2\x2\x64\x28E\x3\x2\x2\x2\x66\x2A5\x3\x2\x2\x2h\x2A7\x3\x2"+
		"\x2\x2j\x2A9\x3\x2\x2\x2l\x2AB\x3\x2\x2\x2n\x2AD\x3\x2\x2\x2p\x2AF\x3"+
		"\x2\x2\x2r\x2B1\x3\x2\x2\x2t\x2B3\x3\x2\x2\x2v\x2B5\x3\x2\x2\x2x\x2B9"+
		"\x3\x2\x2\x2z\x2BD\x3\x2\x2\x2|\x2C1\x3\x2\x2\x2~\x2C9\x3\x2\x2\x2\x80"+
		"\x2CB\x3\x2\x2\x2\x82\x2D3\x3\x2\x2\x2\x84\x2DB\x3\x2\x2\x2\x86\x2E3\x3"+
		"\x2\x2\x2\x88\x2EB\x3\x2\x2\x2\x8A\x2F3\x3\x2\x2\x2\x8C\x2FB\x3\x2\x2"+
		"\x2\x8E\x303\x3\x2\x2\x2\x90\x30B\x3\x2\x2\x2\x92\x328\x3\x2\x2\x2\x94"+
		"\x339\x3\x2\x2\x2\x96\x34A\x3\x2\x2\x2\x98\x34C\x3\x2\x2\x2\x9A\x34E\x3"+
		"\x2\x2\x2\x9C\x350\x3\x2\x2\x2\x9E\x35A\x3\x2\x2\x2\xA0\x360\x3\x2\x2"+
		"\x2\xA2\x362\x3\x2\x2\x2\xA4\xC0\a\x2\x2\x3\xA5\xA7\a\x5\x2\x2\xA6\xA5"+
		"\x3\x2\x2\x2\xA7\xAA\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA9\x3\x2\x2"+
		"\x2\xA9\xAB\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAB\xB4\x5\x4\x3\x2\xAC\xAE"+
		"\a\x5\x2\x2\xAD\xAC\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2"+
		"\xAF\xB0\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB3\x5\x4\x3\x2\xB2\xAD\x3"+
		"\x2\x2\x2\xB3\xB6\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2"+
		"\xB5\xBA\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB7\xB9\a\x5\x2\x2\xB8\xB7\x3"+
		"\x2\x2\x2\xB9\xBC\x3\x2\x2\x2\xBA\xB8\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2"+
		"\xBB\xBD\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBD\xBE\a\x2\x2\x3\xBE\xC0\x3"+
		"\x2\x2\x2\xBF\xA4\x3\x2\x2\x2\xBF\xA8\x3\x2\x2\x2\xC0\x3\x3\x2\x2\x2\xC1"+
		"\xC3\x5\x6\x4\x2\xC2\xC1\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC9\x3\x2"+
		"\x2\x2\xC4\xCA\x5\n\x6\x2\xC5\xCA\x5^\x30\x2\xC6\xCA\x5\x9CO\x2\xC7\xCA"+
		"\x5\xE\b\x2\xC8\xCA\x5\x30\x19\x2\xC9\xC4\x3\x2\x2\x2\xC9\xC5\x3\x2\x2"+
		"\x2\xC9\xC6\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xC9\xC8\x3\x2\x2\x2\xCA\xCC"+
		"\x3\x2\x2\x2\xCB\xCD\x5\b\x5\x2\xCC\xCB\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2"+
		"\xCD\xD8\x3\x2\x2\x2\xCE\xD0\x5\f\a\x2\xCF\xD1\x5\b\x5\x2\xD0\xCF\x3\x2"+
		"\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD8\x3\x2\x2\x2\xD2\xD8\x5\b\x5\x2\xD3"+
		"\xD5\x5\x6\x4\x2\xD4\xD6\x5\b\x5\x2\xD5\xD4\x3\x2\x2\x2\xD5\xD6\x3\x2"+
		"\x2\x2\xD6\xD8\x3\x2\x2\x2\xD7\xC2\x3\x2\x2\x2\xD7\xCE\x3\x2\x2\x2\xD7"+
		"\xD2\x3\x2\x2\x2\xD7\xD3\x3\x2\x2\x2\xD8\x5\x3\x2\x2\x2\xD9\xDB\a\xD7"+
		"\x2\x2\xDA\xDC\a\x6\x2\x2\xDB\xDA\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC"+
		"\a\x3\x2\x2\x2\xDD\xDE\a\x3\x2\x2\xDE\t\x3\x2\x2\x2\xDF\xF5\x5\x34\x1B"+
		"\x2\xE0\xF5\x5\x36\x1C\x2\xE1\xF5\x5\x38\x1D\x2\xE2\xF5\x5:\x1E\x2\xE3"+
		"\xF5\x5<\x1F\x2\xE4\xF5\x5> \x2\xE5\xF5\x5@!\x2\xE6\xF5\x5\x42\"\x2\xE7"+
		"\xF5\x5\x44#\x2\xE8\xF5\x5\x46$\x2\xE9\xF5\x5H%\x2\xEA\xF5\x5J&\x2\xEB"+
		"\xF5\x5L\'\x2\xEC\xF5\x5N(\x2\xED\xF5\x5P)\x2\xEE\xF5\x5R*\x2\xEF\xF5"+
		"\x5T+\x2\xF0\xF5\x5V,\x2\xF1\xF5\x5X-\x2\xF2\xF5\x5Z.\x2\xF3\xF5\x5\\"+
		"/\x2\xF4\xDF\x3\x2\x2\x2\xF4\xE0\x3\x2\x2\x2\xF4\xE1\x3\x2\x2\x2\xF4\xE2"+
		"\x3\x2\x2\x2\xF4\xE3\x3\x2\x2\x2\xF4\xE4\x3\x2\x2\x2\xF4\xE5\x3\x2\x2"+
		"\x2\xF4\xE6\x3\x2\x2\x2\xF4\xE7\x3\x2\x2\x2\xF4\xE8\x3\x2\x2\x2\xF4\xE9"+
		"\x3\x2\x2\x2\xF4\xEA\x3\x2\x2\x2\xF4\xEB\x3\x2\x2\x2\xF4\xEC\x3\x2\x2"+
		"\x2\xF4\xED\x3\x2\x2\x2\xF4\xEE\x3\x2\x2\x2\xF4\xEF\x3\x2\x2\x2\xF4\xF0"+
		"\x3\x2\x2\x2\xF4\xF1\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF3\x3\x2\x2"+
		"\x2\xF5\v\x3\x2\x2\x2\xF6\xF7\t\x2\x2\x2\xF7\xFF\a\xD7\x2\x2\xF8\xFF\a"+
		"\x97\x2\x2\xF9\xFF\a\x98\x2\x2\xFA\xFB\a\x9C\x2\x2\xFB\xFF\x5\x80\x41"+
		"\x2\xFC\xFD\a\x9B\x2\x2\xFD\xFF\t\x3\x2\x2\xFE\xF6\x3\x2\x2\x2\xFE\xF8"+
		"\x3\x2\x2\x2\xFE\xF9\x3\x2\x2\x2\xFE\xFA\x3\x2\x2\x2\xFE\xFC\x3\x2\x2"+
		"\x2\xFF\r\x3\x2\x2\x2\x100\x111\x5\x10\t\x2\x101\x111\x5\x12\n\x2\x102"+
		"\x111\x5\x14\v\x2\x103\x111\x5\x16\f\x2\x104\x111\x5\x18\r\x2\x105\x111"+
		"\x5\x1A\xE\x2\x106\x111\x5\x1C\xF\x2\x107\x111\x5\x1E\x10\x2\x108\x111"+
		"\x5 \x11\x2\x109\x111\x5\"\x12\x2\x10A\x111\x5$\x13\x2\x10B\x111\x5&\x14"+
		"\x2\x10C\x111\x5(\x15\x2\x10D\x111\x5*\x16\x2\x10E\x111\x5,\x17\x2\x10F"+
		"\x111\x5.\x18\x2\x110\x100\x3\x2\x2\x2\x110\x101\x3\x2\x2\x2\x110\x102"+
		"\x3\x2\x2\x2\x110\x103\x3\x2\x2\x2\x110\x104\x3\x2\x2\x2\x110\x105\x3"+
		"\x2\x2\x2\x110\x106\x3\x2\x2\x2\x110\x107\x3\x2\x2\x2\x110\x108\x3\x2"+
		"\x2\x2\x110\x109\x3\x2\x2\x2\x110\x10A\x3\x2\x2\x2\x110\x10B\x3\x2\x2"+
		"\x2\x110\x10C\x3\x2\x2\x2\x110\x10D\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2"+
		"\x110\x10F\x3\x2\x2\x2\x111\xF\x3\x2\x2\x2\x112\x113\a\xB5\x2\x2\x113"+
		"\x11C\a\n\x2\x2\x114\x119\a\xD7\x2\x2\x115\x116\a\b\x2\x2\x116\x118\a"+
		"\xD7\x2\x2\x117\x115\x3\x2\x2\x2\x118\x11B\x3\x2\x2\x2\x119\x117\x3\x2"+
		"\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x11D\x3\x2\x2\x2\x11B\x119\x3\x2\x2"+
		"\x2\x11C\x114\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2"+
		"\x11E\x11F\a\v\x2\x2\x11F\x11\x3\x2\x2\x2\x120\x121\a\xB6\x2\x2\x121\x13"+
		"\x3\x2\x2\x2\x122\x123\a\xB7\x2\x2\x123\x124\x5\x80\x41\x2\x124\x15\x3"+
		"\x2\x2\x2\x125\x126\a\xB8\x2\x2\x126\x17\x3\x2\x2\x2\x127\x128\a\xB9\x2"+
		"\x2\x128\x19\x3\x2\x2\x2\x129\x12A\a\xBA\x2\x2\x12A\x12B\x5\x80\x41\x2"+
		"\x12B\x1B\x3\x2\x2\x2\x12C\x12D\a\xBB\x2\x2\x12D\x12E\x5\x80\x41\x2\x12E"+
		"\x1D\x3\x2\x2\x2\x12F\x130\a\xBC\x2\x2\x130\x1F\x3\x2\x2\x2\x131\x132"+
		"\a\xBD\x2\x2\x132\x133\x5\x80\x41\x2\x133!\x3\x2\x2\x2\x134\x135\a\xBE"+
		"\x2\x2\x135\x136\x5\x80\x41\x2\x136#\x3\x2\x2\x2\x137\x138\a\xBF\x2\x2"+
		"\x138%\x3\x2\x2\x2\x139\x13A\a\xC0\x2\x2\x13A\'\x3\x2\x2\x2\x13B\x13C"+
		"\a\xC1\x2\x2\x13C\x13D\a\xD7\x2\x2\x13D\x13E\a\t\x2\x2\x13E\x13F\x5\x80"+
		"\x41\x2\x13F\x140\a\xC2\x2\x2\x140\x143\x5\x80\x41\x2\x141\x142\a\xC3"+
		"\x2\x2\x142\x144\x5\x80\x41\x2\x143\x141\x3\x2\x2\x2\x143\x144\x3\x2\x2"+
		"\x2\x144)\x3\x2\x2\x2\x145\x146\t\x4\x2\x2\x146+\x3\x2\x2\x2\x147\x148"+
		"\a\xC6\x2\x2\x148-\x3\x2\x2\x2\x149\x14A\a\xC7\x2\x2\x14A/\x3\x2\x2\x2"+
		"\x14B\x14C\a\xD7\x2\x2\x14C\x14D\a\n\x2\x2\x14D\x152\x5\x32\x1A\x2\x14E"+
		"\x14F\a\b\x2\x2\x14F\x151\x5\x32\x1A\x2\x150\x14E\x3\x2\x2\x2\x151\x154"+
		"\x3\x2\x2\x2\x152\x150\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x155\x3"+
		"\x2\x2\x2\x154\x152\x3\x2\x2\x2\x155\x156\a\v\x2\x2\x156\x31\x3\x2\x2"+
		"\x2\x157\x159\x5\x66\x34\x2\x158\x157\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2"+
		"\x159\x33\x3\x2\x2\x2\x15A\x15B\a\x9F\x2\x2\x15B\x15C\x5\x80\x41\x2\x15C"+
		"\x35\x3\x2\x2\x2\x15D\x15E\a\xA0\x2\x2\x15E\x15F\x5\x80\x41\x2\x15F\x37"+
		"\x3\x2\x2\x2\x160\x161\a\xA1\x2\x2\x161\x162\x5\x80\x41\x2\x162\x39\x3"+
		"\x2\x2\x2\x163\x164\a\xA4\x2\x2\x164\x165\x5\x80\x41\x2\x165;\x3\x2\x2"+
		"\x2\x166\x167\a\xA2\x2\x2\x167\x168\x5\x80\x41\x2\x168=\x3\x2\x2\x2\x169"+
		"\x16A\t\x5\x2\x2\x16A\x16B\x5\x80\x41\x2\x16B?\x3\x2\x2\x2\x16C\x16D\a"+
		"\xA5\x2\x2\x16D\x172\x5\x80\x41\x2\x16E\x16F\a\b\x2\x2\x16F\x171\x5\x80"+
		"\x41\x2\x170\x16E\x3\x2\x2\x2\x171\x174\x3\x2\x2\x2\x172\x170\x3\x2\x2"+
		"\x2\x172\x173\x3\x2\x2\x2\x173\x41\x3\x2\x2\x2\x174\x172\x3\x2\x2\x2\x175"+
		"\x176\a\xA6\x2\x2\x176\x17B\x5\x80\x41\x2\x177\x178\a\b\x2\x2\x178\x17A"+
		"\x5\x80\x41\x2\x179\x177\x3\x2\x2\x2\x17A\x17D\x3\x2\x2\x2\x17B\x179\x3"+
		"\x2\x2\x2\x17B\x17C\x3\x2\x2\x2\x17C\x43\x3\x2\x2\x2\x17D\x17B\x3\x2\x2"+
		"\x2\x17E\x17F\a\xA7\x2\x2\x17F\x180\x5\x80\x41\x2\x180\x45\x3\x2\x2\x2"+
		"\x181\x182\a\xA8\x2\x2\x182\x185\x5\x80\x41\x2\x183\x184\a\b\x2\x2\x184"+
		"\x186\x5\x80\x41\x2\x185\x183\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186G"+
		"\x3\x2\x2\x2\x187\x188\a\xA9\x2\x2\x188I\x3\x2\x2\x2\x189\x18A\a\xAA\x2"+
		"\x2\x18A\x18B\x5\x80\x41\x2\x18BK\x3\x2\x2\x2\x18C\x18D\a\xAB\x2\x2\x18D"+
		"\x18E\x5\x80\x41\x2\x18E\x18F\a\b\x2\x2\x18F\x190\x5\x80\x41\x2\x190M"+
		"\x3\x2\x2\x2\x191\x192\a\xAC\x2\x2\x192\x193\x5\x80\x41\x2\x193\x194\a"+
		"\b\x2\x2\x194\x195\x5\x80\x41\x2\x195O\x3\x2\x2\x2\x196\x197\a\xAD\x2"+
		"\x2\x197\x198\t\x6\x2\x2\x198Q\x3\x2\x2\x2\x199\x19B\a\xAE\x2\x2\x19A"+
		"\x19C\x5\x80\x41\x2\x19B\x19A\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2\x19CS"+
		"\x3\x2\x2\x2\x19D\x19E\t\a\x2\x2\x19E\x1A3\x5\x80\x41\x2\x19F\x1A0\a\b"+
		"\x2\x2\x1A0\x1A2\x5\x80\x41\x2\x1A1\x19F\x3\x2\x2\x2\x1A2\x1A5\x3\x2\x2"+
		"\x2\x1A3\x1A1\x3\x2\x2\x2\x1A3\x1A4\x3\x2\x2\x2\x1A4U\x3\x2\x2\x2\x1A5"+
		"\x1A3\x3\x2\x2\x2\x1A6\x1A8\a\xB1\x2\x2\x1A7\x1A9\x5\x80\x41\x2\x1A8\x1A7"+
		"\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9W\x3\x2\x2\x2\x1AA\x1AB\a\xB2\x2"+
		"\x2\x1AB\x1AC\x5\x80\x41\x2\x1ACY\x3\x2\x2\x2\x1AD\x1AE\a\xB3\x2\x2\x1AE"+
		"\x1AF\x5\x80\x41\x2\x1AF[\x3\x2\x2\x2\x1B0\x1B1\a\xB4\x2\x2\x1B1\x1B8"+
		"\x5\x80\x41\x2\x1B2\x1B3\a\b\x2\x2\x1B3\x1B6\x5\x80\x41\x2\x1B4\x1B5\a"+
		"\b\x2\x2\x1B5\x1B7\x5\x80\x41\x2\x1B6\x1B4\x3\x2\x2\x2\x1B6\x1B7\x3\x2"+
		"\x2\x2\x1B7\x1B9\x3\x2\x2\x2\x1B8\x1B2\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2"+
		"\x2\x1B9]\x3\x2\x2\x2\x1BA\x1BE\x5`\x31\x2\x1BB\x1BE\x5\x62\x32\x2\x1BC"+
		"\x1BE\x5\x64\x33\x2\x1BD\x1BA\x3\x2\x2\x2\x1BD\x1BB\x3\x2\x2\x2\x1BD\x1BC"+
		"\x3\x2\x2\x2\x1BE_\x3\x2\x2\x2\x1BF\x1C0\t\b\x2\x2\x1C0\x61\x3\x2\x2\x2"+
		"\x1C1\x1C2\a\x64\x2\x2\x1C2\x1C3\x5\x66\x34\x2\x1C3\x1C4\a\b\x2\x2\x1C4"+
		"\x1C5\x5\x66\x34\x2\x1C5\x28D\x3\x2\x2\x2\x1C6\x1C7\a\x65\x2\x2\x1C7\x28D"+
		"\x5\x66\x34\x2\x1C8\x1C9\a\x66\x2\x2\x1C9\x28D\x5\x66\x34\x2\x1CA\x1CB"+
		"\ag\x2\x2\x1CB\x1CC\x5\x66\x34\x2\x1CC\x1CD\a\b\x2\x2\x1CD\x1CE\x5\x66"+
		"\x34\x2\x1CE\x28D\x3\x2\x2\x2\x1CF\x1D0\ah\x2\x2\x1D0\x1D1\x5\x66\x34"+
		"\x2\x1D1\x1D2\a\b\x2\x2\x1D2\x1D3\x5\x66\x34\x2\x1D3\x28D\x3\x2\x2\x2"+
		"\x1D4\x1D5\ai\x2\x2\x1D5\x1D6\x5\x66\x34\x2\x1D6\x1D7\a\b\x2\x2\x1D7\x1D8"+
		"\x5\x66\x34\x2\x1D8\x28D\x3\x2\x2\x2\x1D9\x1DD\aj\x2\x2\x1DA\x1DB\x5\x66"+
		"\x34\x2\x1DB\x1DC\a\b\x2\x2\x1DC\x1DE\x3\x2\x2\x2\x1DD\x1DA\x3\x2\x2\x2"+
		"\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x28D\x5\x66\x34\x2\x1E0"+
		"\x1E1\ak\x2\x2\x1E1\x1E2\x5\x66\x34\x2\x1E2\x1E3\a\b\x2\x2\x1E3\x1E4\x5"+
		"\x66\x34\x2\x1E4\x28D\x3\x2\x2\x2\x1E5\x1E9\al\x2\x2\x1E6\x1E7\x5\x66"+
		"\x34\x2\x1E7\x1E8\a\b\x2\x2\x1E8\x1EA\x3\x2\x2\x2\x1E9\x1E6\x3\x2\x2\x2"+
		"\x1E9\x1EA\x3\x2\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x28D\x5\x66\x34\x2\x1EC"+
		"\x1F0\am\x2\x2\x1ED\x1EE\x5\x66\x34\x2\x1EE\x1EF\a\b\x2\x2\x1EF\x1F1\x3"+
		"\x2\x2\x2\x1F0\x1ED\x3\x2\x2\x2\x1F0\x1F1\x3\x2\x2\x2\x1F1\x1F2\x3\x2"+
		"\x2\x2\x1F2\x28D\x5\x66\x34\x2\x1F3\x1F7\an\x2\x2\x1F4\x1F5\x5\x66\x34"+
		"\x2\x1F5\x1F6\a\b\x2\x2\x1F6\x1F8\x3\x2\x2\x2\x1F7\x1F4\x3\x2\x2\x2\x1F7"+
		"\x1F8\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2\x1F9\x28D\x5\x66\x34\x2\x1FA\x1FE"+
		"\ao\x2\x2\x1FB\x1FC\x5\x66\x34\x2\x1FC\x1FD\a\b\x2\x2\x1FD\x1FF\x3\x2"+
		"\x2\x2\x1FE\x1FB\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FF\x200\x3\x2\x2"+
		"\x2\x200\x28D\x5\x66\x34\x2\x201\x202\ap\x2\x2\x202\x28D\x5\x66\x34\x2"+
		"\x203\x207\aq\x2\x2\x204\x205\x5\x66\x34\x2\x205\x206\a\b\x2\x2\x206\x208"+
		"\x3\x2\x2\x2\x207\x204\x3\x2\x2\x2\x207\x208\x3\x2\x2\x2\x208\x209\x3"+
		"\x2\x2\x2\x209\x28D\x5\x66\x34\x2\x20A\x20E\ar\x2\x2\x20B\x20C\x5\x66"+
		"\x34\x2\x20C\x20D\a\b\x2\x2\x20D\x20F\x3\x2\x2\x2\x20E\x20B\x3\x2\x2\x2"+
		"\x20E\x20F\x3\x2\x2\x2\x20F\x210\x3\x2\x2\x2\x210\x28D\x5\x66\x34\x2\x211"+
		"\x215\as\x2\x2\x212\x213\x5\x66\x34\x2\x213\x214\a\b\x2\x2\x214\x216\x3"+
		"\x2\x2\x2\x215\x212\x3\x2\x2\x2\x215\x216\x3\x2\x2\x2\x216\x217\x3\x2"+
		"\x2\x2\x217\x28D\x5\x66\x34\x2\x218\x21A\aK\x2\x2\x219\x21B\x5\x66\x34"+
		"\x2\x21A\x219\x3\x2\x2\x2\x21A\x21B\x3\x2\x2\x2\x21B\x28D\x3\x2\x2\x2"+
		"\x21C\x21D\at\x2\x2\x21D\x28D\x5\x66\x34\x2\x21E\x21F\au\x2\x2\x21F\x28D"+
		"\x5\x66\x34\x2\x220\x221\av\x2\x2\x221\x28D\x5\x66\x34\x2\x222\x226\a"+
		"w\x2\x2\x223\x224\x5\x66\x34\x2\x224\x225\a\b\x2\x2\x225\x227\x3\x2\x2"+
		"\x2\x226\x223\x3\x2\x2\x2\x226\x227\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2"+
		"\x228\x28D\x5\x66\x34\x2\x229\x22D\ax\x2\x2\x22A\x22B\x5\x66\x34\x2\x22B"+
		"\x22C\a\b\x2\x2\x22C\x22E\x3\x2\x2\x2\x22D\x22A\x3\x2\x2\x2\x22D\x22E"+
		"\x3\x2\x2\x2\x22E\x22F\x3\x2\x2\x2\x22F\x28D\x5\x66\x34\x2\x230\x231\a"+
		"y\x2\x2\x231\x28D\x5\x66\x34\x2\x232\x236\az\x2\x2\x233\x234\x5\x66\x34"+
		"\x2\x234\x235\a\b\x2\x2\x235\x237\x3\x2\x2\x2\x236\x233\x3\x2\x2\x2\x236"+
		"\x237\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238\x28D\x5\x66\x34\x2\x239\x23D"+
		"\a{\x2\x2\x23A\x23B\x5\x66\x34\x2\x23B\x23C\a\b\x2\x2\x23C\x23E\x3\x2"+
		"\x2\x2\x23D\x23A\x3\x2\x2\x2\x23D\x23E\x3\x2\x2\x2\x23E\x23F\x3\x2\x2"+
		"\x2\x23F\x28D\x5\x66\x34\x2\x240\x244\a|\x2\x2\x241\x242\x5\x66\x34\x2"+
		"\x242\x243\a\b\x2\x2\x243\x245\x3\x2\x2\x2\x244\x241\x3\x2\x2\x2\x244"+
		"\x245\x3\x2\x2\x2\x245\x246\x3\x2\x2\x2\x246\x28D\x5\x66\x34\x2\x247\x24B"+
		"\a}\x2\x2\x248\x249\x5\x66\x34\x2\x249\x24A\a\b\x2\x2\x24A\x24C\x3\x2"+
		"\x2\x2\x24B\x248\x3\x2\x2\x2\x24B\x24C\x3\x2\x2\x2\x24C\x24D\x3\x2\x2"+
		"\x2\x24D\x28D\x5\x66\x34\x2\x24E\x252\a~\x2\x2\x24F\x250\x5\x66\x34\x2"+
		"\x250\x251\a\b\x2\x2\x251\x253\x3\x2\x2\x2\x252\x24F\x3\x2\x2\x2\x252"+
		"\x253\x3\x2\x2\x2\x253\x254\x3\x2\x2\x2\x254\x28D\x5\x66\x34\x2\x255\x259"+
		"\a\x7F\x2\x2\x256\x257\x5\x66\x34\x2\x257\x258\a\b\x2\x2\x258\x25A\x3"+
		"\x2\x2\x2\x259\x256\x3\x2\x2\x2\x259\x25A\x3\x2\x2\x2\x25A\x25B\x3\x2"+
		"\x2\x2\x25B\x28D\x5\x66\x34\x2\x25C\x260\a\x80\x2\x2\x25D\x25E\x5\x66"+
		"\x34\x2\x25E\x25F\a\b\x2\x2\x25F\x261\x3\x2\x2\x2\x260\x25D\x3\x2\x2\x2"+
		"\x260\x261\x3\x2\x2\x2\x261\x262\x3\x2\x2\x2\x262\x28D\x5\x66\x34\x2\x263"+
		"\x267\a\x81\x2\x2\x264\x265\x5\x66\x34\x2\x265\x266\a\b\x2\x2\x266\x268"+
		"\x3\x2\x2\x2\x267\x264\x3\x2\x2\x2\x267\x268\x3\x2\x2\x2\x268\x269\x3"+
		"\x2\x2\x2\x269\x28D\x5\x66\x34\x2\x26A\x26B\a\x82\x2\x2\x26B\x26C\x5\x66"+
		"\x34\x2\x26C\x26D\a\b\x2\x2\x26D\x26E\x5\x66\x34\x2\x26E\x28D\x3\x2\x2"+
		"\x2\x26F\x270\a\x83\x2\x2\x270\x271\x5\x66\x34\x2\x271\x275\a\b\x2\x2"+
		"\x272\x273\x5\x66\x34\x2\x273\x274\a\b\x2\x2\x274\x276\x3\x2\x2\x2\x275"+
		"\x272\x3\x2\x2\x2\x275\x276\x3\x2\x2\x2\x276\x277\x3\x2\x2\x2\x277\x278"+
		"\x5\x66\x34\x2\x278\x28D\x3\x2\x2\x2\x279\x27A\a\x84\x2\x2\x27A\x27B\x5"+
		"\x66\x34\x2\x27B\x27F\a\b\x2\x2\x27C\x27D\x5\x66\x34\x2\x27D\x27E\a\b"+
		"\x2\x2\x27E\x280\x3\x2\x2\x2\x27F\x27C\x3\x2\x2\x2\x27F\x280\x3\x2\x2"+
		"\x2\x280\x281\x3\x2\x2\x2\x281\x282\x5\x66\x34\x2\x282\x28D\x3\x2\x2\x2"+
		"\x283\x284\a\x88\x2\x2\x284\x28D\x5\x66\x34\x2\x285\x286\a\x89\x2\x2\x286"+
		"\x28D\x5\x66\x34\x2\x287\x288\a\x8A\x2\x2\x288\x289\x5\x66\x34\x2\x289"+
		"\x28A\a\b\x2\x2\x28A\x28B\x5\x66\x34\x2\x28B\x28D\x3\x2\x2\x2\x28C\x1C1"+
		"\x3\x2\x2\x2\x28C\x1C6\x3\x2\x2\x2\x28C\x1C8\x3\x2\x2\x2\x28C\x1CA\x3"+
		"\x2\x2\x2\x28C\x1CF\x3\x2\x2\x2\x28C\x1D4\x3\x2\x2\x2\x28C\x1D9\x3\x2"+
		"\x2\x2\x28C\x1E0\x3\x2\x2\x2\x28C\x1E5\x3\x2\x2\x2\x28C\x1EC\x3\x2\x2"+
		"\x2\x28C\x1F3\x3\x2\x2\x2\x28C\x1FA\x3\x2\x2\x2\x28C\x201\x3\x2\x2\x2"+
		"\x28C\x203\x3\x2\x2\x2\x28C\x20A\x3\x2\x2\x2\x28C\x211\x3\x2\x2\x2\x28C"+
		"\x218\x3\x2\x2\x2\x28C\x21C\x3\x2\x2\x2\x28C\x21E\x3\x2\x2\x2\x28C\x220"+
		"\x3\x2\x2\x2\x28C\x222\x3\x2\x2\x2\x28C\x229\x3\x2\x2\x2\x28C\x230\x3"+
		"\x2\x2\x2\x28C\x232\x3\x2\x2\x2\x28C\x239\x3\x2\x2\x2\x28C\x240\x3\x2"+
		"\x2\x2\x28C\x247\x3\x2\x2\x2\x28C\x24E\x3\x2\x2\x2\x28C\x255\x3\x2\x2"+
		"\x2\x28C\x25C\x3\x2\x2\x2\x28C\x263\x3\x2\x2\x2\x28C\x26A\x3\x2\x2\x2"+
		"\x28C\x26F\x3\x2\x2\x2\x28C\x279\x3\x2\x2\x2\x28C\x283\x3\x2\x2\x2\x28C"+
		"\x285\x3\x2\x2\x2\x28C\x287\x3\x2\x2\x2\x28D\x63\x3\x2\x2\x2\x28E\x28F"+
		"\t\t\x2\x2\x28F\x65\x3\x2\x2\x2\x290\x2A6\x5h\x35\x2\x291\x2A6\x5j\x36"+
		"\x2\x292\x2A6\x5l\x37\x2\x293\x2A6\x5n\x38\x2\x294\x2A6\x5p\x39\x2\x295"+
		"\x2A6\x5t;\x2\x296\x2A6\x5v<\x2\x297\x2A6\x5x=\x2\x298\x2A6\x5z>\x2\x299"+
		"\x2A6\x5|?\x2\x29A\x2A6\x5\x80\x41\x2\x29B\x2A6\x5~@\x2\x29C\x29D\t\n"+
		"\x2\x2\x29D\x2A0\a\n\x2\x2\x29E\x2A1\x5r:\x2\x29F\x2A1\x5\x9CO\x2\x2A0"+
		"\x29E\x3\x2\x2\x2\x2A0\x29F\x3\x2\x2\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2\x2A3"+
		"\a\v\x2\x2\x2A3\x2A6\x3\x2\x2\x2\x2A4\x2A6\a\xDC\x2\x2\x2A5\x290\x3\x2"+
		"\x2\x2\x2A5\x291\x3\x2\x2\x2\x2A5\x292\x3\x2\x2\x2\x2A5\x293\x3\x2\x2"+
		"\x2\x2A5\x294\x3\x2\x2\x2\x2A5\x295\x3\x2\x2\x2\x2A5\x296\x3\x2\x2\x2"+
		"\x2A5\x297\x3\x2\x2\x2\x2A5\x298\x3\x2\x2\x2\x2A5\x299\x3\x2\x2\x2\x2A5"+
		"\x29A\x3\x2\x2\x2\x2A5\x29B\x3\x2\x2\x2\x2A5\x29C\x3\x2\x2\x2\x2A5\x2A4"+
		"\x3\x2\x2\x2\x2A6g\x3\x2\x2\x2\x2A7\x2A8\t\v\x2\x2\x2A8i\x3\x2\x2\x2\x2A9"+
		"\x2AA\t\f\x2\x2\x2AAk\x3\x2\x2\x2\x2AB\x2AC\t\r\x2\x2\x2ACm\x3\x2\x2\x2"+
		"\x2AD\x2AE\t\xE\x2\x2\x2AEo\x3\x2\x2\x2\x2AF\x2B0\t\xF\x2\x2\x2B0q\x3"+
		"\x2\x2\x2\x2B1\x2B2\t\x10\x2\x2\x2B2s\x3\x2\x2\x2\x2B3\x2B4\t\x11\x2\x2"+
		"\x2B4u\x3\x2\x2\x2\x2B5\x2B6\a\n\x2\x2\x2B6\x2B7\x5n\x38\x2\x2B7\x2B8"+
		"\a\v\x2\x2\x2B8w\x3\x2\x2\x2\x2B9\x2BA\a\n\x2\x2\x2BA\x2BB\a\'\x2\x2\x2BB"+
		"\x2BC\a\v\x2\x2\x2BCy\x3\x2\x2\x2\x2BD\x2BE\a\n\x2\x2\x2BE\x2BF\x5\x80"+
		"\x41\x2\x2BF\x2C0\a\v\x2\x2\x2C0{\x3\x2\x2\x2\x2C1\x2C2\a\n\x2\x2\x2C2"+
		"\x2C5\x5p\x39\x2\x2C3\x2C4\t\x12\x2\x2\x2C4\x2C6\x5\x80\x41\x2\x2C5\x2C3"+
		"\x3\x2\x2\x2\x2C5\x2C6\x3\x2\x2\x2\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2C8\a\v"+
		"\x2\x2\x2C8}\x3\x2\x2\x2\x2C9\x2CA\t\x13\x2\x2\x2CA\x7F\x3\x2\x2\x2\x2CB"+
		"\x2D1\x5\x82\x42\x2\x2CC\x2CD\a\xE\x2\x2\x2CD\x2CE\x5\x80\x41\x2\x2CE"+
		"\x2CF\a\x6\x2\x2\x2CF\x2D0\x5\x80\x41\x2\x2D0\x2D2\x3\x2\x2\x2\x2D1\x2CC"+
		"\x3\x2\x2\x2\x2D1\x2D2\x3\x2\x2\x2\x2D2\x81\x3\x2\x2\x2\x2D3\x2D8\x5\x84"+
		"\x43\x2\x2D4\x2D5\a\x11\x2\x2\x2D5\x2D7\x5\x84\x43\x2\x2D6\x2D4\x3\x2"+
		"\x2\x2\x2D7\x2DA\x3\x2\x2\x2\x2D8\x2D6\x3\x2\x2\x2\x2D8\x2D9\x3\x2\x2"+
		"\x2\x2D9\x83\x3\x2\x2\x2\x2DA\x2D8\x3\x2\x2\x2\x2DB\x2E0\x5\x86\x44\x2"+
		"\x2DC\x2DD\a\x12\x2\x2\x2DD\x2DF\x5\x86\x44\x2\x2DE\x2DC\x3\x2\x2\x2\x2DF"+
		"\x2E2\x3\x2\x2\x2\x2E0\x2DE\x3\x2\x2\x2\x2E0\x2E1\x3\x2\x2\x2\x2E1\x85"+
		"\x3\x2\x2\x2\x2E2\x2E0\x3\x2\x2\x2\x2E3\x2E8\x5\x88\x45\x2\x2E4\x2E5\a"+
		"\x13\x2\x2\x2E5\x2E7\x5\x88\x45\x2\x2E6\x2E4\x3\x2\x2\x2\x2E7\x2EA\x3"+
		"\x2\x2\x2\x2E8\x2E6\x3\x2\x2\x2\x2E8\x2E9\x3\x2\x2\x2\x2E9\x87\x3\x2\x2"+
		"\x2\x2EA\x2E8\x3\x2\x2\x2\x2EB\x2F0\x5\x8A\x46\x2\x2EC\x2ED\t\x14\x2\x2"+
		"\x2ED\x2EF\x5\x8A\x46\x2\x2EE\x2EC\x3\x2\x2\x2\x2EF\x2F2\x3\x2\x2\x2\x2F0"+
		"\x2EE\x3\x2\x2\x2\x2F0\x2F1\x3\x2\x2\x2\x2F1\x89\x3\x2\x2\x2\x2F2\x2F0"+
		"\x3\x2\x2\x2\x2F3\x2F8\x5\x8CG\x2\x2F4\x2F5\t\x15\x2\x2\x2F5\x2F7\x5\x8C"+
		"G\x2\x2F6\x2F4\x3\x2\x2\x2\x2F7\x2FA\x3\x2\x2\x2\x2F8\x2F6\x3\x2\x2\x2"+
		"\x2F8\x2F9\x3\x2\x2\x2\x2F9\x8B\x3\x2\x2\x2\x2FA\x2F8\x3\x2\x2\x2\x2FB"+
		"\x300\x5\x8EH\x2\x2FC\x2FD\t\x16\x2\x2\x2FD\x2FF\x5\x8EH\x2\x2FE\x2FC"+
		"\x3\x2\x2\x2\x2FF\x302\x3\x2\x2\x2\x300\x2FE\x3\x2\x2\x2\x300\x301\x3"+
		"\x2\x2\x2\x301\x8D\x3\x2\x2\x2\x302\x300\x3\x2\x2\x2\x303\x308\x5\x90"+
		"I\x2\x304\x305\t\x12\x2\x2\x305\x307\x5\x90I\x2\x306\x304\x3\x2\x2\x2"+
		"\x307\x30A\x3\x2\x2\x2\x308\x306\x3\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309"+
		"\x8F\x3\x2\x2\x2\x30A\x308\x3\x2\x2\x2\x30B\x310\x5\x92J\x2\x30C\x30D"+
		"\t\x17\x2\x2\x30D\x30F\x5\x92J\x2\x30E\x30C\x3\x2\x2\x2\x30F\x312\x3\x2"+
		"\x2\x2\x310\x30E\x3\x2\x2\x2\x310\x311\x3\x2\x2\x2\x311\x91\x3\x2\x2\x2"+
		"\x312\x310\x3\x2\x2\x2\x313\x329\x5\x96L\x2\x314\x329\x5\x94K\x2\x315"+
		"\x329\x5\x9CO\x2\x316\x317\a\xF\x2\x2\x317\x329\x5\x92J\x2\x318\x319\a"+
		"\x10\x2\x2\x319\x329\x5\x92J\x2\x31A\x31B\a!\x2\x2\x31B\x329\x5\x92J\x2"+
		"\x31C\x31D\a$\x2\x2\x31D\x329\x5\x92J\x2\x31E\x31F\a\f\x2\x2\x31F\x320"+
		"\x5\x80\x41\x2\x320\x321\a\r\x2\x2\x321\x329\x3\x2\x2\x2\x322\x323\a\n"+
		"\x2\x2\x323\x324\x5\x80\x41\x2\x324\x325\a\v\x2\x2\x325\x329\x3\x2\x2"+
		"\x2\x326\x329\x5\x98M\x2\x327\x329\x5\x9AN\x2\x328\x313\x3\x2\x2\x2\x328"+
		"\x314\x3\x2\x2\x2\x328\x315\x3\x2\x2\x2\x328\x316\x3\x2\x2\x2\x328\x318"+
		"\x3\x2\x2\x2\x328\x31A\x3\x2\x2\x2\x328\x31C\x3\x2\x2\x2\x328\x31E\x3"+
		"\x2\x2\x2\x328\x322\x3\x2\x2\x2\x328\x326\x3\x2\x2\x2\x328\x327\x3\x2"+
		"\x2\x2\x329\x93\x3\x2\x2\x2\x32A\x32B\a\xD7\x2\x2\x32B\x32C\a\n\x2\x2"+
		"\x32C\x33A\a\v\x2\x2\x32D\x32E\a\xD7\x2\x2\x32E\x32F\a\n\x2\x2\x32F\x334"+
		"\x5\x80\x41\x2\x330\x331\a\b\x2\x2\x331\x333\x5\x80\x41\x2\x332\x330\x3"+
		"\x2\x2\x2\x333\x336\x3\x2\x2\x2\x334\x332\x3\x2\x2\x2\x334\x335\x3\x2"+
		"\x2\x2\x335\x337\x3\x2\x2\x2\x336\x334\x3\x2\x2\x2\x337\x338\a\v\x2\x2"+
		"\x338\x33A\x3\x2\x2\x2\x339\x32A\x3\x2\x2\x2\x339\x32D\x3\x2\x2\x2\x33A"+
		"\x95\x3\x2\x2\x2\x33B\x33C\t\x18\x2\x2\x33C\x340\a\n\x2\x2\x33D\x341\x5"+
		"\xA2R\x2\x33E\x341\x5\xA0Q\x2\x33F\x341\x5\x9CO\x2\x340\x33D\x3\x2\x2"+
		"\x2\x340\x33E\x3\x2\x2\x2\x340\x33F\x3\x2\x2\x2\x341\x342\x3\x2\x2\x2"+
		"\x342\x343\a\v\x2\x2\x343\x34B\x3\x2\x2\x2\x344\x345\a\xCC\x2\x2\x345"+
		"\x347\a\n\x2\x2\x346\x348\x5\x66\x34\x2\x347\x346\x3\x2\x2\x2\x347\x348"+
		"\x3\x2\x2\x2\x348\x349\x3\x2\x2\x2\x349\x34B\a\v\x2\x2\x34A\x33B\x3\x2"+
		"\x2\x2\x34A\x344\x3\x2\x2\x2\x34B\x97\x3\x2\x2\x2\x34C\x34D\t\x19\x2\x2"+
		"\x34D\x99\x3\x2\x2\x2\x34E\x34F\a\xD7\x2\x2\x34F\x9B\x3\x2\x2\x2\x350"+
		"\x351\a\"\x2\x2\x351\x352\a\xD7\x2\x2\x352\x353\a#\x2\x2\x353\x9D\x3\x2"+
		"\x2\x2\x354\x35B\x5h\x35\x2\x355\x35B\x5j\x36\x2\x356\x35B\x5l\x37\x2"+
		"\x357\x35B\x5n\x38\x2\x358\x35B\x5p\x39\x2\x359\x35B\x5t;\x2\x35A\x354"+
		"\x3\x2\x2\x2\x35A\x355\x3\x2\x2\x2\x35A\x356\x3\x2\x2\x2\x35A\x357\x3"+
		"\x2\x2\x2\x35A\x358\x3\x2\x2\x2\x35A\x359\x3\x2\x2\x2\x35B\x9F\x3\x2\x2"+
		"\x2\x35C\x361\x5\x9EP\x2\x35D\x361\x5v<\x2\x35E\x361\x5x=\x2\x35F\x361"+
		"\x5~@\x2\x360\x35C\x3\x2\x2\x2\x360\x35D\x3\x2\x2\x2\x360\x35E\x3\x2\x2"+
		"\x2\x360\x35F\x3\x2\x2\x2\x361\xA1\x3\x2\x2\x2\x362\x363\t\x1A\x2\x2\x363"+
		"\xA3\x3\x2\x2\x2I\xA8\xAF\xB4\xBA\xBF\xC2\xC9\xCC\xD0\xD5\xD7\xDB\xF4"+
		"\xFE\x110\x119\x11C\x143\x152\x158\x172\x17B\x185\x19B\x1A3\x1A8\x1B6"+
		"\x1B8\x1BD\x1DD\x1E9\x1F0\x1F7\x1FE\x207\x20E\x215\x21A\x226\x22D\x236"+
		"\x23D\x244\x24B\x252\x259\x260\x267\x275\x27F\x28C\x2A0\x2A5\x2C5\x2D1"+
		"\x2D8\x2E0\x2E8\x2F0\x2F8\x300\x308\x310\x328\x334\x339\x340\x347\x34A"+
		"\x35A\x360";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Spect.Net.Assembler.Generated
