// ReSharper disable InconsistentNaming

namespace Spect.Net.SpectrumEmu.Cpu
{
    /// <summary>
    /// Z80 Status Indicator Flag Set masks
    /// </summary>
    /// <seealso cref="FlagsResetMask"/>
    public static class FlagsSetMask
    {
        /// <summary>Sign Flag</summary>
        /// <remarks>
        /// The Sign Flag (S) stores the state of the most-significant bit of
        /// the Accumulator (bit 7). When the Z80 CPU performs arithmetic 
        /// operations on signed numbers, the binary twos complement notation 
        /// is used to represent and process numeric information.
        /// </remarks>
        public const byte S = 0x80;

        /// <summary>
        /// Zero Flag
        /// </summary>
        /// <remarks>
        /// The Zero Flag is set (1) or cleared (0) if the result generated by 
        /// the execution of certain instructions is 0. For 8-bit arithmetic and 
        /// logical operations, the Z flag is set to a 1 if the resulting byte in 
        /// the Accumulator is 0. If the byte is not 0, the Z flag is reset to 0.
        /// </remarks>
        public const byte Z = 0x40;

        /// <summary>This flag is not used.</summary>
        public const byte R5 = 0x20;

        /// <summary>Half Carry Flag</summary>
        /// <remarks>
        /// The Half Carry Flag (H) is set (1) or cleared (0) depending on the 
        /// Carry and Borrow status between bits 3 and 4 of an 8-bit arithmetic 
        /// operation. This flag is used by the Decimal Adjust Accumulator (DAA) 
        /// instruction to correct the result of a packed BCD add or subtract operation.
        /// </remarks>
        public const byte H = 0x10;

        /// <summary>This flag is not used.</summary>
        public const byte R3 = 0x08;

        /// <summary>Parity/Overflow Flag</summary>
        /// <remarks>
        /// The Parity/Overflow (P/V) Flag is set to a specific state depending on 
        /// the operation being performed. For arithmetic operations, this flag 
        /// indicates an overflow condition when the result in the Accumulator is 
        /// greater than the maximum possible number (+127) or is less than the 
        /// minimum possible number (–128). This overflow condition is determined by 
        /// examining the sign bits of the operands.
        /// </remarks>
        public const byte PV = 0x04;

        /// <summary>Add/Subtract Flag</summary>
        /// <remarks>
        /// The Add/Subtract Flag (N) is used by the Decimal Adjust Accumulator 
        /// instruction (DAA) to distinguish between the ADD and SUB instructions.
        /// For ADD instructions, N is cleared to 0. For SUB instructions, N is set to 1.
        /// </remarks>
        public const byte N = 0x02;

        /// <summary>Carry Flag</summary>
        /// <remarks>
        /// The Carry Flag (C) is set or cleared depending on the operation being performed.
        /// </remarks>
        public const byte C = 0x01;

        /// <summary>
        /// Combination of S, Z, and PV
        /// </summary>
        public const byte SZPV = S | Z | PV;

        /// <summary>
        /// Combination of N, and H
        /// </summary>
        public const byte NH = N | H;

        /// <summary>
        /// Combination of R3, and R5
        /// </summary>
        public const byte R3R5 = R3 | R5;
    }
}